
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

000000c0 <Reset_Handler>:
      c0:	b672      	cpsid	i
      c2:	4824      	ldr	r0, [pc, #144]	; (154 <endfiniloop+0x6>)
      c4:	f380 8808 	msr	MSP, r0
      c8:	4823      	ldr	r0, [pc, #140]	; (158 <endfiniloop+0xa>)
      ca:	f380 8809 	msr	PSP, r0
      ce:	2002      	movs	r0, #2
      d0:	f380 8814 	msr	CONTROL, r0
      d4:	f3bf 8f6f 	isb	sy
      d8:	f002 fd52 	bl	2b80 <__core_init>
      dc:	f002 fd58 	bl	2b90 <__early_init>
      e0:	481e      	ldr	r0, [pc, #120]	; (15c <endfiniloop+0xe>)
      e2:	491f      	ldr	r1, [pc, #124]	; (160 <endfiniloop+0x12>)
      e4:	4a1b      	ldr	r2, [pc, #108]	; (154 <endfiniloop+0x6>)

000000e6 <msloop>:
      e6:	4291      	cmp	r1, r2
      e8:	da02      	bge.n	f0 <endmsloop>
      ea:	6008      	str	r0, [r1, #0]
      ec:	3104      	adds	r1, #4
      ee:	e7fa      	b.n	e6 <msloop>

000000f0 <endmsloop>:
      f0:	491c      	ldr	r1, [pc, #112]	; (164 <endfiniloop+0x16>)
      f2:	4a19      	ldr	r2, [pc, #100]	; (158 <endfiniloop+0xa>)

000000f4 <psloop>:
      f4:	4291      	cmp	r1, r2
      f6:	da02      	bge.n	fe <endpsloop>
      f8:	6008      	str	r0, [r1, #0]
      fa:	3104      	adds	r1, #4
      fc:	e7fa      	b.n	f4 <psloop>

000000fe <endpsloop>:
      fe:	491a      	ldr	r1, [pc, #104]	; (168 <endfiniloop+0x1a>)
     100:	4a1a      	ldr	r2, [pc, #104]	; (16c <endfiniloop+0x1e>)
     102:	4b1b      	ldr	r3, [pc, #108]	; (170 <endfiniloop+0x22>)

00000104 <dloop>:
     104:	429a      	cmp	r2, r3
     106:	da04      	bge.n	112 <enddloop>
     108:	6808      	ldr	r0, [r1, #0]
     10a:	6010      	str	r0, [r2, #0]
     10c:	3104      	adds	r1, #4
     10e:	3204      	adds	r2, #4
     110:	e7f8      	b.n	104 <dloop>

00000112 <enddloop>:
     112:	2000      	movs	r0, #0
     114:	4917      	ldr	r1, [pc, #92]	; (174 <endfiniloop+0x26>)
     116:	4a18      	ldr	r2, [pc, #96]	; (178 <endfiniloop+0x2a>)

00000118 <bloop>:
     118:	4291      	cmp	r1, r2
     11a:	da02      	bge.n	122 <endbloop>
     11c:	6008      	str	r0, [r1, #0]
     11e:	3104      	adds	r1, #4
     120:	e7fa      	b.n	118 <bloop>

00000122 <endbloop>:
     122:	f002 fd4d 	bl	2bc0 <__init_ram_areas>
     126:	f002 fd3b 	bl	2ba0 <__late_init>
     12a:	4c14      	ldr	r4, [pc, #80]	; (17c <endfiniloop+0x2e>)
     12c:	4d14      	ldr	r5, [pc, #80]	; (180 <endfiniloop+0x32>)

0000012e <initloop>:
     12e:	42ac      	cmp	r4, r5
     130:	da03      	bge.n	13a <endinitloop>
     132:	6821      	ldr	r1, [r4, #0]
     134:	4788      	blx	r1
     136:	3404      	adds	r4, #4
     138:	e7f9      	b.n	12e <initloop>

0000013a <endinitloop>:
     13a:	f00d f839 	bl	d1b0 <main>
     13e:	4c11      	ldr	r4, [pc, #68]	; (184 <endfiniloop+0x36>)
     140:	4d11      	ldr	r5, [pc, #68]	; (188 <endfiniloop+0x3a>)

00000142 <finiloop>:
     142:	42ac      	cmp	r4, r5
     144:	da03      	bge.n	14e <endfiniloop>
     146:	6821      	ldr	r1, [r4, #0]
     148:	4788      	blx	r1
     14a:	3404      	adds	r4, #4
     14c:	e7f9      	b.n	142 <finiloop>

0000014e <endfiniloop>:
     14e:	490f      	ldr	r1, [pc, #60]	; (18c <endfiniloop+0x3e>)
     150:	4708      	bx	r1
     152:	0000      	.short	0x0000
     154:	20000400 	.word	0x20000400
     158:	20000800 	.word	0x20000800
     15c:	55555555 	.word	0x55555555
     160:	20000000 	.word	0x20000000
     164:	20000400 	.word	0x20000400
     168:	0000fdd8 	.word	0x0000fdd8
     16c:	20000800 	.word	0x20000800
     170:	20000a6c 	.word	0x20000a6c
     174:	20000a70 	.word	0x20000a70
     178:	20006468 	.word	0x20006468
     17c:	000000b0 	.word	0x000000b0
     180:	000000b8 	.word	0x000000b8
     184:	000000b8 	.word	0x000000b8
     188:	000000b8 	.word	0x000000b8
     18c:	00002bb1 	.word	0x00002bb1

00000190 <_port_switch>:
     190:	b5f0      	push	{r4, r5, r6, r7, lr}
     192:	4644      	mov	r4, r8
     194:	464d      	mov	r5, r9
     196:	4656      	mov	r6, sl
     198:	465f      	mov	r7, fp
     19a:	b4f0      	push	{r4, r5, r6, r7}
     19c:	466b      	mov	r3, sp
     19e:	600b      	str	r3, [r1, #0]
     1a0:	6803      	ldr	r3, [r0, #0]
     1a2:	469d      	mov	sp, r3
     1a4:	bcf0      	pop	{r4, r5, r6, r7}
     1a6:	46a0      	mov	r8, r4
     1a8:	46a9      	mov	r9, r5
     1aa:	46b2      	mov	sl, r6
     1ac:	46bb      	mov	fp, r7
     1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000001b0 <_port_thread_start>:
     1b0:	b662      	cpsie	i
     1b2:	1c28      	adds	r0, r5, #0
     1b4:	47a0      	blx	r4
     1b6:	2300      	movs	r3, #0
     1b8:	f002 fd8a 	bl	2cd0 <chSysHalt>

000001bc <_port_switch_from_isr>:
     1bc:	f002 fe30 	bl	2e20 <chSchDoReschedule>

000001c0 <_port_exit_from_isr>:
     1c0:	4a02      	ldr	r2, [pc, #8]	; (1cc <_port_exit_from_isr+0xc>)
     1c2:	4b03      	ldr	r3, [pc, #12]	; (1d0 <_port_exit_from_isr+0x10>)
     1c4:	6013      	str	r3, [r2, #0]
     1c6:	b662      	cpsie	i
     1c8:	e7fe      	b.n	1c8 <_port_exit_from_isr+0x8>
     1ca:	46c0      	nop			; (mov r8, r8)
     1cc:	e000ed04 	.word	0xe000ed04
     1d0:	10000000 	.word	0x10000000

000001d4 <__udivsi3>:
     1d4:	2200      	movs	r2, #0
     1d6:	0843      	lsrs	r3, r0, #1
     1d8:	428b      	cmp	r3, r1
     1da:	d374      	bcc.n	2c6 <__udivsi3+0xf2>
     1dc:	0903      	lsrs	r3, r0, #4
     1de:	428b      	cmp	r3, r1
     1e0:	d35f      	bcc.n	2a2 <__udivsi3+0xce>
     1e2:	0a03      	lsrs	r3, r0, #8
     1e4:	428b      	cmp	r3, r1
     1e6:	d344      	bcc.n	272 <__udivsi3+0x9e>
     1e8:	0b03      	lsrs	r3, r0, #12
     1ea:	428b      	cmp	r3, r1
     1ec:	d328      	bcc.n	240 <__udivsi3+0x6c>
     1ee:	0c03      	lsrs	r3, r0, #16
     1f0:	428b      	cmp	r3, r1
     1f2:	d30d      	bcc.n	210 <__udivsi3+0x3c>
     1f4:	22ff      	movs	r2, #255	; 0xff
     1f6:	0209      	lsls	r1, r1, #8
     1f8:	ba12      	rev	r2, r2
     1fa:	0c03      	lsrs	r3, r0, #16
     1fc:	428b      	cmp	r3, r1
     1fe:	d302      	bcc.n	206 <__udivsi3+0x32>
     200:	1212      	asrs	r2, r2, #8
     202:	0209      	lsls	r1, r1, #8
     204:	d065      	beq.n	2d2 <__udivsi3+0xfe>
     206:	0b03      	lsrs	r3, r0, #12
     208:	428b      	cmp	r3, r1
     20a:	d319      	bcc.n	240 <__udivsi3+0x6c>
     20c:	e000      	b.n	210 <__udivsi3+0x3c>
     20e:	0a09      	lsrs	r1, r1, #8
     210:	0bc3      	lsrs	r3, r0, #15
     212:	428b      	cmp	r3, r1
     214:	d301      	bcc.n	21a <__udivsi3+0x46>
     216:	03cb      	lsls	r3, r1, #15
     218:	1ac0      	subs	r0, r0, r3
     21a:	4152      	adcs	r2, r2
     21c:	0b83      	lsrs	r3, r0, #14
     21e:	428b      	cmp	r3, r1
     220:	d301      	bcc.n	226 <__udivsi3+0x52>
     222:	038b      	lsls	r3, r1, #14
     224:	1ac0      	subs	r0, r0, r3
     226:	4152      	adcs	r2, r2
     228:	0b43      	lsrs	r3, r0, #13
     22a:	428b      	cmp	r3, r1
     22c:	d301      	bcc.n	232 <__udivsi3+0x5e>
     22e:	034b      	lsls	r3, r1, #13
     230:	1ac0      	subs	r0, r0, r3
     232:	4152      	adcs	r2, r2
     234:	0b03      	lsrs	r3, r0, #12
     236:	428b      	cmp	r3, r1
     238:	d301      	bcc.n	23e <__udivsi3+0x6a>
     23a:	030b      	lsls	r3, r1, #12
     23c:	1ac0      	subs	r0, r0, r3
     23e:	4152      	adcs	r2, r2
     240:	0ac3      	lsrs	r3, r0, #11
     242:	428b      	cmp	r3, r1
     244:	d301      	bcc.n	24a <__udivsi3+0x76>
     246:	02cb      	lsls	r3, r1, #11
     248:	1ac0      	subs	r0, r0, r3
     24a:	4152      	adcs	r2, r2
     24c:	0a83      	lsrs	r3, r0, #10
     24e:	428b      	cmp	r3, r1
     250:	d301      	bcc.n	256 <__udivsi3+0x82>
     252:	028b      	lsls	r3, r1, #10
     254:	1ac0      	subs	r0, r0, r3
     256:	4152      	adcs	r2, r2
     258:	0a43      	lsrs	r3, r0, #9
     25a:	428b      	cmp	r3, r1
     25c:	d301      	bcc.n	262 <__udivsi3+0x8e>
     25e:	024b      	lsls	r3, r1, #9
     260:	1ac0      	subs	r0, r0, r3
     262:	4152      	adcs	r2, r2
     264:	0a03      	lsrs	r3, r0, #8
     266:	428b      	cmp	r3, r1
     268:	d301      	bcc.n	26e <__udivsi3+0x9a>
     26a:	020b      	lsls	r3, r1, #8
     26c:	1ac0      	subs	r0, r0, r3
     26e:	4152      	adcs	r2, r2
     270:	d2cd      	bcs.n	20e <__udivsi3+0x3a>
     272:	09c3      	lsrs	r3, r0, #7
     274:	428b      	cmp	r3, r1
     276:	d301      	bcc.n	27c <__udivsi3+0xa8>
     278:	01cb      	lsls	r3, r1, #7
     27a:	1ac0      	subs	r0, r0, r3
     27c:	4152      	adcs	r2, r2
     27e:	0983      	lsrs	r3, r0, #6
     280:	428b      	cmp	r3, r1
     282:	d301      	bcc.n	288 <__udivsi3+0xb4>
     284:	018b      	lsls	r3, r1, #6
     286:	1ac0      	subs	r0, r0, r3
     288:	4152      	adcs	r2, r2
     28a:	0943      	lsrs	r3, r0, #5
     28c:	428b      	cmp	r3, r1
     28e:	d301      	bcc.n	294 <__udivsi3+0xc0>
     290:	014b      	lsls	r3, r1, #5
     292:	1ac0      	subs	r0, r0, r3
     294:	4152      	adcs	r2, r2
     296:	0903      	lsrs	r3, r0, #4
     298:	428b      	cmp	r3, r1
     29a:	d301      	bcc.n	2a0 <__udivsi3+0xcc>
     29c:	010b      	lsls	r3, r1, #4
     29e:	1ac0      	subs	r0, r0, r3
     2a0:	4152      	adcs	r2, r2
     2a2:	08c3      	lsrs	r3, r0, #3
     2a4:	428b      	cmp	r3, r1
     2a6:	d301      	bcc.n	2ac <__udivsi3+0xd8>
     2a8:	00cb      	lsls	r3, r1, #3
     2aa:	1ac0      	subs	r0, r0, r3
     2ac:	4152      	adcs	r2, r2
     2ae:	0883      	lsrs	r3, r0, #2
     2b0:	428b      	cmp	r3, r1
     2b2:	d301      	bcc.n	2b8 <__udivsi3+0xe4>
     2b4:	008b      	lsls	r3, r1, #2
     2b6:	1ac0      	subs	r0, r0, r3
     2b8:	4152      	adcs	r2, r2
     2ba:	0843      	lsrs	r3, r0, #1
     2bc:	428b      	cmp	r3, r1
     2be:	d301      	bcc.n	2c4 <__udivsi3+0xf0>
     2c0:	004b      	lsls	r3, r1, #1
     2c2:	1ac0      	subs	r0, r0, r3
     2c4:	4152      	adcs	r2, r2
     2c6:	1a41      	subs	r1, r0, r1
     2c8:	d200      	bcs.n	2cc <__udivsi3+0xf8>
     2ca:	4601      	mov	r1, r0
     2cc:	4152      	adcs	r2, r2
     2ce:	4610      	mov	r0, r2
     2d0:	4770      	bx	lr
     2d2:	e7ff      	b.n	2d4 <__udivsi3+0x100>
     2d4:	b501      	push	{r0, lr}
     2d6:	2000      	movs	r0, #0
     2d8:	f000 f8f0 	bl	4bc <__aeabi_idiv0>
     2dc:	bd02      	pop	{r1, pc}
     2de:	46c0      	nop			; (mov r8, r8)

000002e0 <__aeabi_uidivmod>:
     2e0:	2900      	cmp	r1, #0
     2e2:	d0f7      	beq.n	2d4 <__udivsi3+0x100>
     2e4:	e776      	b.n	1d4 <__udivsi3>
     2e6:	4770      	bx	lr

000002e8 <__divsi3>:
     2e8:	4603      	mov	r3, r0
     2ea:	430b      	orrs	r3, r1
     2ec:	d47f      	bmi.n	3ee <__divsi3+0x106>
     2ee:	2200      	movs	r2, #0
     2f0:	0843      	lsrs	r3, r0, #1
     2f2:	428b      	cmp	r3, r1
     2f4:	d374      	bcc.n	3e0 <__divsi3+0xf8>
     2f6:	0903      	lsrs	r3, r0, #4
     2f8:	428b      	cmp	r3, r1
     2fa:	d35f      	bcc.n	3bc <__divsi3+0xd4>
     2fc:	0a03      	lsrs	r3, r0, #8
     2fe:	428b      	cmp	r3, r1
     300:	d344      	bcc.n	38c <__divsi3+0xa4>
     302:	0b03      	lsrs	r3, r0, #12
     304:	428b      	cmp	r3, r1
     306:	d328      	bcc.n	35a <__divsi3+0x72>
     308:	0c03      	lsrs	r3, r0, #16
     30a:	428b      	cmp	r3, r1
     30c:	d30d      	bcc.n	32a <__divsi3+0x42>
     30e:	22ff      	movs	r2, #255	; 0xff
     310:	0209      	lsls	r1, r1, #8
     312:	ba12      	rev	r2, r2
     314:	0c03      	lsrs	r3, r0, #16
     316:	428b      	cmp	r3, r1
     318:	d302      	bcc.n	320 <__divsi3+0x38>
     31a:	1212      	asrs	r2, r2, #8
     31c:	0209      	lsls	r1, r1, #8
     31e:	d065      	beq.n	3ec <__divsi3+0x104>
     320:	0b03      	lsrs	r3, r0, #12
     322:	428b      	cmp	r3, r1
     324:	d319      	bcc.n	35a <__divsi3+0x72>
     326:	e000      	b.n	32a <__divsi3+0x42>
     328:	0a09      	lsrs	r1, r1, #8
     32a:	0bc3      	lsrs	r3, r0, #15
     32c:	428b      	cmp	r3, r1
     32e:	d301      	bcc.n	334 <__divsi3+0x4c>
     330:	03cb      	lsls	r3, r1, #15
     332:	1ac0      	subs	r0, r0, r3
     334:	4152      	adcs	r2, r2
     336:	0b83      	lsrs	r3, r0, #14
     338:	428b      	cmp	r3, r1
     33a:	d301      	bcc.n	340 <__divsi3+0x58>
     33c:	038b      	lsls	r3, r1, #14
     33e:	1ac0      	subs	r0, r0, r3
     340:	4152      	adcs	r2, r2
     342:	0b43      	lsrs	r3, r0, #13
     344:	428b      	cmp	r3, r1
     346:	d301      	bcc.n	34c <__divsi3+0x64>
     348:	034b      	lsls	r3, r1, #13
     34a:	1ac0      	subs	r0, r0, r3
     34c:	4152      	adcs	r2, r2
     34e:	0b03      	lsrs	r3, r0, #12
     350:	428b      	cmp	r3, r1
     352:	d301      	bcc.n	358 <__divsi3+0x70>
     354:	030b      	lsls	r3, r1, #12
     356:	1ac0      	subs	r0, r0, r3
     358:	4152      	adcs	r2, r2
     35a:	0ac3      	lsrs	r3, r0, #11
     35c:	428b      	cmp	r3, r1
     35e:	d301      	bcc.n	364 <__divsi3+0x7c>
     360:	02cb      	lsls	r3, r1, #11
     362:	1ac0      	subs	r0, r0, r3
     364:	4152      	adcs	r2, r2
     366:	0a83      	lsrs	r3, r0, #10
     368:	428b      	cmp	r3, r1
     36a:	d301      	bcc.n	370 <__divsi3+0x88>
     36c:	028b      	lsls	r3, r1, #10
     36e:	1ac0      	subs	r0, r0, r3
     370:	4152      	adcs	r2, r2
     372:	0a43      	lsrs	r3, r0, #9
     374:	428b      	cmp	r3, r1
     376:	d301      	bcc.n	37c <__divsi3+0x94>
     378:	024b      	lsls	r3, r1, #9
     37a:	1ac0      	subs	r0, r0, r3
     37c:	4152      	adcs	r2, r2
     37e:	0a03      	lsrs	r3, r0, #8
     380:	428b      	cmp	r3, r1
     382:	d301      	bcc.n	388 <__divsi3+0xa0>
     384:	020b      	lsls	r3, r1, #8
     386:	1ac0      	subs	r0, r0, r3
     388:	4152      	adcs	r2, r2
     38a:	d2cd      	bcs.n	328 <__divsi3+0x40>
     38c:	09c3      	lsrs	r3, r0, #7
     38e:	428b      	cmp	r3, r1
     390:	d301      	bcc.n	396 <__divsi3+0xae>
     392:	01cb      	lsls	r3, r1, #7
     394:	1ac0      	subs	r0, r0, r3
     396:	4152      	adcs	r2, r2
     398:	0983      	lsrs	r3, r0, #6
     39a:	428b      	cmp	r3, r1
     39c:	d301      	bcc.n	3a2 <__divsi3+0xba>
     39e:	018b      	lsls	r3, r1, #6
     3a0:	1ac0      	subs	r0, r0, r3
     3a2:	4152      	adcs	r2, r2
     3a4:	0943      	lsrs	r3, r0, #5
     3a6:	428b      	cmp	r3, r1
     3a8:	d301      	bcc.n	3ae <__divsi3+0xc6>
     3aa:	014b      	lsls	r3, r1, #5
     3ac:	1ac0      	subs	r0, r0, r3
     3ae:	4152      	adcs	r2, r2
     3b0:	0903      	lsrs	r3, r0, #4
     3b2:	428b      	cmp	r3, r1
     3b4:	d301      	bcc.n	3ba <__divsi3+0xd2>
     3b6:	010b      	lsls	r3, r1, #4
     3b8:	1ac0      	subs	r0, r0, r3
     3ba:	4152      	adcs	r2, r2
     3bc:	08c3      	lsrs	r3, r0, #3
     3be:	428b      	cmp	r3, r1
     3c0:	d301      	bcc.n	3c6 <__divsi3+0xde>
     3c2:	00cb      	lsls	r3, r1, #3
     3c4:	1ac0      	subs	r0, r0, r3
     3c6:	4152      	adcs	r2, r2
     3c8:	0883      	lsrs	r3, r0, #2
     3ca:	428b      	cmp	r3, r1
     3cc:	d301      	bcc.n	3d2 <__divsi3+0xea>
     3ce:	008b      	lsls	r3, r1, #2
     3d0:	1ac0      	subs	r0, r0, r3
     3d2:	4152      	adcs	r2, r2
     3d4:	0843      	lsrs	r3, r0, #1
     3d6:	428b      	cmp	r3, r1
     3d8:	d301      	bcc.n	3de <__divsi3+0xf6>
     3da:	004b      	lsls	r3, r1, #1
     3dc:	1ac0      	subs	r0, r0, r3
     3de:	4152      	adcs	r2, r2
     3e0:	1a41      	subs	r1, r0, r1
     3e2:	d200      	bcs.n	3e6 <__divsi3+0xfe>
     3e4:	4601      	mov	r1, r0
     3e6:	4152      	adcs	r2, r2
     3e8:	4610      	mov	r0, r2
     3ea:	4770      	bx	lr
     3ec:	e05d      	b.n	4aa <__main_stack_size__+0xaa>
     3ee:	0fca      	lsrs	r2, r1, #31
     3f0:	d000      	beq.n	3f4 <__divsi3+0x10c>
     3f2:	4249      	negs	r1, r1
     3f4:	1003      	asrs	r3, r0, #32
     3f6:	d300      	bcc.n	3fa <__divsi3+0x112>
     3f8:	4240      	negs	r0, r0
     3fa:	4053      	eors	r3, r2
     3fc:	2200      	movs	r2, #0
     3fe:	469c      	mov	ip, r3
     400:	0903      	lsrs	r3, r0, #4
     402:	428b      	cmp	r3, r1
     404:	d32d      	bcc.n	462 <__main_stack_size__+0x62>
     406:	0a03      	lsrs	r3, r0, #8
     408:	428b      	cmp	r3, r1
     40a:	d312      	bcc.n	432 <__main_stack_size__+0x32>
     40c:	22fc      	movs	r2, #252	; 0xfc
     40e:	0189      	lsls	r1, r1, #6
     410:	ba12      	rev	r2, r2
     412:	0a03      	lsrs	r3, r0, #8
     414:	428b      	cmp	r3, r1
     416:	d30c      	bcc.n	432 <__main_stack_size__+0x32>
     418:	0189      	lsls	r1, r1, #6
     41a:	1192      	asrs	r2, r2, #6
     41c:	428b      	cmp	r3, r1
     41e:	d308      	bcc.n	432 <__main_stack_size__+0x32>
     420:	0189      	lsls	r1, r1, #6
     422:	1192      	asrs	r2, r2, #6
     424:	428b      	cmp	r3, r1
     426:	d304      	bcc.n	432 <__main_stack_size__+0x32>
     428:	0189      	lsls	r1, r1, #6
     42a:	d03a      	beq.n	4a2 <__main_stack_size__+0xa2>
     42c:	1192      	asrs	r2, r2, #6
     42e:	e000      	b.n	432 <__main_stack_size__+0x32>
     430:	0989      	lsrs	r1, r1, #6
     432:	09c3      	lsrs	r3, r0, #7
     434:	428b      	cmp	r3, r1
     436:	d301      	bcc.n	43c <__main_stack_size__+0x3c>
     438:	01cb      	lsls	r3, r1, #7
     43a:	1ac0      	subs	r0, r0, r3
     43c:	4152      	adcs	r2, r2
     43e:	0983      	lsrs	r3, r0, #6
     440:	428b      	cmp	r3, r1
     442:	d301      	bcc.n	448 <__main_stack_size__+0x48>
     444:	018b      	lsls	r3, r1, #6
     446:	1ac0      	subs	r0, r0, r3
     448:	4152      	adcs	r2, r2
     44a:	0943      	lsrs	r3, r0, #5
     44c:	428b      	cmp	r3, r1
     44e:	d301      	bcc.n	454 <__main_stack_size__+0x54>
     450:	014b      	lsls	r3, r1, #5
     452:	1ac0      	subs	r0, r0, r3
     454:	4152      	adcs	r2, r2
     456:	0903      	lsrs	r3, r0, #4
     458:	428b      	cmp	r3, r1
     45a:	d301      	bcc.n	460 <__main_stack_size__+0x60>
     45c:	010b      	lsls	r3, r1, #4
     45e:	1ac0      	subs	r0, r0, r3
     460:	4152      	adcs	r2, r2
     462:	08c3      	lsrs	r3, r0, #3
     464:	428b      	cmp	r3, r1
     466:	d301      	bcc.n	46c <__main_stack_size__+0x6c>
     468:	00cb      	lsls	r3, r1, #3
     46a:	1ac0      	subs	r0, r0, r3
     46c:	4152      	adcs	r2, r2
     46e:	0883      	lsrs	r3, r0, #2
     470:	428b      	cmp	r3, r1
     472:	d301      	bcc.n	478 <__main_stack_size__+0x78>
     474:	008b      	lsls	r3, r1, #2
     476:	1ac0      	subs	r0, r0, r3
     478:	4152      	adcs	r2, r2
     47a:	d2d9      	bcs.n	430 <__main_stack_size__+0x30>
     47c:	0843      	lsrs	r3, r0, #1
     47e:	428b      	cmp	r3, r1
     480:	d301      	bcc.n	486 <__main_stack_size__+0x86>
     482:	004b      	lsls	r3, r1, #1
     484:	1ac0      	subs	r0, r0, r3
     486:	4152      	adcs	r2, r2
     488:	1a41      	subs	r1, r0, r1
     48a:	d200      	bcs.n	48e <__main_stack_size__+0x8e>
     48c:	4601      	mov	r1, r0
     48e:	4663      	mov	r3, ip
     490:	4152      	adcs	r2, r2
     492:	105b      	asrs	r3, r3, #1
     494:	4610      	mov	r0, r2
     496:	d301      	bcc.n	49c <__main_stack_size__+0x9c>
     498:	4240      	negs	r0, r0
     49a:	2b00      	cmp	r3, #0
     49c:	d500      	bpl.n	4a0 <__main_stack_size__+0xa0>
     49e:	4249      	negs	r1, r1
     4a0:	4770      	bx	lr
     4a2:	4663      	mov	r3, ip
     4a4:	105b      	asrs	r3, r3, #1
     4a6:	d300      	bcc.n	4aa <__main_stack_size__+0xaa>
     4a8:	4240      	negs	r0, r0
     4aa:	b501      	push	{r0, lr}
     4ac:	2000      	movs	r0, #0
     4ae:	f000 f805 	bl	4bc <__aeabi_idiv0>
     4b2:	bd02      	pop	{r1, pc}

000004b4 <__aeabi_idivmod>:
     4b4:	2900      	cmp	r1, #0
     4b6:	d0f8      	beq.n	4aa <__main_stack_size__+0xaa>
     4b8:	e716      	b.n	2e8 <__divsi3>
     4ba:	4770      	bx	lr

000004bc <__aeabi_idiv0>:
     4bc:	4770      	bx	lr
     4be:	46c0      	nop			; (mov r8, r8)

000004c0 <__aeabi_cfrcmple>:
     4c0:	4684      	mov	ip, r0
     4c2:	1c08      	adds	r0, r1, #0
     4c4:	4661      	mov	r1, ip
     4c6:	e7ff      	b.n	4c8 <__aeabi_cfcmpeq>

000004c8 <__aeabi_cfcmpeq>:
     4c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     4ca:	f000 fbb5 	bl	c38 <__lesf2>
     4ce:	2800      	cmp	r0, #0
     4d0:	d401      	bmi.n	4d6 <__aeabi_cfcmpeq+0xe>
     4d2:	2100      	movs	r1, #0
     4d4:	42c8      	cmn	r0, r1
     4d6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000004d8 <__aeabi_fcmpeq>:
     4d8:	b510      	push	{r4, lr}
     4da:	f000 fb47 	bl	b6c <__eqsf2>
     4de:	4240      	negs	r0, r0
     4e0:	3001      	adds	r0, #1
     4e2:	bd10      	pop	{r4, pc}

000004e4 <__aeabi_fcmplt>:
     4e4:	b510      	push	{r4, lr}
     4e6:	f000 fba7 	bl	c38 <__lesf2>
     4ea:	2800      	cmp	r0, #0
     4ec:	db01      	blt.n	4f2 <__aeabi_fcmplt+0xe>
     4ee:	2000      	movs	r0, #0
     4f0:	bd10      	pop	{r4, pc}
     4f2:	2001      	movs	r0, #1
     4f4:	bd10      	pop	{r4, pc}
     4f6:	46c0      	nop			; (mov r8, r8)

000004f8 <__aeabi_fcmple>:
     4f8:	b510      	push	{r4, lr}
     4fa:	f000 fb9d 	bl	c38 <__lesf2>
     4fe:	2800      	cmp	r0, #0
     500:	dd01      	ble.n	506 <__aeabi_fcmple+0xe>
     502:	2000      	movs	r0, #0
     504:	bd10      	pop	{r4, pc}
     506:	2001      	movs	r0, #1
     508:	bd10      	pop	{r4, pc}
     50a:	46c0      	nop			; (mov r8, r8)

0000050c <__aeabi_fcmpgt>:
     50c:	b510      	push	{r4, lr}
     50e:	f000 fb53 	bl	bb8 <__gesf2>
     512:	2800      	cmp	r0, #0
     514:	dc01      	bgt.n	51a <__aeabi_fcmpgt+0xe>
     516:	2000      	movs	r0, #0
     518:	bd10      	pop	{r4, pc}
     51a:	2001      	movs	r0, #1
     51c:	bd10      	pop	{r4, pc}
     51e:	46c0      	nop			; (mov r8, r8)

00000520 <__aeabi_fcmpge>:
     520:	b510      	push	{r4, lr}
     522:	f000 fb49 	bl	bb8 <__gesf2>
     526:	2800      	cmp	r0, #0
     528:	da01      	bge.n	52e <__aeabi_fcmpge+0xe>
     52a:	2000      	movs	r0, #0
     52c:	bd10      	pop	{r4, pc}
     52e:	2001      	movs	r0, #1
     530:	bd10      	pop	{r4, pc}
     532:	46c0      	nop			; (mov r8, r8)

00000534 <__aeabi_lmul>:
     534:	b5f0      	push	{r4, r5, r6, r7, lr}
     536:	46ce      	mov	lr, r9
     538:	4647      	mov	r7, r8
     53a:	0415      	lsls	r5, r2, #16
     53c:	0c2d      	lsrs	r5, r5, #16
     53e:	002e      	movs	r6, r5
     540:	b580      	push	{r7, lr}
     542:	0407      	lsls	r7, r0, #16
     544:	0c14      	lsrs	r4, r2, #16
     546:	0c3f      	lsrs	r7, r7, #16
     548:	4699      	mov	r9, r3
     54a:	0c03      	lsrs	r3, r0, #16
     54c:	437e      	muls	r6, r7
     54e:	435d      	muls	r5, r3
     550:	4367      	muls	r7, r4
     552:	4363      	muls	r3, r4
     554:	197f      	adds	r7, r7, r5
     556:	0c34      	lsrs	r4, r6, #16
     558:	19e4      	adds	r4, r4, r7
     55a:	469c      	mov	ip, r3
     55c:	42a5      	cmp	r5, r4
     55e:	d903      	bls.n	568 <__aeabi_lmul+0x34>
     560:	2380      	movs	r3, #128	; 0x80
     562:	025b      	lsls	r3, r3, #9
     564:	4698      	mov	r8, r3
     566:	44c4      	add	ip, r8
     568:	464b      	mov	r3, r9
     56a:	4351      	muls	r1, r2
     56c:	4343      	muls	r3, r0
     56e:	0436      	lsls	r6, r6, #16
     570:	0c36      	lsrs	r6, r6, #16
     572:	0c25      	lsrs	r5, r4, #16
     574:	0424      	lsls	r4, r4, #16
     576:	4465      	add	r5, ip
     578:	19a4      	adds	r4, r4, r6
     57a:	1859      	adds	r1, r3, r1
     57c:	1949      	adds	r1, r1, r5
     57e:	0020      	movs	r0, r4
     580:	bc0c      	pop	{r2, r3}
     582:	4690      	mov	r8, r2
     584:	4699      	mov	r9, r3
     586:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000588 <__aeabi_f2uiz>:
     588:	219e      	movs	r1, #158	; 0x9e
     58a:	b510      	push	{r4, lr}
     58c:	05c9      	lsls	r1, r1, #23
     58e:	1c04      	adds	r4, r0, #0
     590:	f7ff ffc6 	bl	520 <__aeabi_fcmpge>
     594:	2800      	cmp	r0, #0
     596:	d103      	bne.n	5a0 <__aeabi_f2uiz+0x18>
     598:	1c20      	adds	r0, r4, #0
     59a:	f000 fe63 	bl	1264 <__aeabi_f2iz>
     59e:	bd10      	pop	{r4, pc}
     5a0:	219e      	movs	r1, #158	; 0x9e
     5a2:	1c20      	adds	r0, r4, #0
     5a4:	05c9      	lsls	r1, r1, #23
     5a6:	f000 fca9 	bl	efc <__aeabi_fsub>
     5aa:	f000 fe5b 	bl	1264 <__aeabi_f2iz>
     5ae:	2380      	movs	r3, #128	; 0x80
     5b0:	061b      	lsls	r3, r3, #24
     5b2:	469c      	mov	ip, r3
     5b4:	4460      	add	r0, ip
     5b6:	e7f2      	b.n	59e <__aeabi_f2uiz+0x16>

000005b8 <__aeabi_fadd>:
     5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ba:	46c6      	mov	lr, r8
     5bc:	024e      	lsls	r6, r1, #9
     5be:	0247      	lsls	r7, r0, #9
     5c0:	0a76      	lsrs	r6, r6, #9
     5c2:	0a7b      	lsrs	r3, r7, #9
     5c4:	0044      	lsls	r4, r0, #1
     5c6:	0fc5      	lsrs	r5, r0, #31
     5c8:	00f7      	lsls	r7, r6, #3
     5ca:	0048      	lsls	r0, r1, #1
     5cc:	4698      	mov	r8, r3
     5ce:	b500      	push	{lr}
     5d0:	0e24      	lsrs	r4, r4, #24
     5d2:	002a      	movs	r2, r5
     5d4:	00db      	lsls	r3, r3, #3
     5d6:	0e00      	lsrs	r0, r0, #24
     5d8:	0fc9      	lsrs	r1, r1, #31
     5da:	46bc      	mov	ip, r7
     5dc:	428d      	cmp	r5, r1
     5de:	d067      	beq.n	6b0 <__aeabi_fadd+0xf8>
     5e0:	1a22      	subs	r2, r4, r0
     5e2:	2a00      	cmp	r2, #0
     5e4:	dc00      	bgt.n	5e8 <__aeabi_fadd+0x30>
     5e6:	e0a5      	b.n	734 <__aeabi_fadd+0x17c>
     5e8:	2800      	cmp	r0, #0
     5ea:	d13a      	bne.n	662 <__aeabi_fadd+0xaa>
     5ec:	2f00      	cmp	r7, #0
     5ee:	d100      	bne.n	5f2 <__aeabi_fadd+0x3a>
     5f0:	e093      	b.n	71a <__aeabi_fadd+0x162>
     5f2:	1e51      	subs	r1, r2, #1
     5f4:	2900      	cmp	r1, #0
     5f6:	d000      	beq.n	5fa <__aeabi_fadd+0x42>
     5f8:	e0bc      	b.n	774 <__aeabi_fadd+0x1bc>
     5fa:	2401      	movs	r4, #1
     5fc:	1bdb      	subs	r3, r3, r7
     5fe:	015a      	lsls	r2, r3, #5
     600:	d546      	bpl.n	690 <__aeabi_fadd+0xd8>
     602:	019b      	lsls	r3, r3, #6
     604:	099e      	lsrs	r6, r3, #6
     606:	0030      	movs	r0, r6
     608:	f002 fa84 	bl	2b14 <__clzsi2>
     60c:	3805      	subs	r0, #5
     60e:	4086      	lsls	r6, r0
     610:	4284      	cmp	r4, r0
     612:	dd00      	ble.n	616 <__aeabi_fadd+0x5e>
     614:	e09d      	b.n	752 <__aeabi_fadd+0x19a>
     616:	1b04      	subs	r4, r0, r4
     618:	0032      	movs	r2, r6
     61a:	2020      	movs	r0, #32
     61c:	3401      	adds	r4, #1
     61e:	40e2      	lsrs	r2, r4
     620:	1b04      	subs	r4, r0, r4
     622:	40a6      	lsls	r6, r4
     624:	0033      	movs	r3, r6
     626:	1e5e      	subs	r6, r3, #1
     628:	41b3      	sbcs	r3, r6
     62a:	2400      	movs	r4, #0
     62c:	4313      	orrs	r3, r2
     62e:	075a      	lsls	r2, r3, #29
     630:	d004      	beq.n	63c <__aeabi_fadd+0x84>
     632:	220f      	movs	r2, #15
     634:	401a      	ands	r2, r3
     636:	2a04      	cmp	r2, #4
     638:	d000      	beq.n	63c <__aeabi_fadd+0x84>
     63a:	3304      	adds	r3, #4
     63c:	015a      	lsls	r2, r3, #5
     63e:	d529      	bpl.n	694 <__aeabi_fadd+0xdc>
     640:	3401      	adds	r4, #1
     642:	2cff      	cmp	r4, #255	; 0xff
     644:	d100      	bne.n	648 <__aeabi_fadd+0x90>
     646:	e081      	b.n	74c <__aeabi_fadd+0x194>
     648:	002a      	movs	r2, r5
     64a:	019b      	lsls	r3, r3, #6
     64c:	0a5b      	lsrs	r3, r3, #9
     64e:	b2e4      	uxtb	r4, r4
     650:	025b      	lsls	r3, r3, #9
     652:	05e4      	lsls	r4, r4, #23
     654:	0a58      	lsrs	r0, r3, #9
     656:	07d2      	lsls	r2, r2, #31
     658:	4320      	orrs	r0, r4
     65a:	4310      	orrs	r0, r2
     65c:	bc04      	pop	{r2}
     65e:	4690      	mov	r8, r2
     660:	bdf0      	pop	{r4, r5, r6, r7, pc}
     662:	2cff      	cmp	r4, #255	; 0xff
     664:	d0e3      	beq.n	62e <__aeabi_fadd+0x76>
     666:	2180      	movs	r1, #128	; 0x80
     668:	0038      	movs	r0, r7
     66a:	04c9      	lsls	r1, r1, #19
     66c:	4308      	orrs	r0, r1
     66e:	4684      	mov	ip, r0
     670:	2a1b      	cmp	r2, #27
     672:	dd00      	ble.n	676 <__aeabi_fadd+0xbe>
     674:	e082      	b.n	77c <__aeabi_fadd+0x1c4>
     676:	2020      	movs	r0, #32
     678:	4661      	mov	r1, ip
     67a:	40d1      	lsrs	r1, r2
     67c:	1a82      	subs	r2, r0, r2
     67e:	4660      	mov	r0, ip
     680:	4090      	lsls	r0, r2
     682:	0002      	movs	r2, r0
     684:	1e50      	subs	r0, r2, #1
     686:	4182      	sbcs	r2, r0
     688:	430a      	orrs	r2, r1
     68a:	1a9b      	subs	r3, r3, r2
     68c:	015a      	lsls	r2, r3, #5
     68e:	d4b8      	bmi.n	602 <__aeabi_fadd+0x4a>
     690:	075a      	lsls	r2, r3, #29
     692:	d1ce      	bne.n	632 <__aeabi_fadd+0x7a>
     694:	08de      	lsrs	r6, r3, #3
     696:	002a      	movs	r2, r5
     698:	2cff      	cmp	r4, #255	; 0xff
     69a:	d13a      	bne.n	712 <__aeabi_fadd+0x15a>
     69c:	2e00      	cmp	r6, #0
     69e:	d100      	bne.n	6a2 <__aeabi_fadd+0xea>
     6a0:	e0ae      	b.n	800 <__aeabi_fadd+0x248>
     6a2:	2380      	movs	r3, #128	; 0x80
     6a4:	03db      	lsls	r3, r3, #15
     6a6:	4333      	orrs	r3, r6
     6a8:	025b      	lsls	r3, r3, #9
     6aa:	0a5b      	lsrs	r3, r3, #9
     6ac:	24ff      	movs	r4, #255	; 0xff
     6ae:	e7cf      	b.n	650 <__aeabi_fadd+0x98>
     6b0:	1a21      	subs	r1, r4, r0
     6b2:	2900      	cmp	r1, #0
     6b4:	dd52      	ble.n	75c <__aeabi_fadd+0x1a4>
     6b6:	2800      	cmp	r0, #0
     6b8:	d031      	beq.n	71e <__aeabi_fadd+0x166>
     6ba:	2cff      	cmp	r4, #255	; 0xff
     6bc:	d0b7      	beq.n	62e <__aeabi_fadd+0x76>
     6be:	2080      	movs	r0, #128	; 0x80
     6c0:	003e      	movs	r6, r7
     6c2:	04c0      	lsls	r0, r0, #19
     6c4:	4306      	orrs	r6, r0
     6c6:	46b4      	mov	ip, r6
     6c8:	291b      	cmp	r1, #27
     6ca:	dd00      	ble.n	6ce <__aeabi_fadd+0x116>
     6cc:	e0aa      	b.n	824 <__aeabi_fadd+0x26c>
     6ce:	2620      	movs	r6, #32
     6d0:	4660      	mov	r0, ip
     6d2:	40c8      	lsrs	r0, r1
     6d4:	1a71      	subs	r1, r6, r1
     6d6:	4666      	mov	r6, ip
     6d8:	408e      	lsls	r6, r1
     6da:	0031      	movs	r1, r6
     6dc:	1e4e      	subs	r6, r1, #1
     6de:	41b1      	sbcs	r1, r6
     6e0:	4301      	orrs	r1, r0
     6e2:	185b      	adds	r3, r3, r1
     6e4:	0159      	lsls	r1, r3, #5
     6e6:	d5d3      	bpl.n	690 <__aeabi_fadd+0xd8>
     6e8:	3401      	adds	r4, #1
     6ea:	2cff      	cmp	r4, #255	; 0xff
     6ec:	d100      	bne.n	6f0 <__aeabi_fadd+0x138>
     6ee:	e087      	b.n	800 <__aeabi_fadd+0x248>
     6f0:	2201      	movs	r2, #1
     6f2:	4978      	ldr	r1, [pc, #480]	; (8d4 <__aeabi_fadd+0x31c>)
     6f4:	401a      	ands	r2, r3
     6f6:	085b      	lsrs	r3, r3, #1
     6f8:	400b      	ands	r3, r1
     6fa:	4313      	orrs	r3, r2
     6fc:	e797      	b.n	62e <__aeabi_fadd+0x76>
     6fe:	2c00      	cmp	r4, #0
     700:	d000      	beq.n	704 <__aeabi_fadd+0x14c>
     702:	e0a7      	b.n	854 <__aeabi_fadd+0x29c>
     704:	2b00      	cmp	r3, #0
     706:	d000      	beq.n	70a <__aeabi_fadd+0x152>
     708:	e0b6      	b.n	878 <__aeabi_fadd+0x2c0>
     70a:	1e3b      	subs	r3, r7, #0
     70c:	d162      	bne.n	7d4 <__aeabi_fadd+0x21c>
     70e:	2600      	movs	r6, #0
     710:	2200      	movs	r2, #0
     712:	0273      	lsls	r3, r6, #9
     714:	0a5b      	lsrs	r3, r3, #9
     716:	b2e4      	uxtb	r4, r4
     718:	e79a      	b.n	650 <__aeabi_fadd+0x98>
     71a:	0014      	movs	r4, r2
     71c:	e787      	b.n	62e <__aeabi_fadd+0x76>
     71e:	2f00      	cmp	r7, #0
     720:	d04d      	beq.n	7be <__aeabi_fadd+0x206>
     722:	1e48      	subs	r0, r1, #1
     724:	2800      	cmp	r0, #0
     726:	d157      	bne.n	7d8 <__aeabi_fadd+0x220>
     728:	4463      	add	r3, ip
     72a:	2401      	movs	r4, #1
     72c:	015a      	lsls	r2, r3, #5
     72e:	d5af      	bpl.n	690 <__aeabi_fadd+0xd8>
     730:	2402      	movs	r4, #2
     732:	e7dd      	b.n	6f0 <__aeabi_fadd+0x138>
     734:	2a00      	cmp	r2, #0
     736:	d124      	bne.n	782 <__aeabi_fadd+0x1ca>
     738:	1c62      	adds	r2, r4, #1
     73a:	b2d2      	uxtb	r2, r2
     73c:	2a01      	cmp	r2, #1
     73e:	ddde      	ble.n	6fe <__aeabi_fadd+0x146>
     740:	1bde      	subs	r6, r3, r7
     742:	0172      	lsls	r2, r6, #5
     744:	d535      	bpl.n	7b2 <__aeabi_fadd+0x1fa>
     746:	1afe      	subs	r6, r7, r3
     748:	000d      	movs	r5, r1
     74a:	e75c      	b.n	606 <__aeabi_fadd+0x4e>
     74c:	002a      	movs	r2, r5
     74e:	2300      	movs	r3, #0
     750:	e77e      	b.n	650 <__aeabi_fadd+0x98>
     752:	0033      	movs	r3, r6
     754:	4a60      	ldr	r2, [pc, #384]	; (8d8 <__aeabi_fadd+0x320>)
     756:	1a24      	subs	r4, r4, r0
     758:	4013      	ands	r3, r2
     75a:	e768      	b.n	62e <__aeabi_fadd+0x76>
     75c:	2900      	cmp	r1, #0
     75e:	d163      	bne.n	828 <__aeabi_fadd+0x270>
     760:	1c61      	adds	r1, r4, #1
     762:	b2c8      	uxtb	r0, r1
     764:	2801      	cmp	r0, #1
     766:	dd4e      	ble.n	806 <__aeabi_fadd+0x24e>
     768:	29ff      	cmp	r1, #255	; 0xff
     76a:	d049      	beq.n	800 <__aeabi_fadd+0x248>
     76c:	4463      	add	r3, ip
     76e:	085b      	lsrs	r3, r3, #1
     770:	000c      	movs	r4, r1
     772:	e75c      	b.n	62e <__aeabi_fadd+0x76>
     774:	2aff      	cmp	r2, #255	; 0xff
     776:	d041      	beq.n	7fc <__aeabi_fadd+0x244>
     778:	000a      	movs	r2, r1
     77a:	e779      	b.n	670 <__aeabi_fadd+0xb8>
     77c:	2201      	movs	r2, #1
     77e:	1a9b      	subs	r3, r3, r2
     780:	e784      	b.n	68c <__aeabi_fadd+0xd4>
     782:	2c00      	cmp	r4, #0
     784:	d01d      	beq.n	7c2 <__aeabi_fadd+0x20a>
     786:	28ff      	cmp	r0, #255	; 0xff
     788:	d022      	beq.n	7d0 <__aeabi_fadd+0x218>
     78a:	2480      	movs	r4, #128	; 0x80
     78c:	04e4      	lsls	r4, r4, #19
     78e:	4252      	negs	r2, r2
     790:	4323      	orrs	r3, r4
     792:	2a1b      	cmp	r2, #27
     794:	dd00      	ble.n	798 <__aeabi_fadd+0x1e0>
     796:	e08a      	b.n	8ae <__aeabi_fadd+0x2f6>
     798:	001c      	movs	r4, r3
     79a:	2520      	movs	r5, #32
     79c:	40d4      	lsrs	r4, r2
     79e:	1aaa      	subs	r2, r5, r2
     7a0:	4093      	lsls	r3, r2
     7a2:	1e5a      	subs	r2, r3, #1
     7a4:	4193      	sbcs	r3, r2
     7a6:	4323      	orrs	r3, r4
     7a8:	4662      	mov	r2, ip
     7aa:	0004      	movs	r4, r0
     7ac:	1ad3      	subs	r3, r2, r3
     7ae:	000d      	movs	r5, r1
     7b0:	e725      	b.n	5fe <__aeabi_fadd+0x46>
     7b2:	2e00      	cmp	r6, #0
     7b4:	d000      	beq.n	7b8 <__aeabi_fadd+0x200>
     7b6:	e726      	b.n	606 <__aeabi_fadd+0x4e>
     7b8:	2200      	movs	r2, #0
     7ba:	2400      	movs	r4, #0
     7bc:	e7a9      	b.n	712 <__aeabi_fadd+0x15a>
     7be:	000c      	movs	r4, r1
     7c0:	e735      	b.n	62e <__aeabi_fadd+0x76>
     7c2:	2b00      	cmp	r3, #0
     7c4:	d04d      	beq.n	862 <__aeabi_fadd+0x2aa>
     7c6:	43d2      	mvns	r2, r2
     7c8:	2a00      	cmp	r2, #0
     7ca:	d0ed      	beq.n	7a8 <__aeabi_fadd+0x1f0>
     7cc:	28ff      	cmp	r0, #255	; 0xff
     7ce:	d1e0      	bne.n	792 <__aeabi_fadd+0x1da>
     7d0:	4663      	mov	r3, ip
     7d2:	24ff      	movs	r4, #255	; 0xff
     7d4:	000d      	movs	r5, r1
     7d6:	e72a      	b.n	62e <__aeabi_fadd+0x76>
     7d8:	29ff      	cmp	r1, #255	; 0xff
     7da:	d00f      	beq.n	7fc <__aeabi_fadd+0x244>
     7dc:	0001      	movs	r1, r0
     7de:	e773      	b.n	6c8 <__aeabi_fadd+0x110>
     7e0:	2b00      	cmp	r3, #0
     7e2:	d061      	beq.n	8a8 <__aeabi_fadd+0x2f0>
     7e4:	24ff      	movs	r4, #255	; 0xff
     7e6:	2f00      	cmp	r7, #0
     7e8:	d100      	bne.n	7ec <__aeabi_fadd+0x234>
     7ea:	e720      	b.n	62e <__aeabi_fadd+0x76>
     7ec:	2280      	movs	r2, #128	; 0x80
     7ee:	4641      	mov	r1, r8
     7f0:	03d2      	lsls	r2, r2, #15
     7f2:	4211      	tst	r1, r2
     7f4:	d002      	beq.n	7fc <__aeabi_fadd+0x244>
     7f6:	4216      	tst	r6, r2
     7f8:	d100      	bne.n	7fc <__aeabi_fadd+0x244>
     7fa:	003b      	movs	r3, r7
     7fc:	24ff      	movs	r4, #255	; 0xff
     7fe:	e716      	b.n	62e <__aeabi_fadd+0x76>
     800:	24ff      	movs	r4, #255	; 0xff
     802:	2300      	movs	r3, #0
     804:	e724      	b.n	650 <__aeabi_fadd+0x98>
     806:	2c00      	cmp	r4, #0
     808:	d1ea      	bne.n	7e0 <__aeabi_fadd+0x228>
     80a:	2b00      	cmp	r3, #0
     80c:	d058      	beq.n	8c0 <__aeabi_fadd+0x308>
     80e:	2f00      	cmp	r7, #0
     810:	d100      	bne.n	814 <__aeabi_fadd+0x25c>
     812:	e70c      	b.n	62e <__aeabi_fadd+0x76>
     814:	4463      	add	r3, ip
     816:	015a      	lsls	r2, r3, #5
     818:	d400      	bmi.n	81c <__aeabi_fadd+0x264>
     81a:	e739      	b.n	690 <__aeabi_fadd+0xd8>
     81c:	4a2e      	ldr	r2, [pc, #184]	; (8d8 <__aeabi_fadd+0x320>)
     81e:	000c      	movs	r4, r1
     820:	4013      	ands	r3, r2
     822:	e704      	b.n	62e <__aeabi_fadd+0x76>
     824:	2101      	movs	r1, #1
     826:	e75c      	b.n	6e2 <__aeabi_fadd+0x12a>
     828:	2c00      	cmp	r4, #0
     82a:	d11e      	bne.n	86a <__aeabi_fadd+0x2b2>
     82c:	2b00      	cmp	r3, #0
     82e:	d040      	beq.n	8b2 <__aeabi_fadd+0x2fa>
     830:	43c9      	mvns	r1, r1
     832:	2900      	cmp	r1, #0
     834:	d00b      	beq.n	84e <__aeabi_fadd+0x296>
     836:	28ff      	cmp	r0, #255	; 0xff
     838:	d036      	beq.n	8a8 <__aeabi_fadd+0x2f0>
     83a:	291b      	cmp	r1, #27
     83c:	dc47      	bgt.n	8ce <__aeabi_fadd+0x316>
     83e:	001c      	movs	r4, r3
     840:	2620      	movs	r6, #32
     842:	40cc      	lsrs	r4, r1
     844:	1a71      	subs	r1, r6, r1
     846:	408b      	lsls	r3, r1
     848:	1e59      	subs	r1, r3, #1
     84a:	418b      	sbcs	r3, r1
     84c:	4323      	orrs	r3, r4
     84e:	4463      	add	r3, ip
     850:	0004      	movs	r4, r0
     852:	e747      	b.n	6e4 <__aeabi_fadd+0x12c>
     854:	2b00      	cmp	r3, #0
     856:	d118      	bne.n	88a <__aeabi_fadd+0x2d2>
     858:	1e3b      	subs	r3, r7, #0
     85a:	d02d      	beq.n	8b8 <__aeabi_fadd+0x300>
     85c:	000d      	movs	r5, r1
     85e:	24ff      	movs	r4, #255	; 0xff
     860:	e6e5      	b.n	62e <__aeabi_fadd+0x76>
     862:	003b      	movs	r3, r7
     864:	0004      	movs	r4, r0
     866:	000d      	movs	r5, r1
     868:	e6e1      	b.n	62e <__aeabi_fadd+0x76>
     86a:	28ff      	cmp	r0, #255	; 0xff
     86c:	d01c      	beq.n	8a8 <__aeabi_fadd+0x2f0>
     86e:	2480      	movs	r4, #128	; 0x80
     870:	04e4      	lsls	r4, r4, #19
     872:	4249      	negs	r1, r1
     874:	4323      	orrs	r3, r4
     876:	e7e0      	b.n	83a <__aeabi_fadd+0x282>
     878:	2f00      	cmp	r7, #0
     87a:	d100      	bne.n	87e <__aeabi_fadd+0x2c6>
     87c:	e6d7      	b.n	62e <__aeabi_fadd+0x76>
     87e:	1bde      	subs	r6, r3, r7
     880:	0172      	lsls	r2, r6, #5
     882:	d51f      	bpl.n	8c4 <__aeabi_fadd+0x30c>
     884:	1afb      	subs	r3, r7, r3
     886:	000d      	movs	r5, r1
     888:	e6d1      	b.n	62e <__aeabi_fadd+0x76>
     88a:	24ff      	movs	r4, #255	; 0xff
     88c:	2f00      	cmp	r7, #0
     88e:	d100      	bne.n	892 <__aeabi_fadd+0x2da>
     890:	e6cd      	b.n	62e <__aeabi_fadd+0x76>
     892:	2280      	movs	r2, #128	; 0x80
     894:	4640      	mov	r0, r8
     896:	03d2      	lsls	r2, r2, #15
     898:	4210      	tst	r0, r2
     89a:	d0af      	beq.n	7fc <__aeabi_fadd+0x244>
     89c:	4216      	tst	r6, r2
     89e:	d1ad      	bne.n	7fc <__aeabi_fadd+0x244>
     8a0:	003b      	movs	r3, r7
     8a2:	000d      	movs	r5, r1
     8a4:	24ff      	movs	r4, #255	; 0xff
     8a6:	e6c2      	b.n	62e <__aeabi_fadd+0x76>
     8a8:	4663      	mov	r3, ip
     8aa:	24ff      	movs	r4, #255	; 0xff
     8ac:	e6bf      	b.n	62e <__aeabi_fadd+0x76>
     8ae:	2301      	movs	r3, #1
     8b0:	e77a      	b.n	7a8 <__aeabi_fadd+0x1f0>
     8b2:	003b      	movs	r3, r7
     8b4:	0004      	movs	r4, r0
     8b6:	e6ba      	b.n	62e <__aeabi_fadd+0x76>
     8b8:	2680      	movs	r6, #128	; 0x80
     8ba:	2200      	movs	r2, #0
     8bc:	03f6      	lsls	r6, r6, #15
     8be:	e6f0      	b.n	6a2 <__aeabi_fadd+0xea>
     8c0:	003b      	movs	r3, r7
     8c2:	e6b4      	b.n	62e <__aeabi_fadd+0x76>
     8c4:	1e33      	subs	r3, r6, #0
     8c6:	d000      	beq.n	8ca <__aeabi_fadd+0x312>
     8c8:	e6e2      	b.n	690 <__aeabi_fadd+0xd8>
     8ca:	2200      	movs	r2, #0
     8cc:	e721      	b.n	712 <__aeabi_fadd+0x15a>
     8ce:	2301      	movs	r3, #1
     8d0:	e7bd      	b.n	84e <__aeabi_fadd+0x296>
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	7dffffff 	.word	0x7dffffff
     8d8:	fbffffff 	.word	0xfbffffff

000008dc <__aeabi_fdiv>:
     8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8de:	4657      	mov	r7, sl
     8e0:	464e      	mov	r6, r9
     8e2:	46de      	mov	lr, fp
     8e4:	4645      	mov	r5, r8
     8e6:	b5e0      	push	{r5, r6, r7, lr}
     8e8:	0244      	lsls	r4, r0, #9
     8ea:	0043      	lsls	r3, r0, #1
     8ec:	0fc6      	lsrs	r6, r0, #31
     8ee:	b083      	sub	sp, #12
     8f0:	1c0f      	adds	r7, r1, #0
     8f2:	0a64      	lsrs	r4, r4, #9
     8f4:	0e1b      	lsrs	r3, r3, #24
     8f6:	46b2      	mov	sl, r6
     8f8:	d053      	beq.n	9a2 <__aeabi_fdiv+0xc6>
     8fa:	2bff      	cmp	r3, #255	; 0xff
     8fc:	d027      	beq.n	94e <__aeabi_fdiv+0x72>
     8fe:	2280      	movs	r2, #128	; 0x80
     900:	00e4      	lsls	r4, r4, #3
     902:	04d2      	lsls	r2, r2, #19
     904:	4314      	orrs	r4, r2
     906:	227f      	movs	r2, #127	; 0x7f
     908:	4252      	negs	r2, r2
     90a:	4690      	mov	r8, r2
     90c:	4498      	add	r8, r3
     90e:	2300      	movs	r3, #0
     910:	4699      	mov	r9, r3
     912:	469b      	mov	fp, r3
     914:	027d      	lsls	r5, r7, #9
     916:	0078      	lsls	r0, r7, #1
     918:	0ffb      	lsrs	r3, r7, #31
     91a:	0a6d      	lsrs	r5, r5, #9
     91c:	0e00      	lsrs	r0, r0, #24
     91e:	9300      	str	r3, [sp, #0]
     920:	d024      	beq.n	96c <__aeabi_fdiv+0x90>
     922:	28ff      	cmp	r0, #255	; 0xff
     924:	d046      	beq.n	9b4 <__aeabi_fdiv+0xd8>
     926:	2380      	movs	r3, #128	; 0x80
     928:	2100      	movs	r1, #0
     92a:	00ed      	lsls	r5, r5, #3
     92c:	04db      	lsls	r3, r3, #19
     92e:	431d      	orrs	r5, r3
     930:	387f      	subs	r0, #127	; 0x7f
     932:	4647      	mov	r7, r8
     934:	1a38      	subs	r0, r7, r0
     936:	464f      	mov	r7, r9
     938:	430f      	orrs	r7, r1
     93a:	00bf      	lsls	r7, r7, #2
     93c:	46b9      	mov	r9, r7
     93e:	0033      	movs	r3, r6
     940:	9a00      	ldr	r2, [sp, #0]
     942:	4f87      	ldr	r7, [pc, #540]	; (b60 <__aeabi_fdiv+0x284>)
     944:	4053      	eors	r3, r2
     946:	464a      	mov	r2, r9
     948:	58ba      	ldr	r2, [r7, r2]
     94a:	9301      	str	r3, [sp, #4]
     94c:	4697      	mov	pc, r2
     94e:	2c00      	cmp	r4, #0
     950:	d14e      	bne.n	9f0 <__aeabi_fdiv+0x114>
     952:	2308      	movs	r3, #8
     954:	4699      	mov	r9, r3
     956:	33f7      	adds	r3, #247	; 0xf7
     958:	4698      	mov	r8, r3
     95a:	3bfd      	subs	r3, #253	; 0xfd
     95c:	469b      	mov	fp, r3
     95e:	027d      	lsls	r5, r7, #9
     960:	0078      	lsls	r0, r7, #1
     962:	0ffb      	lsrs	r3, r7, #31
     964:	0a6d      	lsrs	r5, r5, #9
     966:	0e00      	lsrs	r0, r0, #24
     968:	9300      	str	r3, [sp, #0]
     96a:	d1da      	bne.n	922 <__aeabi_fdiv+0x46>
     96c:	2d00      	cmp	r5, #0
     96e:	d126      	bne.n	9be <__aeabi_fdiv+0xe2>
     970:	2000      	movs	r0, #0
     972:	2101      	movs	r1, #1
     974:	0033      	movs	r3, r6
     976:	9a00      	ldr	r2, [sp, #0]
     978:	4f7a      	ldr	r7, [pc, #488]	; (b64 <__aeabi_fdiv+0x288>)
     97a:	4053      	eors	r3, r2
     97c:	4642      	mov	r2, r8
     97e:	1a10      	subs	r0, r2, r0
     980:	464a      	mov	r2, r9
     982:	430a      	orrs	r2, r1
     984:	0092      	lsls	r2, r2, #2
     986:	58ba      	ldr	r2, [r7, r2]
     988:	001d      	movs	r5, r3
     98a:	4697      	mov	pc, r2
     98c:	9b00      	ldr	r3, [sp, #0]
     98e:	002c      	movs	r4, r5
     990:	469a      	mov	sl, r3
     992:	468b      	mov	fp, r1
     994:	465b      	mov	r3, fp
     996:	2b02      	cmp	r3, #2
     998:	d131      	bne.n	9fe <__aeabi_fdiv+0x122>
     99a:	4653      	mov	r3, sl
     99c:	21ff      	movs	r1, #255	; 0xff
     99e:	2400      	movs	r4, #0
     9a0:	e038      	b.n	a14 <__aeabi_fdiv+0x138>
     9a2:	2c00      	cmp	r4, #0
     9a4:	d117      	bne.n	9d6 <__aeabi_fdiv+0xfa>
     9a6:	2304      	movs	r3, #4
     9a8:	4699      	mov	r9, r3
     9aa:	2300      	movs	r3, #0
     9ac:	4698      	mov	r8, r3
     9ae:	3301      	adds	r3, #1
     9b0:	469b      	mov	fp, r3
     9b2:	e7af      	b.n	914 <__aeabi_fdiv+0x38>
     9b4:	20ff      	movs	r0, #255	; 0xff
     9b6:	2d00      	cmp	r5, #0
     9b8:	d10b      	bne.n	9d2 <__aeabi_fdiv+0xf6>
     9ba:	2102      	movs	r1, #2
     9bc:	e7da      	b.n	974 <__aeabi_fdiv+0x98>
     9be:	0028      	movs	r0, r5
     9c0:	f002 f8a8 	bl	2b14 <__clzsi2>
     9c4:	1f43      	subs	r3, r0, #5
     9c6:	409d      	lsls	r5, r3
     9c8:	2376      	movs	r3, #118	; 0x76
     9ca:	425b      	negs	r3, r3
     9cc:	1a18      	subs	r0, r3, r0
     9ce:	2100      	movs	r1, #0
     9d0:	e7af      	b.n	932 <__aeabi_fdiv+0x56>
     9d2:	2103      	movs	r1, #3
     9d4:	e7ad      	b.n	932 <__aeabi_fdiv+0x56>
     9d6:	0020      	movs	r0, r4
     9d8:	f002 f89c 	bl	2b14 <__clzsi2>
     9dc:	1f43      	subs	r3, r0, #5
     9de:	409c      	lsls	r4, r3
     9e0:	2376      	movs	r3, #118	; 0x76
     9e2:	425b      	negs	r3, r3
     9e4:	1a1b      	subs	r3, r3, r0
     9e6:	4698      	mov	r8, r3
     9e8:	2300      	movs	r3, #0
     9ea:	4699      	mov	r9, r3
     9ec:	469b      	mov	fp, r3
     9ee:	e791      	b.n	914 <__aeabi_fdiv+0x38>
     9f0:	230c      	movs	r3, #12
     9f2:	4699      	mov	r9, r3
     9f4:	33f3      	adds	r3, #243	; 0xf3
     9f6:	4698      	mov	r8, r3
     9f8:	3bfc      	subs	r3, #252	; 0xfc
     9fa:	469b      	mov	fp, r3
     9fc:	e78a      	b.n	914 <__aeabi_fdiv+0x38>
     9fe:	2b03      	cmp	r3, #3
     a00:	d100      	bne.n	a04 <__aeabi_fdiv+0x128>
     a02:	e0a5      	b.n	b50 <__aeabi_fdiv+0x274>
     a04:	4655      	mov	r5, sl
     a06:	2b01      	cmp	r3, #1
     a08:	d000      	beq.n	a0c <__aeabi_fdiv+0x130>
     a0a:	e081      	b.n	b10 <__aeabi_fdiv+0x234>
     a0c:	2301      	movs	r3, #1
     a0e:	2100      	movs	r1, #0
     a10:	2400      	movs	r4, #0
     a12:	402b      	ands	r3, r5
     a14:	0264      	lsls	r4, r4, #9
     a16:	05c9      	lsls	r1, r1, #23
     a18:	0a60      	lsrs	r0, r4, #9
     a1a:	07db      	lsls	r3, r3, #31
     a1c:	4308      	orrs	r0, r1
     a1e:	4318      	orrs	r0, r3
     a20:	b003      	add	sp, #12
     a22:	bc3c      	pop	{r2, r3, r4, r5}
     a24:	4690      	mov	r8, r2
     a26:	4699      	mov	r9, r3
     a28:	46a2      	mov	sl, r4
     a2a:	46ab      	mov	fp, r5
     a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a2e:	2480      	movs	r4, #128	; 0x80
     a30:	2300      	movs	r3, #0
     a32:	03e4      	lsls	r4, r4, #15
     a34:	21ff      	movs	r1, #255	; 0xff
     a36:	e7ed      	b.n	a14 <__aeabi_fdiv+0x138>
     a38:	21ff      	movs	r1, #255	; 0xff
     a3a:	2400      	movs	r4, #0
     a3c:	e7ea      	b.n	a14 <__aeabi_fdiv+0x138>
     a3e:	2301      	movs	r3, #1
     a40:	1a59      	subs	r1, r3, r1
     a42:	291b      	cmp	r1, #27
     a44:	dd66      	ble.n	b14 <__aeabi_fdiv+0x238>
     a46:	9a01      	ldr	r2, [sp, #4]
     a48:	4013      	ands	r3, r2
     a4a:	2100      	movs	r1, #0
     a4c:	2400      	movs	r4, #0
     a4e:	e7e1      	b.n	a14 <__aeabi_fdiv+0x138>
     a50:	2380      	movs	r3, #128	; 0x80
     a52:	03db      	lsls	r3, r3, #15
     a54:	421c      	tst	r4, r3
     a56:	d038      	beq.n	aca <__aeabi_fdiv+0x1ee>
     a58:	421d      	tst	r5, r3
     a5a:	d051      	beq.n	b00 <__aeabi_fdiv+0x224>
     a5c:	431c      	orrs	r4, r3
     a5e:	0264      	lsls	r4, r4, #9
     a60:	0a64      	lsrs	r4, r4, #9
     a62:	0033      	movs	r3, r6
     a64:	21ff      	movs	r1, #255	; 0xff
     a66:	e7d5      	b.n	a14 <__aeabi_fdiv+0x138>
     a68:	0163      	lsls	r3, r4, #5
     a6a:	016c      	lsls	r4, r5, #5
     a6c:	42a3      	cmp	r3, r4
     a6e:	d23b      	bcs.n	ae8 <__aeabi_fdiv+0x20c>
     a70:	261b      	movs	r6, #27
     a72:	2100      	movs	r1, #0
     a74:	3801      	subs	r0, #1
     a76:	2501      	movs	r5, #1
     a78:	001f      	movs	r7, r3
     a7a:	0049      	lsls	r1, r1, #1
     a7c:	005b      	lsls	r3, r3, #1
     a7e:	2f00      	cmp	r7, #0
     a80:	db01      	blt.n	a86 <__aeabi_fdiv+0x1aa>
     a82:	429c      	cmp	r4, r3
     a84:	d801      	bhi.n	a8a <__aeabi_fdiv+0x1ae>
     a86:	1b1b      	subs	r3, r3, r4
     a88:	4329      	orrs	r1, r5
     a8a:	3e01      	subs	r6, #1
     a8c:	2e00      	cmp	r6, #0
     a8e:	d1f3      	bne.n	a78 <__aeabi_fdiv+0x19c>
     a90:	001c      	movs	r4, r3
     a92:	1e63      	subs	r3, r4, #1
     a94:	419c      	sbcs	r4, r3
     a96:	430c      	orrs	r4, r1
     a98:	0001      	movs	r1, r0
     a9a:	317f      	adds	r1, #127	; 0x7f
     a9c:	2900      	cmp	r1, #0
     a9e:	ddce      	ble.n	a3e <__aeabi_fdiv+0x162>
     aa0:	0763      	lsls	r3, r4, #29
     aa2:	d004      	beq.n	aae <__aeabi_fdiv+0x1d2>
     aa4:	230f      	movs	r3, #15
     aa6:	4023      	ands	r3, r4
     aa8:	2b04      	cmp	r3, #4
     aaa:	d000      	beq.n	aae <__aeabi_fdiv+0x1d2>
     aac:	3404      	adds	r4, #4
     aae:	0123      	lsls	r3, r4, #4
     ab0:	d503      	bpl.n	aba <__aeabi_fdiv+0x1de>
     ab2:	0001      	movs	r1, r0
     ab4:	4b2c      	ldr	r3, [pc, #176]	; (b68 <__aeabi_fdiv+0x28c>)
     ab6:	3180      	adds	r1, #128	; 0x80
     ab8:	401c      	ands	r4, r3
     aba:	29fe      	cmp	r1, #254	; 0xfe
     abc:	dd0d      	ble.n	ada <__aeabi_fdiv+0x1fe>
     abe:	2301      	movs	r3, #1
     ac0:	9a01      	ldr	r2, [sp, #4]
     ac2:	21ff      	movs	r1, #255	; 0xff
     ac4:	4013      	ands	r3, r2
     ac6:	2400      	movs	r4, #0
     ac8:	e7a4      	b.n	a14 <__aeabi_fdiv+0x138>
     aca:	2380      	movs	r3, #128	; 0x80
     acc:	03db      	lsls	r3, r3, #15
     ace:	431c      	orrs	r4, r3
     ad0:	0264      	lsls	r4, r4, #9
     ad2:	0a64      	lsrs	r4, r4, #9
     ad4:	0033      	movs	r3, r6
     ad6:	21ff      	movs	r1, #255	; 0xff
     ad8:	e79c      	b.n	a14 <__aeabi_fdiv+0x138>
     ada:	2301      	movs	r3, #1
     adc:	9a01      	ldr	r2, [sp, #4]
     ade:	01a4      	lsls	r4, r4, #6
     ae0:	0a64      	lsrs	r4, r4, #9
     ae2:	b2c9      	uxtb	r1, r1
     ae4:	4013      	ands	r3, r2
     ae6:	e795      	b.n	a14 <__aeabi_fdiv+0x138>
     ae8:	1b1b      	subs	r3, r3, r4
     aea:	261a      	movs	r6, #26
     aec:	2101      	movs	r1, #1
     aee:	e7c2      	b.n	a76 <__aeabi_fdiv+0x19a>
     af0:	9b00      	ldr	r3, [sp, #0]
     af2:	468b      	mov	fp, r1
     af4:	469a      	mov	sl, r3
     af6:	2400      	movs	r4, #0
     af8:	e74c      	b.n	994 <__aeabi_fdiv+0xb8>
     afa:	0263      	lsls	r3, r4, #9
     afc:	d5e5      	bpl.n	aca <__aeabi_fdiv+0x1ee>
     afe:	2500      	movs	r5, #0
     b00:	2480      	movs	r4, #128	; 0x80
     b02:	03e4      	lsls	r4, r4, #15
     b04:	432c      	orrs	r4, r5
     b06:	0264      	lsls	r4, r4, #9
     b08:	0a64      	lsrs	r4, r4, #9
     b0a:	9b00      	ldr	r3, [sp, #0]
     b0c:	21ff      	movs	r1, #255	; 0xff
     b0e:	e781      	b.n	a14 <__aeabi_fdiv+0x138>
     b10:	9501      	str	r5, [sp, #4]
     b12:	e7c1      	b.n	a98 <__aeabi_fdiv+0x1bc>
     b14:	0023      	movs	r3, r4
     b16:	2020      	movs	r0, #32
     b18:	40cb      	lsrs	r3, r1
     b1a:	1a41      	subs	r1, r0, r1
     b1c:	408c      	lsls	r4, r1
     b1e:	1e61      	subs	r1, r4, #1
     b20:	418c      	sbcs	r4, r1
     b22:	431c      	orrs	r4, r3
     b24:	0763      	lsls	r3, r4, #29
     b26:	d004      	beq.n	b32 <__aeabi_fdiv+0x256>
     b28:	230f      	movs	r3, #15
     b2a:	4023      	ands	r3, r4
     b2c:	2b04      	cmp	r3, #4
     b2e:	d000      	beq.n	b32 <__aeabi_fdiv+0x256>
     b30:	3404      	adds	r4, #4
     b32:	0163      	lsls	r3, r4, #5
     b34:	d505      	bpl.n	b42 <__aeabi_fdiv+0x266>
     b36:	2301      	movs	r3, #1
     b38:	9a01      	ldr	r2, [sp, #4]
     b3a:	2101      	movs	r1, #1
     b3c:	4013      	ands	r3, r2
     b3e:	2400      	movs	r4, #0
     b40:	e768      	b.n	a14 <__aeabi_fdiv+0x138>
     b42:	2301      	movs	r3, #1
     b44:	9a01      	ldr	r2, [sp, #4]
     b46:	01a4      	lsls	r4, r4, #6
     b48:	0a64      	lsrs	r4, r4, #9
     b4a:	4013      	ands	r3, r2
     b4c:	2100      	movs	r1, #0
     b4e:	e761      	b.n	a14 <__aeabi_fdiv+0x138>
     b50:	2380      	movs	r3, #128	; 0x80
     b52:	03db      	lsls	r3, r3, #15
     b54:	431c      	orrs	r4, r3
     b56:	0264      	lsls	r4, r4, #9
     b58:	0a64      	lsrs	r4, r4, #9
     b5a:	4653      	mov	r3, sl
     b5c:	21ff      	movs	r1, #255	; 0xff
     b5e:	e759      	b.n	a14 <__aeabi_fdiv+0x138>
     b60:	0000def4 	.word	0x0000def4
     b64:	0000df34 	.word	0x0000df34
     b68:	f7ffffff 	.word	0xf7ffffff

00000b6c <__eqsf2>:
     b6c:	b570      	push	{r4, r5, r6, lr}
     b6e:	0042      	lsls	r2, r0, #1
     b70:	0245      	lsls	r5, r0, #9
     b72:	024e      	lsls	r6, r1, #9
     b74:	004c      	lsls	r4, r1, #1
     b76:	0fc3      	lsrs	r3, r0, #31
     b78:	0a6d      	lsrs	r5, r5, #9
     b7a:	0e12      	lsrs	r2, r2, #24
     b7c:	0a76      	lsrs	r6, r6, #9
     b7e:	0e24      	lsrs	r4, r4, #24
     b80:	0fc9      	lsrs	r1, r1, #31
     b82:	2001      	movs	r0, #1
     b84:	2aff      	cmp	r2, #255	; 0xff
     b86:	d006      	beq.n	b96 <__eqsf2+0x2a>
     b88:	2cff      	cmp	r4, #255	; 0xff
     b8a:	d003      	beq.n	b94 <__eqsf2+0x28>
     b8c:	42a2      	cmp	r2, r4
     b8e:	d101      	bne.n	b94 <__eqsf2+0x28>
     b90:	42b5      	cmp	r5, r6
     b92:	d006      	beq.n	ba2 <__eqsf2+0x36>
     b94:	bd70      	pop	{r4, r5, r6, pc}
     b96:	2d00      	cmp	r5, #0
     b98:	d1fc      	bne.n	b94 <__eqsf2+0x28>
     b9a:	2cff      	cmp	r4, #255	; 0xff
     b9c:	d1fa      	bne.n	b94 <__eqsf2+0x28>
     b9e:	2e00      	cmp	r6, #0
     ba0:	d1f8      	bne.n	b94 <__eqsf2+0x28>
     ba2:	428b      	cmp	r3, r1
     ba4:	d006      	beq.n	bb4 <__eqsf2+0x48>
     ba6:	2001      	movs	r0, #1
     ba8:	2a00      	cmp	r2, #0
     baa:	d1f3      	bne.n	b94 <__eqsf2+0x28>
     bac:	0028      	movs	r0, r5
     bae:	1e45      	subs	r5, r0, #1
     bb0:	41a8      	sbcs	r0, r5
     bb2:	e7ef      	b.n	b94 <__eqsf2+0x28>
     bb4:	2000      	movs	r0, #0
     bb6:	e7ed      	b.n	b94 <__eqsf2+0x28>

00000bb8 <__gesf2>:
     bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bba:	0042      	lsls	r2, r0, #1
     bbc:	0245      	lsls	r5, r0, #9
     bbe:	024c      	lsls	r4, r1, #9
     bc0:	0fc3      	lsrs	r3, r0, #31
     bc2:	0048      	lsls	r0, r1, #1
     bc4:	0a6d      	lsrs	r5, r5, #9
     bc6:	0e12      	lsrs	r2, r2, #24
     bc8:	0a64      	lsrs	r4, r4, #9
     bca:	0e00      	lsrs	r0, r0, #24
     bcc:	0fc9      	lsrs	r1, r1, #31
     bce:	2aff      	cmp	r2, #255	; 0xff
     bd0:	d01e      	beq.n	c10 <__gesf2+0x58>
     bd2:	28ff      	cmp	r0, #255	; 0xff
     bd4:	d021      	beq.n	c1a <__gesf2+0x62>
     bd6:	2a00      	cmp	r2, #0
     bd8:	d10a      	bne.n	bf0 <__gesf2+0x38>
     bda:	426e      	negs	r6, r5
     bdc:	416e      	adcs	r6, r5
     bde:	b2f6      	uxtb	r6, r6
     be0:	2800      	cmp	r0, #0
     be2:	d10f      	bne.n	c04 <__gesf2+0x4c>
     be4:	2c00      	cmp	r4, #0
     be6:	d10d      	bne.n	c04 <__gesf2+0x4c>
     be8:	2000      	movs	r0, #0
     bea:	2d00      	cmp	r5, #0
     bec:	d009      	beq.n	c02 <__gesf2+0x4a>
     bee:	e005      	b.n	bfc <__gesf2+0x44>
     bf0:	2800      	cmp	r0, #0
     bf2:	d101      	bne.n	bf8 <__gesf2+0x40>
     bf4:	2c00      	cmp	r4, #0
     bf6:	d001      	beq.n	bfc <__gesf2+0x44>
     bf8:	428b      	cmp	r3, r1
     bfa:	d011      	beq.n	c20 <__gesf2+0x68>
     bfc:	2101      	movs	r1, #1
     bfe:	4258      	negs	r0, r3
     c00:	4308      	orrs	r0, r1
     c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c04:	2e00      	cmp	r6, #0
     c06:	d0f7      	beq.n	bf8 <__gesf2+0x40>
     c08:	2001      	movs	r0, #1
     c0a:	3901      	subs	r1, #1
     c0c:	4308      	orrs	r0, r1
     c0e:	e7f8      	b.n	c02 <__gesf2+0x4a>
     c10:	2d00      	cmp	r5, #0
     c12:	d0de      	beq.n	bd2 <__gesf2+0x1a>
     c14:	2002      	movs	r0, #2
     c16:	4240      	negs	r0, r0
     c18:	e7f3      	b.n	c02 <__gesf2+0x4a>
     c1a:	2c00      	cmp	r4, #0
     c1c:	d0db      	beq.n	bd6 <__gesf2+0x1e>
     c1e:	e7f9      	b.n	c14 <__gesf2+0x5c>
     c20:	4282      	cmp	r2, r0
     c22:	dceb      	bgt.n	bfc <__gesf2+0x44>
     c24:	db04      	blt.n	c30 <__gesf2+0x78>
     c26:	42a5      	cmp	r5, r4
     c28:	d8e8      	bhi.n	bfc <__gesf2+0x44>
     c2a:	2000      	movs	r0, #0
     c2c:	42a5      	cmp	r5, r4
     c2e:	d2e8      	bcs.n	c02 <__gesf2+0x4a>
     c30:	2101      	movs	r1, #1
     c32:	1e58      	subs	r0, r3, #1
     c34:	4308      	orrs	r0, r1
     c36:	e7e4      	b.n	c02 <__gesf2+0x4a>

00000c38 <__lesf2>:
     c38:	b5f0      	push	{r4, r5, r6, r7, lr}
     c3a:	0042      	lsls	r2, r0, #1
     c3c:	024d      	lsls	r5, r1, #9
     c3e:	004c      	lsls	r4, r1, #1
     c40:	0246      	lsls	r6, r0, #9
     c42:	0a76      	lsrs	r6, r6, #9
     c44:	0e12      	lsrs	r2, r2, #24
     c46:	0fc3      	lsrs	r3, r0, #31
     c48:	0a6d      	lsrs	r5, r5, #9
     c4a:	0e24      	lsrs	r4, r4, #24
     c4c:	0fc9      	lsrs	r1, r1, #31
     c4e:	2aff      	cmp	r2, #255	; 0xff
     c50:	d016      	beq.n	c80 <__lesf2+0x48>
     c52:	2cff      	cmp	r4, #255	; 0xff
     c54:	d018      	beq.n	c88 <__lesf2+0x50>
     c56:	2a00      	cmp	r2, #0
     c58:	d10a      	bne.n	c70 <__lesf2+0x38>
     c5a:	4270      	negs	r0, r6
     c5c:	4170      	adcs	r0, r6
     c5e:	b2c0      	uxtb	r0, r0
     c60:	2c00      	cmp	r4, #0
     c62:	d015      	beq.n	c90 <__lesf2+0x58>
     c64:	2800      	cmp	r0, #0
     c66:	d005      	beq.n	c74 <__lesf2+0x3c>
     c68:	2001      	movs	r0, #1
     c6a:	3901      	subs	r1, #1
     c6c:	4308      	orrs	r0, r1
     c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c70:	2c00      	cmp	r4, #0
     c72:	d013      	beq.n	c9c <__lesf2+0x64>
     c74:	4299      	cmp	r1, r3
     c76:	d014      	beq.n	ca2 <__lesf2+0x6a>
     c78:	2001      	movs	r0, #1
     c7a:	425b      	negs	r3, r3
     c7c:	4318      	orrs	r0, r3
     c7e:	e7f6      	b.n	c6e <__lesf2+0x36>
     c80:	2002      	movs	r0, #2
     c82:	2e00      	cmp	r6, #0
     c84:	d1f3      	bne.n	c6e <__lesf2+0x36>
     c86:	e7e4      	b.n	c52 <__lesf2+0x1a>
     c88:	2002      	movs	r0, #2
     c8a:	2d00      	cmp	r5, #0
     c8c:	d1ef      	bne.n	c6e <__lesf2+0x36>
     c8e:	e7e2      	b.n	c56 <__lesf2+0x1e>
     c90:	2d00      	cmp	r5, #0
     c92:	d1e7      	bne.n	c64 <__lesf2+0x2c>
     c94:	2000      	movs	r0, #0
     c96:	2e00      	cmp	r6, #0
     c98:	d0e9      	beq.n	c6e <__lesf2+0x36>
     c9a:	e7ed      	b.n	c78 <__lesf2+0x40>
     c9c:	2d00      	cmp	r5, #0
     c9e:	d1e9      	bne.n	c74 <__lesf2+0x3c>
     ca0:	e7ea      	b.n	c78 <__lesf2+0x40>
     ca2:	42a2      	cmp	r2, r4
     ca4:	dc06      	bgt.n	cb4 <__lesf2+0x7c>
     ca6:	dbdf      	blt.n	c68 <__lesf2+0x30>
     ca8:	42ae      	cmp	r6, r5
     caa:	d803      	bhi.n	cb4 <__lesf2+0x7c>
     cac:	2000      	movs	r0, #0
     cae:	42ae      	cmp	r6, r5
     cb0:	d3da      	bcc.n	c68 <__lesf2+0x30>
     cb2:	e7dc      	b.n	c6e <__lesf2+0x36>
     cb4:	2001      	movs	r0, #1
     cb6:	4249      	negs	r1, r1
     cb8:	4308      	orrs	r0, r1
     cba:	e7d8      	b.n	c6e <__lesf2+0x36>

00000cbc <__aeabi_fmul>:
     cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cbe:	4657      	mov	r7, sl
     cc0:	464e      	mov	r6, r9
     cc2:	4645      	mov	r5, r8
     cc4:	46de      	mov	lr, fp
     cc6:	b5e0      	push	{r5, r6, r7, lr}
     cc8:	0247      	lsls	r7, r0, #9
     cca:	0046      	lsls	r6, r0, #1
     ccc:	4688      	mov	r8, r1
     cce:	0a7f      	lsrs	r7, r7, #9
     cd0:	0e36      	lsrs	r6, r6, #24
     cd2:	0fc4      	lsrs	r4, r0, #31
     cd4:	2e00      	cmp	r6, #0
     cd6:	d047      	beq.n	d68 <__aeabi_fmul+0xac>
     cd8:	2eff      	cmp	r6, #255	; 0xff
     cda:	d024      	beq.n	d26 <__aeabi_fmul+0x6a>
     cdc:	00fb      	lsls	r3, r7, #3
     cde:	2780      	movs	r7, #128	; 0x80
     ce0:	04ff      	lsls	r7, r7, #19
     ce2:	431f      	orrs	r7, r3
     ce4:	2300      	movs	r3, #0
     ce6:	4699      	mov	r9, r3
     ce8:	469a      	mov	sl, r3
     cea:	3e7f      	subs	r6, #127	; 0x7f
     cec:	4643      	mov	r3, r8
     cee:	025d      	lsls	r5, r3, #9
     cf0:	0058      	lsls	r0, r3, #1
     cf2:	0fdb      	lsrs	r3, r3, #31
     cf4:	0a6d      	lsrs	r5, r5, #9
     cf6:	0e00      	lsrs	r0, r0, #24
     cf8:	4698      	mov	r8, r3
     cfa:	d043      	beq.n	d84 <__aeabi_fmul+0xc8>
     cfc:	28ff      	cmp	r0, #255	; 0xff
     cfe:	d03b      	beq.n	d78 <__aeabi_fmul+0xbc>
     d00:	00eb      	lsls	r3, r5, #3
     d02:	2580      	movs	r5, #128	; 0x80
     d04:	2200      	movs	r2, #0
     d06:	04ed      	lsls	r5, r5, #19
     d08:	431d      	orrs	r5, r3
     d0a:	387f      	subs	r0, #127	; 0x7f
     d0c:	1836      	adds	r6, r6, r0
     d0e:	1c73      	adds	r3, r6, #1
     d10:	4641      	mov	r1, r8
     d12:	469b      	mov	fp, r3
     d14:	464b      	mov	r3, r9
     d16:	4061      	eors	r1, r4
     d18:	4313      	orrs	r3, r2
     d1a:	2b0f      	cmp	r3, #15
     d1c:	d864      	bhi.n	de8 <__aeabi_fmul+0x12c>
     d1e:	4875      	ldr	r0, [pc, #468]	; (ef4 <__aeabi_fmul+0x238>)
     d20:	009b      	lsls	r3, r3, #2
     d22:	58c3      	ldr	r3, [r0, r3]
     d24:	469f      	mov	pc, r3
     d26:	2f00      	cmp	r7, #0
     d28:	d142      	bne.n	db0 <__aeabi_fmul+0xf4>
     d2a:	2308      	movs	r3, #8
     d2c:	4699      	mov	r9, r3
     d2e:	3b06      	subs	r3, #6
     d30:	26ff      	movs	r6, #255	; 0xff
     d32:	469a      	mov	sl, r3
     d34:	e7da      	b.n	cec <__aeabi_fmul+0x30>
     d36:	4641      	mov	r1, r8
     d38:	2a02      	cmp	r2, #2
     d3a:	d028      	beq.n	d8e <__aeabi_fmul+0xd2>
     d3c:	2a03      	cmp	r2, #3
     d3e:	d100      	bne.n	d42 <__aeabi_fmul+0x86>
     d40:	e0ce      	b.n	ee0 <__aeabi_fmul+0x224>
     d42:	2a01      	cmp	r2, #1
     d44:	d000      	beq.n	d48 <__aeabi_fmul+0x8c>
     d46:	e0ac      	b.n	ea2 <__aeabi_fmul+0x1e6>
     d48:	4011      	ands	r1, r2
     d4a:	2000      	movs	r0, #0
     d4c:	2200      	movs	r2, #0
     d4e:	b2cc      	uxtb	r4, r1
     d50:	0240      	lsls	r0, r0, #9
     d52:	05d2      	lsls	r2, r2, #23
     d54:	0a40      	lsrs	r0, r0, #9
     d56:	07e4      	lsls	r4, r4, #31
     d58:	4310      	orrs	r0, r2
     d5a:	4320      	orrs	r0, r4
     d5c:	bc3c      	pop	{r2, r3, r4, r5}
     d5e:	4690      	mov	r8, r2
     d60:	4699      	mov	r9, r3
     d62:	46a2      	mov	sl, r4
     d64:	46ab      	mov	fp, r5
     d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d68:	2f00      	cmp	r7, #0
     d6a:	d115      	bne.n	d98 <__aeabi_fmul+0xdc>
     d6c:	2304      	movs	r3, #4
     d6e:	4699      	mov	r9, r3
     d70:	3b03      	subs	r3, #3
     d72:	2600      	movs	r6, #0
     d74:	469a      	mov	sl, r3
     d76:	e7b9      	b.n	cec <__aeabi_fmul+0x30>
     d78:	20ff      	movs	r0, #255	; 0xff
     d7a:	2202      	movs	r2, #2
     d7c:	2d00      	cmp	r5, #0
     d7e:	d0c5      	beq.n	d0c <__aeabi_fmul+0x50>
     d80:	2203      	movs	r2, #3
     d82:	e7c3      	b.n	d0c <__aeabi_fmul+0x50>
     d84:	2d00      	cmp	r5, #0
     d86:	d119      	bne.n	dbc <__aeabi_fmul+0x100>
     d88:	2000      	movs	r0, #0
     d8a:	2201      	movs	r2, #1
     d8c:	e7be      	b.n	d0c <__aeabi_fmul+0x50>
     d8e:	2401      	movs	r4, #1
     d90:	22ff      	movs	r2, #255	; 0xff
     d92:	400c      	ands	r4, r1
     d94:	2000      	movs	r0, #0
     d96:	e7db      	b.n	d50 <__aeabi_fmul+0x94>
     d98:	0038      	movs	r0, r7
     d9a:	f001 febb 	bl	2b14 <__clzsi2>
     d9e:	2676      	movs	r6, #118	; 0x76
     da0:	1f43      	subs	r3, r0, #5
     da2:	409f      	lsls	r7, r3
     da4:	2300      	movs	r3, #0
     da6:	4276      	negs	r6, r6
     da8:	1a36      	subs	r6, r6, r0
     daa:	4699      	mov	r9, r3
     dac:	469a      	mov	sl, r3
     dae:	e79d      	b.n	cec <__aeabi_fmul+0x30>
     db0:	230c      	movs	r3, #12
     db2:	4699      	mov	r9, r3
     db4:	3b09      	subs	r3, #9
     db6:	26ff      	movs	r6, #255	; 0xff
     db8:	469a      	mov	sl, r3
     dba:	e797      	b.n	cec <__aeabi_fmul+0x30>
     dbc:	0028      	movs	r0, r5
     dbe:	f001 fea9 	bl	2b14 <__clzsi2>
     dc2:	1f43      	subs	r3, r0, #5
     dc4:	409d      	lsls	r5, r3
     dc6:	2376      	movs	r3, #118	; 0x76
     dc8:	425b      	negs	r3, r3
     dca:	1a18      	subs	r0, r3, r0
     dcc:	2200      	movs	r2, #0
     dce:	e79d      	b.n	d0c <__aeabi_fmul+0x50>
     dd0:	2080      	movs	r0, #128	; 0x80
     dd2:	2400      	movs	r4, #0
     dd4:	03c0      	lsls	r0, r0, #15
     dd6:	22ff      	movs	r2, #255	; 0xff
     dd8:	e7ba      	b.n	d50 <__aeabi_fmul+0x94>
     dda:	003d      	movs	r5, r7
     ddc:	4652      	mov	r2, sl
     dde:	e7ab      	b.n	d38 <__aeabi_fmul+0x7c>
     de0:	003d      	movs	r5, r7
     de2:	0021      	movs	r1, r4
     de4:	4652      	mov	r2, sl
     de6:	e7a7      	b.n	d38 <__aeabi_fmul+0x7c>
     de8:	0c3b      	lsrs	r3, r7, #16
     dea:	469c      	mov	ip, r3
     dec:	042a      	lsls	r2, r5, #16
     dee:	0c12      	lsrs	r2, r2, #16
     df0:	0c2b      	lsrs	r3, r5, #16
     df2:	0014      	movs	r4, r2
     df4:	4660      	mov	r0, ip
     df6:	4665      	mov	r5, ip
     df8:	043f      	lsls	r7, r7, #16
     dfa:	0c3f      	lsrs	r7, r7, #16
     dfc:	437c      	muls	r4, r7
     dfe:	4342      	muls	r2, r0
     e00:	435d      	muls	r5, r3
     e02:	437b      	muls	r3, r7
     e04:	0c27      	lsrs	r7, r4, #16
     e06:	189b      	adds	r3, r3, r2
     e08:	18ff      	adds	r7, r7, r3
     e0a:	42ba      	cmp	r2, r7
     e0c:	d903      	bls.n	e16 <__aeabi_fmul+0x15a>
     e0e:	2380      	movs	r3, #128	; 0x80
     e10:	025b      	lsls	r3, r3, #9
     e12:	469c      	mov	ip, r3
     e14:	4465      	add	r5, ip
     e16:	0424      	lsls	r4, r4, #16
     e18:	043a      	lsls	r2, r7, #16
     e1a:	0c24      	lsrs	r4, r4, #16
     e1c:	1912      	adds	r2, r2, r4
     e1e:	0193      	lsls	r3, r2, #6
     e20:	1e5c      	subs	r4, r3, #1
     e22:	41a3      	sbcs	r3, r4
     e24:	0c3f      	lsrs	r7, r7, #16
     e26:	0e92      	lsrs	r2, r2, #26
     e28:	197d      	adds	r5, r7, r5
     e2a:	431a      	orrs	r2, r3
     e2c:	01ad      	lsls	r5, r5, #6
     e2e:	4315      	orrs	r5, r2
     e30:	012b      	lsls	r3, r5, #4
     e32:	d504      	bpl.n	e3e <__aeabi_fmul+0x182>
     e34:	2301      	movs	r3, #1
     e36:	465e      	mov	r6, fp
     e38:	086a      	lsrs	r2, r5, #1
     e3a:	401d      	ands	r5, r3
     e3c:	4315      	orrs	r5, r2
     e3e:	0032      	movs	r2, r6
     e40:	327f      	adds	r2, #127	; 0x7f
     e42:	2a00      	cmp	r2, #0
     e44:	dd25      	ble.n	e92 <__aeabi_fmul+0x1d6>
     e46:	076b      	lsls	r3, r5, #29
     e48:	d004      	beq.n	e54 <__aeabi_fmul+0x198>
     e4a:	230f      	movs	r3, #15
     e4c:	402b      	ands	r3, r5
     e4e:	2b04      	cmp	r3, #4
     e50:	d000      	beq.n	e54 <__aeabi_fmul+0x198>
     e52:	3504      	adds	r5, #4
     e54:	012b      	lsls	r3, r5, #4
     e56:	d503      	bpl.n	e60 <__aeabi_fmul+0x1a4>
     e58:	0032      	movs	r2, r6
     e5a:	4b27      	ldr	r3, [pc, #156]	; (ef8 <__aeabi_fmul+0x23c>)
     e5c:	3280      	adds	r2, #128	; 0x80
     e5e:	401d      	ands	r5, r3
     e60:	2afe      	cmp	r2, #254	; 0xfe
     e62:	dc94      	bgt.n	d8e <__aeabi_fmul+0xd2>
     e64:	2401      	movs	r4, #1
     e66:	01a8      	lsls	r0, r5, #6
     e68:	0a40      	lsrs	r0, r0, #9
     e6a:	b2d2      	uxtb	r2, r2
     e6c:	400c      	ands	r4, r1
     e6e:	e76f      	b.n	d50 <__aeabi_fmul+0x94>
     e70:	2080      	movs	r0, #128	; 0x80
     e72:	03c0      	lsls	r0, r0, #15
     e74:	4207      	tst	r7, r0
     e76:	d007      	beq.n	e88 <__aeabi_fmul+0x1cc>
     e78:	4205      	tst	r5, r0
     e7a:	d105      	bne.n	e88 <__aeabi_fmul+0x1cc>
     e7c:	4328      	orrs	r0, r5
     e7e:	0240      	lsls	r0, r0, #9
     e80:	0a40      	lsrs	r0, r0, #9
     e82:	4644      	mov	r4, r8
     e84:	22ff      	movs	r2, #255	; 0xff
     e86:	e763      	b.n	d50 <__aeabi_fmul+0x94>
     e88:	4338      	orrs	r0, r7
     e8a:	0240      	lsls	r0, r0, #9
     e8c:	0a40      	lsrs	r0, r0, #9
     e8e:	22ff      	movs	r2, #255	; 0xff
     e90:	e75e      	b.n	d50 <__aeabi_fmul+0x94>
     e92:	2401      	movs	r4, #1
     e94:	1aa3      	subs	r3, r4, r2
     e96:	2b1b      	cmp	r3, #27
     e98:	dd05      	ble.n	ea6 <__aeabi_fmul+0x1ea>
     e9a:	400c      	ands	r4, r1
     e9c:	2200      	movs	r2, #0
     e9e:	2000      	movs	r0, #0
     ea0:	e756      	b.n	d50 <__aeabi_fmul+0x94>
     ea2:	465e      	mov	r6, fp
     ea4:	e7cb      	b.n	e3e <__aeabi_fmul+0x182>
     ea6:	002a      	movs	r2, r5
     ea8:	2020      	movs	r0, #32
     eaa:	40da      	lsrs	r2, r3
     eac:	1ac3      	subs	r3, r0, r3
     eae:	409d      	lsls	r5, r3
     eb0:	002b      	movs	r3, r5
     eb2:	1e5d      	subs	r5, r3, #1
     eb4:	41ab      	sbcs	r3, r5
     eb6:	4313      	orrs	r3, r2
     eb8:	075a      	lsls	r2, r3, #29
     eba:	d004      	beq.n	ec6 <__aeabi_fmul+0x20a>
     ebc:	220f      	movs	r2, #15
     ebe:	401a      	ands	r2, r3
     ec0:	2a04      	cmp	r2, #4
     ec2:	d000      	beq.n	ec6 <__aeabi_fmul+0x20a>
     ec4:	3304      	adds	r3, #4
     ec6:	015a      	lsls	r2, r3, #5
     ec8:	d504      	bpl.n	ed4 <__aeabi_fmul+0x218>
     eca:	2401      	movs	r4, #1
     ecc:	2201      	movs	r2, #1
     ece:	400c      	ands	r4, r1
     ed0:	2000      	movs	r0, #0
     ed2:	e73d      	b.n	d50 <__aeabi_fmul+0x94>
     ed4:	2401      	movs	r4, #1
     ed6:	019b      	lsls	r3, r3, #6
     ed8:	0a58      	lsrs	r0, r3, #9
     eda:	400c      	ands	r4, r1
     edc:	2200      	movs	r2, #0
     ede:	e737      	b.n	d50 <__aeabi_fmul+0x94>
     ee0:	2080      	movs	r0, #128	; 0x80
     ee2:	2401      	movs	r4, #1
     ee4:	03c0      	lsls	r0, r0, #15
     ee6:	4328      	orrs	r0, r5
     ee8:	0240      	lsls	r0, r0, #9
     eea:	0a40      	lsrs	r0, r0, #9
     eec:	400c      	ands	r4, r1
     eee:	22ff      	movs	r2, #255	; 0xff
     ef0:	e72e      	b.n	d50 <__aeabi_fmul+0x94>
     ef2:	46c0      	nop			; (mov r8, r8)
     ef4:	0000df74 	.word	0x0000df74
     ef8:	f7ffffff 	.word	0xf7ffffff

00000efc <__aeabi_fsub>:
     efc:	b5f0      	push	{r4, r5, r6, r7, lr}
     efe:	464f      	mov	r7, r9
     f00:	46d6      	mov	lr, sl
     f02:	4646      	mov	r6, r8
     f04:	0044      	lsls	r4, r0, #1
     f06:	b5c0      	push	{r6, r7, lr}
     f08:	0fc2      	lsrs	r2, r0, #31
     f0a:	0247      	lsls	r7, r0, #9
     f0c:	0248      	lsls	r0, r1, #9
     f0e:	0a40      	lsrs	r0, r0, #9
     f10:	4684      	mov	ip, r0
     f12:	4666      	mov	r6, ip
     f14:	0a7b      	lsrs	r3, r7, #9
     f16:	0048      	lsls	r0, r1, #1
     f18:	0fc9      	lsrs	r1, r1, #31
     f1a:	469a      	mov	sl, r3
     f1c:	0e24      	lsrs	r4, r4, #24
     f1e:	0015      	movs	r5, r2
     f20:	00db      	lsls	r3, r3, #3
     f22:	0e00      	lsrs	r0, r0, #24
     f24:	4689      	mov	r9, r1
     f26:	00f6      	lsls	r6, r6, #3
     f28:	28ff      	cmp	r0, #255	; 0xff
     f2a:	d100      	bne.n	f2e <__aeabi_fsub+0x32>
     f2c:	e08f      	b.n	104e <__aeabi_fsub+0x152>
     f2e:	2101      	movs	r1, #1
     f30:	464f      	mov	r7, r9
     f32:	404f      	eors	r7, r1
     f34:	0039      	movs	r1, r7
     f36:	4291      	cmp	r1, r2
     f38:	d066      	beq.n	1008 <__aeabi_fsub+0x10c>
     f3a:	1a22      	subs	r2, r4, r0
     f3c:	2a00      	cmp	r2, #0
     f3e:	dc00      	bgt.n	f42 <__aeabi_fsub+0x46>
     f40:	e09d      	b.n	107e <__aeabi_fsub+0x182>
     f42:	2800      	cmp	r0, #0
     f44:	d13d      	bne.n	fc2 <__aeabi_fsub+0xc6>
     f46:	2e00      	cmp	r6, #0
     f48:	d100      	bne.n	f4c <__aeabi_fsub+0x50>
     f4a:	e08b      	b.n	1064 <__aeabi_fsub+0x168>
     f4c:	1e51      	subs	r1, r2, #1
     f4e:	2900      	cmp	r1, #0
     f50:	d000      	beq.n	f54 <__aeabi_fsub+0x58>
     f52:	e0b5      	b.n	10c0 <__aeabi_fsub+0x1c4>
     f54:	2401      	movs	r4, #1
     f56:	1b9b      	subs	r3, r3, r6
     f58:	015a      	lsls	r2, r3, #5
     f5a:	d544      	bpl.n	fe6 <__aeabi_fsub+0xea>
     f5c:	019b      	lsls	r3, r3, #6
     f5e:	099f      	lsrs	r7, r3, #6
     f60:	0038      	movs	r0, r7
     f62:	f001 fdd7 	bl	2b14 <__clzsi2>
     f66:	3805      	subs	r0, #5
     f68:	4087      	lsls	r7, r0
     f6a:	4284      	cmp	r4, r0
     f6c:	dd00      	ble.n	f70 <__aeabi_fsub+0x74>
     f6e:	e096      	b.n	109e <__aeabi_fsub+0x1a2>
     f70:	1b04      	subs	r4, r0, r4
     f72:	003a      	movs	r2, r7
     f74:	2020      	movs	r0, #32
     f76:	3401      	adds	r4, #1
     f78:	40e2      	lsrs	r2, r4
     f7a:	1b04      	subs	r4, r0, r4
     f7c:	40a7      	lsls	r7, r4
     f7e:	003b      	movs	r3, r7
     f80:	1e5f      	subs	r7, r3, #1
     f82:	41bb      	sbcs	r3, r7
     f84:	2400      	movs	r4, #0
     f86:	4313      	orrs	r3, r2
     f88:	075a      	lsls	r2, r3, #29
     f8a:	d004      	beq.n	f96 <__aeabi_fsub+0x9a>
     f8c:	220f      	movs	r2, #15
     f8e:	401a      	ands	r2, r3
     f90:	2a04      	cmp	r2, #4
     f92:	d000      	beq.n	f96 <__aeabi_fsub+0x9a>
     f94:	3304      	adds	r3, #4
     f96:	015a      	lsls	r2, r3, #5
     f98:	d527      	bpl.n	fea <__aeabi_fsub+0xee>
     f9a:	3401      	adds	r4, #1
     f9c:	2cff      	cmp	r4, #255	; 0xff
     f9e:	d100      	bne.n	fa2 <__aeabi_fsub+0xa6>
     fa0:	e079      	b.n	1096 <__aeabi_fsub+0x19a>
     fa2:	2201      	movs	r2, #1
     fa4:	019b      	lsls	r3, r3, #6
     fa6:	0a5b      	lsrs	r3, r3, #9
     fa8:	b2e4      	uxtb	r4, r4
     faa:	402a      	ands	r2, r5
     fac:	025b      	lsls	r3, r3, #9
     fae:	05e4      	lsls	r4, r4, #23
     fb0:	0a58      	lsrs	r0, r3, #9
     fb2:	07d2      	lsls	r2, r2, #31
     fb4:	4320      	orrs	r0, r4
     fb6:	4310      	orrs	r0, r2
     fb8:	bc1c      	pop	{r2, r3, r4}
     fba:	4690      	mov	r8, r2
     fbc:	4699      	mov	r9, r3
     fbe:	46a2      	mov	sl, r4
     fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fc2:	2cff      	cmp	r4, #255	; 0xff
     fc4:	d0e0      	beq.n	f88 <__aeabi_fsub+0x8c>
     fc6:	2180      	movs	r1, #128	; 0x80
     fc8:	04c9      	lsls	r1, r1, #19
     fca:	430e      	orrs	r6, r1
     fcc:	2a1b      	cmp	r2, #27
     fce:	dc7b      	bgt.n	10c8 <__aeabi_fsub+0x1cc>
     fd0:	0031      	movs	r1, r6
     fd2:	2020      	movs	r0, #32
     fd4:	40d1      	lsrs	r1, r2
     fd6:	1a82      	subs	r2, r0, r2
     fd8:	4096      	lsls	r6, r2
     fda:	1e72      	subs	r2, r6, #1
     fdc:	4196      	sbcs	r6, r2
     fde:	430e      	orrs	r6, r1
     fe0:	1b9b      	subs	r3, r3, r6
     fe2:	015a      	lsls	r2, r3, #5
     fe4:	d4ba      	bmi.n	f5c <__aeabi_fsub+0x60>
     fe6:	075a      	lsls	r2, r3, #29
     fe8:	d1d0      	bne.n	f8c <__aeabi_fsub+0x90>
     fea:	2201      	movs	r2, #1
     fec:	08df      	lsrs	r7, r3, #3
     fee:	402a      	ands	r2, r5
     ff0:	2cff      	cmp	r4, #255	; 0xff
     ff2:	d133      	bne.n	105c <__aeabi_fsub+0x160>
     ff4:	2f00      	cmp	r7, #0
     ff6:	d100      	bne.n	ffa <__aeabi_fsub+0xfe>
     ff8:	e0a8      	b.n	114c <__aeabi_fsub+0x250>
     ffa:	2380      	movs	r3, #128	; 0x80
     ffc:	03db      	lsls	r3, r3, #15
     ffe:	433b      	orrs	r3, r7
    1000:	025b      	lsls	r3, r3, #9
    1002:	0a5b      	lsrs	r3, r3, #9
    1004:	24ff      	movs	r4, #255	; 0xff
    1006:	e7d1      	b.n	fac <__aeabi_fsub+0xb0>
    1008:	1a21      	subs	r1, r4, r0
    100a:	2900      	cmp	r1, #0
    100c:	dd4c      	ble.n	10a8 <__aeabi_fsub+0x1ac>
    100e:	2800      	cmp	r0, #0
    1010:	d02a      	beq.n	1068 <__aeabi_fsub+0x16c>
    1012:	2cff      	cmp	r4, #255	; 0xff
    1014:	d0b8      	beq.n	f88 <__aeabi_fsub+0x8c>
    1016:	2080      	movs	r0, #128	; 0x80
    1018:	04c0      	lsls	r0, r0, #19
    101a:	4306      	orrs	r6, r0
    101c:	291b      	cmp	r1, #27
    101e:	dd00      	ble.n	1022 <__aeabi_fsub+0x126>
    1020:	e0af      	b.n	1182 <__aeabi_fsub+0x286>
    1022:	0030      	movs	r0, r6
    1024:	2720      	movs	r7, #32
    1026:	40c8      	lsrs	r0, r1
    1028:	1a79      	subs	r1, r7, r1
    102a:	408e      	lsls	r6, r1
    102c:	1e71      	subs	r1, r6, #1
    102e:	418e      	sbcs	r6, r1
    1030:	4306      	orrs	r6, r0
    1032:	199b      	adds	r3, r3, r6
    1034:	0159      	lsls	r1, r3, #5
    1036:	d5d6      	bpl.n	fe6 <__aeabi_fsub+0xea>
    1038:	3401      	adds	r4, #1
    103a:	2cff      	cmp	r4, #255	; 0xff
    103c:	d100      	bne.n	1040 <__aeabi_fsub+0x144>
    103e:	e085      	b.n	114c <__aeabi_fsub+0x250>
    1040:	2201      	movs	r2, #1
    1042:	497a      	ldr	r1, [pc, #488]	; (122c <__aeabi_fsub+0x330>)
    1044:	401a      	ands	r2, r3
    1046:	085b      	lsrs	r3, r3, #1
    1048:	400b      	ands	r3, r1
    104a:	4313      	orrs	r3, r2
    104c:	e79c      	b.n	f88 <__aeabi_fsub+0x8c>
    104e:	2e00      	cmp	r6, #0
    1050:	d000      	beq.n	1054 <__aeabi_fsub+0x158>
    1052:	e770      	b.n	f36 <__aeabi_fsub+0x3a>
    1054:	e76b      	b.n	f2e <__aeabi_fsub+0x32>
    1056:	1e3b      	subs	r3, r7, #0
    1058:	d1c5      	bne.n	fe6 <__aeabi_fsub+0xea>
    105a:	2200      	movs	r2, #0
    105c:	027b      	lsls	r3, r7, #9
    105e:	0a5b      	lsrs	r3, r3, #9
    1060:	b2e4      	uxtb	r4, r4
    1062:	e7a3      	b.n	fac <__aeabi_fsub+0xb0>
    1064:	0014      	movs	r4, r2
    1066:	e78f      	b.n	f88 <__aeabi_fsub+0x8c>
    1068:	2e00      	cmp	r6, #0
    106a:	d04d      	beq.n	1108 <__aeabi_fsub+0x20c>
    106c:	1e48      	subs	r0, r1, #1
    106e:	2800      	cmp	r0, #0
    1070:	d157      	bne.n	1122 <__aeabi_fsub+0x226>
    1072:	199b      	adds	r3, r3, r6
    1074:	2401      	movs	r4, #1
    1076:	015a      	lsls	r2, r3, #5
    1078:	d5b5      	bpl.n	fe6 <__aeabi_fsub+0xea>
    107a:	2402      	movs	r4, #2
    107c:	e7e0      	b.n	1040 <__aeabi_fsub+0x144>
    107e:	2a00      	cmp	r2, #0
    1080:	d125      	bne.n	10ce <__aeabi_fsub+0x1d2>
    1082:	1c62      	adds	r2, r4, #1
    1084:	b2d2      	uxtb	r2, r2
    1086:	2a01      	cmp	r2, #1
    1088:	dd72      	ble.n	1170 <__aeabi_fsub+0x274>
    108a:	1b9f      	subs	r7, r3, r6
    108c:	017a      	lsls	r2, r7, #5
    108e:	d535      	bpl.n	10fc <__aeabi_fsub+0x200>
    1090:	1af7      	subs	r7, r6, r3
    1092:	000d      	movs	r5, r1
    1094:	e764      	b.n	f60 <__aeabi_fsub+0x64>
    1096:	2201      	movs	r2, #1
    1098:	2300      	movs	r3, #0
    109a:	402a      	ands	r2, r5
    109c:	e786      	b.n	fac <__aeabi_fsub+0xb0>
    109e:	003b      	movs	r3, r7
    10a0:	4a63      	ldr	r2, [pc, #396]	; (1230 <__aeabi_fsub+0x334>)
    10a2:	1a24      	subs	r4, r4, r0
    10a4:	4013      	ands	r3, r2
    10a6:	e76f      	b.n	f88 <__aeabi_fsub+0x8c>
    10a8:	2900      	cmp	r1, #0
    10aa:	d16c      	bne.n	1186 <__aeabi_fsub+0x28a>
    10ac:	1c61      	adds	r1, r4, #1
    10ae:	b2c8      	uxtb	r0, r1
    10b0:	2801      	cmp	r0, #1
    10b2:	dd4e      	ble.n	1152 <__aeabi_fsub+0x256>
    10b4:	29ff      	cmp	r1, #255	; 0xff
    10b6:	d049      	beq.n	114c <__aeabi_fsub+0x250>
    10b8:	199b      	adds	r3, r3, r6
    10ba:	085b      	lsrs	r3, r3, #1
    10bc:	000c      	movs	r4, r1
    10be:	e763      	b.n	f88 <__aeabi_fsub+0x8c>
    10c0:	2aff      	cmp	r2, #255	; 0xff
    10c2:	d041      	beq.n	1148 <__aeabi_fsub+0x24c>
    10c4:	000a      	movs	r2, r1
    10c6:	e781      	b.n	fcc <__aeabi_fsub+0xd0>
    10c8:	2601      	movs	r6, #1
    10ca:	1b9b      	subs	r3, r3, r6
    10cc:	e789      	b.n	fe2 <__aeabi_fsub+0xe6>
    10ce:	2c00      	cmp	r4, #0
    10d0:	d01c      	beq.n	110c <__aeabi_fsub+0x210>
    10d2:	28ff      	cmp	r0, #255	; 0xff
    10d4:	d021      	beq.n	111a <__aeabi_fsub+0x21e>
    10d6:	2480      	movs	r4, #128	; 0x80
    10d8:	04e4      	lsls	r4, r4, #19
    10da:	4252      	negs	r2, r2
    10dc:	4323      	orrs	r3, r4
    10de:	2a1b      	cmp	r2, #27
    10e0:	dd00      	ble.n	10e4 <__aeabi_fsub+0x1e8>
    10e2:	e096      	b.n	1212 <__aeabi_fsub+0x316>
    10e4:	001c      	movs	r4, r3
    10e6:	2520      	movs	r5, #32
    10e8:	40d4      	lsrs	r4, r2
    10ea:	1aaa      	subs	r2, r5, r2
    10ec:	4093      	lsls	r3, r2
    10ee:	1e5a      	subs	r2, r3, #1
    10f0:	4193      	sbcs	r3, r2
    10f2:	4323      	orrs	r3, r4
    10f4:	1af3      	subs	r3, r6, r3
    10f6:	0004      	movs	r4, r0
    10f8:	000d      	movs	r5, r1
    10fa:	e72d      	b.n	f58 <__aeabi_fsub+0x5c>
    10fc:	2f00      	cmp	r7, #0
    10fe:	d000      	beq.n	1102 <__aeabi_fsub+0x206>
    1100:	e72e      	b.n	f60 <__aeabi_fsub+0x64>
    1102:	2200      	movs	r2, #0
    1104:	2400      	movs	r4, #0
    1106:	e7a9      	b.n	105c <__aeabi_fsub+0x160>
    1108:	000c      	movs	r4, r1
    110a:	e73d      	b.n	f88 <__aeabi_fsub+0x8c>
    110c:	2b00      	cmp	r3, #0
    110e:	d058      	beq.n	11c2 <__aeabi_fsub+0x2c6>
    1110:	43d2      	mvns	r2, r2
    1112:	2a00      	cmp	r2, #0
    1114:	d0ee      	beq.n	10f4 <__aeabi_fsub+0x1f8>
    1116:	28ff      	cmp	r0, #255	; 0xff
    1118:	d1e1      	bne.n	10de <__aeabi_fsub+0x1e2>
    111a:	0033      	movs	r3, r6
    111c:	24ff      	movs	r4, #255	; 0xff
    111e:	000d      	movs	r5, r1
    1120:	e732      	b.n	f88 <__aeabi_fsub+0x8c>
    1122:	29ff      	cmp	r1, #255	; 0xff
    1124:	d010      	beq.n	1148 <__aeabi_fsub+0x24c>
    1126:	0001      	movs	r1, r0
    1128:	e778      	b.n	101c <__aeabi_fsub+0x120>
    112a:	2b00      	cmp	r3, #0
    112c:	d06e      	beq.n	120c <__aeabi_fsub+0x310>
    112e:	24ff      	movs	r4, #255	; 0xff
    1130:	2e00      	cmp	r6, #0
    1132:	d100      	bne.n	1136 <__aeabi_fsub+0x23a>
    1134:	e728      	b.n	f88 <__aeabi_fsub+0x8c>
    1136:	2280      	movs	r2, #128	; 0x80
    1138:	4651      	mov	r1, sl
    113a:	03d2      	lsls	r2, r2, #15
    113c:	4211      	tst	r1, r2
    113e:	d003      	beq.n	1148 <__aeabi_fsub+0x24c>
    1140:	4661      	mov	r1, ip
    1142:	4211      	tst	r1, r2
    1144:	d100      	bne.n	1148 <__aeabi_fsub+0x24c>
    1146:	0033      	movs	r3, r6
    1148:	24ff      	movs	r4, #255	; 0xff
    114a:	e71d      	b.n	f88 <__aeabi_fsub+0x8c>
    114c:	24ff      	movs	r4, #255	; 0xff
    114e:	2300      	movs	r3, #0
    1150:	e72c      	b.n	fac <__aeabi_fsub+0xb0>
    1152:	2c00      	cmp	r4, #0
    1154:	d1e9      	bne.n	112a <__aeabi_fsub+0x22e>
    1156:	2b00      	cmp	r3, #0
    1158:	d063      	beq.n	1222 <__aeabi_fsub+0x326>
    115a:	2e00      	cmp	r6, #0
    115c:	d100      	bne.n	1160 <__aeabi_fsub+0x264>
    115e:	e713      	b.n	f88 <__aeabi_fsub+0x8c>
    1160:	199b      	adds	r3, r3, r6
    1162:	015a      	lsls	r2, r3, #5
    1164:	d400      	bmi.n	1168 <__aeabi_fsub+0x26c>
    1166:	e73e      	b.n	fe6 <__aeabi_fsub+0xea>
    1168:	4a31      	ldr	r2, [pc, #196]	; (1230 <__aeabi_fsub+0x334>)
    116a:	000c      	movs	r4, r1
    116c:	4013      	ands	r3, r2
    116e:	e70b      	b.n	f88 <__aeabi_fsub+0x8c>
    1170:	2c00      	cmp	r4, #0
    1172:	d11e      	bne.n	11b2 <__aeabi_fsub+0x2b6>
    1174:	2b00      	cmp	r3, #0
    1176:	d12f      	bne.n	11d8 <__aeabi_fsub+0x2dc>
    1178:	2e00      	cmp	r6, #0
    117a:	d04f      	beq.n	121c <__aeabi_fsub+0x320>
    117c:	0033      	movs	r3, r6
    117e:	000d      	movs	r5, r1
    1180:	e702      	b.n	f88 <__aeabi_fsub+0x8c>
    1182:	2601      	movs	r6, #1
    1184:	e755      	b.n	1032 <__aeabi_fsub+0x136>
    1186:	2c00      	cmp	r4, #0
    1188:	d11f      	bne.n	11ca <__aeabi_fsub+0x2ce>
    118a:	2b00      	cmp	r3, #0
    118c:	d043      	beq.n	1216 <__aeabi_fsub+0x31a>
    118e:	43c9      	mvns	r1, r1
    1190:	2900      	cmp	r1, #0
    1192:	d00b      	beq.n	11ac <__aeabi_fsub+0x2b0>
    1194:	28ff      	cmp	r0, #255	; 0xff
    1196:	d039      	beq.n	120c <__aeabi_fsub+0x310>
    1198:	291b      	cmp	r1, #27
    119a:	dc44      	bgt.n	1226 <__aeabi_fsub+0x32a>
    119c:	001c      	movs	r4, r3
    119e:	2720      	movs	r7, #32
    11a0:	40cc      	lsrs	r4, r1
    11a2:	1a79      	subs	r1, r7, r1
    11a4:	408b      	lsls	r3, r1
    11a6:	1e59      	subs	r1, r3, #1
    11a8:	418b      	sbcs	r3, r1
    11aa:	4323      	orrs	r3, r4
    11ac:	199b      	adds	r3, r3, r6
    11ae:	0004      	movs	r4, r0
    11b0:	e740      	b.n	1034 <__aeabi_fsub+0x138>
    11b2:	2b00      	cmp	r3, #0
    11b4:	d11a      	bne.n	11ec <__aeabi_fsub+0x2f0>
    11b6:	2e00      	cmp	r6, #0
    11b8:	d124      	bne.n	1204 <__aeabi_fsub+0x308>
    11ba:	2780      	movs	r7, #128	; 0x80
    11bc:	2200      	movs	r2, #0
    11be:	03ff      	lsls	r7, r7, #15
    11c0:	e71b      	b.n	ffa <__aeabi_fsub+0xfe>
    11c2:	0033      	movs	r3, r6
    11c4:	0004      	movs	r4, r0
    11c6:	000d      	movs	r5, r1
    11c8:	e6de      	b.n	f88 <__aeabi_fsub+0x8c>
    11ca:	28ff      	cmp	r0, #255	; 0xff
    11cc:	d01e      	beq.n	120c <__aeabi_fsub+0x310>
    11ce:	2480      	movs	r4, #128	; 0x80
    11d0:	04e4      	lsls	r4, r4, #19
    11d2:	4249      	negs	r1, r1
    11d4:	4323      	orrs	r3, r4
    11d6:	e7df      	b.n	1198 <__aeabi_fsub+0x29c>
    11d8:	2e00      	cmp	r6, #0
    11da:	d100      	bne.n	11de <__aeabi_fsub+0x2e2>
    11dc:	e6d4      	b.n	f88 <__aeabi_fsub+0x8c>
    11de:	1b9f      	subs	r7, r3, r6
    11e0:	017a      	lsls	r2, r7, #5
    11e2:	d400      	bmi.n	11e6 <__aeabi_fsub+0x2ea>
    11e4:	e737      	b.n	1056 <__aeabi_fsub+0x15a>
    11e6:	1af3      	subs	r3, r6, r3
    11e8:	000d      	movs	r5, r1
    11ea:	e6cd      	b.n	f88 <__aeabi_fsub+0x8c>
    11ec:	24ff      	movs	r4, #255	; 0xff
    11ee:	2e00      	cmp	r6, #0
    11f0:	d100      	bne.n	11f4 <__aeabi_fsub+0x2f8>
    11f2:	e6c9      	b.n	f88 <__aeabi_fsub+0x8c>
    11f4:	2280      	movs	r2, #128	; 0x80
    11f6:	4650      	mov	r0, sl
    11f8:	03d2      	lsls	r2, r2, #15
    11fa:	4210      	tst	r0, r2
    11fc:	d0a4      	beq.n	1148 <__aeabi_fsub+0x24c>
    11fe:	4660      	mov	r0, ip
    1200:	4210      	tst	r0, r2
    1202:	d1a1      	bne.n	1148 <__aeabi_fsub+0x24c>
    1204:	0033      	movs	r3, r6
    1206:	000d      	movs	r5, r1
    1208:	24ff      	movs	r4, #255	; 0xff
    120a:	e6bd      	b.n	f88 <__aeabi_fsub+0x8c>
    120c:	0033      	movs	r3, r6
    120e:	24ff      	movs	r4, #255	; 0xff
    1210:	e6ba      	b.n	f88 <__aeabi_fsub+0x8c>
    1212:	2301      	movs	r3, #1
    1214:	e76e      	b.n	10f4 <__aeabi_fsub+0x1f8>
    1216:	0033      	movs	r3, r6
    1218:	0004      	movs	r4, r0
    121a:	e6b5      	b.n	f88 <__aeabi_fsub+0x8c>
    121c:	2700      	movs	r7, #0
    121e:	2200      	movs	r2, #0
    1220:	e71c      	b.n	105c <__aeabi_fsub+0x160>
    1222:	0033      	movs	r3, r6
    1224:	e6b0      	b.n	f88 <__aeabi_fsub+0x8c>
    1226:	2301      	movs	r3, #1
    1228:	e7c0      	b.n	11ac <__aeabi_fsub+0x2b0>
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	7dffffff 	.word	0x7dffffff
    1230:	fbffffff 	.word	0xfbffffff

00001234 <__aeabi_fcmpun>:
    1234:	0242      	lsls	r2, r0, #9
    1236:	024b      	lsls	r3, r1, #9
    1238:	0040      	lsls	r0, r0, #1
    123a:	0049      	lsls	r1, r1, #1
    123c:	0a52      	lsrs	r2, r2, #9
    123e:	0e00      	lsrs	r0, r0, #24
    1240:	0a5b      	lsrs	r3, r3, #9
    1242:	0e09      	lsrs	r1, r1, #24
    1244:	28ff      	cmp	r0, #255	; 0xff
    1246:	d003      	beq.n	1250 <__aeabi_fcmpun+0x1c>
    1248:	2000      	movs	r0, #0
    124a:	29ff      	cmp	r1, #255	; 0xff
    124c:	d006      	beq.n	125c <__aeabi_fcmpun+0x28>
    124e:	4770      	bx	lr
    1250:	38fe      	subs	r0, #254	; 0xfe
    1252:	2a00      	cmp	r2, #0
    1254:	d1fb      	bne.n	124e <__aeabi_fcmpun+0x1a>
    1256:	2000      	movs	r0, #0
    1258:	29ff      	cmp	r1, #255	; 0xff
    125a:	d1f8      	bne.n	124e <__aeabi_fcmpun+0x1a>
    125c:	0018      	movs	r0, r3
    125e:	1e43      	subs	r3, r0, #1
    1260:	4198      	sbcs	r0, r3
    1262:	e7f4      	b.n	124e <__aeabi_fcmpun+0x1a>

00001264 <__aeabi_f2iz>:
    1264:	0241      	lsls	r1, r0, #9
    1266:	0043      	lsls	r3, r0, #1
    1268:	0fc2      	lsrs	r2, r0, #31
    126a:	0a49      	lsrs	r1, r1, #9
    126c:	0e1b      	lsrs	r3, r3, #24
    126e:	2000      	movs	r0, #0
    1270:	2b7e      	cmp	r3, #126	; 0x7e
    1272:	dd0d      	ble.n	1290 <__aeabi_f2iz+0x2c>
    1274:	2b9d      	cmp	r3, #157	; 0x9d
    1276:	dc0c      	bgt.n	1292 <__aeabi_f2iz+0x2e>
    1278:	2080      	movs	r0, #128	; 0x80
    127a:	0400      	lsls	r0, r0, #16
    127c:	4301      	orrs	r1, r0
    127e:	2b95      	cmp	r3, #149	; 0x95
    1280:	dc0a      	bgt.n	1298 <__aeabi_f2iz+0x34>
    1282:	2096      	movs	r0, #150	; 0x96
    1284:	1ac3      	subs	r3, r0, r3
    1286:	40d9      	lsrs	r1, r3
    1288:	4248      	negs	r0, r1
    128a:	2a00      	cmp	r2, #0
    128c:	d100      	bne.n	1290 <__aeabi_f2iz+0x2c>
    128e:	0008      	movs	r0, r1
    1290:	4770      	bx	lr
    1292:	4b03      	ldr	r3, [pc, #12]	; (12a0 <__aeabi_f2iz+0x3c>)
    1294:	18d0      	adds	r0, r2, r3
    1296:	e7fb      	b.n	1290 <__aeabi_f2iz+0x2c>
    1298:	3b96      	subs	r3, #150	; 0x96
    129a:	4099      	lsls	r1, r3
    129c:	e7f4      	b.n	1288 <__aeabi_f2iz+0x24>
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	7fffffff 	.word	0x7fffffff

000012a4 <__aeabi_i2f>:
    12a4:	b570      	push	{r4, r5, r6, lr}
    12a6:	2800      	cmp	r0, #0
    12a8:	d030      	beq.n	130c <__aeabi_i2f+0x68>
    12aa:	17c3      	asrs	r3, r0, #31
    12ac:	18c4      	adds	r4, r0, r3
    12ae:	405c      	eors	r4, r3
    12b0:	0fc5      	lsrs	r5, r0, #31
    12b2:	0020      	movs	r0, r4
    12b4:	f001 fc2e 	bl	2b14 <__clzsi2>
    12b8:	239e      	movs	r3, #158	; 0x9e
    12ba:	1a1b      	subs	r3, r3, r0
    12bc:	2b96      	cmp	r3, #150	; 0x96
    12be:	dc0d      	bgt.n	12dc <__aeabi_i2f+0x38>
    12c0:	2296      	movs	r2, #150	; 0x96
    12c2:	1ad2      	subs	r2, r2, r3
    12c4:	4094      	lsls	r4, r2
    12c6:	002a      	movs	r2, r5
    12c8:	0264      	lsls	r4, r4, #9
    12ca:	0a64      	lsrs	r4, r4, #9
    12cc:	b2db      	uxtb	r3, r3
    12ce:	0264      	lsls	r4, r4, #9
    12d0:	05db      	lsls	r3, r3, #23
    12d2:	0a60      	lsrs	r0, r4, #9
    12d4:	07d2      	lsls	r2, r2, #31
    12d6:	4318      	orrs	r0, r3
    12d8:	4310      	orrs	r0, r2
    12da:	bd70      	pop	{r4, r5, r6, pc}
    12dc:	2b99      	cmp	r3, #153	; 0x99
    12de:	dc19      	bgt.n	1314 <__aeabi_i2f+0x70>
    12e0:	2299      	movs	r2, #153	; 0x99
    12e2:	1ad2      	subs	r2, r2, r3
    12e4:	2a00      	cmp	r2, #0
    12e6:	dd29      	ble.n	133c <__aeabi_i2f+0x98>
    12e8:	4094      	lsls	r4, r2
    12ea:	0022      	movs	r2, r4
    12ec:	4c14      	ldr	r4, [pc, #80]	; (1340 <__aeabi_i2f+0x9c>)
    12ee:	4014      	ands	r4, r2
    12f0:	0751      	lsls	r1, r2, #29
    12f2:	d004      	beq.n	12fe <__aeabi_i2f+0x5a>
    12f4:	210f      	movs	r1, #15
    12f6:	400a      	ands	r2, r1
    12f8:	2a04      	cmp	r2, #4
    12fa:	d000      	beq.n	12fe <__aeabi_i2f+0x5a>
    12fc:	3404      	adds	r4, #4
    12fe:	0162      	lsls	r2, r4, #5
    1300:	d413      	bmi.n	132a <__aeabi_i2f+0x86>
    1302:	01a4      	lsls	r4, r4, #6
    1304:	0a64      	lsrs	r4, r4, #9
    1306:	b2db      	uxtb	r3, r3
    1308:	002a      	movs	r2, r5
    130a:	e7e0      	b.n	12ce <__aeabi_i2f+0x2a>
    130c:	2200      	movs	r2, #0
    130e:	2300      	movs	r3, #0
    1310:	2400      	movs	r4, #0
    1312:	e7dc      	b.n	12ce <__aeabi_i2f+0x2a>
    1314:	2205      	movs	r2, #5
    1316:	0021      	movs	r1, r4
    1318:	1a12      	subs	r2, r2, r0
    131a:	40d1      	lsrs	r1, r2
    131c:	22b9      	movs	r2, #185	; 0xb9
    131e:	1ad2      	subs	r2, r2, r3
    1320:	4094      	lsls	r4, r2
    1322:	1e62      	subs	r2, r4, #1
    1324:	4194      	sbcs	r4, r2
    1326:	430c      	orrs	r4, r1
    1328:	e7da      	b.n	12e0 <__aeabi_i2f+0x3c>
    132a:	4b05      	ldr	r3, [pc, #20]	; (1340 <__aeabi_i2f+0x9c>)
    132c:	002a      	movs	r2, r5
    132e:	401c      	ands	r4, r3
    1330:	239f      	movs	r3, #159	; 0x9f
    1332:	01a4      	lsls	r4, r4, #6
    1334:	1a1b      	subs	r3, r3, r0
    1336:	0a64      	lsrs	r4, r4, #9
    1338:	b2db      	uxtb	r3, r3
    133a:	e7c8      	b.n	12ce <__aeabi_i2f+0x2a>
    133c:	0022      	movs	r2, r4
    133e:	e7d5      	b.n	12ec <__aeabi_i2f+0x48>
    1340:	fbffffff 	.word	0xfbffffff

00001344 <__aeabi_ui2f>:
    1344:	b510      	push	{r4, lr}
    1346:	1e04      	subs	r4, r0, #0
    1348:	d027      	beq.n	139a <__aeabi_ui2f+0x56>
    134a:	f001 fbe3 	bl	2b14 <__clzsi2>
    134e:	239e      	movs	r3, #158	; 0x9e
    1350:	1a1b      	subs	r3, r3, r0
    1352:	2b96      	cmp	r3, #150	; 0x96
    1354:	dc0a      	bgt.n	136c <__aeabi_ui2f+0x28>
    1356:	2296      	movs	r2, #150	; 0x96
    1358:	1ad2      	subs	r2, r2, r3
    135a:	4094      	lsls	r4, r2
    135c:	0264      	lsls	r4, r4, #9
    135e:	0a64      	lsrs	r4, r4, #9
    1360:	b2db      	uxtb	r3, r3
    1362:	0264      	lsls	r4, r4, #9
    1364:	05db      	lsls	r3, r3, #23
    1366:	0a60      	lsrs	r0, r4, #9
    1368:	4318      	orrs	r0, r3
    136a:	bd10      	pop	{r4, pc}
    136c:	2b99      	cmp	r3, #153	; 0x99
    136e:	dc17      	bgt.n	13a0 <__aeabi_ui2f+0x5c>
    1370:	2299      	movs	r2, #153	; 0x99
    1372:	1ad2      	subs	r2, r2, r3
    1374:	2a00      	cmp	r2, #0
    1376:	dd27      	ble.n	13c8 <__aeabi_ui2f+0x84>
    1378:	4094      	lsls	r4, r2
    137a:	0022      	movs	r2, r4
    137c:	4c13      	ldr	r4, [pc, #76]	; (13cc <__aeabi_ui2f+0x88>)
    137e:	4014      	ands	r4, r2
    1380:	0751      	lsls	r1, r2, #29
    1382:	d004      	beq.n	138e <__aeabi_ui2f+0x4a>
    1384:	210f      	movs	r1, #15
    1386:	400a      	ands	r2, r1
    1388:	2a04      	cmp	r2, #4
    138a:	d000      	beq.n	138e <__aeabi_ui2f+0x4a>
    138c:	3404      	adds	r4, #4
    138e:	0162      	lsls	r2, r4, #5
    1390:	d412      	bmi.n	13b8 <__aeabi_ui2f+0x74>
    1392:	01a4      	lsls	r4, r4, #6
    1394:	0a64      	lsrs	r4, r4, #9
    1396:	b2db      	uxtb	r3, r3
    1398:	e7e3      	b.n	1362 <__aeabi_ui2f+0x1e>
    139a:	2300      	movs	r3, #0
    139c:	2400      	movs	r4, #0
    139e:	e7e0      	b.n	1362 <__aeabi_ui2f+0x1e>
    13a0:	22b9      	movs	r2, #185	; 0xb9
    13a2:	0021      	movs	r1, r4
    13a4:	1ad2      	subs	r2, r2, r3
    13a6:	4091      	lsls	r1, r2
    13a8:	000a      	movs	r2, r1
    13aa:	1e51      	subs	r1, r2, #1
    13ac:	418a      	sbcs	r2, r1
    13ae:	2105      	movs	r1, #5
    13b0:	1a09      	subs	r1, r1, r0
    13b2:	40cc      	lsrs	r4, r1
    13b4:	4314      	orrs	r4, r2
    13b6:	e7db      	b.n	1370 <__aeabi_ui2f+0x2c>
    13b8:	4b04      	ldr	r3, [pc, #16]	; (13cc <__aeabi_ui2f+0x88>)
    13ba:	401c      	ands	r4, r3
    13bc:	239f      	movs	r3, #159	; 0x9f
    13be:	01a4      	lsls	r4, r4, #6
    13c0:	1a1b      	subs	r3, r3, r0
    13c2:	0a64      	lsrs	r4, r4, #9
    13c4:	b2db      	uxtb	r3, r3
    13c6:	e7cc      	b.n	1362 <__aeabi_ui2f+0x1e>
    13c8:	0022      	movs	r2, r4
    13ca:	e7d7      	b.n	137c <__aeabi_ui2f+0x38>
    13cc:	fbffffff 	.word	0xfbffffff

000013d0 <__aeabi_ddiv>:
    13d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13d2:	4657      	mov	r7, sl
    13d4:	4645      	mov	r5, r8
    13d6:	46de      	mov	lr, fp
    13d8:	464e      	mov	r6, r9
    13da:	b5e0      	push	{r5, r6, r7, lr}
    13dc:	004c      	lsls	r4, r1, #1
    13de:	030e      	lsls	r6, r1, #12
    13e0:	b087      	sub	sp, #28
    13e2:	4683      	mov	fp, r0
    13e4:	4692      	mov	sl, r2
    13e6:	001d      	movs	r5, r3
    13e8:	4680      	mov	r8, r0
    13ea:	0b36      	lsrs	r6, r6, #12
    13ec:	0d64      	lsrs	r4, r4, #21
    13ee:	0fcf      	lsrs	r7, r1, #31
    13f0:	2c00      	cmp	r4, #0
    13f2:	d04f      	beq.n	1494 <__aeabi_ddiv+0xc4>
    13f4:	4b6f      	ldr	r3, [pc, #444]	; (15b4 <__aeabi_ddiv+0x1e4>)
    13f6:	429c      	cmp	r4, r3
    13f8:	d035      	beq.n	1466 <__aeabi_ddiv+0x96>
    13fa:	2380      	movs	r3, #128	; 0x80
    13fc:	0f42      	lsrs	r2, r0, #29
    13fe:	041b      	lsls	r3, r3, #16
    1400:	00f6      	lsls	r6, r6, #3
    1402:	4313      	orrs	r3, r2
    1404:	4333      	orrs	r3, r6
    1406:	4699      	mov	r9, r3
    1408:	00c3      	lsls	r3, r0, #3
    140a:	4698      	mov	r8, r3
    140c:	4b6a      	ldr	r3, [pc, #424]	; (15b8 <__aeabi_ddiv+0x1e8>)
    140e:	2600      	movs	r6, #0
    1410:	469c      	mov	ip, r3
    1412:	2300      	movs	r3, #0
    1414:	4464      	add	r4, ip
    1416:	9303      	str	r3, [sp, #12]
    1418:	032b      	lsls	r3, r5, #12
    141a:	0b1b      	lsrs	r3, r3, #12
    141c:	469b      	mov	fp, r3
    141e:	006b      	lsls	r3, r5, #1
    1420:	0fed      	lsrs	r5, r5, #31
    1422:	4650      	mov	r0, sl
    1424:	0d5b      	lsrs	r3, r3, #21
    1426:	9501      	str	r5, [sp, #4]
    1428:	d05e      	beq.n	14e8 <__aeabi_ddiv+0x118>
    142a:	4a62      	ldr	r2, [pc, #392]	; (15b4 <__aeabi_ddiv+0x1e4>)
    142c:	4293      	cmp	r3, r2
    142e:	d053      	beq.n	14d8 <__aeabi_ddiv+0x108>
    1430:	465a      	mov	r2, fp
    1432:	00d1      	lsls	r1, r2, #3
    1434:	2280      	movs	r2, #128	; 0x80
    1436:	0f40      	lsrs	r0, r0, #29
    1438:	0412      	lsls	r2, r2, #16
    143a:	4302      	orrs	r2, r0
    143c:	430a      	orrs	r2, r1
    143e:	4693      	mov	fp, r2
    1440:	4652      	mov	r2, sl
    1442:	00d1      	lsls	r1, r2, #3
    1444:	4a5c      	ldr	r2, [pc, #368]	; (15b8 <__aeabi_ddiv+0x1e8>)
    1446:	4694      	mov	ip, r2
    1448:	2200      	movs	r2, #0
    144a:	4463      	add	r3, ip
    144c:	0038      	movs	r0, r7
    144e:	4068      	eors	r0, r5
    1450:	4684      	mov	ip, r0
    1452:	9002      	str	r0, [sp, #8]
    1454:	1ae4      	subs	r4, r4, r3
    1456:	4316      	orrs	r6, r2
    1458:	2e0f      	cmp	r6, #15
    145a:	d900      	bls.n	145e <__aeabi_ddiv+0x8e>
    145c:	e0b4      	b.n	15c8 <__aeabi_ddiv+0x1f8>
    145e:	4b57      	ldr	r3, [pc, #348]	; (15bc <__aeabi_ddiv+0x1ec>)
    1460:	00b6      	lsls	r6, r6, #2
    1462:	599b      	ldr	r3, [r3, r6]
    1464:	469f      	mov	pc, r3
    1466:	0003      	movs	r3, r0
    1468:	4333      	orrs	r3, r6
    146a:	4699      	mov	r9, r3
    146c:	d16c      	bne.n	1548 <__aeabi_ddiv+0x178>
    146e:	2300      	movs	r3, #0
    1470:	4698      	mov	r8, r3
    1472:	3302      	adds	r3, #2
    1474:	2608      	movs	r6, #8
    1476:	9303      	str	r3, [sp, #12]
    1478:	e7ce      	b.n	1418 <__aeabi_ddiv+0x48>
    147a:	46cb      	mov	fp, r9
    147c:	4641      	mov	r1, r8
    147e:	9a03      	ldr	r2, [sp, #12]
    1480:	9701      	str	r7, [sp, #4]
    1482:	2a02      	cmp	r2, #2
    1484:	d165      	bne.n	1552 <__aeabi_ddiv+0x182>
    1486:	9b01      	ldr	r3, [sp, #4]
    1488:	4c4a      	ldr	r4, [pc, #296]	; (15b4 <__aeabi_ddiv+0x1e4>)
    148a:	469c      	mov	ip, r3
    148c:	2300      	movs	r3, #0
    148e:	2200      	movs	r2, #0
    1490:	4698      	mov	r8, r3
    1492:	e06b      	b.n	156c <__aeabi_ddiv+0x19c>
    1494:	0003      	movs	r3, r0
    1496:	4333      	orrs	r3, r6
    1498:	4699      	mov	r9, r3
    149a:	d04e      	beq.n	153a <__aeabi_ddiv+0x16a>
    149c:	2e00      	cmp	r6, #0
    149e:	d100      	bne.n	14a2 <__aeabi_ddiv+0xd2>
    14a0:	e1bc      	b.n	181c <__aeabi_ddiv+0x44c>
    14a2:	0030      	movs	r0, r6
    14a4:	f001 fb36 	bl	2b14 <__clzsi2>
    14a8:	0003      	movs	r3, r0
    14aa:	3b0b      	subs	r3, #11
    14ac:	2b1c      	cmp	r3, #28
    14ae:	dd00      	ble.n	14b2 <__aeabi_ddiv+0xe2>
    14b0:	e1ac      	b.n	180c <__aeabi_ddiv+0x43c>
    14b2:	221d      	movs	r2, #29
    14b4:	1ad3      	subs	r3, r2, r3
    14b6:	465a      	mov	r2, fp
    14b8:	0001      	movs	r1, r0
    14ba:	40da      	lsrs	r2, r3
    14bc:	3908      	subs	r1, #8
    14be:	408e      	lsls	r6, r1
    14c0:	0013      	movs	r3, r2
    14c2:	4333      	orrs	r3, r6
    14c4:	4699      	mov	r9, r3
    14c6:	465b      	mov	r3, fp
    14c8:	408b      	lsls	r3, r1
    14ca:	4698      	mov	r8, r3
    14cc:	2300      	movs	r3, #0
    14ce:	4c3c      	ldr	r4, [pc, #240]	; (15c0 <__aeabi_ddiv+0x1f0>)
    14d0:	2600      	movs	r6, #0
    14d2:	1a24      	subs	r4, r4, r0
    14d4:	9303      	str	r3, [sp, #12]
    14d6:	e79f      	b.n	1418 <__aeabi_ddiv+0x48>
    14d8:	4651      	mov	r1, sl
    14da:	465a      	mov	r2, fp
    14dc:	4311      	orrs	r1, r2
    14de:	d129      	bne.n	1534 <__aeabi_ddiv+0x164>
    14e0:	2200      	movs	r2, #0
    14e2:	4693      	mov	fp, r2
    14e4:	3202      	adds	r2, #2
    14e6:	e7b1      	b.n	144c <__aeabi_ddiv+0x7c>
    14e8:	4659      	mov	r1, fp
    14ea:	4301      	orrs	r1, r0
    14ec:	d01e      	beq.n	152c <__aeabi_ddiv+0x15c>
    14ee:	465b      	mov	r3, fp
    14f0:	2b00      	cmp	r3, #0
    14f2:	d100      	bne.n	14f6 <__aeabi_ddiv+0x126>
    14f4:	e19e      	b.n	1834 <__aeabi_ddiv+0x464>
    14f6:	4658      	mov	r0, fp
    14f8:	f001 fb0c 	bl	2b14 <__clzsi2>
    14fc:	0003      	movs	r3, r0
    14fe:	3b0b      	subs	r3, #11
    1500:	2b1c      	cmp	r3, #28
    1502:	dd00      	ble.n	1506 <__aeabi_ddiv+0x136>
    1504:	e18f      	b.n	1826 <__aeabi_ddiv+0x456>
    1506:	0002      	movs	r2, r0
    1508:	4659      	mov	r1, fp
    150a:	3a08      	subs	r2, #8
    150c:	4091      	lsls	r1, r2
    150e:	468b      	mov	fp, r1
    1510:	211d      	movs	r1, #29
    1512:	1acb      	subs	r3, r1, r3
    1514:	4651      	mov	r1, sl
    1516:	40d9      	lsrs	r1, r3
    1518:	000b      	movs	r3, r1
    151a:	4659      	mov	r1, fp
    151c:	430b      	orrs	r3, r1
    151e:	4651      	mov	r1, sl
    1520:	469b      	mov	fp, r3
    1522:	4091      	lsls	r1, r2
    1524:	4b26      	ldr	r3, [pc, #152]	; (15c0 <__aeabi_ddiv+0x1f0>)
    1526:	2200      	movs	r2, #0
    1528:	1a1b      	subs	r3, r3, r0
    152a:	e78f      	b.n	144c <__aeabi_ddiv+0x7c>
    152c:	2300      	movs	r3, #0
    152e:	2201      	movs	r2, #1
    1530:	469b      	mov	fp, r3
    1532:	e78b      	b.n	144c <__aeabi_ddiv+0x7c>
    1534:	4651      	mov	r1, sl
    1536:	2203      	movs	r2, #3
    1538:	e788      	b.n	144c <__aeabi_ddiv+0x7c>
    153a:	2300      	movs	r3, #0
    153c:	4698      	mov	r8, r3
    153e:	3301      	adds	r3, #1
    1540:	2604      	movs	r6, #4
    1542:	2400      	movs	r4, #0
    1544:	9303      	str	r3, [sp, #12]
    1546:	e767      	b.n	1418 <__aeabi_ddiv+0x48>
    1548:	2303      	movs	r3, #3
    154a:	46b1      	mov	r9, r6
    154c:	9303      	str	r3, [sp, #12]
    154e:	260c      	movs	r6, #12
    1550:	e762      	b.n	1418 <__aeabi_ddiv+0x48>
    1552:	2a03      	cmp	r2, #3
    1554:	d100      	bne.n	1558 <__aeabi_ddiv+0x188>
    1556:	e25c      	b.n	1a12 <__aeabi_ddiv+0x642>
    1558:	9b01      	ldr	r3, [sp, #4]
    155a:	2a01      	cmp	r2, #1
    155c:	d000      	beq.n	1560 <__aeabi_ddiv+0x190>
    155e:	e1e4      	b.n	192a <__aeabi_ddiv+0x55a>
    1560:	4013      	ands	r3, r2
    1562:	469c      	mov	ip, r3
    1564:	2300      	movs	r3, #0
    1566:	2400      	movs	r4, #0
    1568:	2200      	movs	r2, #0
    156a:	4698      	mov	r8, r3
    156c:	2100      	movs	r1, #0
    156e:	0312      	lsls	r2, r2, #12
    1570:	0b13      	lsrs	r3, r2, #12
    1572:	0d0a      	lsrs	r2, r1, #20
    1574:	0512      	lsls	r2, r2, #20
    1576:	431a      	orrs	r2, r3
    1578:	0523      	lsls	r3, r4, #20
    157a:	4c12      	ldr	r4, [pc, #72]	; (15c4 <__aeabi_ddiv+0x1f4>)
    157c:	4640      	mov	r0, r8
    157e:	4022      	ands	r2, r4
    1580:	4313      	orrs	r3, r2
    1582:	4662      	mov	r2, ip
    1584:	005b      	lsls	r3, r3, #1
    1586:	07d2      	lsls	r2, r2, #31
    1588:	085b      	lsrs	r3, r3, #1
    158a:	4313      	orrs	r3, r2
    158c:	0019      	movs	r1, r3
    158e:	b007      	add	sp, #28
    1590:	bc3c      	pop	{r2, r3, r4, r5}
    1592:	4690      	mov	r8, r2
    1594:	4699      	mov	r9, r3
    1596:	46a2      	mov	sl, r4
    1598:	46ab      	mov	fp, r5
    159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    159c:	2300      	movs	r3, #0
    159e:	2280      	movs	r2, #128	; 0x80
    15a0:	469c      	mov	ip, r3
    15a2:	0312      	lsls	r2, r2, #12
    15a4:	4698      	mov	r8, r3
    15a6:	4c03      	ldr	r4, [pc, #12]	; (15b4 <__aeabi_ddiv+0x1e4>)
    15a8:	e7e0      	b.n	156c <__aeabi_ddiv+0x19c>
    15aa:	2300      	movs	r3, #0
    15ac:	4c01      	ldr	r4, [pc, #4]	; (15b4 <__aeabi_ddiv+0x1e4>)
    15ae:	2200      	movs	r2, #0
    15b0:	4698      	mov	r8, r3
    15b2:	e7db      	b.n	156c <__aeabi_ddiv+0x19c>
    15b4:	000007ff 	.word	0x000007ff
    15b8:	fffffc01 	.word	0xfffffc01
    15bc:	0000dfb4 	.word	0x0000dfb4
    15c0:	fffffc0d 	.word	0xfffffc0d
    15c4:	800fffff 	.word	0x800fffff
    15c8:	45d9      	cmp	r9, fp
    15ca:	d900      	bls.n	15ce <__aeabi_ddiv+0x1fe>
    15cc:	e139      	b.n	1842 <__aeabi_ddiv+0x472>
    15ce:	d100      	bne.n	15d2 <__aeabi_ddiv+0x202>
    15d0:	e134      	b.n	183c <__aeabi_ddiv+0x46c>
    15d2:	2300      	movs	r3, #0
    15d4:	4646      	mov	r6, r8
    15d6:	464d      	mov	r5, r9
    15d8:	469a      	mov	sl, r3
    15da:	3c01      	subs	r4, #1
    15dc:	465b      	mov	r3, fp
    15de:	0e0a      	lsrs	r2, r1, #24
    15e0:	021b      	lsls	r3, r3, #8
    15e2:	431a      	orrs	r2, r3
    15e4:	020b      	lsls	r3, r1, #8
    15e6:	0c17      	lsrs	r7, r2, #16
    15e8:	9303      	str	r3, [sp, #12]
    15ea:	0413      	lsls	r3, r2, #16
    15ec:	0c1b      	lsrs	r3, r3, #16
    15ee:	0039      	movs	r1, r7
    15f0:	0028      	movs	r0, r5
    15f2:	4690      	mov	r8, r2
    15f4:	9301      	str	r3, [sp, #4]
    15f6:	f7fe fded 	bl	1d4 <__udivsi3>
    15fa:	0002      	movs	r2, r0
    15fc:	9b01      	ldr	r3, [sp, #4]
    15fe:	4683      	mov	fp, r0
    1600:	435a      	muls	r2, r3
    1602:	0028      	movs	r0, r5
    1604:	0039      	movs	r1, r7
    1606:	4691      	mov	r9, r2
    1608:	f7fe fe6a 	bl	2e0 <__aeabi_uidivmod>
    160c:	0c35      	lsrs	r5, r6, #16
    160e:	0409      	lsls	r1, r1, #16
    1610:	430d      	orrs	r5, r1
    1612:	45a9      	cmp	r9, r5
    1614:	d90d      	bls.n	1632 <__aeabi_ddiv+0x262>
    1616:	465b      	mov	r3, fp
    1618:	4445      	add	r5, r8
    161a:	3b01      	subs	r3, #1
    161c:	45a8      	cmp	r8, r5
    161e:	d900      	bls.n	1622 <__aeabi_ddiv+0x252>
    1620:	e13a      	b.n	1898 <__aeabi_ddiv+0x4c8>
    1622:	45a9      	cmp	r9, r5
    1624:	d800      	bhi.n	1628 <__aeabi_ddiv+0x258>
    1626:	e137      	b.n	1898 <__aeabi_ddiv+0x4c8>
    1628:	2302      	movs	r3, #2
    162a:	425b      	negs	r3, r3
    162c:	469c      	mov	ip, r3
    162e:	4445      	add	r5, r8
    1630:	44e3      	add	fp, ip
    1632:	464b      	mov	r3, r9
    1634:	1aeb      	subs	r3, r5, r3
    1636:	0039      	movs	r1, r7
    1638:	0018      	movs	r0, r3
    163a:	9304      	str	r3, [sp, #16]
    163c:	f7fe fdca 	bl	1d4 <__udivsi3>
    1640:	9b01      	ldr	r3, [sp, #4]
    1642:	0005      	movs	r5, r0
    1644:	4343      	muls	r3, r0
    1646:	0039      	movs	r1, r7
    1648:	9804      	ldr	r0, [sp, #16]
    164a:	4699      	mov	r9, r3
    164c:	f7fe fe48 	bl	2e0 <__aeabi_uidivmod>
    1650:	0433      	lsls	r3, r6, #16
    1652:	0409      	lsls	r1, r1, #16
    1654:	0c1b      	lsrs	r3, r3, #16
    1656:	430b      	orrs	r3, r1
    1658:	4599      	cmp	r9, r3
    165a:	d909      	bls.n	1670 <__aeabi_ddiv+0x2a0>
    165c:	4443      	add	r3, r8
    165e:	1e6a      	subs	r2, r5, #1
    1660:	4598      	cmp	r8, r3
    1662:	d900      	bls.n	1666 <__aeabi_ddiv+0x296>
    1664:	e11a      	b.n	189c <__aeabi_ddiv+0x4cc>
    1666:	4599      	cmp	r9, r3
    1668:	d800      	bhi.n	166c <__aeabi_ddiv+0x29c>
    166a:	e117      	b.n	189c <__aeabi_ddiv+0x4cc>
    166c:	3d02      	subs	r5, #2
    166e:	4443      	add	r3, r8
    1670:	464a      	mov	r2, r9
    1672:	1a9b      	subs	r3, r3, r2
    1674:	465a      	mov	r2, fp
    1676:	0412      	lsls	r2, r2, #16
    1678:	432a      	orrs	r2, r5
    167a:	9903      	ldr	r1, [sp, #12]
    167c:	4693      	mov	fp, r2
    167e:	0c10      	lsrs	r0, r2, #16
    1680:	0c0a      	lsrs	r2, r1, #16
    1682:	4691      	mov	r9, r2
    1684:	0409      	lsls	r1, r1, #16
    1686:	465a      	mov	r2, fp
    1688:	0c09      	lsrs	r1, r1, #16
    168a:	464e      	mov	r6, r9
    168c:	000d      	movs	r5, r1
    168e:	0412      	lsls	r2, r2, #16
    1690:	0c12      	lsrs	r2, r2, #16
    1692:	4345      	muls	r5, r0
    1694:	9105      	str	r1, [sp, #20]
    1696:	4351      	muls	r1, r2
    1698:	4372      	muls	r2, r6
    169a:	4370      	muls	r0, r6
    169c:	1952      	adds	r2, r2, r5
    169e:	0c0e      	lsrs	r6, r1, #16
    16a0:	18b2      	adds	r2, r6, r2
    16a2:	4295      	cmp	r5, r2
    16a4:	d903      	bls.n	16ae <__aeabi_ddiv+0x2de>
    16a6:	2580      	movs	r5, #128	; 0x80
    16a8:	026d      	lsls	r5, r5, #9
    16aa:	46ac      	mov	ip, r5
    16ac:	4460      	add	r0, ip
    16ae:	0c15      	lsrs	r5, r2, #16
    16b0:	0409      	lsls	r1, r1, #16
    16b2:	0412      	lsls	r2, r2, #16
    16b4:	0c09      	lsrs	r1, r1, #16
    16b6:	1828      	adds	r0, r5, r0
    16b8:	1852      	adds	r2, r2, r1
    16ba:	4283      	cmp	r3, r0
    16bc:	d200      	bcs.n	16c0 <__aeabi_ddiv+0x2f0>
    16be:	e0ce      	b.n	185e <__aeabi_ddiv+0x48e>
    16c0:	d100      	bne.n	16c4 <__aeabi_ddiv+0x2f4>
    16c2:	e0c8      	b.n	1856 <__aeabi_ddiv+0x486>
    16c4:	1a1d      	subs	r5, r3, r0
    16c6:	4653      	mov	r3, sl
    16c8:	1a9e      	subs	r6, r3, r2
    16ca:	45b2      	cmp	sl, r6
    16cc:	4192      	sbcs	r2, r2
    16ce:	4252      	negs	r2, r2
    16d0:	1aab      	subs	r3, r5, r2
    16d2:	469a      	mov	sl, r3
    16d4:	4598      	cmp	r8, r3
    16d6:	d100      	bne.n	16da <__aeabi_ddiv+0x30a>
    16d8:	e117      	b.n	190a <__aeabi_ddiv+0x53a>
    16da:	0039      	movs	r1, r7
    16dc:	0018      	movs	r0, r3
    16de:	f7fe fd79 	bl	1d4 <__udivsi3>
    16e2:	9b01      	ldr	r3, [sp, #4]
    16e4:	0005      	movs	r5, r0
    16e6:	4343      	muls	r3, r0
    16e8:	0039      	movs	r1, r7
    16ea:	4650      	mov	r0, sl
    16ec:	9304      	str	r3, [sp, #16]
    16ee:	f7fe fdf7 	bl	2e0 <__aeabi_uidivmod>
    16f2:	9804      	ldr	r0, [sp, #16]
    16f4:	040b      	lsls	r3, r1, #16
    16f6:	0c31      	lsrs	r1, r6, #16
    16f8:	4319      	orrs	r1, r3
    16fa:	4288      	cmp	r0, r1
    16fc:	d909      	bls.n	1712 <__aeabi_ddiv+0x342>
    16fe:	4441      	add	r1, r8
    1700:	1e6b      	subs	r3, r5, #1
    1702:	4588      	cmp	r8, r1
    1704:	d900      	bls.n	1708 <__aeabi_ddiv+0x338>
    1706:	e107      	b.n	1918 <__aeabi_ddiv+0x548>
    1708:	4288      	cmp	r0, r1
    170a:	d800      	bhi.n	170e <__aeabi_ddiv+0x33e>
    170c:	e104      	b.n	1918 <__aeabi_ddiv+0x548>
    170e:	3d02      	subs	r5, #2
    1710:	4441      	add	r1, r8
    1712:	9b04      	ldr	r3, [sp, #16]
    1714:	1acb      	subs	r3, r1, r3
    1716:	0018      	movs	r0, r3
    1718:	0039      	movs	r1, r7
    171a:	9304      	str	r3, [sp, #16]
    171c:	f7fe fd5a 	bl	1d4 <__udivsi3>
    1720:	9b01      	ldr	r3, [sp, #4]
    1722:	4682      	mov	sl, r0
    1724:	4343      	muls	r3, r0
    1726:	0039      	movs	r1, r7
    1728:	9804      	ldr	r0, [sp, #16]
    172a:	9301      	str	r3, [sp, #4]
    172c:	f7fe fdd8 	bl	2e0 <__aeabi_uidivmod>
    1730:	9801      	ldr	r0, [sp, #4]
    1732:	040b      	lsls	r3, r1, #16
    1734:	0431      	lsls	r1, r6, #16
    1736:	0c09      	lsrs	r1, r1, #16
    1738:	4319      	orrs	r1, r3
    173a:	4288      	cmp	r0, r1
    173c:	d90d      	bls.n	175a <__aeabi_ddiv+0x38a>
    173e:	4653      	mov	r3, sl
    1740:	4441      	add	r1, r8
    1742:	3b01      	subs	r3, #1
    1744:	4588      	cmp	r8, r1
    1746:	d900      	bls.n	174a <__aeabi_ddiv+0x37a>
    1748:	e0e8      	b.n	191c <__aeabi_ddiv+0x54c>
    174a:	4288      	cmp	r0, r1
    174c:	d800      	bhi.n	1750 <__aeabi_ddiv+0x380>
    174e:	e0e5      	b.n	191c <__aeabi_ddiv+0x54c>
    1750:	2302      	movs	r3, #2
    1752:	425b      	negs	r3, r3
    1754:	469c      	mov	ip, r3
    1756:	4441      	add	r1, r8
    1758:	44e2      	add	sl, ip
    175a:	9b01      	ldr	r3, [sp, #4]
    175c:	042d      	lsls	r5, r5, #16
    175e:	1ace      	subs	r6, r1, r3
    1760:	4651      	mov	r1, sl
    1762:	4329      	orrs	r1, r5
    1764:	9d05      	ldr	r5, [sp, #20]
    1766:	464f      	mov	r7, r9
    1768:	002a      	movs	r2, r5
    176a:	040b      	lsls	r3, r1, #16
    176c:	0c08      	lsrs	r0, r1, #16
    176e:	0c1b      	lsrs	r3, r3, #16
    1770:	435a      	muls	r2, r3
    1772:	4345      	muls	r5, r0
    1774:	437b      	muls	r3, r7
    1776:	4378      	muls	r0, r7
    1778:	195b      	adds	r3, r3, r5
    177a:	0c17      	lsrs	r7, r2, #16
    177c:	18fb      	adds	r3, r7, r3
    177e:	429d      	cmp	r5, r3
    1780:	d903      	bls.n	178a <__aeabi_ddiv+0x3ba>
    1782:	2580      	movs	r5, #128	; 0x80
    1784:	026d      	lsls	r5, r5, #9
    1786:	46ac      	mov	ip, r5
    1788:	4460      	add	r0, ip
    178a:	0c1d      	lsrs	r5, r3, #16
    178c:	0412      	lsls	r2, r2, #16
    178e:	041b      	lsls	r3, r3, #16
    1790:	0c12      	lsrs	r2, r2, #16
    1792:	1828      	adds	r0, r5, r0
    1794:	189b      	adds	r3, r3, r2
    1796:	4286      	cmp	r6, r0
    1798:	d200      	bcs.n	179c <__aeabi_ddiv+0x3cc>
    179a:	e093      	b.n	18c4 <__aeabi_ddiv+0x4f4>
    179c:	d100      	bne.n	17a0 <__aeabi_ddiv+0x3d0>
    179e:	e08e      	b.n	18be <__aeabi_ddiv+0x4ee>
    17a0:	2301      	movs	r3, #1
    17a2:	4319      	orrs	r1, r3
    17a4:	4ba0      	ldr	r3, [pc, #640]	; (1a28 <__aeabi_ddiv+0x658>)
    17a6:	18e3      	adds	r3, r4, r3
    17a8:	2b00      	cmp	r3, #0
    17aa:	dc00      	bgt.n	17ae <__aeabi_ddiv+0x3de>
    17ac:	e099      	b.n	18e2 <__aeabi_ddiv+0x512>
    17ae:	074a      	lsls	r2, r1, #29
    17b0:	d000      	beq.n	17b4 <__aeabi_ddiv+0x3e4>
    17b2:	e09e      	b.n	18f2 <__aeabi_ddiv+0x522>
    17b4:	465a      	mov	r2, fp
    17b6:	01d2      	lsls	r2, r2, #7
    17b8:	d506      	bpl.n	17c8 <__aeabi_ddiv+0x3f8>
    17ba:	465a      	mov	r2, fp
    17bc:	4b9b      	ldr	r3, [pc, #620]	; (1a2c <__aeabi_ddiv+0x65c>)
    17be:	401a      	ands	r2, r3
    17c0:	2380      	movs	r3, #128	; 0x80
    17c2:	4693      	mov	fp, r2
    17c4:	00db      	lsls	r3, r3, #3
    17c6:	18e3      	adds	r3, r4, r3
    17c8:	4a99      	ldr	r2, [pc, #612]	; (1a30 <__aeabi_ddiv+0x660>)
    17ca:	4293      	cmp	r3, r2
    17cc:	dd68      	ble.n	18a0 <__aeabi_ddiv+0x4d0>
    17ce:	2301      	movs	r3, #1
    17d0:	9a02      	ldr	r2, [sp, #8]
    17d2:	4c98      	ldr	r4, [pc, #608]	; (1a34 <__aeabi_ddiv+0x664>)
    17d4:	401a      	ands	r2, r3
    17d6:	2300      	movs	r3, #0
    17d8:	4694      	mov	ip, r2
    17da:	4698      	mov	r8, r3
    17dc:	2200      	movs	r2, #0
    17de:	e6c5      	b.n	156c <__aeabi_ddiv+0x19c>
    17e0:	2280      	movs	r2, #128	; 0x80
    17e2:	464b      	mov	r3, r9
    17e4:	0312      	lsls	r2, r2, #12
    17e6:	4213      	tst	r3, r2
    17e8:	d00a      	beq.n	1800 <__aeabi_ddiv+0x430>
    17ea:	465b      	mov	r3, fp
    17ec:	4213      	tst	r3, r2
    17ee:	d106      	bne.n	17fe <__aeabi_ddiv+0x42e>
    17f0:	431a      	orrs	r2, r3
    17f2:	0312      	lsls	r2, r2, #12
    17f4:	0b12      	lsrs	r2, r2, #12
    17f6:	46ac      	mov	ip, r5
    17f8:	4688      	mov	r8, r1
    17fa:	4c8e      	ldr	r4, [pc, #568]	; (1a34 <__aeabi_ddiv+0x664>)
    17fc:	e6b6      	b.n	156c <__aeabi_ddiv+0x19c>
    17fe:	464b      	mov	r3, r9
    1800:	431a      	orrs	r2, r3
    1802:	0312      	lsls	r2, r2, #12
    1804:	0b12      	lsrs	r2, r2, #12
    1806:	46bc      	mov	ip, r7
    1808:	4c8a      	ldr	r4, [pc, #552]	; (1a34 <__aeabi_ddiv+0x664>)
    180a:	e6af      	b.n	156c <__aeabi_ddiv+0x19c>
    180c:	0003      	movs	r3, r0
    180e:	465a      	mov	r2, fp
    1810:	3b28      	subs	r3, #40	; 0x28
    1812:	409a      	lsls	r2, r3
    1814:	2300      	movs	r3, #0
    1816:	4691      	mov	r9, r2
    1818:	4698      	mov	r8, r3
    181a:	e657      	b.n	14cc <__aeabi_ddiv+0xfc>
    181c:	4658      	mov	r0, fp
    181e:	f001 f979 	bl	2b14 <__clzsi2>
    1822:	3020      	adds	r0, #32
    1824:	e640      	b.n	14a8 <__aeabi_ddiv+0xd8>
    1826:	0003      	movs	r3, r0
    1828:	4652      	mov	r2, sl
    182a:	3b28      	subs	r3, #40	; 0x28
    182c:	409a      	lsls	r2, r3
    182e:	2100      	movs	r1, #0
    1830:	4693      	mov	fp, r2
    1832:	e677      	b.n	1524 <__aeabi_ddiv+0x154>
    1834:	f001 f96e 	bl	2b14 <__clzsi2>
    1838:	3020      	adds	r0, #32
    183a:	e65f      	b.n	14fc <__aeabi_ddiv+0x12c>
    183c:	4588      	cmp	r8, r1
    183e:	d200      	bcs.n	1842 <__aeabi_ddiv+0x472>
    1840:	e6c7      	b.n	15d2 <__aeabi_ddiv+0x202>
    1842:	464b      	mov	r3, r9
    1844:	07de      	lsls	r6, r3, #31
    1846:	085d      	lsrs	r5, r3, #1
    1848:	4643      	mov	r3, r8
    184a:	085b      	lsrs	r3, r3, #1
    184c:	431e      	orrs	r6, r3
    184e:	4643      	mov	r3, r8
    1850:	07db      	lsls	r3, r3, #31
    1852:	469a      	mov	sl, r3
    1854:	e6c2      	b.n	15dc <__aeabi_ddiv+0x20c>
    1856:	2500      	movs	r5, #0
    1858:	4592      	cmp	sl, r2
    185a:	d300      	bcc.n	185e <__aeabi_ddiv+0x48e>
    185c:	e733      	b.n	16c6 <__aeabi_ddiv+0x2f6>
    185e:	9e03      	ldr	r6, [sp, #12]
    1860:	4659      	mov	r1, fp
    1862:	46b4      	mov	ip, r6
    1864:	44e2      	add	sl, ip
    1866:	45b2      	cmp	sl, r6
    1868:	41ad      	sbcs	r5, r5
    186a:	426d      	negs	r5, r5
    186c:	4445      	add	r5, r8
    186e:	18eb      	adds	r3, r5, r3
    1870:	3901      	subs	r1, #1
    1872:	4598      	cmp	r8, r3
    1874:	d207      	bcs.n	1886 <__aeabi_ddiv+0x4b6>
    1876:	4298      	cmp	r0, r3
    1878:	d900      	bls.n	187c <__aeabi_ddiv+0x4ac>
    187a:	e07f      	b.n	197c <__aeabi_ddiv+0x5ac>
    187c:	d100      	bne.n	1880 <__aeabi_ddiv+0x4b0>
    187e:	e0bc      	b.n	19fa <__aeabi_ddiv+0x62a>
    1880:	1a1d      	subs	r5, r3, r0
    1882:	468b      	mov	fp, r1
    1884:	e71f      	b.n	16c6 <__aeabi_ddiv+0x2f6>
    1886:	4598      	cmp	r8, r3
    1888:	d1fa      	bne.n	1880 <__aeabi_ddiv+0x4b0>
    188a:	9d03      	ldr	r5, [sp, #12]
    188c:	4555      	cmp	r5, sl
    188e:	d9f2      	bls.n	1876 <__aeabi_ddiv+0x4a6>
    1890:	4643      	mov	r3, r8
    1892:	468b      	mov	fp, r1
    1894:	1a1d      	subs	r5, r3, r0
    1896:	e716      	b.n	16c6 <__aeabi_ddiv+0x2f6>
    1898:	469b      	mov	fp, r3
    189a:	e6ca      	b.n	1632 <__aeabi_ddiv+0x262>
    189c:	0015      	movs	r5, r2
    189e:	e6e7      	b.n	1670 <__aeabi_ddiv+0x2a0>
    18a0:	465a      	mov	r2, fp
    18a2:	08c9      	lsrs	r1, r1, #3
    18a4:	0752      	lsls	r2, r2, #29
    18a6:	430a      	orrs	r2, r1
    18a8:	055b      	lsls	r3, r3, #21
    18aa:	4690      	mov	r8, r2
    18ac:	0d5c      	lsrs	r4, r3, #21
    18ae:	465a      	mov	r2, fp
    18b0:	2301      	movs	r3, #1
    18b2:	9902      	ldr	r1, [sp, #8]
    18b4:	0252      	lsls	r2, r2, #9
    18b6:	4019      	ands	r1, r3
    18b8:	0b12      	lsrs	r2, r2, #12
    18ba:	468c      	mov	ip, r1
    18bc:	e656      	b.n	156c <__aeabi_ddiv+0x19c>
    18be:	2b00      	cmp	r3, #0
    18c0:	d100      	bne.n	18c4 <__aeabi_ddiv+0x4f4>
    18c2:	e76f      	b.n	17a4 <__aeabi_ddiv+0x3d4>
    18c4:	4446      	add	r6, r8
    18c6:	1e4a      	subs	r2, r1, #1
    18c8:	45b0      	cmp	r8, r6
    18ca:	d929      	bls.n	1920 <__aeabi_ddiv+0x550>
    18cc:	0011      	movs	r1, r2
    18ce:	4286      	cmp	r6, r0
    18d0:	d000      	beq.n	18d4 <__aeabi_ddiv+0x504>
    18d2:	e765      	b.n	17a0 <__aeabi_ddiv+0x3d0>
    18d4:	9a03      	ldr	r2, [sp, #12]
    18d6:	4293      	cmp	r3, r2
    18d8:	d000      	beq.n	18dc <__aeabi_ddiv+0x50c>
    18da:	e761      	b.n	17a0 <__aeabi_ddiv+0x3d0>
    18dc:	e762      	b.n	17a4 <__aeabi_ddiv+0x3d4>
    18de:	2101      	movs	r1, #1
    18e0:	4249      	negs	r1, r1
    18e2:	2001      	movs	r0, #1
    18e4:	1ac2      	subs	r2, r0, r3
    18e6:	2a38      	cmp	r2, #56	; 0x38
    18e8:	dd21      	ble.n	192e <__aeabi_ddiv+0x55e>
    18ea:	9b02      	ldr	r3, [sp, #8]
    18ec:	4003      	ands	r3, r0
    18ee:	469c      	mov	ip, r3
    18f0:	e638      	b.n	1564 <__aeabi_ddiv+0x194>
    18f2:	220f      	movs	r2, #15
    18f4:	400a      	ands	r2, r1
    18f6:	2a04      	cmp	r2, #4
    18f8:	d100      	bne.n	18fc <__aeabi_ddiv+0x52c>
    18fa:	e75b      	b.n	17b4 <__aeabi_ddiv+0x3e4>
    18fc:	000a      	movs	r2, r1
    18fe:	1d11      	adds	r1, r2, #4
    1900:	4291      	cmp	r1, r2
    1902:	4192      	sbcs	r2, r2
    1904:	4252      	negs	r2, r2
    1906:	4493      	add	fp, r2
    1908:	e754      	b.n	17b4 <__aeabi_ddiv+0x3e4>
    190a:	4b47      	ldr	r3, [pc, #284]	; (1a28 <__aeabi_ddiv+0x658>)
    190c:	18e3      	adds	r3, r4, r3
    190e:	2b00      	cmp	r3, #0
    1910:	dde5      	ble.n	18de <__aeabi_ddiv+0x50e>
    1912:	2201      	movs	r2, #1
    1914:	4252      	negs	r2, r2
    1916:	e7f2      	b.n	18fe <__aeabi_ddiv+0x52e>
    1918:	001d      	movs	r5, r3
    191a:	e6fa      	b.n	1712 <__aeabi_ddiv+0x342>
    191c:	469a      	mov	sl, r3
    191e:	e71c      	b.n	175a <__aeabi_ddiv+0x38a>
    1920:	42b0      	cmp	r0, r6
    1922:	d839      	bhi.n	1998 <__aeabi_ddiv+0x5c8>
    1924:	d06e      	beq.n	1a04 <__aeabi_ddiv+0x634>
    1926:	0011      	movs	r1, r2
    1928:	e73a      	b.n	17a0 <__aeabi_ddiv+0x3d0>
    192a:	9302      	str	r3, [sp, #8]
    192c:	e73a      	b.n	17a4 <__aeabi_ddiv+0x3d4>
    192e:	2a1f      	cmp	r2, #31
    1930:	dc3c      	bgt.n	19ac <__aeabi_ddiv+0x5dc>
    1932:	2320      	movs	r3, #32
    1934:	1a9b      	subs	r3, r3, r2
    1936:	000c      	movs	r4, r1
    1938:	4658      	mov	r0, fp
    193a:	4099      	lsls	r1, r3
    193c:	4098      	lsls	r0, r3
    193e:	1e4b      	subs	r3, r1, #1
    1940:	4199      	sbcs	r1, r3
    1942:	465b      	mov	r3, fp
    1944:	40d4      	lsrs	r4, r2
    1946:	40d3      	lsrs	r3, r2
    1948:	4320      	orrs	r0, r4
    194a:	4308      	orrs	r0, r1
    194c:	001a      	movs	r2, r3
    194e:	0743      	lsls	r3, r0, #29
    1950:	d009      	beq.n	1966 <__aeabi_ddiv+0x596>
    1952:	230f      	movs	r3, #15
    1954:	4003      	ands	r3, r0
    1956:	2b04      	cmp	r3, #4
    1958:	d005      	beq.n	1966 <__aeabi_ddiv+0x596>
    195a:	0001      	movs	r1, r0
    195c:	1d08      	adds	r0, r1, #4
    195e:	4288      	cmp	r0, r1
    1960:	419b      	sbcs	r3, r3
    1962:	425b      	negs	r3, r3
    1964:	18d2      	adds	r2, r2, r3
    1966:	0213      	lsls	r3, r2, #8
    1968:	d53a      	bpl.n	19e0 <__aeabi_ddiv+0x610>
    196a:	2301      	movs	r3, #1
    196c:	9a02      	ldr	r2, [sp, #8]
    196e:	2401      	movs	r4, #1
    1970:	401a      	ands	r2, r3
    1972:	2300      	movs	r3, #0
    1974:	4694      	mov	ip, r2
    1976:	4698      	mov	r8, r3
    1978:	2200      	movs	r2, #0
    197a:	e5f7      	b.n	156c <__aeabi_ddiv+0x19c>
    197c:	2102      	movs	r1, #2
    197e:	4249      	negs	r1, r1
    1980:	468c      	mov	ip, r1
    1982:	9d03      	ldr	r5, [sp, #12]
    1984:	44e3      	add	fp, ip
    1986:	46ac      	mov	ip, r5
    1988:	44e2      	add	sl, ip
    198a:	45aa      	cmp	sl, r5
    198c:	41ad      	sbcs	r5, r5
    198e:	426d      	negs	r5, r5
    1990:	4445      	add	r5, r8
    1992:	18ed      	adds	r5, r5, r3
    1994:	1a2d      	subs	r5, r5, r0
    1996:	e696      	b.n	16c6 <__aeabi_ddiv+0x2f6>
    1998:	1e8a      	subs	r2, r1, #2
    199a:	9903      	ldr	r1, [sp, #12]
    199c:	004d      	lsls	r5, r1, #1
    199e:	428d      	cmp	r5, r1
    19a0:	4189      	sbcs	r1, r1
    19a2:	4249      	negs	r1, r1
    19a4:	4441      	add	r1, r8
    19a6:	1876      	adds	r6, r6, r1
    19a8:	9503      	str	r5, [sp, #12]
    19aa:	e78f      	b.n	18cc <__aeabi_ddiv+0x4fc>
    19ac:	201f      	movs	r0, #31
    19ae:	4240      	negs	r0, r0
    19b0:	1ac3      	subs	r3, r0, r3
    19b2:	4658      	mov	r0, fp
    19b4:	40d8      	lsrs	r0, r3
    19b6:	0003      	movs	r3, r0
    19b8:	2a20      	cmp	r2, #32
    19ba:	d028      	beq.n	1a0e <__aeabi_ddiv+0x63e>
    19bc:	2040      	movs	r0, #64	; 0x40
    19be:	465d      	mov	r5, fp
    19c0:	1a82      	subs	r2, r0, r2
    19c2:	4095      	lsls	r5, r2
    19c4:	4329      	orrs	r1, r5
    19c6:	1e4a      	subs	r2, r1, #1
    19c8:	4191      	sbcs	r1, r2
    19ca:	4319      	orrs	r1, r3
    19cc:	2307      	movs	r3, #7
    19ce:	2200      	movs	r2, #0
    19d0:	400b      	ands	r3, r1
    19d2:	d009      	beq.n	19e8 <__aeabi_ddiv+0x618>
    19d4:	230f      	movs	r3, #15
    19d6:	2200      	movs	r2, #0
    19d8:	400b      	ands	r3, r1
    19da:	0008      	movs	r0, r1
    19dc:	2b04      	cmp	r3, #4
    19de:	d1bd      	bne.n	195c <__aeabi_ddiv+0x58c>
    19e0:	0001      	movs	r1, r0
    19e2:	0753      	lsls	r3, r2, #29
    19e4:	0252      	lsls	r2, r2, #9
    19e6:	0b12      	lsrs	r2, r2, #12
    19e8:	08c9      	lsrs	r1, r1, #3
    19ea:	4319      	orrs	r1, r3
    19ec:	2301      	movs	r3, #1
    19ee:	4688      	mov	r8, r1
    19f0:	9902      	ldr	r1, [sp, #8]
    19f2:	2400      	movs	r4, #0
    19f4:	4019      	ands	r1, r3
    19f6:	468c      	mov	ip, r1
    19f8:	e5b8      	b.n	156c <__aeabi_ddiv+0x19c>
    19fa:	4552      	cmp	r2, sl
    19fc:	d8be      	bhi.n	197c <__aeabi_ddiv+0x5ac>
    19fe:	468b      	mov	fp, r1
    1a00:	2500      	movs	r5, #0
    1a02:	e660      	b.n	16c6 <__aeabi_ddiv+0x2f6>
    1a04:	9d03      	ldr	r5, [sp, #12]
    1a06:	429d      	cmp	r5, r3
    1a08:	d3c6      	bcc.n	1998 <__aeabi_ddiv+0x5c8>
    1a0a:	0011      	movs	r1, r2
    1a0c:	e762      	b.n	18d4 <__aeabi_ddiv+0x504>
    1a0e:	2500      	movs	r5, #0
    1a10:	e7d8      	b.n	19c4 <__aeabi_ddiv+0x5f4>
    1a12:	2280      	movs	r2, #128	; 0x80
    1a14:	465b      	mov	r3, fp
    1a16:	0312      	lsls	r2, r2, #12
    1a18:	431a      	orrs	r2, r3
    1a1a:	9b01      	ldr	r3, [sp, #4]
    1a1c:	0312      	lsls	r2, r2, #12
    1a1e:	0b12      	lsrs	r2, r2, #12
    1a20:	469c      	mov	ip, r3
    1a22:	4688      	mov	r8, r1
    1a24:	4c03      	ldr	r4, [pc, #12]	; (1a34 <__aeabi_ddiv+0x664>)
    1a26:	e5a1      	b.n	156c <__aeabi_ddiv+0x19c>
    1a28:	000003ff 	.word	0x000003ff
    1a2c:	feffffff 	.word	0xfeffffff
    1a30:	000007fe 	.word	0x000007fe
    1a34:	000007ff 	.word	0x000007ff

00001a38 <__aeabi_f2d>:
    1a38:	0041      	lsls	r1, r0, #1
    1a3a:	0e09      	lsrs	r1, r1, #24
    1a3c:	1c4b      	adds	r3, r1, #1
    1a3e:	b570      	push	{r4, r5, r6, lr}
    1a40:	b2db      	uxtb	r3, r3
    1a42:	0246      	lsls	r6, r0, #9
    1a44:	0a75      	lsrs	r5, r6, #9
    1a46:	0fc4      	lsrs	r4, r0, #31
    1a48:	2b01      	cmp	r3, #1
    1a4a:	dd14      	ble.n	1a76 <__aeabi_f2d+0x3e>
    1a4c:	23e0      	movs	r3, #224	; 0xe0
    1a4e:	009b      	lsls	r3, r3, #2
    1a50:	076d      	lsls	r5, r5, #29
    1a52:	0b36      	lsrs	r6, r6, #12
    1a54:	18cb      	adds	r3, r1, r3
    1a56:	2100      	movs	r1, #0
    1a58:	0d0a      	lsrs	r2, r1, #20
    1a5a:	0028      	movs	r0, r5
    1a5c:	0512      	lsls	r2, r2, #20
    1a5e:	4d1c      	ldr	r5, [pc, #112]	; (1ad0 <__aeabi_f2d+0x98>)
    1a60:	4332      	orrs	r2, r6
    1a62:	055b      	lsls	r3, r3, #21
    1a64:	402a      	ands	r2, r5
    1a66:	085b      	lsrs	r3, r3, #1
    1a68:	4313      	orrs	r3, r2
    1a6a:	005b      	lsls	r3, r3, #1
    1a6c:	07e4      	lsls	r4, r4, #31
    1a6e:	085b      	lsrs	r3, r3, #1
    1a70:	4323      	orrs	r3, r4
    1a72:	0019      	movs	r1, r3
    1a74:	bd70      	pop	{r4, r5, r6, pc}
    1a76:	2900      	cmp	r1, #0
    1a78:	d114      	bne.n	1aa4 <__aeabi_f2d+0x6c>
    1a7a:	2d00      	cmp	r5, #0
    1a7c:	d01e      	beq.n	1abc <__aeabi_f2d+0x84>
    1a7e:	0028      	movs	r0, r5
    1a80:	f001 f848 	bl	2b14 <__clzsi2>
    1a84:	280a      	cmp	r0, #10
    1a86:	dc1c      	bgt.n	1ac2 <__aeabi_f2d+0x8a>
    1a88:	230b      	movs	r3, #11
    1a8a:	002a      	movs	r2, r5
    1a8c:	1a1b      	subs	r3, r3, r0
    1a8e:	40da      	lsrs	r2, r3
    1a90:	0003      	movs	r3, r0
    1a92:	3315      	adds	r3, #21
    1a94:	409d      	lsls	r5, r3
    1a96:	4b0f      	ldr	r3, [pc, #60]	; (1ad4 <__aeabi_f2d+0x9c>)
    1a98:	0312      	lsls	r2, r2, #12
    1a9a:	1a1b      	subs	r3, r3, r0
    1a9c:	055b      	lsls	r3, r3, #21
    1a9e:	0b16      	lsrs	r6, r2, #12
    1aa0:	0d5b      	lsrs	r3, r3, #21
    1aa2:	e7d8      	b.n	1a56 <__aeabi_f2d+0x1e>
    1aa4:	2d00      	cmp	r5, #0
    1aa6:	d006      	beq.n	1ab6 <__aeabi_f2d+0x7e>
    1aa8:	0b32      	lsrs	r2, r6, #12
    1aaa:	2680      	movs	r6, #128	; 0x80
    1aac:	0336      	lsls	r6, r6, #12
    1aae:	076d      	lsls	r5, r5, #29
    1ab0:	4316      	orrs	r6, r2
    1ab2:	4b09      	ldr	r3, [pc, #36]	; (1ad8 <__aeabi_f2d+0xa0>)
    1ab4:	e7cf      	b.n	1a56 <__aeabi_f2d+0x1e>
    1ab6:	4b08      	ldr	r3, [pc, #32]	; (1ad8 <__aeabi_f2d+0xa0>)
    1ab8:	2600      	movs	r6, #0
    1aba:	e7cc      	b.n	1a56 <__aeabi_f2d+0x1e>
    1abc:	2300      	movs	r3, #0
    1abe:	2600      	movs	r6, #0
    1ac0:	e7c9      	b.n	1a56 <__aeabi_f2d+0x1e>
    1ac2:	0003      	movs	r3, r0
    1ac4:	002a      	movs	r2, r5
    1ac6:	3b0b      	subs	r3, #11
    1ac8:	409a      	lsls	r2, r3
    1aca:	2500      	movs	r5, #0
    1acc:	e7e3      	b.n	1a96 <__aeabi_f2d+0x5e>
    1ace:	46c0      	nop			; (mov r8, r8)
    1ad0:	800fffff 	.word	0x800fffff
    1ad4:	00000389 	.word	0x00000389
    1ad8:	000007ff 	.word	0x000007ff

00001adc <__aeabi_d2f>:
    1adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ade:	004c      	lsls	r4, r1, #1
    1ae0:	0d64      	lsrs	r4, r4, #21
    1ae2:	030b      	lsls	r3, r1, #12
    1ae4:	1c62      	adds	r2, r4, #1
    1ae6:	0f45      	lsrs	r5, r0, #29
    1ae8:	0a5b      	lsrs	r3, r3, #9
    1aea:	0552      	lsls	r2, r2, #21
    1aec:	432b      	orrs	r3, r5
    1aee:	0fc9      	lsrs	r1, r1, #31
    1af0:	00c5      	lsls	r5, r0, #3
    1af2:	0d52      	lsrs	r2, r2, #21
    1af4:	2a01      	cmp	r2, #1
    1af6:	dd28      	ble.n	1b4a <__aeabi_d2f+0x6e>
    1af8:	4a3a      	ldr	r2, [pc, #232]	; (1be4 <__aeabi_d2f+0x108>)
    1afa:	18a6      	adds	r6, r4, r2
    1afc:	2efe      	cmp	r6, #254	; 0xfe
    1afe:	dc1b      	bgt.n	1b38 <__aeabi_d2f+0x5c>
    1b00:	2e00      	cmp	r6, #0
    1b02:	dd3e      	ble.n	1b82 <__aeabi_d2f+0xa6>
    1b04:	0180      	lsls	r0, r0, #6
    1b06:	0002      	movs	r2, r0
    1b08:	1e50      	subs	r0, r2, #1
    1b0a:	4182      	sbcs	r2, r0
    1b0c:	0f6d      	lsrs	r5, r5, #29
    1b0e:	432a      	orrs	r2, r5
    1b10:	00db      	lsls	r3, r3, #3
    1b12:	4313      	orrs	r3, r2
    1b14:	075a      	lsls	r2, r3, #29
    1b16:	d004      	beq.n	1b22 <__aeabi_d2f+0x46>
    1b18:	220f      	movs	r2, #15
    1b1a:	401a      	ands	r2, r3
    1b1c:	2a04      	cmp	r2, #4
    1b1e:	d000      	beq.n	1b22 <__aeabi_d2f+0x46>
    1b20:	3304      	adds	r3, #4
    1b22:	2280      	movs	r2, #128	; 0x80
    1b24:	04d2      	lsls	r2, r2, #19
    1b26:	401a      	ands	r2, r3
    1b28:	d05a      	beq.n	1be0 <__aeabi_d2f+0x104>
    1b2a:	3601      	adds	r6, #1
    1b2c:	2eff      	cmp	r6, #255	; 0xff
    1b2e:	d003      	beq.n	1b38 <__aeabi_d2f+0x5c>
    1b30:	019b      	lsls	r3, r3, #6
    1b32:	0a5b      	lsrs	r3, r3, #9
    1b34:	b2f4      	uxtb	r4, r6
    1b36:	e001      	b.n	1b3c <__aeabi_d2f+0x60>
    1b38:	24ff      	movs	r4, #255	; 0xff
    1b3a:	2300      	movs	r3, #0
    1b3c:	0258      	lsls	r0, r3, #9
    1b3e:	05e4      	lsls	r4, r4, #23
    1b40:	0a40      	lsrs	r0, r0, #9
    1b42:	07c9      	lsls	r1, r1, #31
    1b44:	4320      	orrs	r0, r4
    1b46:	4308      	orrs	r0, r1
    1b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b4a:	2c00      	cmp	r4, #0
    1b4c:	d007      	beq.n	1b5e <__aeabi_d2f+0x82>
    1b4e:	431d      	orrs	r5, r3
    1b50:	d0f2      	beq.n	1b38 <__aeabi_d2f+0x5c>
    1b52:	2080      	movs	r0, #128	; 0x80
    1b54:	00db      	lsls	r3, r3, #3
    1b56:	0480      	lsls	r0, r0, #18
    1b58:	4303      	orrs	r3, r0
    1b5a:	26ff      	movs	r6, #255	; 0xff
    1b5c:	e7da      	b.n	1b14 <__aeabi_d2f+0x38>
    1b5e:	432b      	orrs	r3, r5
    1b60:	d003      	beq.n	1b6a <__aeabi_d2f+0x8e>
    1b62:	2305      	movs	r3, #5
    1b64:	08db      	lsrs	r3, r3, #3
    1b66:	2cff      	cmp	r4, #255	; 0xff
    1b68:	d003      	beq.n	1b72 <__aeabi_d2f+0x96>
    1b6a:	025b      	lsls	r3, r3, #9
    1b6c:	0a5b      	lsrs	r3, r3, #9
    1b6e:	b2e4      	uxtb	r4, r4
    1b70:	e7e4      	b.n	1b3c <__aeabi_d2f+0x60>
    1b72:	2b00      	cmp	r3, #0
    1b74:	d032      	beq.n	1bdc <__aeabi_d2f+0x100>
    1b76:	2080      	movs	r0, #128	; 0x80
    1b78:	03c0      	lsls	r0, r0, #15
    1b7a:	4303      	orrs	r3, r0
    1b7c:	025b      	lsls	r3, r3, #9
    1b7e:	0a5b      	lsrs	r3, r3, #9
    1b80:	e7dc      	b.n	1b3c <__aeabi_d2f+0x60>
    1b82:	0032      	movs	r2, r6
    1b84:	3217      	adds	r2, #23
    1b86:	db14      	blt.n	1bb2 <__aeabi_d2f+0xd6>
    1b88:	2280      	movs	r2, #128	; 0x80
    1b8a:	271e      	movs	r7, #30
    1b8c:	0412      	lsls	r2, r2, #16
    1b8e:	4313      	orrs	r3, r2
    1b90:	1bbf      	subs	r7, r7, r6
    1b92:	2f1f      	cmp	r7, #31
    1b94:	dc0f      	bgt.n	1bb6 <__aeabi_d2f+0xda>
    1b96:	4a14      	ldr	r2, [pc, #80]	; (1be8 <__aeabi_d2f+0x10c>)
    1b98:	4694      	mov	ip, r2
    1b9a:	4464      	add	r4, ip
    1b9c:	002a      	movs	r2, r5
    1b9e:	40a5      	lsls	r5, r4
    1ba0:	002e      	movs	r6, r5
    1ba2:	40a3      	lsls	r3, r4
    1ba4:	1e75      	subs	r5, r6, #1
    1ba6:	41ae      	sbcs	r6, r5
    1ba8:	40fa      	lsrs	r2, r7
    1baa:	4333      	orrs	r3, r6
    1bac:	4313      	orrs	r3, r2
    1bae:	2600      	movs	r6, #0
    1bb0:	e7b0      	b.n	1b14 <__aeabi_d2f+0x38>
    1bb2:	2400      	movs	r4, #0
    1bb4:	e7d5      	b.n	1b62 <__aeabi_d2f+0x86>
    1bb6:	2202      	movs	r2, #2
    1bb8:	4252      	negs	r2, r2
    1bba:	1b96      	subs	r6, r2, r6
    1bbc:	001a      	movs	r2, r3
    1bbe:	40f2      	lsrs	r2, r6
    1bc0:	2f20      	cmp	r7, #32
    1bc2:	d009      	beq.n	1bd8 <__aeabi_d2f+0xfc>
    1bc4:	4809      	ldr	r0, [pc, #36]	; (1bec <__aeabi_d2f+0x110>)
    1bc6:	4684      	mov	ip, r0
    1bc8:	4464      	add	r4, ip
    1bca:	40a3      	lsls	r3, r4
    1bcc:	432b      	orrs	r3, r5
    1bce:	1e5d      	subs	r5, r3, #1
    1bd0:	41ab      	sbcs	r3, r5
    1bd2:	2600      	movs	r6, #0
    1bd4:	4313      	orrs	r3, r2
    1bd6:	e79d      	b.n	1b14 <__aeabi_d2f+0x38>
    1bd8:	2300      	movs	r3, #0
    1bda:	e7f7      	b.n	1bcc <__aeabi_d2f+0xf0>
    1bdc:	2300      	movs	r3, #0
    1bde:	e7ad      	b.n	1b3c <__aeabi_d2f+0x60>
    1be0:	0034      	movs	r4, r6
    1be2:	e7bf      	b.n	1b64 <__aeabi_d2f+0x88>
    1be4:	fffffc80 	.word	0xfffffc80
    1be8:	fffffc82 	.word	0xfffffc82
    1bec:	fffffca2 	.word	0xfffffca2

00001bf0 <selfrel_offset31>:
    1bf0:	6803      	ldr	r3, [r0, #0]
    1bf2:	005a      	lsls	r2, r3, #1
    1bf4:	d403      	bmi.n	1bfe <selfrel_offset31+0xe>
    1bf6:	005b      	lsls	r3, r3, #1
    1bf8:	085b      	lsrs	r3, r3, #1
    1bfa:	18c0      	adds	r0, r0, r3
    1bfc:	4770      	bx	lr
    1bfe:	2280      	movs	r2, #128	; 0x80
    1c00:	0612      	lsls	r2, r2, #24
    1c02:	4313      	orrs	r3, r2
    1c04:	e7f9      	b.n	1bfa <selfrel_offset31+0xa>
    1c06:	46c0      	nop			; (mov r8, r8)

00001c08 <search_EIT_table>:
    1c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c0a:	4657      	mov	r7, sl
    1c0c:	464e      	mov	r6, r9
    1c0e:	46de      	mov	lr, fp
    1c10:	4645      	mov	r5, r8
    1c12:	b5e0      	push	{r5, r6, r7, lr}
    1c14:	4681      	mov	r9, r0
    1c16:	b083      	sub	sp, #12
    1c18:	4692      	mov	sl, r2
    1c1a:	2900      	cmp	r1, #0
    1c1c:	d025      	beq.n	1c6a <search_EIT_table+0x62>
    1c1e:	1e4b      	subs	r3, r1, #1
    1c20:	469b      	mov	fp, r3
    1c22:	2700      	movs	r7, #0
    1c24:	9301      	str	r3, [sp, #4]
    1c26:	465b      	mov	r3, fp
    1c28:	18fb      	adds	r3, r7, r3
    1c2a:	0fdc      	lsrs	r4, r3, #31
    1c2c:	18e4      	adds	r4, r4, r3
    1c2e:	464b      	mov	r3, r9
    1c30:	1064      	asrs	r4, r4, #1
    1c32:	00e5      	lsls	r5, r4, #3
    1c34:	195e      	adds	r6, r3, r5
    1c36:	0030      	movs	r0, r6
    1c38:	f7ff ffda 	bl	1bf0 <selfrel_offset31>
    1c3c:	9b01      	ldr	r3, [sp, #4]
    1c3e:	4680      	mov	r8, r0
    1c40:	42a3      	cmp	r3, r4
    1c42:	d00b      	beq.n	1c5c <search_EIT_table+0x54>
    1c44:	0028      	movs	r0, r5
    1c46:	3008      	adds	r0, #8
    1c48:	4448      	add	r0, r9
    1c4a:	f7ff ffd1 	bl	1bf0 <selfrel_offset31>
    1c4e:	45d0      	cmp	r8, sl
    1c50:	d806      	bhi.n	1c60 <search_EIT_table+0x58>
    1c52:	3801      	subs	r0, #1
    1c54:	4550      	cmp	r0, sl
    1c56:	d209      	bcs.n	1c6c <search_EIT_table+0x64>
    1c58:	1c67      	adds	r7, r4, #1
    1c5a:	e7e4      	b.n	1c26 <search_EIT_table+0x1e>
    1c5c:	4550      	cmp	r0, sl
    1c5e:	d905      	bls.n	1c6c <search_EIT_table+0x64>
    1c60:	42a7      	cmp	r7, r4
    1c62:	d002      	beq.n	1c6a <search_EIT_table+0x62>
    1c64:	1e63      	subs	r3, r4, #1
    1c66:	469b      	mov	fp, r3
    1c68:	e7dd      	b.n	1c26 <search_EIT_table+0x1e>
    1c6a:	2600      	movs	r6, #0
    1c6c:	0030      	movs	r0, r6
    1c6e:	b003      	add	sp, #12
    1c70:	bc3c      	pop	{r2, r3, r4, r5}
    1c72:	4690      	mov	r8, r2
    1c74:	4699      	mov	r9, r3
    1c76:	46a2      	mov	sl, r4
    1c78:	46ab      	mov	fp, r5
    1c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001c7c <__gnu_unwind_get_pr_addr>:
    1c7c:	2801      	cmp	r0, #1
    1c7e:	d009      	beq.n	1c94 <__gnu_unwind_get_pr_addr+0x18>
    1c80:	2802      	cmp	r0, #2
    1c82:	d005      	beq.n	1c90 <__gnu_unwind_get_pr_addr+0x14>
    1c84:	2800      	cmp	r0, #0
    1c86:	d001      	beq.n	1c8c <__gnu_unwind_get_pr_addr+0x10>
    1c88:	2000      	movs	r0, #0
    1c8a:	4770      	bx	lr
    1c8c:	4802      	ldr	r0, [pc, #8]	; (1c98 <__gnu_unwind_get_pr_addr+0x1c>)
    1c8e:	e7fc      	b.n	1c8a <__gnu_unwind_get_pr_addr+0xe>
    1c90:	4802      	ldr	r0, [pc, #8]	; (1c9c <__gnu_unwind_get_pr_addr+0x20>)
    1c92:	e7fa      	b.n	1c8a <__gnu_unwind_get_pr_addr+0xe>
    1c94:	4802      	ldr	r0, [pc, #8]	; (1ca0 <__gnu_unwind_get_pr_addr+0x24>)
    1c96:	e7f8      	b.n	1c8a <__gnu_unwind_get_pr_addr+0xe>
    1c98:	0000239d 	.word	0x0000239d
    1c9c:	000023b5 	.word	0x000023b5
    1ca0:	000023a9 	.word	0x000023a9

00001ca4 <get_eit_entry>:
    1ca4:	b530      	push	{r4, r5, lr}
    1ca6:	4b23      	ldr	r3, [pc, #140]	; (1d34 <get_eit_entry+0x90>)
    1ca8:	b083      	sub	sp, #12
    1caa:	0005      	movs	r5, r0
    1cac:	1e8c      	subs	r4, r1, #2
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d02a      	beq.n	1d08 <get_eit_entry+0x64>
    1cb2:	a901      	add	r1, sp, #4
    1cb4:	0020      	movs	r0, r4
    1cb6:	e000      	b.n	1cba <get_eit_entry+0x16>
    1cb8:	bf00      	nop
    1cba:	2800      	cmp	r0, #0
    1cbc:	d020      	beq.n	1d00 <get_eit_entry+0x5c>
    1cbe:	9901      	ldr	r1, [sp, #4]
    1cc0:	0022      	movs	r2, r4
    1cc2:	f7ff ffa1 	bl	1c08 <search_EIT_table>
    1cc6:	1e04      	subs	r4, r0, #0
    1cc8:	d01a      	beq.n	1d00 <get_eit_entry+0x5c>
    1cca:	f7ff ff91 	bl	1bf0 <selfrel_offset31>
    1cce:	6863      	ldr	r3, [r4, #4]
    1cd0:	64a8      	str	r0, [r5, #72]	; 0x48
    1cd2:	2b01      	cmp	r3, #1
    1cd4:	d010      	beq.n	1cf8 <get_eit_entry+0x54>
    1cd6:	1d20      	adds	r0, r4, #4
    1cd8:	2b00      	cmp	r3, #0
    1cda:	db1b      	blt.n	1d14 <get_eit_entry+0x70>
    1cdc:	f7ff ff88 	bl	1bf0 <selfrel_offset31>
    1ce0:	2300      	movs	r3, #0
    1ce2:	64e8      	str	r0, [r5, #76]	; 0x4c
    1ce4:	652b      	str	r3, [r5, #80]	; 0x50
    1ce6:	6803      	ldr	r3, [r0, #0]
    1ce8:	2b00      	cmp	r3, #0
    1cea:	db17      	blt.n	1d1c <get_eit_entry+0x78>
    1cec:	f7ff ff80 	bl	1bf0 <selfrel_offset31>
    1cf0:	6128      	str	r0, [r5, #16]
    1cf2:	2000      	movs	r0, #0
    1cf4:	b003      	add	sp, #12
    1cf6:	bd30      	pop	{r4, r5, pc}
    1cf8:	2300      	movs	r3, #0
    1cfa:	2005      	movs	r0, #5
    1cfc:	612b      	str	r3, [r5, #16]
    1cfe:	e7f9      	b.n	1cf4 <get_eit_entry+0x50>
    1d00:	2300      	movs	r3, #0
    1d02:	2009      	movs	r0, #9
    1d04:	612b      	str	r3, [r5, #16]
    1d06:	e7f5      	b.n	1cf4 <get_eit_entry+0x50>
    1d08:	480b      	ldr	r0, [pc, #44]	; (1d38 <get_eit_entry+0x94>)
    1d0a:	490c      	ldr	r1, [pc, #48]	; (1d3c <get_eit_entry+0x98>)
    1d0c:	1a09      	subs	r1, r1, r0
    1d0e:	10c9      	asrs	r1, r1, #3
    1d10:	9101      	str	r1, [sp, #4]
    1d12:	e7d5      	b.n	1cc0 <get_eit_entry+0x1c>
    1d14:	2301      	movs	r3, #1
    1d16:	64e8      	str	r0, [r5, #76]	; 0x4c
    1d18:	652b      	str	r3, [r5, #80]	; 0x50
    1d1a:	e7e4      	b.n	1ce6 <get_eit_entry+0x42>
    1d1c:	0118      	lsls	r0, r3, #4
    1d1e:	0f00      	lsrs	r0, r0, #28
    1d20:	f7ff ffac 	bl	1c7c <__gnu_unwind_get_pr_addr>
    1d24:	6128      	str	r0, [r5, #16]
    1d26:	2800      	cmp	r0, #0
    1d28:	d101      	bne.n	1d2e <get_eit_entry+0x8a>
    1d2a:	3009      	adds	r0, #9
    1d2c:	e7e2      	b.n	1cf4 <get_eit_entry+0x50>
    1d2e:	2000      	movs	r0, #0
    1d30:	e7e0      	b.n	1cf4 <get_eit_entry+0x50>
    1d32:	46c0      	nop			; (mov r8, r8)
    1d34:	00000000 	.word	0x00000000
    1d38:	0000fc10 	.word	0x0000fc10
    1d3c:	0000fdd8 	.word	0x0000fdd8

00001d40 <restore_non_core_regs>:
    1d40:	6803      	ldr	r3, [r0, #0]
    1d42:	b510      	push	{r4, lr}
    1d44:	0004      	movs	r4, r0
    1d46:	07da      	lsls	r2, r3, #31
    1d48:	d405      	bmi.n	1d56 <restore_non_core_regs+0x16>
    1d4a:	079b      	lsls	r3, r3, #30
    1d4c:	d50f      	bpl.n	1d6e <restore_non_core_regs+0x2e>
    1d4e:	3048      	adds	r0, #72	; 0x48
    1d50:	f000 fc84 	bl	265c <__gnu_Unwind_Restore_VFP_D>
    1d54:	6823      	ldr	r3, [r4, #0]
    1d56:	075a      	lsls	r2, r3, #29
    1d58:	d50f      	bpl.n	1d7a <restore_non_core_regs+0x3a>
    1d5a:	071a      	lsls	r2, r3, #28
    1d5c:	d514      	bpl.n	1d88 <restore_non_core_regs+0x48>
    1d5e:	06db      	lsls	r3, r3, #27
    1d60:	d404      	bmi.n	1d6c <restore_non_core_regs+0x2c>
    1d62:	0020      	movs	r0, r4
    1d64:	30d1      	adds	r0, #209	; 0xd1
    1d66:	30ff      	adds	r0, #255	; 0xff
    1d68:	f000 fc84 	bl	2674 <__gnu_Unwind_Restore_WMMXC>
    1d6c:	bd10      	pop	{r4, pc}
    1d6e:	3048      	adds	r0, #72	; 0x48
    1d70:	f000 fc70 	bl	2654 <__gnu_Unwind_Restore_VFP>
    1d74:	6823      	ldr	r3, [r4, #0]
    1d76:	075a      	lsls	r2, r3, #29
    1d78:	d4ef      	bmi.n	1d5a <restore_non_core_regs+0x1a>
    1d7a:	0020      	movs	r0, r4
    1d7c:	30d0      	adds	r0, #208	; 0xd0
    1d7e:	f000 fc71 	bl	2664 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    1d82:	6823      	ldr	r3, [r4, #0]
    1d84:	071a      	lsls	r2, r3, #28
    1d86:	d4ea      	bmi.n	1d5e <restore_non_core_regs+0x1e>
    1d88:	0020      	movs	r0, r4
    1d8a:	3051      	adds	r0, #81	; 0x51
    1d8c:	30ff      	adds	r0, #255	; 0xff
    1d8e:	f000 fc6d 	bl	266c <__gnu_Unwind_Restore_WMMXD>
    1d92:	6823      	ldr	r3, [r4, #0]
    1d94:	e7e3      	b.n	1d5e <restore_non_core_regs+0x1e>
    1d96:	46c0      	nop			; (mov r8, r8)

00001d98 <_Unwind_decode_typeinfo_ptr.isra.0>:
    1d98:	6803      	ldr	r3, [r0, #0]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d000      	beq.n	1da0 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
    1d9e:	181b      	adds	r3, r3, r0
    1da0:	0018      	movs	r0, r3
    1da2:	4770      	bx	lr

00001da4 <__gnu_unwind_24bit.isra.1>:
    1da4:	2009      	movs	r0, #9
    1da6:	4770      	bx	lr

00001da8 <_Unwind_DebugHook>:
    1da8:	4770      	bx	lr
    1daa:	46c0      	nop			; (mov r8, r8)

00001dac <unwind_phase2>:
    1dac:	b570      	push	{r4, r5, r6, lr}
    1dae:	0004      	movs	r4, r0
    1db0:	000d      	movs	r5, r1
    1db2:	e008      	b.n	1dc6 <unwind_phase2+0x1a>
    1db4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    1db6:	002a      	movs	r2, r5
    1db8:	6163      	str	r3, [r4, #20]
    1dba:	0021      	movs	r1, r4
    1dbc:	2001      	movs	r0, #1
    1dbe:	6923      	ldr	r3, [r4, #16]
    1dc0:	4798      	blx	r3
    1dc2:	2808      	cmp	r0, #8
    1dc4:	d107      	bne.n	1dd6 <unwind_phase2+0x2a>
    1dc6:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1dc8:	0020      	movs	r0, r4
    1dca:	f7ff ff6b 	bl	1ca4 <get_eit_entry>
    1dce:	2800      	cmp	r0, #0
    1dd0:	d0f0      	beq.n	1db4 <unwind_phase2+0x8>
    1dd2:	f00b fe71 	bl	dab8 <abort>
    1dd6:	2807      	cmp	r0, #7
    1dd8:	d1fb      	bne.n	1dd2 <unwind_phase2+0x26>
    1dda:	2000      	movs	r0, #0
    1ddc:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1dde:	f7ff ffe3 	bl	1da8 <_Unwind_DebugHook>
    1de2:	1d28      	adds	r0, r5, #4
    1de4:	f000 fc20 	bl	2628 <__restore_core_regs>

00001de8 <unwind_phase2_forced>:
    1de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dea:	46ce      	mov	lr, r9
    1dec:	4647      	mov	r7, r8
    1dee:	b580      	push	{r7, lr}
    1df0:	68c3      	ldr	r3, [r0, #12]
    1df2:	4c32      	ldr	r4, [pc, #200]	; (1ebc <unwind_phase2_forced+0xd4>)
    1df4:	4698      	mov	r8, r3
    1df6:	44a5      	add	sp, r4
    1df8:	6983      	ldr	r3, [r0, #24]
    1dfa:	0006      	movs	r6, r0
    1dfc:	0014      	movs	r4, r2
    1dfe:	3104      	adds	r1, #4
    1e00:	2240      	movs	r2, #64	; 0x40
    1e02:	a805      	add	r0, sp, #20
    1e04:	4699      	mov	r9, r3
    1e06:	f00b fe7a 	bl	dafe <memcpy>
    1e0a:	2300      	movs	r3, #0
    1e0c:	ad04      	add	r5, sp, #16
    1e0e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1e10:	0030      	movs	r0, r6
    1e12:	9304      	str	r3, [sp, #16]
    1e14:	f7ff ff46 	bl	1ca4 <get_eit_entry>
    1e18:	1e63      	subs	r3, r4, #1
    1e1a:	419c      	sbcs	r4, r3
    1e1c:	0007      	movs	r7, r0
    1e1e:	3409      	adds	r4, #9
    1e20:	2f00      	cmp	r7, #0
    1e22:	d015      	beq.n	1e50 <unwind_phase2_forced+0x68>
    1e24:	6bab      	ldr	r3, [r5, #56]	; 0x38
    1e26:	2110      	movs	r1, #16
    1e28:	646b      	str	r3, [r5, #68]	; 0x44
    1e2a:	464b      	mov	r3, r9
    1e2c:	4321      	orrs	r1, r4
    1e2e:	9301      	str	r3, [sp, #4]
    1e30:	b2c9      	uxtb	r1, r1
    1e32:	9500      	str	r5, [sp, #0]
    1e34:	0033      	movs	r3, r6
    1e36:	0032      	movs	r2, r6
    1e38:	2001      	movs	r0, #1
    1e3a:	47c0      	blx	r8
    1e3c:	2800      	cmp	r0, #0
    1e3e:	d133      	bne.n	1ea8 <unwind_phase2_forced+0xc0>
    1e40:	0038      	movs	r0, r7
    1e42:	23f5      	movs	r3, #245	; 0xf5
    1e44:	009b      	lsls	r3, r3, #2
    1e46:	449d      	add	sp, r3
    1e48:	bc0c      	pop	{r2, r3}
    1e4a:	4690      	mov	r8, r2
    1e4c:	4699      	mov	r9, r3
    1e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e50:	22f0      	movs	r2, #240	; 0xf0
    1e52:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    1e54:	0052      	lsls	r2, r2, #1
    1e56:	6173      	str	r3, [r6, #20]
    1e58:	0029      	movs	r1, r5
    1e5a:	a87c      	add	r0, sp, #496	; 0x1f0
    1e5c:	f00b fe4f 	bl	dafe <memcpy>
    1e60:	aa7c      	add	r2, sp, #496	; 0x1f0
    1e62:	0031      	movs	r1, r6
    1e64:	6933      	ldr	r3, [r6, #16]
    1e66:	0020      	movs	r0, r4
    1e68:	4798      	blx	r3
    1e6a:	9b8a      	ldr	r3, [sp, #552]	; 0x228
    1e6c:	0007      	movs	r7, r0
    1e6e:	646b      	str	r3, [r5, #68]	; 0x44
    1e70:	9303      	str	r3, [sp, #12]
    1e72:	464b      	mov	r3, r9
    1e74:	9500      	str	r5, [sp, #0]
    1e76:	9301      	str	r3, [sp, #4]
    1e78:	0032      	movs	r2, r6
    1e7a:	0033      	movs	r3, r6
    1e7c:	0021      	movs	r1, r4
    1e7e:	2001      	movs	r0, #1
    1e80:	47c0      	blx	r8
    1e82:	2800      	cmp	r0, #0
    1e84:	d110      	bne.n	1ea8 <unwind_phase2_forced+0xc0>
    1e86:	22f0      	movs	r2, #240	; 0xf0
    1e88:	a97c      	add	r1, sp, #496	; 0x1f0
    1e8a:	0052      	lsls	r2, r2, #1
    1e8c:	0028      	movs	r0, r5
    1e8e:	f00b fe36 	bl	dafe <memcpy>
    1e92:	2f08      	cmp	r7, #8
    1e94:	d106      	bne.n	1ea4 <unwind_phase2_forced+0xbc>
    1e96:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1e98:	0030      	movs	r0, r6
    1e9a:	f7ff ff03 	bl	1ca4 <get_eit_entry>
    1e9e:	2409      	movs	r4, #9
    1ea0:	0007      	movs	r7, r0
    1ea2:	e7bd      	b.n	1e20 <unwind_phase2_forced+0x38>
    1ea4:	2f07      	cmp	r7, #7
    1ea6:	d001      	beq.n	1eac <unwind_phase2_forced+0xc4>
    1ea8:	2709      	movs	r7, #9
    1eaa:	e7c9      	b.n	1e40 <unwind_phase2_forced+0x58>
    1eac:	2000      	movs	r0, #0
    1eae:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1eb0:	f7ff ff7a 	bl	1da8 <_Unwind_DebugHook>
    1eb4:	a805      	add	r0, sp, #20
    1eb6:	f000 fbb7 	bl	2628 <__restore_core_regs>
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	fffffc2c 	.word	0xfffffc2c

00001ec0 <_Unwind_GetCFA>:
    1ec0:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1ec2:	4770      	bx	lr

00001ec4 <__gnu_Unwind_RaiseException>:
    1ec4:	b570      	push	{r4, r5, r6, lr}
    1ec6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    1ec8:	b0fa      	sub	sp, #488	; 0x1e8
    1eca:	640b      	str	r3, [r1, #64]	; 0x40
    1ecc:	0004      	movs	r4, r0
    1ece:	000e      	movs	r6, r1
    1ed0:	2240      	movs	r2, #64	; 0x40
    1ed2:	3104      	adds	r1, #4
    1ed4:	a803      	add	r0, sp, #12
    1ed6:	f00b fe12 	bl	dafe <memcpy>
    1eda:	2301      	movs	r3, #1
    1edc:	425b      	negs	r3, r3
    1ede:	9302      	str	r3, [sp, #8]
    1ee0:	e006      	b.n	1ef0 <__gnu_Unwind_RaiseException+0x2c>
    1ee2:	aa02      	add	r2, sp, #8
    1ee4:	0021      	movs	r1, r4
    1ee6:	6923      	ldr	r3, [r4, #16]
    1ee8:	4798      	blx	r3
    1eea:	0005      	movs	r5, r0
    1eec:	2808      	cmp	r0, #8
    1eee:	d10a      	bne.n	1f06 <__gnu_Unwind_RaiseException+0x42>
    1ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1ef2:	0020      	movs	r0, r4
    1ef4:	0019      	movs	r1, r3
    1ef6:	9301      	str	r3, [sp, #4]
    1ef8:	f7ff fed4 	bl	1ca4 <get_eit_entry>
    1efc:	2800      	cmp	r0, #0
    1efe:	d0f0      	beq.n	1ee2 <__gnu_Unwind_RaiseException+0x1e>
    1f00:	2009      	movs	r0, #9
    1f02:	b07a      	add	sp, #488	; 0x1e8
    1f04:	bd70      	pop	{r4, r5, r6, pc}
    1f06:	a802      	add	r0, sp, #8
    1f08:	f7ff ff1a 	bl	1d40 <restore_non_core_regs>
    1f0c:	2d06      	cmp	r5, #6
    1f0e:	d1f7      	bne.n	1f00 <__gnu_Unwind_RaiseException+0x3c>
    1f10:	0031      	movs	r1, r6
    1f12:	0020      	movs	r0, r4
    1f14:	f7ff ff4a 	bl	1dac <unwind_phase2>

00001f18 <__gnu_Unwind_ForcedUnwind>:
    1f18:	b510      	push	{r4, lr}
    1f1a:	6182      	str	r2, [r0, #24]
    1f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1f1e:	60c1      	str	r1, [r0, #12]
    1f20:	641a      	str	r2, [r3, #64]	; 0x40
    1f22:	0019      	movs	r1, r3
    1f24:	2200      	movs	r2, #0
    1f26:	f7ff ff5f 	bl	1de8 <unwind_phase2_forced>
    1f2a:	bd10      	pop	{r4, pc}

00001f2c <__gnu_Unwind_Resume>:
    1f2c:	6943      	ldr	r3, [r0, #20]
    1f2e:	b570      	push	{r4, r5, r6, lr}
    1f30:	640b      	str	r3, [r1, #64]	; 0x40
    1f32:	68c3      	ldr	r3, [r0, #12]
    1f34:	0004      	movs	r4, r0
    1f36:	000d      	movs	r5, r1
    1f38:	2b00      	cmp	r3, #0
    1f3a:	d004      	beq.n	1f46 <__gnu_Unwind_Resume+0x1a>
    1f3c:	2201      	movs	r2, #1
    1f3e:	f7ff ff53 	bl	1de8 <unwind_phase2_forced>
    1f42:	f00b fdb9 	bl	dab8 <abort>
    1f46:	000a      	movs	r2, r1
    1f48:	6923      	ldr	r3, [r4, #16]
    1f4a:	0001      	movs	r1, r0
    1f4c:	2002      	movs	r0, #2
    1f4e:	4798      	blx	r3
    1f50:	2807      	cmp	r0, #7
    1f52:	d007      	beq.n	1f64 <__gnu_Unwind_Resume+0x38>
    1f54:	2808      	cmp	r0, #8
    1f56:	d103      	bne.n	1f60 <__gnu_Unwind_Resume+0x34>
    1f58:	0029      	movs	r1, r5
    1f5a:	0020      	movs	r0, r4
    1f5c:	f7ff ff26 	bl	1dac <unwind_phase2>
    1f60:	f00b fdaa 	bl	dab8 <abort>
    1f64:	2000      	movs	r0, #0
    1f66:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1f68:	f7ff ff1e 	bl	1da8 <_Unwind_DebugHook>
    1f6c:	1d28      	adds	r0, r5, #4
    1f6e:	f000 fb5b 	bl	2628 <__restore_core_regs>
    1f72:	46c0      	nop			; (mov r8, r8)

00001f74 <__gnu_Unwind_Resume_or_Rethrow>:
    1f74:	68c3      	ldr	r3, [r0, #12]
    1f76:	b510      	push	{r4, lr}
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d005      	beq.n	1f88 <__gnu_Unwind_Resume_or_Rethrow+0x14>
    1f7c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    1f7e:	2200      	movs	r2, #0
    1f80:	640b      	str	r3, [r1, #64]	; 0x40
    1f82:	f7ff ff31 	bl	1de8 <unwind_phase2_forced>
    1f86:	bd10      	pop	{r4, pc}
    1f88:	f7ff ff9c 	bl	1ec4 <__gnu_Unwind_RaiseException>
    1f8c:	e7fb      	b.n	1f86 <__gnu_Unwind_Resume_or_Rethrow+0x12>
    1f8e:	46c0      	nop			; (mov r8, r8)

00001f90 <_Unwind_Complete>:
    1f90:	4770      	bx	lr
    1f92:	46c0      	nop			; (mov r8, r8)

00001f94 <_Unwind_DeleteException>:
    1f94:	6883      	ldr	r3, [r0, #8]
    1f96:	b510      	push	{r4, lr}
    1f98:	2b00      	cmp	r3, #0
    1f9a:	d002      	beq.n	1fa2 <_Unwind_DeleteException+0xe>
    1f9c:	0001      	movs	r1, r0
    1f9e:	2001      	movs	r0, #1
    1fa0:	4798      	blx	r3
    1fa2:	bd10      	pop	{r4, pc}

00001fa4 <_Unwind_VRS_Get>:
    1fa4:	b510      	push	{r4, lr}
    1fa6:	2901      	cmp	r1, #1
    1fa8:	d007      	beq.n	1fba <_Unwind_VRS_Get+0x16>
    1faa:	2900      	cmp	r1, #0
    1fac:	d007      	beq.n	1fbe <_Unwind_VRS_Get+0x1a>
    1fae:	3903      	subs	r1, #3
    1fb0:	2402      	movs	r4, #2
    1fb2:	2901      	cmp	r1, #1
    1fb4:	d901      	bls.n	1fba <_Unwind_VRS_Get+0x16>
    1fb6:	0020      	movs	r0, r4
    1fb8:	bd10      	pop	{r4, pc}
    1fba:	2401      	movs	r4, #1
    1fbc:	e7fb      	b.n	1fb6 <_Unwind_VRS_Get+0x12>
    1fbe:	2402      	movs	r4, #2
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	d1f8      	bne.n	1fb6 <_Unwind_VRS_Get+0x12>
    1fc4:	2a0f      	cmp	r2, #15
    1fc6:	d8f6      	bhi.n	1fb6 <_Unwind_VRS_Get+0x12>
    1fc8:	0092      	lsls	r2, r2, #2
    1fca:	1882      	adds	r2, r0, r2
    1fcc:	6852      	ldr	r2, [r2, #4]
    1fce:	9b02      	ldr	r3, [sp, #8]
    1fd0:	2400      	movs	r4, #0
    1fd2:	601a      	str	r2, [r3, #0]
    1fd4:	e7ef      	b.n	1fb6 <_Unwind_VRS_Get+0x12>
    1fd6:	46c0      	nop			; (mov r8, r8)

00001fd8 <_Unwind_GetGR>:
    1fd8:	b500      	push	{lr}
    1fda:	b085      	sub	sp, #20
    1fdc:	ab03      	add	r3, sp, #12
    1fde:	000a      	movs	r2, r1
    1fe0:	9300      	str	r3, [sp, #0]
    1fe2:	2100      	movs	r1, #0
    1fe4:	2300      	movs	r3, #0
    1fe6:	f7ff ffdd 	bl	1fa4 <_Unwind_VRS_Get>
    1fea:	9803      	ldr	r0, [sp, #12]
    1fec:	b005      	add	sp, #20
    1fee:	bd00      	pop	{pc}

00001ff0 <_Unwind_VRS_Set>:
    1ff0:	b510      	push	{r4, lr}
    1ff2:	2901      	cmp	r1, #1
    1ff4:	d007      	beq.n	2006 <_Unwind_VRS_Set+0x16>
    1ff6:	2900      	cmp	r1, #0
    1ff8:	d007      	beq.n	200a <_Unwind_VRS_Set+0x1a>
    1ffa:	3903      	subs	r1, #3
    1ffc:	2402      	movs	r4, #2
    1ffe:	2901      	cmp	r1, #1
    2000:	d901      	bls.n	2006 <_Unwind_VRS_Set+0x16>
    2002:	0020      	movs	r0, r4
    2004:	bd10      	pop	{r4, pc}
    2006:	2401      	movs	r4, #1
    2008:	e7fb      	b.n	2002 <_Unwind_VRS_Set+0x12>
    200a:	2402      	movs	r4, #2
    200c:	2b00      	cmp	r3, #0
    200e:	d1f8      	bne.n	2002 <_Unwind_VRS_Set+0x12>
    2010:	2a0f      	cmp	r2, #15
    2012:	d8f6      	bhi.n	2002 <_Unwind_VRS_Set+0x12>
    2014:	9b02      	ldr	r3, [sp, #8]
    2016:	0092      	lsls	r2, r2, #2
    2018:	681b      	ldr	r3, [r3, #0]
    201a:	1882      	adds	r2, r0, r2
    201c:	6053      	str	r3, [r2, #4]
    201e:	2400      	movs	r4, #0
    2020:	e7ef      	b.n	2002 <_Unwind_VRS_Set+0x12>
    2022:	46c0      	nop			; (mov r8, r8)

00002024 <_Unwind_SetGR>:
    2024:	b500      	push	{lr}
    2026:	b085      	sub	sp, #20
    2028:	ab03      	add	r3, sp, #12
    202a:	9203      	str	r2, [sp, #12]
    202c:	9300      	str	r3, [sp, #0]
    202e:	000a      	movs	r2, r1
    2030:	2300      	movs	r3, #0
    2032:	2100      	movs	r1, #0
    2034:	f7ff ffdc 	bl	1ff0 <_Unwind_VRS_Set>
    2038:	b005      	add	sp, #20
    203a:	bd00      	pop	{pc}

0000203c <__gnu_Unwind_Backtrace>:
    203c:	b570      	push	{r4, r5, r6, lr}
    203e:	4c1a      	ldr	r4, [pc, #104]	; (20a8 <__gnu_Unwind_Backtrace+0x6c>)
    2040:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    2042:	44a5      	add	sp, r4
    2044:	6413      	str	r3, [r2, #64]	; 0x40
    2046:	0006      	movs	r6, r0
    2048:	000d      	movs	r5, r1
    204a:	a819      	add	r0, sp, #100	; 0x64
    204c:	1d11      	adds	r1, r2, #4
    204e:	2240      	movs	r2, #64	; 0x40
    2050:	f00b fd55 	bl	dafe <memcpy>
    2054:	2301      	movs	r3, #1
    2056:	425b      	negs	r3, r3
    2058:	9318      	str	r3, [sp, #96]	; 0x60
    205a:	e014      	b.n	2086 <__gnu_Unwind_Backtrace+0x4a>
    205c:	210c      	movs	r1, #12
    205e:	a818      	add	r0, sp, #96	; 0x60
    2060:	aa02      	add	r2, sp, #8
    2062:	f7ff ffdf 	bl	2024 <_Unwind_SetGR>
    2066:	0029      	movs	r1, r5
    2068:	a818      	add	r0, sp, #96	; 0x60
    206a:	47b0      	blx	r6
    206c:	2800      	cmp	r0, #0
    206e:	d112      	bne.n	2096 <__gnu_Unwind_Backtrace+0x5a>
    2070:	9b06      	ldr	r3, [sp, #24]
    2072:	aa18      	add	r2, sp, #96	; 0x60
    2074:	a902      	add	r1, sp, #8
    2076:	3008      	adds	r0, #8
    2078:	9301      	str	r3, [sp, #4]
    207a:	4798      	blx	r3
    207c:	0004      	movs	r4, r0
    207e:	2805      	cmp	r0, #5
    2080:	d00a      	beq.n	2098 <__gnu_Unwind_Backtrace+0x5c>
    2082:	2809      	cmp	r0, #9
    2084:	d007      	beq.n	2096 <__gnu_Unwind_Backtrace+0x5a>
    2086:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2088:	a802      	add	r0, sp, #8
    208a:	0019      	movs	r1, r3
    208c:	9301      	str	r3, [sp, #4]
    208e:	f7ff fe09 	bl	1ca4 <get_eit_entry>
    2092:	2800      	cmp	r0, #0
    2094:	d0e2      	beq.n	205c <__gnu_Unwind_Backtrace+0x20>
    2096:	2409      	movs	r4, #9
    2098:	a818      	add	r0, sp, #96	; 0x60
    209a:	f7ff fe51 	bl	1d40 <restore_non_core_regs>
    209e:	0020      	movs	r0, r4
    20a0:	2390      	movs	r3, #144	; 0x90
    20a2:	009b      	lsls	r3, r3, #2
    20a4:	449d      	add	sp, r3
    20a6:	bd70      	pop	{r4, r5, r6, pc}
    20a8:	fffffdc0 	.word	0xfffffdc0

000020ac <__gnu_unwind_pr_common>:
    20ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ae:	46de      	mov	lr, fp
    20b0:	464e      	mov	r6, r9
    20b2:	4645      	mov	r5, r8
    20b4:	4657      	mov	r7, sl
    20b6:	4693      	mov	fp, r2
    20b8:	2203      	movs	r2, #3
    20ba:	b5e0      	push	{r5, r6, r7, lr}
    20bc:	001e      	movs	r6, r3
    20be:	0013      	movs	r3, r2
    20c0:	b08b      	sub	sp, #44	; 0x2c
    20c2:	4003      	ands	r3, r0
    20c4:	9301      	str	r3, [sp, #4]
    20c6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    20c8:	000d      	movs	r5, r1
    20ca:	1d1c      	adds	r4, r3, #4
    20cc:	681b      	ldr	r3, [r3, #0]
    20ce:	9408      	str	r4, [sp, #32]
    20d0:	9307      	str	r3, [sp, #28]
    20d2:	2e00      	cmp	r6, #0
    20d4:	d166      	bne.n	21a4 <__gnu_unwind_pr_common+0xf8>
    20d6:	021b      	lsls	r3, r3, #8
    20d8:	9307      	str	r3, [sp, #28]
    20da:	ab06      	add	r3, sp, #24
    20dc:	735e      	strb	r6, [r3, #13]
    20de:	731a      	strb	r2, [r3, #12]
    20e0:	9b01      	ldr	r3, [sp, #4]
    20e2:	2b02      	cmp	r3, #2
    20e4:	d100      	bne.n	20e8 <__gnu_unwind_pr_common+0x3c>
    20e6:	e06e      	b.n	21c6 <__gnu_unwind_pr_common+0x11a>
    20e8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    20ea:	07db      	lsls	r3, r3, #31
    20ec:	d447      	bmi.n	217e <__gnu_unwind_pr_common+0xd2>
    20ee:	2300      	movs	r3, #0
    20f0:	46a8      	mov	r8, r5
    20f2:	46b2      	mov	sl, r6
    20f4:	9302      	str	r3, [sp, #8]
    20f6:	3308      	adds	r3, #8
    20f8:	4003      	ands	r3, r0
    20fa:	9303      	str	r3, [sp, #12]
    20fc:	6825      	ldr	r5, [r4, #0]
    20fe:	2d00      	cmp	r5, #0
    2100:	d100      	bne.n	2104 <__gnu_unwind_pr_common+0x58>
    2102:	e137      	b.n	2374 <__gnu_unwind_pr_common+0x2c8>
    2104:	4653      	mov	r3, sl
    2106:	2b02      	cmp	r3, #2
    2108:	d049      	beq.n	219e <__gnu_unwind_pr_common+0xf2>
    210a:	8825      	ldrh	r5, [r4, #0]
    210c:	8866      	ldrh	r6, [r4, #2]
    210e:	3404      	adds	r4, #4
    2110:	2301      	movs	r3, #1
    2112:	0037      	movs	r7, r6
    2114:	4699      	mov	r9, r3
    2116:	439f      	bics	r7, r3
    2118:	4643      	mov	r3, r8
    211a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    211c:	210f      	movs	r1, #15
    211e:	469c      	mov	ip, r3
    2120:	4658      	mov	r0, fp
    2122:	4467      	add	r7, ip
    2124:	f7ff ff58 	bl	1fd8 <_Unwind_GetGR>
    2128:	2200      	movs	r2, #0
    212a:	4287      	cmp	r7, r0
    212c:	d806      	bhi.n	213c <__gnu_unwind_pr_common+0x90>
    212e:	002a      	movs	r2, r5
    2130:	464b      	mov	r3, r9
    2132:	439a      	bics	r2, r3
    2134:	19d7      	adds	r7, r2, r7
    2136:	42b8      	cmp	r0, r7
    2138:	4180      	sbcs	r0, r0
    213a:	4242      	negs	r2, r0
    213c:	2302      	movs	r3, #2
    213e:	2101      	movs	r1, #1
    2140:	0076      	lsls	r6, r6, #1
    2142:	4033      	ands	r3, r6
    2144:	400d      	ands	r5, r1
    2146:	432b      	orrs	r3, r5
    2148:	2b01      	cmp	r3, #1
    214a:	d03e      	beq.n	21ca <__gnu_unwind_pr_common+0x11e>
    214c:	2b00      	cmp	r3, #0
    214e:	d05a      	beq.n	2206 <__gnu_unwind_pr_common+0x15a>
    2150:	2b02      	cmp	r3, #2
    2152:	d11c      	bne.n	218e <__gnu_unwind_pr_common+0xe2>
    2154:	6823      	ldr	r3, [r4, #0]
    2156:	9901      	ldr	r1, [sp, #4]
    2158:	005f      	lsls	r7, r3, #1
    215a:	087f      	lsrs	r7, r7, #1
    215c:	2900      	cmp	r1, #0
    215e:	d165      	bne.n	222c <__gnu_unwind_pr_common+0x180>
    2160:	2a00      	cmp	r2, #0
    2162:	d006      	beq.n	2172 <__gnu_unwind_pr_common+0xc6>
    2164:	9a03      	ldr	r2, [sp, #12]
    2166:	2a00      	cmp	r2, #0
    2168:	d100      	bne.n	216c <__gnu_unwind_pr_common+0xc0>
    216a:	e088      	b.n	227e <__gnu_unwind_pr_common+0x1d2>
    216c:	2f00      	cmp	r7, #0
    216e:	d100      	bne.n	2172 <__gnu_unwind_pr_common+0xc6>
    2170:	e0aa      	b.n	22c8 <__gnu_unwind_pr_common+0x21c>
    2172:	2b00      	cmp	r3, #0
    2174:	db65      	blt.n	2242 <__gnu_unwind_pr_common+0x196>
    2176:	3701      	adds	r7, #1
    2178:	00bf      	lsls	r7, r7, #2
    217a:	19e4      	adds	r4, r4, r7
    217c:	e7be      	b.n	20fc <__gnu_unwind_pr_common+0x50>
    217e:	2300      	movs	r3, #0
    2180:	9302      	str	r3, [sp, #8]
    2182:	2e02      	cmp	r6, #2
    2184:	dd47      	ble.n	2216 <__gnu_unwind_pr_common+0x16a>
    2186:	f7ff fe0d 	bl	1da4 <__gnu_unwind_24bit.isra.1>
    218a:	2800      	cmp	r0, #0
    218c:	d049      	beq.n	2222 <__gnu_unwind_pr_common+0x176>
    218e:	2009      	movs	r0, #9
    2190:	b00b      	add	sp, #44	; 0x2c
    2192:	bc3c      	pop	{r2, r3, r4, r5}
    2194:	4690      	mov	r8, r2
    2196:	4699      	mov	r9, r3
    2198:	46a2      	mov	sl, r4
    219a:	46ab      	mov	fp, r5
    219c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    219e:	6866      	ldr	r6, [r4, #4]
    21a0:	3408      	adds	r4, #8
    21a2:	e7b5      	b.n	2110 <__gnu_unwind_pr_common+0x64>
    21a4:	2e02      	cmp	r6, #2
    21a6:	dc9b      	bgt.n	20e0 <__gnu_unwind_pr_common+0x34>
    21a8:	0c1a      	lsrs	r2, r3, #16
    21aa:	041b      	lsls	r3, r3, #16
    21ac:	9307      	str	r3, [sp, #28]
    21ae:	2302      	movs	r3, #2
    21b0:	a906      	add	r1, sp, #24
    21b2:	730b      	strb	r3, [r1, #12]
    21b4:	33fd      	adds	r3, #253	; 0xfd
    21b6:	4013      	ands	r3, r2
    21b8:	009b      	lsls	r3, r3, #2
    21ba:	18e4      	adds	r4, r4, r3
    21bc:	9b01      	ldr	r3, [sp, #4]
    21be:	734a      	strb	r2, [r1, #13]
    21c0:	2b02      	cmp	r3, #2
    21c2:	d000      	beq.n	21c6 <__gnu_unwind_pr_common+0x11a>
    21c4:	e790      	b.n	20e8 <__gnu_unwind_pr_common+0x3c>
    21c6:	6bac      	ldr	r4, [r5, #56]	; 0x38
    21c8:	e78e      	b.n	20e8 <__gnu_unwind_pr_common+0x3c>
    21ca:	9b01      	ldr	r3, [sp, #4]
    21cc:	2b00      	cmp	r3, #0
    21ce:	d13a      	bne.n	2246 <__gnu_unwind_pr_common+0x19a>
    21d0:	2a00      	cmp	r2, #0
    21d2:	d016      	beq.n	2202 <__gnu_unwind_pr_common+0x156>
    21d4:	6823      	ldr	r3, [r4, #0]
    21d6:	0fdd      	lsrs	r5, r3, #31
    21d8:	6863      	ldr	r3, [r4, #4]
    21da:	1c9a      	adds	r2, r3, #2
    21dc:	d0d7      	beq.n	218e <__gnu_unwind_pr_common+0xe2>
    21de:	4642      	mov	r2, r8
    21e0:	3258      	adds	r2, #88	; 0x58
    21e2:	9206      	str	r2, [sp, #24]
    21e4:	3301      	adds	r3, #1
    21e6:	d100      	bne.n	21ea <__gnu_unwind_pr_common+0x13e>
    21e8:	e0c6      	b.n	2378 <__gnu_unwind_pr_common+0x2cc>
    21ea:	1d20      	adds	r0, r4, #4
    21ec:	f7ff fdd4 	bl	1d98 <_Unwind_decode_typeinfo_ptr.isra.0>
    21f0:	ab06      	add	r3, sp, #24
    21f2:	0001      	movs	r1, r0
    21f4:	002a      	movs	r2, r5
    21f6:	4640      	mov	r0, r8
    21f8:	e000      	b.n	21fc <__gnu_unwind_pr_common+0x150>
    21fa:	bf00      	nop
    21fc:	2800      	cmp	r0, #0
    21fe:	d000      	beq.n	2202 <__gnu_unwind_pr_common+0x156>
    2200:	e0a7      	b.n	2352 <__gnu_unwind_pr_common+0x2a6>
    2202:	3408      	adds	r4, #8
    2204:	e77a      	b.n	20fc <__gnu_unwind_pr_common+0x50>
    2206:	9b01      	ldr	r3, [sp, #4]
    2208:	2b00      	cmp	r3, #0
    220a:	d002      	beq.n	2212 <__gnu_unwind_pr_common+0x166>
    220c:	2a00      	cmp	r2, #0
    220e:	d000      	beq.n	2212 <__gnu_unwind_pr_common+0x166>
    2210:	e08b      	b.n	232a <__gnu_unwind_pr_common+0x27e>
    2212:	3404      	adds	r4, #4
    2214:	e772      	b.n	20fc <__gnu_unwind_pr_common+0x50>
    2216:	a907      	add	r1, sp, #28
    2218:	4658      	mov	r0, fp
    221a:	f000 fad1 	bl	27c0 <__gnu_unwind_execute>
    221e:	2800      	cmp	r0, #0
    2220:	d1b5      	bne.n	218e <__gnu_unwind_pr_common+0xe2>
    2222:	9b02      	ldr	r3, [sp, #8]
    2224:	2b00      	cmp	r3, #0
    2226:	d15d      	bne.n	22e4 <__gnu_unwind_pr_common+0x238>
    2228:	2008      	movs	r0, #8
    222a:	e7b1      	b.n	2190 <__gnu_unwind_pr_common+0xe4>
    222c:	4643      	mov	r3, r8
    222e:	210d      	movs	r1, #13
    2230:	4658      	mov	r0, fp
    2232:	6a1d      	ldr	r5, [r3, #32]
    2234:	f7ff fed0 	bl	1fd8 <_Unwind_GetGR>
    2238:	4285      	cmp	r5, r0
    223a:	d063      	beq.n	2304 <__gnu_unwind_pr_common+0x258>
    223c:	6823      	ldr	r3, [r4, #0]
    223e:	2b00      	cmp	r3, #0
    2240:	da99      	bge.n	2176 <__gnu_unwind_pr_common+0xca>
    2242:	3404      	adds	r4, #4
    2244:	e797      	b.n	2176 <__gnu_unwind_pr_common+0xca>
    2246:	4643      	mov	r3, r8
    2248:	210d      	movs	r1, #13
    224a:	4658      	mov	r0, fp
    224c:	6a1d      	ldr	r5, [r3, #32]
    224e:	f7ff fec3 	bl	1fd8 <_Unwind_GetGR>
    2252:	4285      	cmp	r5, r0
    2254:	d1d5      	bne.n	2202 <__gnu_unwind_pr_common+0x156>
    2256:	4643      	mov	r3, r8
    2258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    225a:	429c      	cmp	r4, r3
    225c:	d1d1      	bne.n	2202 <__gnu_unwind_pr_common+0x156>
    225e:	4645      	mov	r5, r8
    2260:	0020      	movs	r0, r4
    2262:	f7ff fcc5 	bl	1bf0 <selfrel_offset31>
    2266:	210f      	movs	r1, #15
    2268:	0002      	movs	r2, r0
    226a:	4658      	mov	r0, fp
    226c:	f7ff feda 	bl	2024 <_Unwind_SetGR>
    2270:	4658      	mov	r0, fp
    2272:	002a      	movs	r2, r5
    2274:	2100      	movs	r1, #0
    2276:	f7ff fed5 	bl	2024 <_Unwind_SetGR>
    227a:	2007      	movs	r0, #7
    227c:	e788      	b.n	2190 <__gnu_unwind_pr_common+0xe4>
    227e:	2f00      	cmp	r7, #0
    2280:	d022      	beq.n	22c8 <__gnu_unwind_pr_common+0x21c>
    2282:	2358      	movs	r3, #88	; 0x58
    2284:	4651      	mov	r1, sl
    2286:	4443      	add	r3, r8
    2288:	aa06      	add	r2, sp, #24
    228a:	46ba      	mov	sl, r7
    228c:	1d25      	adds	r5, r4, #4
    228e:	2600      	movs	r6, #0
    2290:	9404      	str	r4, [sp, #16]
    2292:	9105      	str	r1, [sp, #20]
    2294:	001f      	movs	r7, r3
    2296:	4691      	mov	r9, r2
    2298:	e003      	b.n	22a2 <__gnu_unwind_pr_common+0x1f6>
    229a:	3504      	adds	r5, #4
    229c:	0026      	movs	r6, r4
    229e:	45a2      	cmp	sl, r4
    22a0:	d014      	beq.n	22cc <__gnu_unwind_pr_common+0x220>
    22a2:	0028      	movs	r0, r5
    22a4:	9706      	str	r7, [sp, #24]
    22a6:	f7ff fd77 	bl	1d98 <_Unwind_decode_typeinfo_ptr.isra.0>
    22aa:	464b      	mov	r3, r9
    22ac:	0001      	movs	r1, r0
    22ae:	2200      	movs	r2, #0
    22b0:	4640      	mov	r0, r8
    22b2:	1c74      	adds	r4, r6, #1
    22b4:	e000      	b.n	22b8 <__gnu_unwind_pr_common+0x20c>
    22b6:	bf00      	nop
    22b8:	2800      	cmp	r0, #0
    22ba:	d0ee      	beq.n	229a <__gnu_unwind_pr_common+0x1ee>
    22bc:	4657      	mov	r7, sl
    22be:	9b05      	ldr	r3, [sp, #20]
    22c0:	9c04      	ldr	r4, [sp, #16]
    22c2:	469a      	mov	sl, r3
    22c4:	42b7      	cmp	r7, r6
    22c6:	d1b9      	bne.n	223c <__gnu_unwind_pr_common+0x190>
    22c8:	4645      	mov	r5, r8
    22ca:	e001      	b.n	22d0 <__gnu_unwind_pr_common+0x224>
    22cc:	4645      	mov	r5, r8
    22ce:	9c04      	ldr	r4, [sp, #16]
    22d0:	210d      	movs	r1, #13
    22d2:	4658      	mov	r0, fp
    22d4:	f7ff fe80 	bl	1fd8 <_Unwind_GetGR>
    22d8:	9b06      	ldr	r3, [sp, #24]
    22da:	6228      	str	r0, [r5, #32]
    22dc:	626b      	str	r3, [r5, #36]	; 0x24
    22de:	62ac      	str	r4, [r5, #40]	; 0x28
    22e0:	2006      	movs	r0, #6
    22e2:	e755      	b.n	2190 <__gnu_unwind_pr_common+0xe4>
    22e4:	210f      	movs	r1, #15
    22e6:	4658      	mov	r0, fp
    22e8:	f7ff fe76 	bl	1fd8 <_Unwind_GetGR>
    22ec:	210e      	movs	r1, #14
    22ee:	0002      	movs	r2, r0
    22f0:	4658      	mov	r0, fp
    22f2:	f7ff fe97 	bl	2024 <_Unwind_SetGR>
    22f6:	4658      	mov	r0, fp
    22f8:	4a27      	ldr	r2, [pc, #156]	; (2398 <__gnu_unwind_pr_common+0x2ec>)
    22fa:	210f      	movs	r1, #15
    22fc:	f7ff fe92 	bl	2024 <_Unwind_SetGR>
    2300:	2007      	movs	r0, #7
    2302:	e745      	b.n	2190 <__gnu_unwind_pr_common+0xe4>
    2304:	4643      	mov	r3, r8
    2306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2308:	429c      	cmp	r4, r3
    230a:	d197      	bne.n	223c <__gnu_unwind_pr_common+0x190>
    230c:	4643      	mov	r3, r8
    230e:	4642      	mov	r2, r8
    2310:	629f      	str	r7, [r3, #40]	; 0x28
    2312:	2300      	movs	r3, #0
    2314:	62d3      	str	r3, [r2, #44]	; 0x2c
    2316:	3304      	adds	r3, #4
    2318:	6313      	str	r3, [r2, #48]	; 0x30
    231a:	1d23      	adds	r3, r4, #4
    231c:	6353      	str	r3, [r2, #52]	; 0x34
    231e:	6823      	ldr	r3, [r4, #0]
    2320:	2b00      	cmp	r3, #0
    2322:	db32      	blt.n	238a <__gnu_unwind_pr_common+0x2de>
    2324:	2301      	movs	r3, #1
    2326:	9302      	str	r3, [sp, #8]
    2328:	e725      	b.n	2176 <__gnu_unwind_pr_common+0xca>
    232a:	0020      	movs	r0, r4
    232c:	f7ff fc60 	bl	1bf0 <selfrel_offset31>
    2330:	4645      	mov	r5, r8
    2332:	3404      	adds	r4, #4
    2334:	0006      	movs	r6, r0
    2336:	63ac      	str	r4, [r5, #56]	; 0x38
    2338:	4640      	mov	r0, r8
    233a:	e000      	b.n	233e <__gnu_unwind_pr_common+0x292>
    233c:	bf00      	nop
    233e:	2800      	cmp	r0, #0
    2340:	d100      	bne.n	2344 <__gnu_unwind_pr_common+0x298>
    2342:	e724      	b.n	218e <__gnu_unwind_pr_common+0xe2>
    2344:	4658      	mov	r0, fp
    2346:	0032      	movs	r2, r6
    2348:	210f      	movs	r1, #15
    234a:	f7ff fe6b 	bl	2024 <_Unwind_SetGR>
    234e:	2007      	movs	r0, #7
    2350:	e71e      	b.n	2190 <__gnu_unwind_pr_common+0xe4>
    2352:	0007      	movs	r7, r0
    2354:	210d      	movs	r1, #13
    2356:	4658      	mov	r0, fp
    2358:	4645      	mov	r5, r8
    235a:	f7ff fe3d 	bl	1fd8 <_Unwind_GetGR>
    235e:	6228      	str	r0, [r5, #32]
    2360:	2f02      	cmp	r7, #2
    2362:	d10f      	bne.n	2384 <__gnu_unwind_pr_common+0x2d8>
    2364:	9b06      	ldr	r3, [sp, #24]
    2366:	62eb      	str	r3, [r5, #44]	; 0x2c
    2368:	4643      	mov	r3, r8
    236a:	332c      	adds	r3, #44	; 0x2c
    236c:	626b      	str	r3, [r5, #36]	; 0x24
    236e:	62ac      	str	r4, [r5, #40]	; 0x28
    2370:	2006      	movs	r0, #6
    2372:	e70d      	b.n	2190 <__gnu_unwind_pr_common+0xe4>
    2374:	4656      	mov	r6, sl
    2376:	e704      	b.n	2182 <__gnu_unwind_pr_common+0xd6>
    2378:	210d      	movs	r1, #13
    237a:	4658      	mov	r0, fp
    237c:	4645      	mov	r5, r8
    237e:	f7ff fe2b 	bl	1fd8 <_Unwind_GetGR>
    2382:	6228      	str	r0, [r5, #32]
    2384:	9b06      	ldr	r3, [sp, #24]
    2386:	626b      	str	r3, [r5, #36]	; 0x24
    2388:	e7f1      	b.n	236e <__gnu_unwind_pr_common+0x2c2>
    238a:	0038      	movs	r0, r7
    238c:	3001      	adds	r0, #1
    238e:	0080      	lsls	r0, r0, #2
    2390:	4645      	mov	r5, r8
    2392:	1820      	adds	r0, r4, r0
    2394:	e765      	b.n	2262 <__gnu_unwind_pr_common+0x1b6>
    2396:	46c0      	nop			; (mov r8, r8)
    2398:	00000000 	.word	0x00000000

0000239c <__aeabi_unwind_cpp_pr0>:
    239c:	b510      	push	{r4, lr}
    239e:	2300      	movs	r3, #0
    23a0:	f7ff fe84 	bl	20ac <__gnu_unwind_pr_common>
    23a4:	bd10      	pop	{r4, pc}
    23a6:	46c0      	nop			; (mov r8, r8)

000023a8 <__aeabi_unwind_cpp_pr1>:
    23a8:	b510      	push	{r4, lr}
    23aa:	2301      	movs	r3, #1
    23ac:	f7ff fe7e 	bl	20ac <__gnu_unwind_pr_common>
    23b0:	bd10      	pop	{r4, pc}
    23b2:	46c0      	nop			; (mov r8, r8)

000023b4 <__aeabi_unwind_cpp_pr2>:
    23b4:	b510      	push	{r4, lr}
    23b6:	2302      	movs	r3, #2
    23b8:	f7ff fe78 	bl	20ac <__gnu_unwind_pr_common>
    23bc:	bd10      	pop	{r4, pc}
    23be:	46c0      	nop			; (mov r8, r8)

000023c0 <_Unwind_VRS_Pop>:
    23c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23c2:	46ce      	mov	lr, r9
    23c4:	4647      	mov	r7, r8
    23c6:	b580      	push	{r7, lr}
    23c8:	0006      	movs	r6, r0
    23ca:	b0c3      	sub	sp, #268	; 0x10c
    23cc:	0014      	movs	r4, r2
    23ce:	001d      	movs	r5, r3
    23d0:	2901      	cmp	r1, #1
    23d2:	d04e      	beq.n	2472 <_Unwind_VRS_Pop+0xb2>
    23d4:	2900      	cmp	r1, #0
    23d6:	d033      	beq.n	2440 <_Unwind_VRS_Pop+0x80>
    23d8:	2903      	cmp	r1, #3
    23da:	d00a      	beq.n	23f2 <_Unwind_VRS_Pop+0x32>
    23dc:	2904      	cmp	r1, #4
    23de:	d102      	bne.n	23e6 <_Unwind_VRS_Pop+0x26>
    23e0:	2b00      	cmp	r3, #0
    23e2:	d100      	bne.n	23e6 <_Unwind_VRS_Pop+0x26>
    23e4:	e089      	b.n	24fa <_Unwind_VRS_Pop+0x13a>
    23e6:	2002      	movs	r0, #2
    23e8:	b043      	add	sp, #268	; 0x10c
    23ea:	bc0c      	pop	{r2, r3}
    23ec:	4690      	mov	r8, r2
    23ee:	4699      	mov	r9, r3
    23f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23f2:	2b03      	cmp	r3, #3
    23f4:	d1f7      	bne.n	23e6 <_Unwind_VRS_Pop+0x26>
    23f6:	0414      	lsls	r4, r2, #16
    23f8:	0c15      	lsrs	r5, r2, #16
    23fa:	0c24      	lsrs	r4, r4, #16
    23fc:	192b      	adds	r3, r5, r4
    23fe:	2b10      	cmp	r3, #16
    2400:	d8f1      	bhi.n	23e6 <_Unwind_VRS_Pop+0x26>
    2402:	2208      	movs	r2, #8
    2404:	6803      	ldr	r3, [r0, #0]
    2406:	421a      	tst	r2, r3
    2408:	d000      	beq.n	240c <_Unwind_VRS_Pop+0x4c>
    240a:	e0e7      	b.n	25dc <_Unwind_VRS_Pop+0x21c>
    240c:	ab20      	add	r3, sp, #128	; 0x80
    240e:	0018      	movs	r0, r3
    2410:	4698      	mov	r8, r3
    2412:	f000 f92d 	bl	2670 <__gnu_Unwind_Save_WMMXD>
    2416:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2418:	00ed      	lsls	r5, r5, #3
    241a:	001a      	movs	r2, r3
    241c:	2c00      	cmp	r4, #0
    241e:	d009      	beq.n	2434 <_Unwind_VRS_Pop+0x74>
    2420:	00e4      	lsls	r4, r4, #3
    2422:	1aea      	subs	r2, r5, r3
    2424:	191c      	adds	r4, r3, r4
    2426:	4442      	add	r2, r8
    2428:	6819      	ldr	r1, [r3, #0]
    242a:	50d1      	str	r1, [r2, r3]
    242c:	3304      	adds	r3, #4
    242e:	429c      	cmp	r4, r3
    2430:	d1fa      	bne.n	2428 <_Unwind_VRS_Pop+0x68>
    2432:	0022      	movs	r2, r4
    2434:	63b2      	str	r2, [r6, #56]	; 0x38
    2436:	4640      	mov	r0, r8
    2438:	f000 f918 	bl	266c <__gnu_Unwind_Restore_WMMXD>
    243c:	2000      	movs	r0, #0
    243e:	e7d3      	b.n	23e8 <_Unwind_VRS_Pop+0x28>
    2440:	2002      	movs	r0, #2
    2442:	2b00      	cmp	r3, #0
    2444:	d1d0      	bne.n	23e8 <_Unwind_VRS_Pop+0x28>
    2446:	2300      	movs	r3, #0
    2448:	2701      	movs	r7, #1
    244a:	0410      	lsls	r0, r2, #16
    244c:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    244e:	0c00      	lsrs	r0, r0, #16
    2450:	1d32      	adds	r2, r6, #4
    2452:	0039      	movs	r1, r7
    2454:	4099      	lsls	r1, r3
    2456:	4208      	tst	r0, r1
    2458:	d002      	beq.n	2460 <_Unwind_VRS_Pop+0xa0>
    245a:	6829      	ldr	r1, [r5, #0]
    245c:	3504      	adds	r5, #4
    245e:	6011      	str	r1, [r2, #0]
    2460:	3301      	adds	r3, #1
    2462:	3204      	adds	r2, #4
    2464:	2b10      	cmp	r3, #16
    2466:	d1f4      	bne.n	2452 <_Unwind_VRS_Pop+0x92>
    2468:	2000      	movs	r0, #0
    246a:	04a3      	lsls	r3, r4, #18
    246c:	d4bc      	bmi.n	23e8 <_Unwind_VRS_Pop+0x28>
    246e:	63b5      	str	r5, [r6, #56]	; 0x38
    2470:	e7ba      	b.n	23e8 <_Unwind_VRS_Pop+0x28>
    2472:	0414      	lsls	r4, r2, #16
    2474:	0c17      	lsrs	r7, r2, #16
    2476:	0c24      	lsrs	r4, r4, #16
    2478:	2b01      	cmp	r3, #1
    247a:	d05f      	beq.n	253c <_Unwind_VRS_Pop+0x17c>
    247c:	2b05      	cmp	r3, #5
    247e:	d1b2      	bne.n	23e6 <_Unwind_VRS_Pop+0x26>
    2480:	193b      	adds	r3, r7, r4
    2482:	2b20      	cmp	r3, #32
    2484:	d8af      	bhi.n	23e6 <_Unwind_VRS_Pop+0x26>
    2486:	2f0f      	cmp	r7, #15
    2488:	d97d      	bls.n	2586 <_Unwind_VRS_Pop+0x1c6>
    248a:	46a1      	mov	r9, r4
    248c:	2c00      	cmp	r4, #0
    248e:	d165      	bne.n	255c <_Unwind_VRS_Pop+0x19c>
    2490:	2200      	movs	r2, #0
    2492:	0023      	movs	r3, r4
    2494:	4691      	mov	r9, r2
    2496:	6bb1      	ldr	r1, [r6, #56]	; 0x38
    2498:	2b00      	cmp	r3, #0
    249a:	dc00      	bgt.n	249e <_Unwind_VRS_Pop+0xde>
    249c:	e088      	b.n	25b0 <_Unwind_VRS_Pop+0x1f0>
    249e:	a820      	add	r0, sp, #128	; 0x80
    24a0:	4680      	mov	r8, r0
    24a2:	00fa      	lsls	r2, r7, #3
    24a4:	00db      	lsls	r3, r3, #3
    24a6:	1a52      	subs	r2, r2, r1
    24a8:	18cb      	adds	r3, r1, r3
    24aa:	4442      	add	r2, r8
    24ac:	6808      	ldr	r0, [r1, #0]
    24ae:	5050      	str	r0, [r2, r1]
    24b0:	3104      	adds	r1, #4
    24b2:	428b      	cmp	r3, r1
    24b4:	d1fa      	bne.n	24ac <_Unwind_VRS_Pop+0xec>
    24b6:	0019      	movs	r1, r3
    24b8:	464b      	mov	r3, r9
    24ba:	2b00      	cmp	r3, #0
    24bc:	d010      	beq.n	24e0 <_Unwind_VRS_Pop+0x120>
    24be:	464b      	mov	r3, r9
    24c0:	0058      	lsls	r0, r3, #1
    24c2:	003a      	movs	r2, r7
    24c4:	2f10      	cmp	r7, #16
    24c6:	d200      	bcs.n	24ca <_Unwind_VRS_Pop+0x10a>
    24c8:	2210      	movs	r2, #16
    24ca:	2300      	movs	r3, #0
    24cc:	3a10      	subs	r2, #16
    24ce:	00d2      	lsls	r2, r2, #3
    24d0:	446a      	add	r2, sp
    24d2:	0080      	lsls	r0, r0, #2
    24d4:	58cc      	ldr	r4, [r1, r3]
    24d6:	50d4      	str	r4, [r2, r3]
    24d8:	3304      	adds	r3, #4
    24da:	4283      	cmp	r3, r0
    24dc:	d1fa      	bne.n	24d4 <_Unwind_VRS_Pop+0x114>
    24de:	18c9      	adds	r1, r1, r3
    24e0:	2d01      	cmp	r5, #1
    24e2:	d05e      	beq.n	25a2 <_Unwind_VRS_Pop+0x1e2>
    24e4:	63b1      	str	r1, [r6, #56]	; 0x38
    24e6:	2f0f      	cmp	r7, #15
    24e8:	d974      	bls.n	25d4 <_Unwind_VRS_Pop+0x214>
    24ea:	464b      	mov	r3, r9
    24ec:	2b00      	cmp	r3, #0
    24ee:	d0a5      	beq.n	243c <_Unwind_VRS_Pop+0x7c>
    24f0:	4668      	mov	r0, sp
    24f2:	f000 f8b7 	bl	2664 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    24f6:	2000      	movs	r0, #0
    24f8:	e776      	b.n	23e8 <_Unwind_VRS_Pop+0x28>
    24fa:	2a10      	cmp	r2, #16
    24fc:	d900      	bls.n	2500 <_Unwind_VRS_Pop+0x140>
    24fe:	e772      	b.n	23e6 <_Unwind_VRS_Pop+0x26>
    2500:	2210      	movs	r2, #16
    2502:	6803      	ldr	r3, [r0, #0]
    2504:	421a      	tst	r2, r3
    2506:	d145      	bne.n	2594 <_Unwind_VRS_Pop+0x1d4>
    2508:	ab20      	add	r3, sp, #128	; 0x80
    250a:	0018      	movs	r0, r3
    250c:	4698      	mov	r8, r3
    250e:	f000 f8b3 	bl	2678 <__gnu_Unwind_Save_WMMXC>
    2512:	2300      	movs	r3, #0
    2514:	2001      	movs	r0, #1
    2516:	6bb1      	ldr	r1, [r6, #56]	; 0x38
    2518:	0002      	movs	r2, r0
    251a:	409a      	lsls	r2, r3
    251c:	4214      	tst	r4, r2
    251e:	d004      	beq.n	252a <_Unwind_VRS_Pop+0x16a>
    2520:	4645      	mov	r5, r8
    2522:	680f      	ldr	r7, [r1, #0]
    2524:	009a      	lsls	r2, r3, #2
    2526:	50af      	str	r7, [r5, r2]
    2528:	3104      	adds	r1, #4
    252a:	3301      	adds	r3, #1
    252c:	2b04      	cmp	r3, #4
    252e:	d1f3      	bne.n	2518 <_Unwind_VRS_Pop+0x158>
    2530:	4640      	mov	r0, r8
    2532:	63b1      	str	r1, [r6, #56]	; 0x38
    2534:	f000 f89e 	bl	2674 <__gnu_Unwind_Restore_WMMXC>
    2538:	2000      	movs	r0, #0
    253a:	e755      	b.n	23e8 <_Unwind_VRS_Pop+0x28>
    253c:	193b      	adds	r3, r7, r4
    253e:	2b10      	cmp	r3, #16
    2540:	d900      	bls.n	2544 <_Unwind_VRS_Pop+0x184>
    2542:	e750      	b.n	23e6 <_Unwind_VRS_Pop+0x26>
    2544:	2f0f      	cmp	r7, #15
    2546:	d900      	bls.n	254a <_Unwind_VRS_Pop+0x18a>
    2548:	e74d      	b.n	23e6 <_Unwind_VRS_Pop+0x26>
    254a:	2300      	movs	r3, #0
    254c:	4699      	mov	r9, r3
    254e:	2201      	movs	r2, #1
    2550:	6833      	ldr	r3, [r6, #0]
    2552:	421a      	tst	r2, r3
    2554:	d130      	bne.n	25b8 <_Unwind_VRS_Pop+0x1f8>
    2556:	464b      	mov	r3, r9
    2558:	2b00      	cmp	r3, #0
    255a:	d05a      	beq.n	2612 <_Unwind_VRS_Pop+0x252>
    255c:	2204      	movs	r2, #4
    255e:	6833      	ldr	r3, [r6, #0]
    2560:	421a      	tst	r2, r3
    2562:	d142      	bne.n	25ea <_Unwind_VRS_Pop+0x22a>
    2564:	2d01      	cmp	r5, #1
    2566:	d047      	beq.n	25f8 <_Unwind_VRS_Pop+0x238>
    2568:	2f0f      	cmp	r7, #15
    256a:	d806      	bhi.n	257a <_Unwind_VRS_Pop+0x1ba>
    256c:	ab20      	add	r3, sp, #128	; 0x80
    256e:	0018      	movs	r0, r3
    2570:	f000 f876 	bl	2660 <__gnu_Unwind_Save_VFP_D>
    2574:	464b      	mov	r3, r9
    2576:	2b00      	cmp	r3, #0
    2578:	d08a      	beq.n	2490 <_Unwind_VRS_Pop+0xd0>
    257a:	4668      	mov	r0, sp
    257c:	f000 f874 	bl	2668 <__gnu_Unwind_Save_VFP_D_16_to_31>
    2580:	2310      	movs	r3, #16
    2582:	1bdb      	subs	r3, r3, r7
    2584:	e787      	b.n	2496 <_Unwind_VRS_Pop+0xd6>
    2586:	2b10      	cmp	r3, #16
    2588:	d9df      	bls.n	254a <_Unwind_VRS_Pop+0x18a>
    258a:	2210      	movs	r2, #16
    258c:	4252      	negs	r2, r2
    258e:	4691      	mov	r9, r2
    2590:	4499      	add	r9, r3
    2592:	e7dc      	b.n	254e <_Unwind_VRS_Pop+0x18e>
    2594:	4393      	bics	r3, r2
    2596:	6003      	str	r3, [r0, #0]
    2598:	30d1      	adds	r0, #209	; 0xd1
    259a:	30ff      	adds	r0, #255	; 0xff
    259c:	f000 f86c 	bl	2678 <__gnu_Unwind_Save_WMMXC>
    25a0:	e7b2      	b.n	2508 <_Unwind_VRS_Pop+0x148>
    25a2:	3104      	adds	r1, #4
    25a4:	a820      	add	r0, sp, #128	; 0x80
    25a6:	63b1      	str	r1, [r6, #56]	; 0x38
    25a8:	f000 f854 	bl	2654 <__gnu_Unwind_Restore_VFP>
    25ac:	2000      	movs	r0, #0
    25ae:	e71b      	b.n	23e8 <_Unwind_VRS_Pop+0x28>
    25b0:	464b      	mov	r3, r9
    25b2:	2b00      	cmp	r3, #0
    25b4:	d184      	bne.n	24c0 <_Unwind_VRS_Pop+0x100>
    25b6:	e793      	b.n	24e0 <_Unwind_VRS_Pop+0x120>
    25b8:	0019      	movs	r1, r3
    25ba:	4391      	bics	r1, r2
    25bc:	000a      	movs	r2, r1
    25be:	6031      	str	r1, [r6, #0]
    25c0:	2d05      	cmp	r5, #5
    25c2:	d01e      	beq.n	2602 <_Unwind_VRS_Pop+0x242>
    25c4:	2203      	movs	r2, #3
    25c6:	0030      	movs	r0, r6
    25c8:	4393      	bics	r3, r2
    25ca:	6033      	str	r3, [r6, #0]
    25cc:	3048      	adds	r0, #72	; 0x48
    25ce:	f000 f843 	bl	2658 <__gnu_Unwind_Save_VFP>
    25d2:	e7c0      	b.n	2556 <_Unwind_VRS_Pop+0x196>
    25d4:	a820      	add	r0, sp, #128	; 0x80
    25d6:	f000 f841 	bl	265c <__gnu_Unwind_Restore_VFP_D>
    25da:	e786      	b.n	24ea <_Unwind_VRS_Pop+0x12a>
    25dc:	4393      	bics	r3, r2
    25de:	6003      	str	r3, [r0, #0]
    25e0:	3051      	adds	r0, #81	; 0x51
    25e2:	30ff      	adds	r0, #255	; 0xff
    25e4:	f000 f844 	bl	2670 <__gnu_Unwind_Save_WMMXD>
    25e8:	e710      	b.n	240c <_Unwind_VRS_Pop+0x4c>
    25ea:	0030      	movs	r0, r6
    25ec:	4393      	bics	r3, r2
    25ee:	6033      	str	r3, [r6, #0]
    25f0:	30d0      	adds	r0, #208	; 0xd0
    25f2:	f000 f839 	bl	2668 <__gnu_Unwind_Save_VFP_D_16_to_31>
    25f6:	e7b5      	b.n	2564 <_Unwind_VRS_Pop+0x1a4>
    25f8:	ab20      	add	r3, sp, #128	; 0x80
    25fa:	0018      	movs	r0, r3
    25fc:	f000 f82c 	bl	2658 <__gnu_Unwind_Save_VFP>
    2600:	e7be      	b.n	2580 <_Unwind_VRS_Pop+0x1c0>
    2602:	2302      	movs	r3, #2
    2604:	0030      	movs	r0, r6
    2606:	431a      	orrs	r2, r3
    2608:	6032      	str	r2, [r6, #0]
    260a:	3048      	adds	r0, #72	; 0x48
    260c:	f000 f828 	bl	2660 <__gnu_Unwind_Save_VFP_D>
    2610:	e7a1      	b.n	2556 <_Unwind_VRS_Pop+0x196>
    2612:	2d01      	cmp	r5, #1
    2614:	d003      	beq.n	261e <_Unwind_VRS_Pop+0x25e>
    2616:	2f0f      	cmp	r7, #15
    2618:	d900      	bls.n	261c <_Unwind_VRS_Pop+0x25c>
    261a:	e739      	b.n	2490 <_Unwind_VRS_Pop+0xd0>
    261c:	e7a6      	b.n	256c <_Unwind_VRS_Pop+0x1ac>
    261e:	ab20      	add	r3, sp, #128	; 0x80
    2620:	0018      	movs	r0, r3
    2622:	f000 f819 	bl	2658 <__gnu_Unwind_Save_VFP>
    2626:	e733      	b.n	2490 <_Unwind_VRS_Pop+0xd0>

00002628 <__restore_core_regs>:
    2628:	1c01      	adds	r1, r0, #0
    262a:	3134      	adds	r1, #52	; 0x34
    262c:	c938      	ldmia	r1!, {r3, r4, r5}
    262e:	3b04      	subs	r3, #4
    2630:	469c      	mov	ip, r3
    2632:	601d      	str	r5, [r3, #0]
    2634:	46a6      	mov	lr, r4
    2636:	1c01      	adds	r1, r0, #0
    2638:	3120      	adds	r1, #32
    263a:	c93c      	ldmia	r1!, {r2, r3, r4, r5}
    263c:	4690      	mov	r8, r2
    263e:	4699      	mov	r9, r3
    2640:	46a2      	mov	sl, r4
    2642:	46ab      	mov	fp, r5
    2644:	1c01      	adds	r1, r0, #0
    2646:	3108      	adds	r1, #8
    2648:	c9fc      	ldmia	r1!, {r2, r3, r4, r5, r6, r7}
    264a:	6841      	ldr	r1, [r0, #4]
    264c:	6800      	ldr	r0, [r0, #0]
    264e:	46e5      	mov	sp, ip
    2650:	bd00      	pop	{pc}
    2652:	46c0      	nop			; (mov r8, r8)

00002654 <__gnu_Unwind_Restore_VFP>:
    2654:	4770      	bx	lr
    2656:	46c0      	nop			; (mov r8, r8)

00002658 <__gnu_Unwind_Save_VFP>:
    2658:	4770      	bx	lr
    265a:	46c0      	nop			; (mov r8, r8)

0000265c <__gnu_Unwind_Restore_VFP_D>:
    265c:	4770      	bx	lr
    265e:	46c0      	nop			; (mov r8, r8)

00002660 <__gnu_Unwind_Save_VFP_D>:
    2660:	4770      	bx	lr
    2662:	46c0      	nop			; (mov r8, r8)

00002664 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    2664:	4770      	bx	lr
    2666:	46c0      	nop			; (mov r8, r8)

00002668 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    2668:	4770      	bx	lr
    266a:	46c0      	nop			; (mov r8, r8)

0000266c <__gnu_Unwind_Restore_WMMXD>:
    266c:	4770      	bx	lr
    266e:	46c0      	nop			; (mov r8, r8)

00002670 <__gnu_Unwind_Save_WMMXD>:
    2670:	4770      	bx	lr
    2672:	46c0      	nop			; (mov r8, r8)

00002674 <__gnu_Unwind_Restore_WMMXC>:
    2674:	4770      	bx	lr
    2676:	46c0      	nop			; (mov r8, r8)

00002678 <__gnu_Unwind_Save_WMMXC>:
    2678:	4770      	bx	lr
    267a:	46c0      	nop			; (mov r8, r8)

0000267c <_Unwind_RaiseException>:
    267c:	b401      	push	{r0}
    267e:	a801      	add	r0, sp, #4
    2680:	b501      	push	{r0, lr}
    2682:	b085      	sub	sp, #20
    2684:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    2686:	a808      	add	r0, sp, #32
    2688:	4641      	mov	r1, r8
    268a:	464a      	mov	r2, r9
    268c:	4653      	mov	r3, sl
    268e:	465c      	mov	r4, fp
    2690:	4665      	mov	r5, ip
    2692:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
    2694:	a801      	add	r0, sp, #4
    2696:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
    2698:	980f      	ldr	r0, [sp, #60]	; 0x3c
    269a:	9000      	str	r0, [sp, #0]
    269c:	2300      	movs	r3, #0
    269e:	b40c      	push	{r2, r3}
    26a0:	a901      	add	r1, sp, #4
    26a2:	f7ff fc0f 	bl	1ec4 <__gnu_Unwind_RaiseException>
    26a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    26a8:	b012      	add	sp, #72	; 0x48
    26aa:	4718      	bx	r3

000026ac <_Unwind_Resume>:
    26ac:	b401      	push	{r0}
    26ae:	a801      	add	r0, sp, #4
    26b0:	b501      	push	{r0, lr}
    26b2:	b085      	sub	sp, #20
    26b4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    26b6:	a808      	add	r0, sp, #32
    26b8:	4641      	mov	r1, r8
    26ba:	464a      	mov	r2, r9
    26bc:	4653      	mov	r3, sl
    26be:	465c      	mov	r4, fp
    26c0:	4665      	mov	r5, ip
    26c2:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
    26c4:	a801      	add	r0, sp, #4
    26c6:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
    26c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    26ca:	9000      	str	r0, [sp, #0]
    26cc:	2300      	movs	r3, #0
    26ce:	b40c      	push	{r2, r3}
    26d0:	a901      	add	r1, sp, #4
    26d2:	f7ff fc2b 	bl	1f2c <__gnu_Unwind_Resume>
    26d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    26d8:	b012      	add	sp, #72	; 0x48
    26da:	4718      	bx	r3

000026dc <_Unwind_Resume_or_Rethrow>:
    26dc:	b401      	push	{r0}
    26de:	a801      	add	r0, sp, #4
    26e0:	b501      	push	{r0, lr}
    26e2:	b085      	sub	sp, #20
    26e4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    26e6:	a808      	add	r0, sp, #32
    26e8:	4641      	mov	r1, r8
    26ea:	464a      	mov	r2, r9
    26ec:	4653      	mov	r3, sl
    26ee:	465c      	mov	r4, fp
    26f0:	4665      	mov	r5, ip
    26f2:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
    26f4:	a801      	add	r0, sp, #4
    26f6:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
    26f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    26fa:	9000      	str	r0, [sp, #0]
    26fc:	2300      	movs	r3, #0
    26fe:	b40c      	push	{r2, r3}
    2700:	a901      	add	r1, sp, #4
    2702:	f7ff fc37 	bl	1f74 <__gnu_Unwind_Resume_or_Rethrow>
    2706:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2708:	b012      	add	sp, #72	; 0x48
    270a:	4718      	bx	r3

0000270c <_Unwind_ForcedUnwind>:
    270c:	b401      	push	{r0}
    270e:	a801      	add	r0, sp, #4
    2710:	b501      	push	{r0, lr}
    2712:	b085      	sub	sp, #20
    2714:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    2716:	a808      	add	r0, sp, #32
    2718:	4641      	mov	r1, r8
    271a:	464a      	mov	r2, r9
    271c:	4653      	mov	r3, sl
    271e:	465c      	mov	r4, fp
    2720:	4665      	mov	r5, ip
    2722:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
    2724:	a801      	add	r0, sp, #4
    2726:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
    2728:	980f      	ldr	r0, [sp, #60]	; 0x3c
    272a:	9000      	str	r0, [sp, #0]
    272c:	2300      	movs	r3, #0
    272e:	b40c      	push	{r2, r3}
    2730:	ab01      	add	r3, sp, #4
    2732:	f7ff fbf1 	bl	1f18 <__gnu_Unwind_ForcedUnwind>
    2736:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2738:	b012      	add	sp, #72	; 0x48
    273a:	4718      	bx	r3

0000273c <_Unwind_Backtrace>:
    273c:	b401      	push	{r0}
    273e:	a801      	add	r0, sp, #4
    2740:	b501      	push	{r0, lr}
    2742:	b085      	sub	sp, #20
    2744:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    2746:	a808      	add	r0, sp, #32
    2748:	4641      	mov	r1, r8
    274a:	464a      	mov	r2, r9
    274c:	4653      	mov	r3, sl
    274e:	465c      	mov	r4, fp
    2750:	4665      	mov	r5, ip
    2752:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
    2754:	a801      	add	r0, sp, #4
    2756:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
    2758:	980f      	ldr	r0, [sp, #60]	; 0x3c
    275a:	9000      	str	r0, [sp, #0]
    275c:	2300      	movs	r3, #0
    275e:	b40c      	push	{r2, r3}
    2760:	aa01      	add	r2, sp, #4
    2762:	f7ff fc6b 	bl	203c <__gnu_Unwind_Backtrace>
    2766:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2768:	b012      	add	sp, #72	; 0x48
    276a:	4718      	bx	r3

0000276c <next_unwind_byte>:
    276c:	7a02      	ldrb	r2, [r0, #8]
    276e:	0003      	movs	r3, r0
    2770:	2a00      	cmp	r2, #0
    2772:	d104      	bne.n	277e <next_unwind_byte+0x12>
    2774:	7a42      	ldrb	r2, [r0, #9]
    2776:	20b0      	movs	r0, #176	; 0xb0
    2778:	2a00      	cmp	r2, #0
    277a:	d107      	bne.n	278c <next_unwind_byte+0x20>
    277c:	4770      	bx	lr
    277e:	3a01      	subs	r2, #1
    2780:	7202      	strb	r2, [r0, #8]
    2782:	6802      	ldr	r2, [r0, #0]
    2784:	0e10      	lsrs	r0, r2, #24
    2786:	0212      	lsls	r2, r2, #8
    2788:	601a      	str	r2, [r3, #0]
    278a:	e7f7      	b.n	277c <next_unwind_byte+0x10>
    278c:	3a01      	subs	r2, #1
    278e:	725a      	strb	r2, [r3, #9]
    2790:	685a      	ldr	r2, [r3, #4]
    2792:	1d11      	adds	r1, r2, #4
    2794:	6059      	str	r1, [r3, #4]
    2796:	2103      	movs	r1, #3
    2798:	6812      	ldr	r2, [r2, #0]
    279a:	7219      	strb	r1, [r3, #8]
    279c:	e7f2      	b.n	2784 <next_unwind_byte+0x18>
    279e:	46c0      	nop			; (mov r8, r8)

000027a0 <_Unwind_GetGR.constprop.0>:
    27a0:	b500      	push	{lr}
    27a2:	b085      	sub	sp, #20
    27a4:	ab03      	add	r3, sp, #12
    27a6:	9300      	str	r3, [sp, #0]
    27a8:	220c      	movs	r2, #12
    27aa:	2300      	movs	r3, #0
    27ac:	2100      	movs	r1, #0
    27ae:	f7ff fbf9 	bl	1fa4 <_Unwind_VRS_Get>
    27b2:	9803      	ldr	r0, [sp, #12]
    27b4:	b005      	add	sp, #20
    27b6:	bd00      	pop	{pc}

000027b8 <unwind_UCB_from_context>:
    27b8:	b510      	push	{r4, lr}
    27ba:	f7ff fff1 	bl	27a0 <_Unwind_GetGR.constprop.0>
    27be:	bd10      	pop	{r4, pc}

000027c0 <__gnu_unwind_execute>:
    27c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    27c2:	4657      	mov	r7, sl
    27c4:	464e      	mov	r6, r9
    27c6:	4645      	mov	r5, r8
    27c8:	46de      	mov	lr, fp
    27ca:	2300      	movs	r3, #0
    27cc:	b5e0      	push	{r5, r6, r7, lr}
    27ce:	b087      	sub	sp, #28
    27d0:	9303      	str	r3, [sp, #12]
    27d2:	330f      	adds	r3, #15
    27d4:	4698      	mov	r8, r3
    27d6:	3b08      	subs	r3, #8
    27d8:	4699      	mov	r9, r3
    27da:	2380      	movs	r3, #128	; 0x80
    27dc:	031b      	lsls	r3, r3, #12
    27de:	0006      	movs	r6, r0
    27e0:	000f      	movs	r7, r1
    27e2:	469a      	mov	sl, r3
    27e4:	0038      	movs	r0, r7
    27e6:	f7ff ffc1 	bl	276c <next_unwind_byte>
    27ea:	0004      	movs	r4, r0
    27ec:	28b0      	cmp	r0, #176	; 0xb0
    27ee:	d021      	beq.n	2834 <__gnu_unwind_execute+0x74>
    27f0:	0603      	lsls	r3, r0, #24
    27f2:	d432      	bmi.n	285a <__gnu_unwind_execute+0x9a>
    27f4:	25ff      	movs	r5, #255	; 0xff
    27f6:	0083      	lsls	r3, r0, #2
    27f8:	401d      	ands	r5, r3
    27fa:	ab05      	add	r3, sp, #20
    27fc:	469b      	mov	fp, r3
    27fe:	9300      	str	r3, [sp, #0]
    2800:	220d      	movs	r2, #13
    2802:	2300      	movs	r3, #0
    2804:	2100      	movs	r1, #0
    2806:	0030      	movs	r0, r6
    2808:	3504      	adds	r5, #4
    280a:	f7ff fbcb 	bl	1fa4 <_Unwind_VRS_Get>
    280e:	0663      	lsls	r3, r4, #25
    2810:	d54c      	bpl.n	28ac <__gnu_unwind_execute+0xec>
    2812:	9b05      	ldr	r3, [sp, #20]
    2814:	1b5d      	subs	r5, r3, r5
    2816:	9505      	str	r5, [sp, #20]
    2818:	465b      	mov	r3, fp
    281a:	9300      	str	r3, [sp, #0]
    281c:	2300      	movs	r3, #0
    281e:	220d      	movs	r2, #13
    2820:	2100      	movs	r1, #0
    2822:	0030      	movs	r0, r6
    2824:	f7ff fbe4 	bl	1ff0 <_Unwind_VRS_Set>
    2828:	0038      	movs	r0, r7
    282a:	f7ff ff9f 	bl	276c <next_unwind_byte>
    282e:	0004      	movs	r4, r0
    2830:	28b0      	cmp	r0, #176	; 0xb0
    2832:	d1dd      	bne.n	27f0 <__gnu_unwind_execute+0x30>
    2834:	9b03      	ldr	r3, [sp, #12]
    2836:	2400      	movs	r4, #0
    2838:	2b00      	cmp	r3, #0
    283a:	d12f      	bne.n	289c <__gnu_unwind_execute+0xdc>
    283c:	ad05      	add	r5, sp, #20
    283e:	9500      	str	r5, [sp, #0]
    2840:	220e      	movs	r2, #14
    2842:	2100      	movs	r1, #0
    2844:	0030      	movs	r0, r6
    2846:	f7ff fbad 	bl	1fa4 <_Unwind_VRS_Get>
    284a:	9500      	str	r5, [sp, #0]
    284c:	2300      	movs	r3, #0
    284e:	220f      	movs	r2, #15
    2850:	2100      	movs	r1, #0
    2852:	0030      	movs	r0, r6
    2854:	f7ff fbcc 	bl	1ff0 <_Unwind_VRS_Set>
    2858:	e020      	b.n	289c <__gnu_unwind_execute+0xdc>
    285a:	0003      	movs	r3, r0
    285c:	4642      	mov	r2, r8
    285e:	4393      	bics	r3, r2
    2860:	b2db      	uxtb	r3, r3
    2862:	2b80      	cmp	r3, #128	; 0x80
    2864:	d063      	beq.n	292e <__gnu_unwind_execute+0x16e>
    2866:	2b90      	cmp	r3, #144	; 0x90
    2868:	d025      	beq.n	28b6 <__gnu_unwind_execute+0xf6>
    286a:	2ba0      	cmp	r3, #160	; 0xa0
    286c:	d032      	beq.n	28d4 <__gnu_unwind_execute+0x114>
    286e:	2bb0      	cmp	r3, #176	; 0xb0
    2870:	d045      	beq.n	28fe <__gnu_unwind_execute+0x13e>
    2872:	2bc0      	cmp	r3, #192	; 0xc0
    2874:	d100      	bne.n	2878 <__gnu_unwind_execute+0xb8>
    2876:	e073      	b.n	2960 <__gnu_unwind_execute+0x1a0>
    2878:	0003      	movs	r3, r0
    287a:	464a      	mov	r2, r9
    287c:	4393      	bics	r3, r2
    287e:	b2db      	uxtb	r3, r3
    2880:	2bd0      	cmp	r3, #208	; 0xd0
    2882:	d10a      	bne.n	289a <__gnu_unwind_execute+0xda>
    2884:	4653      	mov	r3, sl
    2886:	4002      	ands	r2, r0
    2888:	3201      	adds	r2, #1
    288a:	431a      	orrs	r2, r3
    288c:	2305      	movs	r3, #5
    288e:	2101      	movs	r1, #1
    2890:	0030      	movs	r0, r6
    2892:	f7ff fd95 	bl	23c0 <_Unwind_VRS_Pop>
    2896:	2800      	cmp	r0, #0
    2898:	d0a4      	beq.n	27e4 <__gnu_unwind_execute+0x24>
    289a:	2409      	movs	r4, #9
    289c:	0020      	movs	r0, r4
    289e:	b007      	add	sp, #28
    28a0:	bc3c      	pop	{r2, r3, r4, r5}
    28a2:	4690      	mov	r8, r2
    28a4:	4699      	mov	r9, r3
    28a6:	46a2      	mov	sl, r4
    28a8:	46ab      	mov	fp, r5
    28aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28ac:	9b05      	ldr	r3, [sp, #20]
    28ae:	469c      	mov	ip, r3
    28b0:	4465      	add	r5, ip
    28b2:	9505      	str	r5, [sp, #20]
    28b4:	e7b0      	b.n	2818 <__gnu_unwind_execute+0x58>
    28b6:	3b83      	subs	r3, #131	; 0x83
    28b8:	4003      	ands	r3, r0
    28ba:	2b0d      	cmp	r3, #13
    28bc:	d0ed      	beq.n	289a <__gnu_unwind_execute+0xda>
    28be:	4642      	mov	r2, r8
    28c0:	ad05      	add	r5, sp, #20
    28c2:	4002      	ands	r2, r0
    28c4:	9500      	str	r5, [sp, #0]
    28c6:	2300      	movs	r3, #0
    28c8:	2100      	movs	r1, #0
    28ca:	0030      	movs	r0, r6
    28cc:	f7ff fb6a 	bl	1fa4 <_Unwind_VRS_Get>
    28d0:	9500      	str	r5, [sp, #0]
    28d2:	e7a3      	b.n	281c <__gnu_unwind_execute+0x5c>
    28d4:	23ff      	movs	r3, #255	; 0xff
    28d6:	464a      	mov	r2, r9
    28d8:	011b      	lsls	r3, r3, #4
    28da:	0019      	movs	r1, r3
    28dc:	4382      	bics	r2, r0
    28de:	4111      	asrs	r1, r2
    28e0:	000a      	movs	r2, r1
    28e2:	401a      	ands	r2, r3
    28e4:	0703      	lsls	r3, r0, #28
    28e6:	d502      	bpl.n	28ee <__gnu_unwind_execute+0x12e>
    28e8:	2380      	movs	r3, #128	; 0x80
    28ea:	01db      	lsls	r3, r3, #7
    28ec:	431a      	orrs	r2, r3
    28ee:	2300      	movs	r3, #0
    28f0:	2100      	movs	r1, #0
    28f2:	0030      	movs	r0, r6
    28f4:	f7ff fd64 	bl	23c0 <_Unwind_VRS_Pop>
    28f8:	2800      	cmp	r0, #0
    28fa:	d1ce      	bne.n	289a <__gnu_unwind_execute+0xda>
    28fc:	e772      	b.n	27e4 <__gnu_unwind_execute+0x24>
    28fe:	28b1      	cmp	r0, #177	; 0xb1
    2900:	d04a      	beq.n	2998 <__gnu_unwind_execute+0x1d8>
    2902:	28b2      	cmp	r0, #178	; 0xb2
    2904:	d05e      	beq.n	29c4 <__gnu_unwind_execute+0x204>
    2906:	28b3      	cmp	r0, #179	; 0xb3
    2908:	d100      	bne.n	290c <__gnu_unwind_execute+0x14c>
    290a:	e08b      	b.n	2a24 <__gnu_unwind_execute+0x264>
    290c:	23fc      	movs	r3, #252	; 0xfc
    290e:	4003      	ands	r3, r0
    2910:	2bb4      	cmp	r3, #180	; 0xb4
    2912:	d0c2      	beq.n	289a <__gnu_unwind_execute+0xda>
    2914:	464a      	mov	r2, r9
    2916:	4653      	mov	r3, sl
    2918:	4002      	ands	r2, r0
    291a:	3201      	adds	r2, #1
    291c:	431a      	orrs	r2, r3
    291e:	2101      	movs	r1, #1
    2920:	2301      	movs	r3, #1
    2922:	0030      	movs	r0, r6
    2924:	f7ff fd4c 	bl	23c0 <_Unwind_VRS_Pop>
    2928:	2800      	cmp	r0, #0
    292a:	d1b6      	bne.n	289a <__gnu_unwind_execute+0xda>
    292c:	e75a      	b.n	27e4 <__gnu_unwind_execute+0x24>
    292e:	0204      	lsls	r4, r0, #8
    2930:	0038      	movs	r0, r7
    2932:	f7ff ff1b 	bl	276c <next_unwind_byte>
    2936:	2580      	movs	r5, #128	; 0x80
    2938:	4320      	orrs	r0, r4
    293a:	022d      	lsls	r5, r5, #8
    293c:	42a8      	cmp	r0, r5
    293e:	d0ac      	beq.n	289a <__gnu_unwind_execute+0xda>
    2940:	0104      	lsls	r4, r0, #4
    2942:	0500      	lsls	r0, r0, #20
    2944:	0c02      	lsrs	r2, r0, #16
    2946:	2300      	movs	r3, #0
    2948:	2100      	movs	r1, #0
    294a:	0030      	movs	r0, r6
    294c:	f7ff fd38 	bl	23c0 <_Unwind_VRS_Pop>
    2950:	2800      	cmp	r0, #0
    2952:	d1a2      	bne.n	289a <__gnu_unwind_execute+0xda>
    2954:	422c      	tst	r4, r5
    2956:	d100      	bne.n	295a <__gnu_unwind_execute+0x19a>
    2958:	e744      	b.n	27e4 <__gnu_unwind_execute+0x24>
    295a:	2301      	movs	r3, #1
    295c:	9303      	str	r3, [sp, #12]
    295e:	e741      	b.n	27e4 <__gnu_unwind_execute+0x24>
    2960:	28c6      	cmp	r0, #198	; 0xc6
    2962:	d06a      	beq.n	2a3a <__gnu_unwind_execute+0x27a>
    2964:	28c7      	cmp	r0, #199	; 0xc7
    2966:	d07c      	beq.n	2a62 <__gnu_unwind_execute+0x2a2>
    2968:	0003      	movs	r3, r0
    296a:	464a      	mov	r2, r9
    296c:	4393      	bics	r3, r2
    296e:	b2db      	uxtb	r3, r3
    2970:	2bc0      	cmp	r3, #192	; 0xc0
    2972:	d100      	bne.n	2976 <__gnu_unwind_execute+0x1b6>
    2974:	e08b      	b.n	2a8e <__gnu_unwind_execute+0x2ce>
    2976:	28c8      	cmp	r0, #200	; 0xc8
    2978:	d100      	bne.n	297c <__gnu_unwind_execute+0x1bc>
    297a:	e08f      	b.n	2a9c <__gnu_unwind_execute+0x2dc>
    297c:	28c9      	cmp	r0, #201	; 0xc9
    297e:	d000      	beq.n	2982 <__gnu_unwind_execute+0x1c2>
    2980:	e78b      	b.n	289a <__gnu_unwind_execute+0xda>
    2982:	0038      	movs	r0, r7
    2984:	f7ff fef2 	bl	276c <next_unwind_byte>
    2988:	23f0      	movs	r3, #240	; 0xf0
    298a:	0302      	lsls	r2, r0, #12
    298c:	031b      	lsls	r3, r3, #12
    298e:	4013      	ands	r3, r2
    2990:	4642      	mov	r2, r8
    2992:	4002      	ands	r2, r0
    2994:	3201      	adds	r2, #1
    2996:	e778      	b.n	288a <__gnu_unwind_execute+0xca>
    2998:	0038      	movs	r0, r7
    299a:	f7ff fee7 	bl	276c <next_unwind_byte>
    299e:	2800      	cmp	r0, #0
    29a0:	d100      	bne.n	29a4 <__gnu_unwind_execute+0x1e4>
    29a2:	e77a      	b.n	289a <__gnu_unwind_execute+0xda>
    29a4:	0003      	movs	r3, r0
    29a6:	4642      	mov	r2, r8
    29a8:	4393      	bics	r3, r2
    29aa:	b2db      	uxtb	r3, r3
    29ac:	2b00      	cmp	r3, #0
    29ae:	d000      	beq.n	29b2 <__gnu_unwind_execute+0x1f2>
    29b0:	e773      	b.n	289a <__gnu_unwind_execute+0xda>
    29b2:	0002      	movs	r2, r0
    29b4:	2100      	movs	r1, #0
    29b6:	0030      	movs	r0, r6
    29b8:	f7ff fd02 	bl	23c0 <_Unwind_VRS_Pop>
    29bc:	2800      	cmp	r0, #0
    29be:	d000      	beq.n	29c2 <__gnu_unwind_execute+0x202>
    29c0:	e76b      	b.n	289a <__gnu_unwind_execute+0xda>
    29c2:	e70f      	b.n	27e4 <__gnu_unwind_execute+0x24>
    29c4:	ab05      	add	r3, sp, #20
    29c6:	9300      	str	r3, [sp, #0]
    29c8:	469b      	mov	fp, r3
    29ca:	220d      	movs	r2, #13
    29cc:	2300      	movs	r3, #0
    29ce:	2100      	movs	r1, #0
    29d0:	0030      	movs	r0, r6
    29d2:	f7ff fae7 	bl	1fa4 <_Unwind_VRS_Get>
    29d6:	0038      	movs	r0, r7
    29d8:	f7ff fec8 	bl	276c <next_unwind_byte>
    29dc:	0603      	lsls	r3, r0, #24
    29de:	d56a      	bpl.n	2ab6 <__gnu_unwind_execute+0x2f6>
    29e0:	257f      	movs	r5, #127	; 0x7f
    29e2:	3cb0      	subs	r4, #176	; 0xb0
    29e4:	9b05      	ldr	r3, [sp, #20]
    29e6:	4028      	ands	r0, r5
    29e8:	40a0      	lsls	r0, r4
    29ea:	469c      	mov	ip, r3
    29ec:	4460      	add	r0, ip
    29ee:	9005      	str	r0, [sp, #20]
    29f0:	0038      	movs	r0, r7
    29f2:	3407      	adds	r4, #7
    29f4:	f7ff feba 	bl	276c <next_unwind_byte>
    29f8:	0603      	lsls	r3, r0, #24
    29fa:	d4f3      	bmi.n	29e4 <__gnu_unwind_execute+0x224>
    29fc:	2281      	movs	r2, #129	; 0x81
    29fe:	0092      	lsls	r2, r2, #2
    2a00:	4694      	mov	ip, r2
    2a02:	3a86      	subs	r2, #134	; 0x86
    2a04:	3aff      	subs	r2, #255	; 0xff
    2a06:	4010      	ands	r0, r2
    2a08:	40a0      	lsls	r0, r4
    2a0a:	9b05      	ldr	r3, [sp, #20]
    2a0c:	3a72      	subs	r2, #114	; 0x72
    2a0e:	4463      	add	r3, ip
    2a10:	1818      	adds	r0, r3, r0
    2a12:	465b      	mov	r3, fp
    2a14:	9005      	str	r0, [sp, #20]
    2a16:	9300      	str	r3, [sp, #0]
    2a18:	2100      	movs	r1, #0
    2a1a:	2300      	movs	r3, #0
    2a1c:	0030      	movs	r0, r6
    2a1e:	f7ff fae7 	bl	1ff0 <_Unwind_VRS_Set>
    2a22:	e6df      	b.n	27e4 <__gnu_unwind_execute+0x24>
    2a24:	0038      	movs	r0, r7
    2a26:	f7ff fea1 	bl	276c <next_unwind_byte>
    2a2a:	23f0      	movs	r3, #240	; 0xf0
    2a2c:	0302      	lsls	r2, r0, #12
    2a2e:	031b      	lsls	r3, r3, #12
    2a30:	4013      	ands	r3, r2
    2a32:	4642      	mov	r2, r8
    2a34:	4002      	ands	r2, r0
    2a36:	3201      	adds	r2, #1
    2a38:	e770      	b.n	291c <__gnu_unwind_execute+0x15c>
    2a3a:	0038      	movs	r0, r7
    2a3c:	f7ff fe96 	bl	276c <next_unwind_byte>
    2a40:	23f0      	movs	r3, #240	; 0xf0
    2a42:	0302      	lsls	r2, r0, #12
    2a44:	031b      	lsls	r3, r3, #12
    2a46:	4013      	ands	r3, r2
    2a48:	4642      	mov	r2, r8
    2a4a:	4002      	ands	r2, r0
    2a4c:	3201      	adds	r2, #1
    2a4e:	431a      	orrs	r2, r3
    2a50:	2303      	movs	r3, #3
    2a52:	2103      	movs	r1, #3
    2a54:	0030      	movs	r0, r6
    2a56:	f7ff fcb3 	bl	23c0 <_Unwind_VRS_Pop>
    2a5a:	2800      	cmp	r0, #0
    2a5c:	d000      	beq.n	2a60 <__gnu_unwind_execute+0x2a0>
    2a5e:	e71c      	b.n	289a <__gnu_unwind_execute+0xda>
    2a60:	e6c0      	b.n	27e4 <__gnu_unwind_execute+0x24>
    2a62:	0038      	movs	r0, r7
    2a64:	f7ff fe82 	bl	276c <next_unwind_byte>
    2a68:	2800      	cmp	r0, #0
    2a6a:	d100      	bne.n	2a6e <__gnu_unwind_execute+0x2ae>
    2a6c:	e715      	b.n	289a <__gnu_unwind_execute+0xda>
    2a6e:	0003      	movs	r3, r0
    2a70:	4642      	mov	r2, r8
    2a72:	4393      	bics	r3, r2
    2a74:	b2db      	uxtb	r3, r3
    2a76:	2b00      	cmp	r3, #0
    2a78:	d000      	beq.n	2a7c <__gnu_unwind_execute+0x2bc>
    2a7a:	e70e      	b.n	289a <__gnu_unwind_execute+0xda>
    2a7c:	0002      	movs	r2, r0
    2a7e:	2104      	movs	r1, #4
    2a80:	0030      	movs	r0, r6
    2a82:	f7ff fc9d 	bl	23c0 <_Unwind_VRS_Pop>
    2a86:	2800      	cmp	r0, #0
    2a88:	d000      	beq.n	2a8c <__gnu_unwind_execute+0x2cc>
    2a8a:	e706      	b.n	289a <__gnu_unwind_execute+0xda>
    2a8c:	e6aa      	b.n	27e4 <__gnu_unwind_execute+0x24>
    2a8e:	4643      	mov	r3, r8
    2a90:	22a0      	movs	r2, #160	; 0xa0
    2a92:	401c      	ands	r4, r3
    2a94:	3401      	adds	r4, #1
    2a96:	0312      	lsls	r2, r2, #12
    2a98:	4322      	orrs	r2, r4
    2a9a:	e7d9      	b.n	2a50 <__gnu_unwind_execute+0x290>
    2a9c:	0038      	movs	r0, r7
    2a9e:	f7ff fe65 	bl	276c <next_unwind_byte>
    2aa2:	4643      	mov	r3, r8
    2aa4:	0002      	movs	r2, r0
    2aa6:	439a      	bics	r2, r3
    2aa8:	b2d2      	uxtb	r2, r2
    2aaa:	3210      	adds	r2, #16
    2aac:	4018      	ands	r0, r3
    2aae:	0312      	lsls	r2, r2, #12
    2ab0:	3001      	adds	r0, #1
    2ab2:	4302      	orrs	r2, r0
    2ab4:	e6ea      	b.n	288c <__gnu_unwind_execute+0xcc>
    2ab6:	2402      	movs	r4, #2
    2ab8:	e7a0      	b.n	29fc <__gnu_unwind_execute+0x23c>
    2aba:	46c0      	nop			; (mov r8, r8)

00002abc <__gnu_unwind_frame>:
    2abc:	0003      	movs	r3, r0
    2abe:	b500      	push	{lr}
    2ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2ac2:	b085      	sub	sp, #20
    2ac4:	685a      	ldr	r2, [r3, #4]
    2ac6:	0008      	movs	r0, r1
    2ac8:	0212      	lsls	r2, r2, #8
    2aca:	9201      	str	r2, [sp, #4]
    2acc:	001a      	movs	r2, r3
    2ace:	a901      	add	r1, sp, #4
    2ad0:	3208      	adds	r2, #8
    2ad2:	604a      	str	r2, [r1, #4]
    2ad4:	2203      	movs	r2, #3
    2ad6:	720a      	strb	r2, [r1, #8]
    2ad8:	79db      	ldrb	r3, [r3, #7]
    2ada:	724b      	strb	r3, [r1, #9]
    2adc:	f7ff fe70 	bl	27c0 <__gnu_unwind_execute>
    2ae0:	b005      	add	sp, #20
    2ae2:	bd00      	pop	{pc}

00002ae4 <_Unwind_GetRegionStart>:
    2ae4:	b510      	push	{r4, lr}
    2ae6:	f7ff fe67 	bl	27b8 <unwind_UCB_from_context>
    2aea:	6c80      	ldr	r0, [r0, #72]	; 0x48
    2aec:	bd10      	pop	{r4, pc}
    2aee:	46c0      	nop			; (mov r8, r8)

00002af0 <_Unwind_GetLanguageSpecificData>:
    2af0:	b510      	push	{r4, lr}
    2af2:	f7ff fe61 	bl	27b8 <unwind_UCB_from_context>
    2af6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    2af8:	79d3      	ldrb	r3, [r2, #7]
    2afa:	009b      	lsls	r3, r3, #2
    2afc:	3308      	adds	r3, #8
    2afe:	18d0      	adds	r0, r2, r3
    2b00:	bd10      	pop	{r4, pc}
    2b02:	46c0      	nop			; (mov r8, r8)

00002b04 <_Unwind_GetTextRelBase>:
    2b04:	b510      	push	{r4, lr}
    2b06:	f00a ffd7 	bl	dab8 <abort>
    2b0a:	46c0      	nop			; (mov r8, r8)

00002b0c <_Unwind_GetDataRelBase>:
    2b0c:	b510      	push	{r4, lr}
    2b0e:	f7ff fff9 	bl	2b04 <_Unwind_GetTextRelBase>
    2b12:	46c0      	nop			; (mov r8, r8)

00002b14 <__clzsi2>:
    2b14:	211c      	movs	r1, #28
    2b16:	2301      	movs	r3, #1
    2b18:	041b      	lsls	r3, r3, #16
    2b1a:	4298      	cmp	r0, r3
    2b1c:	d301      	bcc.n	2b22 <__clzsi2+0xe>
    2b1e:	0c00      	lsrs	r0, r0, #16
    2b20:	3910      	subs	r1, #16
    2b22:	0a1b      	lsrs	r3, r3, #8
    2b24:	4298      	cmp	r0, r3
    2b26:	d301      	bcc.n	2b2c <__clzsi2+0x18>
    2b28:	0a00      	lsrs	r0, r0, #8
    2b2a:	3908      	subs	r1, #8
    2b2c:	091b      	lsrs	r3, r3, #4
    2b2e:	4298      	cmp	r0, r3
    2b30:	d301      	bcc.n	2b36 <__clzsi2+0x22>
    2b32:	0900      	lsrs	r0, r0, #4
    2b34:	3904      	subs	r1, #4
    2b36:	a202      	add	r2, pc, #8	; (adr r2, 2b40 <__clzsi2+0x2c>)
    2b38:	5c10      	ldrb	r0, [r2, r0]
    2b3a:	1840      	adds	r0, r0, r1
    2b3c:	4770      	bx	lr
    2b3e:	46c0      	nop			; (mov r8, r8)
    2b40:	02020304 	.word	0x02020304
    2b44:	01010101 	.word	0x01010101
	...

00002b50 <strcmp>:
    2b50:	7802      	ldrb	r2, [r0, #0]
    2b52:	780b      	ldrb	r3, [r1, #0]
    2b54:	2a00      	cmp	r2, #0
    2b56:	d003      	beq.n	2b60 <strcmp+0x10>
    2b58:	3001      	adds	r0, #1
    2b5a:	3101      	adds	r1, #1
    2b5c:	429a      	cmp	r2, r3
    2b5e:	d0f7      	beq.n	2b50 <strcmp>
    2b60:	1ad0      	subs	r0, r2, r3
    2b62:	4770      	bx	lr

00002b64 <strlen>:
    2b64:	2300      	movs	r3, #0
    2b66:	5cc2      	ldrb	r2, [r0, r3]
    2b68:	3301      	adds	r3, #1
    2b6a:	2a00      	cmp	r2, #0
    2b6c:	d1fb      	bne.n	2b66 <strlen+0x2>
    2b6e:	1e58      	subs	r0, r3, #1
    2b70:	4770      	bx	lr
	...

00002b80 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
    2b80:	4770      	bx	lr
    2b82:	46c0      	nop			; (mov r8, r8)
	...

00002b90 <__early_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __early_init(void) {}
    2b90:	4770      	bx	lr
    2b92:	46c0      	nop			; (mov r8, r8)
	...

00002ba0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
    2ba0:	4770      	bx	lr
    2ba2:	46c0      	nop			; (mov r8, r8)
	...

00002bb0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
    2bb0:	e7fe      	b.n	2bb0 <__default_exit>
    2bb2:	46c0      	nop			; (mov r8, r8)
	...

00002bc0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
    2bc0:	b530      	push	{r4, r5, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
    2bc2:	4a0c      	ldr	r2, [pc, #48]	; (2bf4 <__init_ram_areas+0x34>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
    2bc4:	2400      	movs	r4, #0
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
    2bc6:	0015      	movs	r5, r2
    2bc8:	3580      	adds	r5, #128	; 0x80
    uint32_t *tp = rap->init_text_area;
    2bca:	6811      	ldr	r1, [r2, #0]
    uint32_t *p = rap->init_area;
    2bcc:	6853      	ldr	r3, [r2, #4]
    while (p < rap->clear_area) {
    2bce:	6890      	ldr	r0, [r2, #8]
    2bd0:	4283      	cmp	r3, r0
    2bd2:	d204      	bcs.n	2bde <__init_ram_areas+0x1e>
      *p = *tp;
    2bd4:	c901      	ldmia	r1!, {r0}
    2bd6:	c301      	stmia	r3!, {r0}
    while (p < rap->clear_area) {
    2bd8:	6890      	ldr	r0, [r2, #8]
    2bda:	4298      	cmp	r0, r3
    2bdc:	d8fa      	bhi.n	2bd4 <__init_ram_areas+0x14>
    while (p < rap->no_init_area) {
    2bde:	68d1      	ldr	r1, [r2, #12]
    2be0:	428b      	cmp	r3, r1
    2be2:	d203      	bcs.n	2bec <__init_ram_areas+0x2c>
      *p = 0;
    2be4:	c310      	stmia	r3!, {r4}
    while (p < rap->no_init_area) {
    2be6:	68d1      	ldr	r1, [r2, #12]
    2be8:	4299      	cmp	r1, r3
    2bea:	d8fb      	bhi.n	2be4 <__init_ram_areas+0x24>
    rap++;
    2bec:	3210      	adds	r2, #16
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
    2bee:	42aa      	cmp	r2, r5
    2bf0:	d3eb      	bcc.n	2bca <__init_ram_areas+0xa>
#endif
}
    2bf2:	bd30      	pop	{r4, r5, pc}
    2bf4:	0000dff4 	.word	0x0000dff4
	...

00002c00 <DebugMon_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak)) void _unhandled_exception(void) {
    2c00:	e7fe      	b.n	2c00 <DebugMon_Handler>
    2c02:	46c0      	nop			; (mov r8, r8)
	...

00002c10 <HardFault_Handler>:
}

__attribute__((weak)) __attribute__((naked)) void _HardFault_Handler(void)
{
	/*lint -restore*/
	  __asm volatile (
    2c10:	2004      	movs	r0, #4
    2c12:	4671      	mov	r1, lr
    2c14:	4208      	tst	r0, r1
    2c16:	d002      	beq.n	2c1e <_MSP>
    2c18:	f3ef 8009 	mrs	r0, PSP
    2c1c:	e001      	b.n	2c22 <_GetPC>

00002c1e <_MSP>:
    2c1e:	f3ef 8008 	mrs	r0, MSP

00002c22 <_GetPC>:
    2c22:	6941      	ldr	r1, [r0, #20]
    2c24:	e01c      	b.n	2c60 <HardFault_HandlerC>
    2c26:	46c0      	nop			; (mov r8, r8)
	...

00002c30 <MemManage_Handler>:
//			"MRS R0, MSP \n"
//			"B HardFault_HandlerC \n"
//			".syntax divided\n");
}

__attribute__((weak)) void _MemManage_Handler(void) {
    2c30:	e7fe      	b.n	2c30 <MemManage_Handler>
    2c32:	46c0      	nop			; (mov r8, r8)
	...

00002c40 <BusFault_Handler>:
/*lint -restore*/

  while (true) {
  }
}
__attribute__((weak)) void _BusFault_Handler(void) {
    2c40:	e7fe      	b.n	2c40 <BusFault_Handler>
    2c42:	46c0      	nop			; (mov r8, r8)
	...

00002c50 <UsageFault_Handler>:
/*lint -restore*/

  while (true) {
  }
}
__attribute__((weak)) void _UsageFault_Handler(void) {
    2c50:	e7fe      	b.n	2c50 <UsageFault_Handler>
    2c52:	46c0      	nop			; (mov r8, r8)
	...

00002c60 <HardFault_HandlerC>:
{
    2c60:	b08e      	sub	sp, #56	; 0x38
	stacked_r0 = ((unsigned long) hardfault_args[0]);
    2c62:	6803      	ldr	r3, [r0, #0]
    2c64:	930d      	str	r3, [sp, #52]	; 0x34
	stacked_r1 = ((unsigned long) hardfault_args[1]);
    2c66:	6843      	ldr	r3, [r0, #4]
    2c68:	930c      	str	r3, [sp, #48]	; 0x30
	stacked_r2 = ((unsigned long) hardfault_args[2]);
    2c6a:	6883      	ldr	r3, [r0, #8]
    2c6c:	930b      	str	r3, [sp, #44]	; 0x2c
	stacked_r3 = ((unsigned long) hardfault_args[3]);
    2c6e:	68c3      	ldr	r3, [r0, #12]
    2c70:	930a      	str	r3, [sp, #40]	; 0x28
	stacked_r12 = ((unsigned long) hardfault_args[4]);
    2c72:	6903      	ldr	r3, [r0, #16]
    2c74:	9309      	str	r3, [sp, #36]	; 0x24
	stacked_lr = ((unsigned long) hardfault_args[5]);
    2c76:	6943      	ldr	r3, [r0, #20]
    2c78:	9308      	str	r3, [sp, #32]
	stacked_pc = ((unsigned long) hardfault_args[6]);
    2c7a:	6983      	ldr	r3, [r0, #24]
    2c7c:	9307      	str	r3, [sp, #28]
	stacked_psr = ((unsigned long) hardfault_args[7]);
    2c7e:	69c3      	ldr	r3, [r0, #28]
    2c80:	9306      	str	r3, [sp, #24]
	_CFSR = (*((volatile unsigned long *) (0xE000ED28)));
    2c82:	4b0a      	ldr	r3, [pc, #40]	; (2cac <HardFault_HandlerC+0x4c>)
    2c84:	681b      	ldr	r3, [r3, #0]
    2c86:	9305      	str	r3, [sp, #20]
	_HFSR = (*((volatile unsigned long *) (0xE000ED2C)));
    2c88:	4b09      	ldr	r3, [pc, #36]	; (2cb0 <HardFault_HandlerC+0x50>)
    2c8a:	681b      	ldr	r3, [r3, #0]
    2c8c:	9304      	str	r3, [sp, #16]
	_DFSR = (*((volatile unsigned long *) (0xE000ED30)));
    2c8e:	4b09      	ldr	r3, [pc, #36]	; (2cb4 <HardFault_HandlerC+0x54>)
    2c90:	681b      	ldr	r3, [r3, #0]
    2c92:	9303      	str	r3, [sp, #12]
	_AFSR = (*((volatile unsigned long *) (0xE000ED3C)));
    2c94:	4b08      	ldr	r3, [pc, #32]	; (2cb8 <HardFault_HandlerC+0x58>)
    2c96:	681b      	ldr	r3, [r3, #0]
    2c98:	9302      	str	r3, [sp, #8]
	_MMAR = (*((volatile unsigned long *) (0xE000ED34)));
    2c9a:	4b08      	ldr	r3, [pc, #32]	; (2cbc <HardFault_HandlerC+0x5c>)
    2c9c:	681b      	ldr	r3, [r3, #0]
    2c9e:	9300      	str	r3, [sp, #0]
	_BFAR = (*((volatile unsigned long *) (0xE000ED38)));
    2ca0:	4b07      	ldr	r3, [pc, #28]	; (2cc0 <HardFault_HandlerC+0x60>)
    2ca2:	681b      	ldr	r3, [r3, #0]
    2ca4:	9301      	str	r3, [sp, #4]
	__asm("BKPT #0\n");
    2ca6:	be00      	bkpt	0x0000
}
    2ca8:	b00e      	add	sp, #56	; 0x38
    2caa:	4770      	bx	lr
    2cac:	e000ed28 	.word	0xe000ed28
    2cb0:	e000ed2c 	.word	0xe000ed2c
    2cb4:	e000ed30 	.word	0xe000ed30
    2cb8:	e000ed3c 	.word	0xe000ed3c
    2cbc:	e000ed34 	.word	0xe000ed34
    2cc0:	e000ed38 	.word	0xe000ed38
	...

00002cd0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
    2cd0:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2cd2:	b672      	cpsid	i

  port_disable();

#if NIL_DBG_ENABLED
  nil.dbg_panic_msg = reason;
    2cd4:	4b02      	ldr	r3, [pc, #8]	; (2ce0 <chSysHalt+0x10>)
    2cd6:	60d8      	str	r0, [r3, #12]
#else
  (void)reason;
#endif

  /* Halt hook code, usually empty.*/
  CH_CFG_SYSTEM_HALT_HOOK(reason);
    2cd8:	f002 f91a 	bl	4f10 <xprintf>
    2cdc:	e7fe      	b.n	2cdc <chSysHalt+0xc>
    2cde:	46c0      	nop			; (mov r8, r8)
    2ce0:	20000a70 	.word	0x20000a70
	...

00002cf0 <chSysInit>:
void chSysInit(void) {
    2cf0:	b570      	push	{r4, r5, r6, lr}
  tcp = nil_thd_configs;
    2cf2:	4b19      	ldr	r3, [pc, #100]	; (2d58 <chSysInit+0x68>)
  tp = &nil.threads[0];
    2cf4:	4919      	ldr	r1, [pc, #100]	; (2d5c <chSysInit+0x6c>)
    2cf6:	3110      	adds	r1, #16
    PORT_SETUP_CONTEXT(tp, tcp->wbase, tcp->wend, tcp->funcp, tcp->arg);
    2cf8:	4c19      	ldr	r4, [pc, #100]	; (2d60 <chSysInit+0x70>)
  while (tp < &nil.threads[CH_CFG_NUM_THREADS]) {
    2cfa:	4818      	ldr	r0, [pc, #96]	; (2d5c <chSysInit+0x6c>)
    2cfc:	30b8      	adds	r0, #184	; 0xb8
    tp->wabase  = (stkalign_t *)tcp->wbase;
    2cfe:	681a      	ldr	r2, [r3, #0]
    2d00:	614a      	str	r2, [r1, #20]
    PORT_SETUP_CONTEXT(tp, tcp->wbase, tcp->wend, tcp->funcp, tcp->arg);
    2d02:	685a      	ldr	r2, [r3, #4]
    2d04:	3a24      	subs	r2, #36	; 0x24
    2d06:	600a      	str	r2, [r1, #0]
    2d08:	68dd      	ldr	r5, [r3, #12]
    2d0a:	6115      	str	r5, [r2, #16]
    2d0c:	680a      	ldr	r2, [r1, #0]
    2d0e:	691d      	ldr	r5, [r3, #16]
    2d10:	6155      	str	r5, [r2, #20]
    2d12:	680a      	ldr	r2, [r1, #0]
    2d14:	6214      	str	r4, [r2, #32]
    tp++;
    2d16:	3118      	adds	r1, #24
    tcp++;
    2d18:	3314      	adds	r3, #20
  while (tp < &nil.threads[CH_CFG_NUM_THREADS]) {
    2d1a:	4281      	cmp	r1, r0
    2d1c:	d3ef      	bcc.n	2cfe <chSysInit+0xe>
  tp->wabase  = THD_IDLE_BASE;
    2d1e:	4b11      	ldr	r3, [pc, #68]	; (2d64 <chSysInit+0x74>)
    2d20:	614b      	str	r3, [r1, #20]
    2d22:	b672      	cpsid	i
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2d24:	4a10      	ldr	r2, [pc, #64]	; (2d68 <chSysInit+0x78>)
    2d26:	6a13      	ldr	r3, [r2, #32]
    2d28:	4810      	ldr	r0, [pc, #64]	; (2d6c <chSysInit+0x7c>)
    2d2a:	4003      	ands	r3, r0
    2d2c:	6213      	str	r3, [r2, #32]
  nil.current = nil.next = nil.threads;
    2d2e:	4b0b      	ldr	r3, [pc, #44]	; (2d5c <chSysInit+0x6c>)
    2d30:	001a      	movs	r2, r3
    2d32:	3210      	adds	r2, #16
    2d34:	605a      	str	r2, [r3, #4]
    2d36:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
    2d38:	f3ef 8309 	mrs	r3, PSP
  port_switch(nil.current, tp);
    2d3c:	3b24      	subs	r3, #36	; 0x24
    2d3e:	694a      	ldr	r2, [r1, #20]
    2d40:	429a      	cmp	r2, r3
    2d42:	d805      	bhi.n	2d50 <chSysInit+0x60>
    2d44:	4805      	ldr	r0, [pc, #20]	; (2d5c <chSysInit+0x6c>)
    2d46:	3010      	adds	r0, #16
    2d48:	f7fd fa22 	bl	190 <_port_switch>
  __ASM volatile ("cpsie i" : : : "memory");
    2d4c:	b662      	cpsie	i
}
    2d4e:	bd70      	pop	{r4, r5, r6, pc}
  port_switch(nil.current, tp);
    2d50:	4807      	ldr	r0, [pc, #28]	; (2d70 <chSysInit+0x80>)
    2d52:	f7ff ffbd 	bl	2cd0 <chSysHalt>
    2d56:	46c0      	nop			; (mov r8, r8)
    2d58:	0000f9a8 	.word	0x0000f9a8
    2d5c:	20000a70 	.word	0x20000a70
    2d60:	000001b1 	.word	0x000001b1
    2d64:	20000400 	.word	0x20000400
    2d68:	e000ed00 	.word	0xe000ed00
    2d6c:	ff00ffff 	.word	0xff00ffff
    2d70:	0000e074 	.word	0x0000e074
	...

00002d80 <chSchReadyI>:
  chDbgCheckClassI();
  chDbgCheck((tp >= nil.threads) && (tp < &nil.threads[CH_CFG_NUM_THREADS]));
  chDbgAssert(!NIL_THD_IS_READY(tp), "already ready");
  chDbgAssert(nil.next <= nil.current, "priority ordering");

  tp->u1.msg = msg;
    2d80:	6081      	str	r1, [r0, #8]
  tp->state = NIL_STATE_READY;
    2d82:	2300      	movs	r3, #0
    2d84:	7103      	strb	r3, [r0, #4]
  tp->timeout = (systime_t)0;
    2d86:	60c3      	str	r3, [r0, #12]
  if (tp < nil.next) {
    2d88:	4b03      	ldr	r3, [pc, #12]	; (2d98 <chSchReadyI+0x18>)
    2d8a:	685b      	ldr	r3, [r3, #4]
    2d8c:	4298      	cmp	r0, r3
    2d8e:	d201      	bcs.n	2d94 <chSchReadyI+0x14>
    nil.next = tp;
    2d90:	4b01      	ldr	r3, [pc, #4]	; (2d98 <chSchReadyI+0x18>)
    2d92:	6058      	str	r0, [r3, #4]
  }
  return tp;
}
    2d94:	4770      	bx	lr
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	20000a70 	.word	0x20000a70
    2d9c:	00000000 	.word	0x00000000

00002da0 <chSysTimerHandlerI>:
void chSysTimerHandlerI(void) {
    2da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  nil.systime++;
    2da2:	4c14      	ldr	r4, [pc, #80]	; (2df4 <chSysTimerHandlerI+0x54>)
    2da4:	68a3      	ldr	r3, [r4, #8]
    2da6:	3301      	adds	r3, #1
    2da8:	60a3      	str	r3, [r4, #8]
  thread_t *tp = &nil.threads[0];
    2daa:	3410      	adds	r4, #16
        (void) chSchReadyI(tp, MSG_TIMEOUT);
    2dac:	2501      	movs	r5, #1
    2dae:	426d      	negs	r5, r5
          *tp->u1.trp = NULL;
    2db0:	2700      	movs	r7, #0
  } while (tp < &nil.threads[CH_CFG_NUM_THREADS]);
    2db2:	4e10      	ldr	r6, [pc, #64]	; (2df4 <chSysTimerHandlerI+0x54>)
    2db4:	36b8      	adds	r6, #184	; 0xb8
    2db6:	e00c      	b.n	2dd2 <chSysTimerHandlerI+0x32>
          tp->u1.semp->cnt++;
    2db8:	68a2      	ldr	r2, [r4, #8]
    2dba:	6813      	ldr	r3, [r2, #0]
    2dbc:	3301      	adds	r3, #1
    2dbe:	6013      	str	r3, [r2, #0]
        (void) chSchReadyI(tp, MSG_TIMEOUT);
    2dc0:	0029      	movs	r1, r5
    2dc2:	0020      	movs	r0, r4
    2dc4:	f7ff ffdc 	bl	2d80 <chSchReadyI>
    2dc8:	b662      	cpsie	i
    tp++;
    2dca:	3418      	adds	r4, #24
  __ASM volatile ("cpsid i" : : : "memory");
    2dcc:	b672      	cpsid	i
  } while (tp < &nil.threads[CH_CFG_NUM_THREADS]);
    2dce:	42b4      	cmp	r4, r6
    2dd0:	d20f      	bcs.n	2df2 <chSysTimerHandlerI+0x52>
    if (tp->timeout > (systime_t)0) {
    2dd2:	68e3      	ldr	r3, [r4, #12]
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d0f7      	beq.n	2dc8 <chSysTimerHandlerI+0x28>
      if (--tp->timeout == (systime_t)0) {
    2dd8:	68e3      	ldr	r3, [r4, #12]
    2dda:	3b01      	subs	r3, #1
    2ddc:	60e3      	str	r3, [r4, #12]
    2dde:	2b00      	cmp	r3, #0
    2de0:	d1f2      	bne.n	2dc8 <chSysTimerHandlerI+0x28>
        if (NIL_THD_IS_WTQUEUE(tp)) {
    2de2:	7923      	ldrb	r3, [r4, #4]
    2de4:	2b03      	cmp	r3, #3
    2de6:	d0e7      	beq.n	2db8 <chSysTimerHandlerI+0x18>
        else if (NIL_THD_IS_SUSP(tp)) {
    2de8:	2b02      	cmp	r3, #2
    2dea:	d1e9      	bne.n	2dc0 <chSysTimerHandlerI+0x20>
          *tp->u1.trp = NULL;
    2dec:	68a3      	ldr	r3, [r4, #8]
    2dee:	601f      	str	r7, [r3, #0]
    2df0:	e7e6      	b.n	2dc0 <chSysTimerHandlerI+0x20>
}
    2df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2df4:	20000a70 	.word	0x20000a70
	...

00002e00 <chSchIsPreemptionRequired>:
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {

  return chSchIsRescRequiredI();
    2e00:	4b03      	ldr	r3, [pc, #12]	; (2e10 <chSchIsPreemptionRequired+0x10>)
    2e02:	6818      	ldr	r0, [r3, #0]
    2e04:	685b      	ldr	r3, [r3, #4]
    2e06:	1ac0      	subs	r0, r0, r3
    2e08:	1e43      	subs	r3, r0, #1
    2e0a:	4198      	sbcs	r0, r3
    2e0c:	b2c0      	uxtb	r0, r0
}
    2e0e:	4770      	bx	lr
    2e10:	20000a70 	.word	0x20000a70
	...

00002e20 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
    2e20:	b510      	push	{r4, lr}
  thread_t *otp = nil.current;
    2e22:	4b08      	ldr	r3, [pc, #32]	; (2e44 <chSchDoReschedule+0x24>)
    2e24:	6819      	ldr	r1, [r3, #0]

  nil.current = nil.next;
    2e26:	6858      	ldr	r0, [r3, #4]
    2e28:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
    2e2a:	f3ef 8309 	mrs	r3, PSP
  if (otp == &nil.threads[CH_CFG_NUM_THREADS]) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
  port_switch(nil.next, otp);
    2e2e:	3b24      	subs	r3, #36	; 0x24
    2e30:	694a      	ldr	r2, [r1, #20]
    2e32:	429a      	cmp	r2, r3
    2e34:	d802      	bhi.n	2e3c <chSchDoReschedule+0x1c>
    2e36:	f7fd f9ab 	bl	190 <_port_switch>
}
    2e3a:	bd10      	pop	{r4, pc}
  port_switch(nil.next, otp);
    2e3c:	4802      	ldr	r0, [pc, #8]	; (2e48 <chSchDoReschedule+0x28>)
    2e3e:	f7ff ff47 	bl	2cd0 <chSysHalt>
    2e42:	46c0      	nop			; (mov r8, r8)
    2e44:	20000a70 	.word	0x20000a70
    2e48:	0000e074 	.word	0x0000e074
    2e4c:	00000000 	.word	0x00000000

00002e50 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval NIL_MSG_TMO  if a timeout occurred.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t timeout) {
    2e50:	b510      	push	{r4, lr}
  thread_t *ntp, *otp = nil.current;
    2e52:	4b11      	ldr	r3, [pc, #68]	; (2e98 <chSchGoSleepTimeoutS+0x48>)
    2e54:	681a      	ldr	r2, [r3, #0]

  chDbgAssert(otp != &nil.threads[CH_CFG_NUM_THREADS],
               "idle cannot sleep");

  /* Storing the wait object for the current thread.*/
  otp->state = newstate;
    2e56:	7110      	strb	r0, [r2, #4]
    otp->timeout = abstime - nil.lasttime;
  }
#else

  /* Timeout settings.*/
  otp->timeout = timeout;
    2e58:	60d1      	str	r1, [r2, #12]

  /* Scanning the whole threads array.*/
  ntp = nil.threads;
  while (true) {
    /* Is this thread ready to execute?*/
    if (NIL_THD_IS_READY(ntp)) {
    2e5a:	7d1b      	ldrb	r3, [r3, #20]
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	d015      	beq.n	2e8c <chSchGoSleepTimeoutS+0x3c>
    2e60:	480d      	ldr	r0, [pc, #52]	; (2e98 <chSchGoSleepTimeoutS+0x48>)
    2e62:	3010      	adds	r0, #16
      port_switch(ntp, otp);
      return nil.current->u1.msg;
    }

    /* Points to the next thread in lowering priority order.*/
    ntp++;
    2e64:	3018      	adds	r0, #24
    if (NIL_THD_IS_READY(ntp)) {
    2e66:	7903      	ldrb	r3, [r0, #4]
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d1fb      	bne.n	2e64 <chSchGoSleepTimeoutS+0x14>
      nil.current = nil.next = ntp;
    2e6c:	4b0a      	ldr	r3, [pc, #40]	; (2e98 <chSchGoSleepTimeoutS+0x48>)
    2e6e:	6058      	str	r0, [r3, #4]
    2e70:	6018      	str	r0, [r3, #0]
    2e72:	f3ef 8309 	mrs	r3, PSP
      port_switch(ntp, otp);
    2e76:	3b24      	subs	r3, #36	; 0x24
    2e78:	6951      	ldr	r1, [r2, #20]
    2e7a:	4299      	cmp	r1, r3
    2e7c:	d809      	bhi.n	2e92 <chSchGoSleepTimeoutS+0x42>
    2e7e:	0011      	movs	r1, r2
    2e80:	f7fd f986 	bl	190 <_port_switch>
      return nil.current->u1.msg;
    2e84:	4b04      	ldr	r3, [pc, #16]	; (2e98 <chSchGoSleepTimeoutS+0x48>)
    2e86:	681b      	ldr	r3, [r3, #0]
    2e88:	6898      	ldr	r0, [r3, #8]
    chDbgAssert(ntp <= &nil.threads[CH_CFG_NUM_THREADS],
                "pointer out of range");
  }
}
    2e8a:	bd10      	pop	{r4, pc}
  ntp = nil.threads;
    2e8c:	4802      	ldr	r0, [pc, #8]	; (2e98 <chSchGoSleepTimeoutS+0x48>)
    2e8e:	3010      	adds	r0, #16
    2e90:	e7ec      	b.n	2e6c <chSchGoSleepTimeoutS+0x1c>
      port_switch(ntp, otp);
    2e92:	4802      	ldr	r0, [pc, #8]	; (2e9c <chSchGoSleepTimeoutS+0x4c>)
    2e94:	f7ff ff1c 	bl	2cd0 <chSysHalt>
    2e98:	20000a70 	.word	0x20000a70
    2e9c:	0000e074 	.word	0x0000e074

00002ea0 <chThdSleep>:
 *
 * @param[in] timeout   the delay in system ticks
 *
 * @api
 */
void chThdSleep(systime_t timeout) {
    2ea0:	b510      	push	{r4, lr}
    2ea2:	0001      	movs	r1, r0
  __ASM volatile ("cpsid i" : : : "memory");
    2ea4:	b672      	cpsid	i

  chSysLock();
  chThdSleepS(timeout);
    2ea6:	2001      	movs	r0, #1
    2ea8:	f7ff ffd2 	bl	2e50 <chSchGoSleepTimeoutS>
  __ASM volatile ("cpsie i" : : : "memory");
    2eac:	b662      	cpsie	i
  chSysUnlock();
}
    2eae:	bd10      	pop	{r4, pc}

00002eb0 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] mask      the event flags set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t mask) {
    2eb0:	b510      	push	{r4, lr}

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epmask |= mask;
    2eb2:	6903      	ldr	r3, [r0, #16]
    2eb4:	4319      	orrs	r1, r3
    2eb6:	6101      	str	r1, [r0, #16]
  if (NIL_THD_IS_WTOREVT(tp) &&
    2eb8:	7903      	ldrb	r3, [r0, #4]
    2eba:	2b04      	cmp	r3, #4
    2ebc:	d000      	beq.n	2ec0 <chEvtSignalI+0x10>
      ((tp->epmask & tp->u1.ewmask) != (eventmask_t)0)) {
    (void) chSchReadyI(tp, MSG_OK);
  }
}
    2ebe:	bd10      	pop	{r4, pc}
  if (NIL_THD_IS_WTOREVT(tp) &&
    2ec0:	6883      	ldr	r3, [r0, #8]
    2ec2:	420b      	tst	r3, r1
    2ec4:	d0fb      	beq.n	2ebe <chEvtSignalI+0xe>
    (void) chSchReadyI(tp, MSG_OK);
    2ec6:	2100      	movs	r1, #0
    2ec8:	f7ff ff5a 	bl	2d80 <chSchReadyI>
}
    2ecc:	e7f7      	b.n	2ebe <chEvtSignalI+0xe>
    2ece:	46c0      	nop			; (mov r8, r8)

00002ed0 <chEvtWaitAnyTimeout>:
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t mask, systime_t timeout) {
    2ed0:	b570      	push	{r4, r5, r6, lr}
    2ed2:	0006      	movs	r6, r0
  thread_t *ctp = nil.current;
    2ed4:	4b0c      	ldr	r3, [pc, #48]	; (2f08 <chEvtWaitAnyTimeout+0x38>)
    2ed6:	681d      	ldr	r5, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2ed8:	b672      	cpsid	i
  eventmask_t m;

  chSysLock();
  if ((m = (ctp->epmask & mask)) == (eventmask_t)0) {
    2eda:	692c      	ldr	r4, [r5, #16]
    2edc:	4004      	ands	r4, r0
    2ede:	d109      	bne.n	2ef4 <chEvtWaitAnyTimeout+0x24>
    if (TIME_IMMEDIATE == timeout) {
    2ee0:	1c4b      	adds	r3, r1, #1
    2ee2:	d00d      	beq.n	2f00 <chEvtWaitAnyTimeout+0x30>
      chSysUnlock();

      return (eventmask_t)0;
    }
    ctp->u1.ewmask = mask;
    2ee4:	60a8      	str	r0, [r5, #8]
    if (chSchGoSleepTimeoutS(NIL_STATE_WTOREVT, timeout) < MSG_OK) {
    2ee6:	2004      	movs	r0, #4
    2ee8:	f7ff ffb2 	bl	2e50 <chSchGoSleepTimeoutS>
    2eec:	2800      	cmp	r0, #0
    2eee:	db09      	blt.n	2f04 <chEvtWaitAnyTimeout+0x34>
      chSysUnlock();

      return (eventmask_t)0;
    }
    m = ctp->epmask & mask;
    2ef0:	692c      	ldr	r4, [r5, #16]
    2ef2:	4034      	ands	r4, r6
  }
  ctp->epmask &= ~m;
    2ef4:	692b      	ldr	r3, [r5, #16]
    2ef6:	43a3      	bics	r3, r4
    2ef8:	612b      	str	r3, [r5, #16]
  __ASM volatile ("cpsie i" : : : "memory");
    2efa:	b662      	cpsie	i
  chSysUnlock();

  return m;
}
    2efc:	0020      	movs	r0, r4
    2efe:	bd70      	pop	{r4, r5, r6, pc}
    2f00:	b662      	cpsie	i
      return (eventmask_t)0;
    2f02:	e7fb      	b.n	2efc <chEvtWaitAnyTimeout+0x2c>
    2f04:	b662      	cpsie	i
      return (eventmask_t)0;
    2f06:	e7f9      	b.n	2efc <chEvtWaitAnyTimeout+0x2c>
    2f08:	20000a70 	.word	0x20000a70
    2f0c:	00000000 	.word	0x00000000

00002f10 <PendSV_Handler>:
 * @brief   PendSV vector.
 * @details The PendSV vector is used for exception mode re-entering after a
 *          context switch.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void PendSV_Handler(void) {
    2f10:	b580      	push	{r7, lr}
    2f12:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
    2f14:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  struct port_extctx *ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
    2f18:	3320      	adds	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
    2f1a:	f383 8809 	msr	PSP, r3

  /* Writing back the modified PSP value.*/
  __set_PSP((uint32_t)ctxp);
}
    2f1e:	46bd      	mov	sp, r7
    2f20:	bd80      	pop	{r7, pc}
    2f22:	46c0      	nop			; (mov r8, r8)
	...

00002f30 <_port_irq_epilogue>:
/**
 * @brief   IRQ epilogue code.
 *
 * @param[in] lr        value of the @p LR register on ISR entry
 */
void _port_irq_epilogue(regarm_t lr) {
    2f30:	b5b0      	push	{r4, r5, r7, lr}
    2f32:	af00      	add	r7, sp, #0

  if (lr != (regarm_t)0xFFFFFFF1U) {
    2f34:	300f      	adds	r0, #15
    2f36:	d010      	beq.n	2f5a <_port_irq_epilogue+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
    2f38:	b672      	cpsid	i
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
    2f3a:	f3ef 8409 	mrs	r4, PSP
    /* The extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
    2f3e:	0023      	movs	r3, r4
    2f40:	3b20      	subs	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
    2f42:	f383 8809 	msr	PSP, r3

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
    2f46:	2280      	movs	r2, #128	; 0x80
    2f48:	0452      	lsls	r2, r2, #17
    2f4a:	61da      	str	r2, [r3, #28]

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
    2f4c:	f7ff ff58 	bl	2e00 <chSchIsPreemptionRequired>
    2f50:	2800      	cmp	r0, #0
    2f52:	d104      	bne.n	2f5e <_port_irq_epilogue+0x2e>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
    2f54:	3c20      	subs	r4, #32
    2f56:	4b04      	ldr	r3, [pc, #16]	; (2f68 <_port_irq_epilogue+0x38>)
    2f58:	61a3      	str	r3, [r4, #24]
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
  }
}
    2f5a:	46bd      	mov	sp, r7
    2f5c:	bdb0      	pop	{r4, r5, r7, pc}
      ctxp->pc = (regarm_t)_port_switch_from_isr;
    2f5e:	3c20      	subs	r4, #32
    2f60:	4b02      	ldr	r3, [pc, #8]	; (2f6c <_port_irq_epilogue+0x3c>)
    2f62:	61a3      	str	r3, [r4, #24]
    2f64:	e7f9      	b.n	2f5a <_port_irq_epilogue+0x2a>
    2f66:	46c0      	nop			; (mov r8, r8)
    2f68:	000001c0 	.word	0x000001c0
    2f6c:	000001bd 	.word	0x000001bd

00002f70 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    2f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f72:	46de      	mov	lr, fp
    2f74:	4657      	mov	r7, sl
    2f76:	464e      	mov	r6, r9
    2f78:	4645      	mov	r5, r8
    2f7a:	b5e0      	push	{r5, r6, r7, lr}
    2f7c:	b087      	sub	sp, #28
    2f7e:	4680      	mov	r8, r0
    2f80:	9104      	str	r1, [sp, #16]
    2f82:	0016      	movs	r6, r2
    2f84:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    2f86:	2200      	movs	r2, #0
    2f88:	2300      	movs	r3, #0
    2f8a:	2100      	movs	r1, #0
    2f8c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    2f8e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    2f90:	2001      	movs	r0, #1
    2f92:	0021      	movs	r1, r4
    2f94:	9600      	str	r6, [sp, #0]
    2f96:	9701      	str	r7, [sp, #4]
    2f98:	465c      	mov	r4, fp
    2f9a:	9403      	str	r4, [sp, #12]
    2f9c:	4644      	mov	r4, r8
    2f9e:	9405      	str	r4, [sp, #20]
    2fa0:	e013      	b.n	2fca <long_division+0x5a>
    2fa2:	2420      	movs	r4, #32
    2fa4:	1a64      	subs	r4, r4, r1
    2fa6:	0005      	movs	r5, r0
    2fa8:	40e5      	lsrs	r5, r4
    2faa:	46a8      	mov	r8, r5
    2fac:	e014      	b.n	2fd8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    2fae:	9c00      	ldr	r4, [sp, #0]
    2fb0:	9d01      	ldr	r5, [sp, #4]
    2fb2:	1b12      	subs	r2, r2, r4
    2fb4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    2fb6:	465c      	mov	r4, fp
    2fb8:	464d      	mov	r5, r9
    2fba:	432c      	orrs	r4, r5
    2fbc:	46a3      	mov	fp, r4
    2fbe:	9c03      	ldr	r4, [sp, #12]
    2fc0:	4645      	mov	r5, r8
    2fc2:	432c      	orrs	r4, r5
    2fc4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    2fc6:	3901      	subs	r1, #1
    2fc8:	d325      	bcc.n	3016 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    2fca:	2420      	movs	r4, #32
    2fcc:	4264      	negs	r4, r4
    2fce:	190c      	adds	r4, r1, r4
    2fd0:	d4e7      	bmi.n	2fa2 <long_division+0x32>
    2fd2:	0005      	movs	r5, r0
    2fd4:	40a5      	lsls	r5, r4
    2fd6:	46a8      	mov	r8, r5
    2fd8:	0004      	movs	r4, r0
    2fda:	408c      	lsls	r4, r1
    2fdc:	46a1      	mov	r9, r4
		r = r << 1;
    2fde:	1892      	adds	r2, r2, r2
    2fe0:	415b      	adcs	r3, r3
    2fe2:	0014      	movs	r4, r2
    2fe4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    2fe6:	9e05      	ldr	r6, [sp, #20]
    2fe8:	464f      	mov	r7, r9
    2fea:	403e      	ands	r6, r7
    2fec:	46b4      	mov	ip, r6
    2fee:	9e04      	ldr	r6, [sp, #16]
    2ff0:	4647      	mov	r7, r8
    2ff2:	403e      	ands	r6, r7
    2ff4:	46b2      	mov	sl, r6
    2ff6:	4666      	mov	r6, ip
    2ff8:	4657      	mov	r7, sl
    2ffa:	433e      	orrs	r6, r7
    2ffc:	d003      	beq.n	3006 <long_division+0x96>
			r |= 0x01;
    2ffe:	0006      	movs	r6, r0
    3000:	4326      	orrs	r6, r4
    3002:	0032      	movs	r2, r6
    3004:	002b      	movs	r3, r5
		if (r >= d) {
    3006:	9c00      	ldr	r4, [sp, #0]
    3008:	9d01      	ldr	r5, [sp, #4]
    300a:	429d      	cmp	r5, r3
    300c:	d8db      	bhi.n	2fc6 <long_division+0x56>
    300e:	d1ce      	bne.n	2fae <long_division+0x3e>
    3010:	4294      	cmp	r4, r2
    3012:	d8d8      	bhi.n	2fc6 <long_division+0x56>
    3014:	e7cb      	b.n	2fae <long_division+0x3e>
    3016:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    3018:	4658      	mov	r0, fp
    301a:	0019      	movs	r1, r3
    301c:	b007      	add	sp, #28
    301e:	bc3c      	pop	{r2, r3, r4, r5}
    3020:	4690      	mov	r8, r2
    3022:	4699      	mov	r9, r3
    3024:	46a2      	mov	sl, r4
    3026:	46ab      	mov	fp, r5
    3028:	bdf0      	pop	{r4, r5, r6, r7, pc}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	0000      	movs	r0, r0
	...

00003030 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3030:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3032:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3034:	2340      	movs	r3, #64	; 0x40
    3036:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    3038:	4281      	cmp	r1, r0
    303a:	d202      	bcs.n	3042 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    303c:	0018      	movs	r0, r3
    303e:	bd10      	pop	{r4, pc}
		baud_calculated++;
    3040:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    3042:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    3044:	1c63      	adds	r3, r4, #1
    3046:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    3048:	4288      	cmp	r0, r1
    304a:	d9f9      	bls.n	3040 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    304c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    304e:	2cff      	cmp	r4, #255	; 0xff
    3050:	d8f4      	bhi.n	303c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    3052:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    3054:	2300      	movs	r3, #0
    3056:	e7f1      	b.n	303c <_sercom_get_sync_baud_val+0xc>
	...

00003060 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3060:	b5d0      	push	{r4, r6, r7, lr}
    3062:	b082      	sub	sp, #8
    3064:	000f      	movs	r7, r1
    3066:	0016      	movs	r6, r2
    3068:	aa06      	add	r2, sp, #24
    306a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    306c:	0004      	movs	r4, r0
    306e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3070:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    3072:	42bc      	cmp	r4, r7
    3074:	d902      	bls.n	307c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    3076:	0010      	movs	r0, r2
    3078:	b002      	add	sp, #8
    307a:	bdd0      	pop	{r4, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    307c:	2b00      	cmp	r3, #0
    307e:	d114      	bne.n	30aa <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3080:	0002      	movs	r2, r0
    3082:	0008      	movs	r0, r1
    3084:	2100      	movs	r1, #0
    3086:	f7fd fa55 	bl	534 <__aeabi_lmul>
    308a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    308c:	003a      	movs	r2, r7
    308e:	2300      	movs	r3, #0
    3090:	2000      	movs	r0, #0
    3092:	f7ff ff6d 	bl	2f70 <long_division>
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3096:	2200      	movs	r2, #0
    3098:	2301      	movs	r3, #1
    309a:	1a12      	subs	r2, r2, r0
    309c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    309e:	0c12      	lsrs	r2, r2, #16
    30a0:	041b      	lsls	r3, r3, #16
    30a2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    30a4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    30a6:	2200      	movs	r2, #0
    30a8:	e7e5      	b.n	3076 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    30aa:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    30ac:	2b01      	cmp	r3, #1
    30ae:	d1f9      	bne.n	30a4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    30b0:	000a      	movs	r2, r1
    30b2:	2300      	movs	r3, #0
    30b4:	2100      	movs	r1, #0
    30b6:	f7fd fa3d 	bl	534 <__aeabi_lmul>
    30ba:	0002      	movs	r2, r0
    30bc:	000b      	movs	r3, r1
    30be:	9200      	str	r2, [sp, #0]
    30c0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    30c2:	0038      	movs	r0, r7
    30c4:	2100      	movs	r1, #0
    30c6:	f7ff ff53 	bl	2f70 <long_division>
    30ca:	0004      	movs	r4, r0
		if(baud_int > BAUD_INT_MAX) {
    30cc:	2380      	movs	r3, #128	; 0x80
    30ce:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    30d0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    30d2:	4298      	cmp	r0, r3
    30d4:	d8cf      	bhi.n	3076 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    30d6:	0f79      	lsrs	r1, r7, #29
    30d8:	00f8      	lsls	r0, r7, #3
    30da:	9a00      	ldr	r2, [sp, #0]
    30dc:	9b01      	ldr	r3, [sp, #4]
    30de:	f7ff ff47 	bl	2f70 <long_division>
		baud_fp = temp1 - 8 * baud_int;
    30e2:	00e2      	lsls	r2, r4, #3
    30e4:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    30e6:	b2d2      	uxtb	r2, r2
    30e8:	0352      	lsls	r2, r2, #13
    30ea:	4322      	orrs	r2, r4
    30ec:	e7da      	b.n	30a4 <_sercom_get_async_baud_val+0x44>
    30ee:	46c0      	nop			; (mov r8, r8)

000030f0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    30f0:	b510      	push	{r4, lr}
    30f2:	b082      	sub	sp, #8
    30f4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    30f6:	4b0e      	ldr	r3, [pc, #56]	; (3130 <sercom_set_gclk_generator+0x40>)
    30f8:	781b      	ldrb	r3, [r3, #0]
    30fa:	2b00      	cmp	r3, #0
    30fc:	d007      	beq.n	310e <sercom_set_gclk_generator+0x1e>
    30fe:	2900      	cmp	r1, #0
    3100:	d105      	bne.n	310e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    3102:	4b0b      	ldr	r3, [pc, #44]	; (3130 <sercom_set_gclk_generator+0x40>)
    3104:	785b      	ldrb	r3, [r3, #1]
    3106:	4283      	cmp	r3, r0
    3108:	d010      	beq.n	312c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    310a:	201d      	movs	r0, #29
    310c:	e00c      	b.n	3128 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    310e:	a901      	add	r1, sp, #4
    3110:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3112:	2013      	movs	r0, #19
    3114:	f001 f8e4 	bl	42e0 <system_gclk_chan_set_config>
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3118:	2013      	movs	r0, #19
    311a:	f001 f899 	bl	4250 <system_gclk_chan_enable>
		_sercom_config.generator_source = generator_source;
    311e:	4b04      	ldr	r3, [pc, #16]	; (3130 <sercom_set_gclk_generator+0x40>)
    3120:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    3122:	2201      	movs	r2, #1
    3124:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    3126:	2000      	movs	r0, #0
}
    3128:	b002      	add	sp, #8
    312a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    312c:	2000      	movs	r0, #0
    312e:	e7fb      	b.n	3128 <sercom_set_gclk_generator+0x38>
    3130:	20000b40 	.word	0x20000b40
	...

00003140 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    3140:	4b40      	ldr	r3, [pc, #256]	; (3244 <_sercom_get_default_pad+0x104>)
    3142:	4298      	cmp	r0, r3
    3144:	d031      	beq.n	31aa <_sercom_get_default_pad+0x6a>
    3146:	d90a      	bls.n	315e <_sercom_get_default_pad+0x1e>
    3148:	4b3f      	ldr	r3, [pc, #252]	; (3248 <_sercom_get_default_pad+0x108>)
    314a:	4298      	cmp	r0, r3
    314c:	d04d      	beq.n	31ea <_sercom_get_default_pad+0xaa>
    314e:	4b3f      	ldr	r3, [pc, #252]	; (324c <_sercom_get_default_pad+0x10c>)
    3150:	4298      	cmp	r0, r3
    3152:	d05a      	beq.n	320a <_sercom_get_default_pad+0xca>
    3154:	4b3e      	ldr	r3, [pc, #248]	; (3250 <_sercom_get_default_pad+0x110>)
    3156:	4298      	cmp	r0, r3
    3158:	d037      	beq.n	31ca <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    315a:	2000      	movs	r0, #0
}
    315c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    315e:	4b3d      	ldr	r3, [pc, #244]	; (3254 <_sercom_get_default_pad+0x114>)
    3160:	4298      	cmp	r0, r3
    3162:	d00c      	beq.n	317e <_sercom_get_default_pad+0x3e>
    3164:	4b3c      	ldr	r3, [pc, #240]	; (3258 <_sercom_get_default_pad+0x118>)
    3166:	4298      	cmp	r0, r3
    3168:	d1f7      	bne.n	315a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    316a:	2901      	cmp	r1, #1
    316c:	d017      	beq.n	319e <_sercom_get_default_pad+0x5e>
    316e:	2900      	cmp	r1, #0
    3170:	d05d      	beq.n	322e <_sercom_get_default_pad+0xee>
    3172:	2902      	cmp	r1, #2
    3174:	d015      	beq.n	31a2 <_sercom_get_default_pad+0x62>
    3176:	2903      	cmp	r1, #3
    3178:	d015      	beq.n	31a6 <_sercom_get_default_pad+0x66>
	return 0;
    317a:	2000      	movs	r0, #0
    317c:	e7ee      	b.n	315c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    317e:	2901      	cmp	r1, #1
    3180:	d007      	beq.n	3192 <_sercom_get_default_pad+0x52>
    3182:	2900      	cmp	r1, #0
    3184:	d051      	beq.n	322a <_sercom_get_default_pad+0xea>
    3186:	2902      	cmp	r1, #2
    3188:	d005      	beq.n	3196 <_sercom_get_default_pad+0x56>
    318a:	2903      	cmp	r1, #3
    318c:	d005      	beq.n	319a <_sercom_get_default_pad+0x5a>
	return 0;
    318e:	2000      	movs	r0, #0
    3190:	e7e4      	b.n	315c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3192:	4832      	ldr	r0, [pc, #200]	; (325c <_sercom_get_default_pad+0x11c>)
    3194:	e7e2      	b.n	315c <_sercom_get_default_pad+0x1c>
    3196:	4832      	ldr	r0, [pc, #200]	; (3260 <_sercom_get_default_pad+0x120>)
    3198:	e7e0      	b.n	315c <_sercom_get_default_pad+0x1c>
    319a:	4832      	ldr	r0, [pc, #200]	; (3264 <_sercom_get_default_pad+0x124>)
    319c:	e7de      	b.n	315c <_sercom_get_default_pad+0x1c>
    319e:	4832      	ldr	r0, [pc, #200]	; (3268 <_sercom_get_default_pad+0x128>)
    31a0:	e7dc      	b.n	315c <_sercom_get_default_pad+0x1c>
    31a2:	4832      	ldr	r0, [pc, #200]	; (326c <_sercom_get_default_pad+0x12c>)
    31a4:	e7da      	b.n	315c <_sercom_get_default_pad+0x1c>
    31a6:	4832      	ldr	r0, [pc, #200]	; (3270 <_sercom_get_default_pad+0x130>)
    31a8:	e7d8      	b.n	315c <_sercom_get_default_pad+0x1c>
    31aa:	2901      	cmp	r1, #1
    31ac:	d007      	beq.n	31be <_sercom_get_default_pad+0x7e>
    31ae:	2900      	cmp	r1, #0
    31b0:	d03f      	beq.n	3232 <_sercom_get_default_pad+0xf2>
    31b2:	2902      	cmp	r1, #2
    31b4:	d005      	beq.n	31c2 <_sercom_get_default_pad+0x82>
    31b6:	2903      	cmp	r1, #3
    31b8:	d005      	beq.n	31c6 <_sercom_get_default_pad+0x86>
	return 0;
    31ba:	2000      	movs	r0, #0
    31bc:	e7ce      	b.n	315c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    31be:	482d      	ldr	r0, [pc, #180]	; (3274 <_sercom_get_default_pad+0x134>)
    31c0:	e7cc      	b.n	315c <_sercom_get_default_pad+0x1c>
    31c2:	482d      	ldr	r0, [pc, #180]	; (3278 <_sercom_get_default_pad+0x138>)
    31c4:	e7ca      	b.n	315c <_sercom_get_default_pad+0x1c>
    31c6:	482d      	ldr	r0, [pc, #180]	; (327c <_sercom_get_default_pad+0x13c>)
    31c8:	e7c8      	b.n	315c <_sercom_get_default_pad+0x1c>
    31ca:	2901      	cmp	r1, #1
    31cc:	d007      	beq.n	31de <_sercom_get_default_pad+0x9e>
    31ce:	2900      	cmp	r1, #0
    31d0:	d031      	beq.n	3236 <_sercom_get_default_pad+0xf6>
    31d2:	2902      	cmp	r1, #2
    31d4:	d005      	beq.n	31e2 <_sercom_get_default_pad+0xa2>
    31d6:	2903      	cmp	r1, #3
    31d8:	d005      	beq.n	31e6 <_sercom_get_default_pad+0xa6>
	return 0;
    31da:	2000      	movs	r0, #0
    31dc:	e7be      	b.n	315c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    31de:	4828      	ldr	r0, [pc, #160]	; (3280 <_sercom_get_default_pad+0x140>)
    31e0:	e7bc      	b.n	315c <_sercom_get_default_pad+0x1c>
    31e2:	4828      	ldr	r0, [pc, #160]	; (3284 <_sercom_get_default_pad+0x144>)
    31e4:	e7ba      	b.n	315c <_sercom_get_default_pad+0x1c>
    31e6:	4828      	ldr	r0, [pc, #160]	; (3288 <_sercom_get_default_pad+0x148>)
    31e8:	e7b8      	b.n	315c <_sercom_get_default_pad+0x1c>
    31ea:	2901      	cmp	r1, #1
    31ec:	d007      	beq.n	31fe <_sercom_get_default_pad+0xbe>
    31ee:	2900      	cmp	r1, #0
    31f0:	d023      	beq.n	323a <_sercom_get_default_pad+0xfa>
    31f2:	2902      	cmp	r1, #2
    31f4:	d005      	beq.n	3202 <_sercom_get_default_pad+0xc2>
    31f6:	2903      	cmp	r1, #3
    31f8:	d005      	beq.n	3206 <_sercom_get_default_pad+0xc6>
	return 0;
    31fa:	2000      	movs	r0, #0
    31fc:	e7ae      	b.n	315c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    31fe:	4823      	ldr	r0, [pc, #140]	; (328c <_sercom_get_default_pad+0x14c>)
    3200:	e7ac      	b.n	315c <_sercom_get_default_pad+0x1c>
    3202:	4823      	ldr	r0, [pc, #140]	; (3290 <_sercom_get_default_pad+0x150>)
    3204:	e7aa      	b.n	315c <_sercom_get_default_pad+0x1c>
    3206:	4823      	ldr	r0, [pc, #140]	; (3294 <_sercom_get_default_pad+0x154>)
    3208:	e7a8      	b.n	315c <_sercom_get_default_pad+0x1c>
    320a:	2901      	cmp	r1, #1
    320c:	d007      	beq.n	321e <_sercom_get_default_pad+0xde>
    320e:	2900      	cmp	r1, #0
    3210:	d015      	beq.n	323e <_sercom_get_default_pad+0xfe>
    3212:	2902      	cmp	r1, #2
    3214:	d005      	beq.n	3222 <_sercom_get_default_pad+0xe2>
    3216:	2903      	cmp	r1, #3
    3218:	d005      	beq.n	3226 <_sercom_get_default_pad+0xe6>
	return 0;
    321a:	2000      	movs	r0, #0
    321c:	e79e      	b.n	315c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    321e:	481e      	ldr	r0, [pc, #120]	; (3298 <_sercom_get_default_pad+0x158>)
    3220:	e79c      	b.n	315c <_sercom_get_default_pad+0x1c>
    3222:	481e      	ldr	r0, [pc, #120]	; (329c <_sercom_get_default_pad+0x15c>)
    3224:	e79a      	b.n	315c <_sercom_get_default_pad+0x1c>
    3226:	481e      	ldr	r0, [pc, #120]	; (32a0 <_sercom_get_default_pad+0x160>)
    3228:	e798      	b.n	315c <_sercom_get_default_pad+0x1c>
    322a:	481e      	ldr	r0, [pc, #120]	; (32a4 <_sercom_get_default_pad+0x164>)
    322c:	e796      	b.n	315c <_sercom_get_default_pad+0x1c>
    322e:	2003      	movs	r0, #3
    3230:	e794      	b.n	315c <_sercom_get_default_pad+0x1c>
    3232:	481d      	ldr	r0, [pc, #116]	; (32a8 <_sercom_get_default_pad+0x168>)
    3234:	e792      	b.n	315c <_sercom_get_default_pad+0x1c>
    3236:	481d      	ldr	r0, [pc, #116]	; (32ac <_sercom_get_default_pad+0x16c>)
    3238:	e790      	b.n	315c <_sercom_get_default_pad+0x1c>
    323a:	481d      	ldr	r0, [pc, #116]	; (32b0 <_sercom_get_default_pad+0x170>)
    323c:	e78e      	b.n	315c <_sercom_get_default_pad+0x1c>
    323e:	481d      	ldr	r0, [pc, #116]	; (32b4 <_sercom_get_default_pad+0x174>)
    3240:	e78c      	b.n	315c <_sercom_get_default_pad+0x1c>
    3242:	46c0      	nop			; (mov r8, r8)
    3244:	42001000 	.word	0x42001000
    3248:	42001800 	.word	0x42001800
    324c:	42001c00 	.word	0x42001c00
    3250:	42001400 	.word	0x42001400
    3254:	42000800 	.word	0x42000800
    3258:	42000c00 	.word	0x42000c00
    325c:	00050003 	.word	0x00050003
    3260:	00060003 	.word	0x00060003
    3264:	00070003 	.word	0x00070003
    3268:	00010003 	.word	0x00010003
    326c:	001e0003 	.word	0x001e0003
    3270:	001f0003 	.word	0x001f0003
    3274:	00090003 	.word	0x00090003
    3278:	000a0003 	.word	0x000a0003
    327c:	000b0003 	.word	0x000b0003
    3280:	00110003 	.word	0x00110003
    3284:	00120003 	.word	0x00120003
    3288:	00130003 	.word	0x00130003
    328c:	000d0003 	.word	0x000d0003
    3290:	000e0003 	.word	0x000e0003
    3294:	000f0003 	.word	0x000f0003
    3298:	00170003 	.word	0x00170003
    329c:	00180003 	.word	0x00180003
    32a0:	00190003 	.word	0x00190003
    32a4:	00040003 	.word	0x00040003
    32a8:	00080003 	.word	0x00080003
    32ac:	00100003 	.word	0x00100003
    32b0:	000c0003 	.word	0x000c0003
    32b4:	00160003 	.word	0x00160003
	...

000032c0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    32c0:	b530      	push	{r4, r5, lr}
    32c2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    32c4:	4b0b      	ldr	r3, [pc, #44]	; (32f4 <_sercom_get_sercom_inst_index+0x34>)
    32c6:	466a      	mov	r2, sp
    32c8:	cb32      	ldmia	r3!, {r1, r4, r5}
    32ca:	c232      	stmia	r2!, {r1, r4, r5}
    32cc:	cb32      	ldmia	r3!, {r1, r4, r5}
    32ce:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    32d0:	9b00      	ldr	r3, [sp, #0]
    32d2:	4283      	cmp	r3, r0
    32d4:	d00b      	beq.n	32ee <_sercom_get_sercom_inst_index+0x2e>
    32d6:	2301      	movs	r3, #1
    32d8:	009a      	lsls	r2, r3, #2
    32da:	4669      	mov	r1, sp
    32dc:	5852      	ldr	r2, [r2, r1]
    32de:	4282      	cmp	r2, r0
    32e0:	d006      	beq.n	32f0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    32e2:	3301      	adds	r3, #1
    32e4:	2b06      	cmp	r3, #6
    32e6:	d1f7      	bne.n	32d8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    32e8:	2000      	movs	r0, #0
}
    32ea:	b007      	add	sp, #28
    32ec:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    32ee:	2300      	movs	r3, #0
			return i;
    32f0:	b2d8      	uxtb	r0, r3
    32f2:	e7fa      	b.n	32ea <_sercom_get_sercom_inst_index+0x2a>
    32f4:	0000dd88 	.word	0x0000dd88
	...

00003300 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3300:	b5f0      	push	{r4, r5, r6, r7, lr}
    3302:	46de      	mov	lr, fp
    3304:	4657      	mov	r7, sl
    3306:	464e      	mov	r6, r9
    3308:	4645      	mov	r5, r8
    330a:	b5e0      	push	{r5, r6, r7, lr}
    330c:	b091      	sub	sp, #68	; 0x44
    330e:	0005      	movs	r5, r0
    3310:	000c      	movs	r4, r1
    3312:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3314:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3316:	0008      	movs	r0, r1
    3318:	f7ff ffd2 	bl	32c0 <_sercom_get_sercom_inst_index>
    331c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    331e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3320:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3322:	07db      	lsls	r3, r3, #31
    3324:	d506      	bpl.n	3334 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3326:	b011      	add	sp, #68	; 0x44
    3328:	bc3c      	pop	{r2, r3, r4, r5}
    332a:	4690      	mov	r8, r2
    332c:	4699      	mov	r9, r3
    332e:	46a2      	mov	sl, r4
    3330:	46ab      	mov	fp, r5
    3332:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3334:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    3336:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3338:	079b      	lsls	r3, r3, #30
    333a:	d4f4      	bmi.n	3326 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    333c:	49a3      	ldr	r1, [pc, #652]	; (35cc <usart_init+0x2cc>)
    333e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3340:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3342:	2301      	movs	r3, #1
    3344:	40bb      	lsls	r3, r7
    3346:	4303      	orrs	r3, r0
    3348:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    334a:	a90f      	add	r1, sp, #60	; 0x3c
    334c:	272d      	movs	r7, #45	; 0x2d
    334e:	5df3      	ldrb	r3, [r6, r7]
    3350:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3352:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3354:	b2d3      	uxtb	r3, r2
    3356:	9302      	str	r3, [sp, #8]
    3358:	0018      	movs	r0, r3
    335a:	f000 ffc1 	bl	42e0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
    335e:	9802      	ldr	r0, [sp, #8]
    3360:	f000 ff76 	bl	4250 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
    3364:	5df0      	ldrb	r0, [r6, r7]
    3366:	2100      	movs	r1, #0
    3368:	f7ff fec2 	bl	30f0 <sercom_set_gclk_generator>
	module->character_size = config->character_size;
    336c:	7af3      	ldrb	r3, [r6, #11]
    336e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    3370:	2324      	movs	r3, #36	; 0x24
    3372:	5cf3      	ldrb	r3, [r6, r3]
    3374:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3376:	2325      	movs	r3, #37	; 0x25
    3378:	5cf3      	ldrb	r3, [r6, r3]
    337a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    337c:	7ef3      	ldrb	r3, [r6, #27]
    337e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3380:	7f33      	ldrb	r3, [r6, #28]
    3382:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3384:	682b      	ldr	r3, [r5, #0]
    3386:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3388:	0018      	movs	r0, r3
    338a:	f7ff ff99 	bl	32c0 <_sercom_get_sercom_inst_index>
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    338e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    3390:	2200      	movs	r2, #0
    3392:	230e      	movs	r3, #14
    3394:	a906      	add	r1, sp, #24
    3396:	468c      	mov	ip, r1
    3398:	4463      	add	r3, ip
    339a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    339c:	8a37      	ldrh	r7, [r6, #16]
    339e:	2380      	movs	r3, #128	; 0x80
    33a0:	01db      	lsls	r3, r3, #7
    33a2:	429f      	cmp	r7, r3
    33a4:	d100      	bne.n	33a8 <usart_init+0xa8>
    33a6:	e09d      	b.n	34e4 <usart_init+0x1e4>
    33a8:	d90e      	bls.n	33c8 <usart_init+0xc8>
    33aa:	23c0      	movs	r3, #192	; 0xc0
    33ac:	01db      	lsls	r3, r3, #7
    33ae:	429f      	cmp	r7, r3
    33b0:	d100      	bne.n	33b4 <usart_init+0xb4>
    33b2:	e092      	b.n	34da <usart_init+0x1da>
    33b4:	2380      	movs	r3, #128	; 0x80
    33b6:	021b      	lsls	r3, r3, #8
    33b8:	429f      	cmp	r7, r3
    33ba:	d000      	beq.n	33be <usart_init+0xbe>
    33bc:	e101      	b.n	35c2 <usart_init+0x2c2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    33be:	2303      	movs	r3, #3
    33c0:	9305      	str	r3, [sp, #20]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    33c2:	2300      	movs	r3, #0
    33c4:	9306      	str	r3, [sp, #24]
    33c6:	e008      	b.n	33da <usart_init+0xda>
	switch (config->sample_rate) {
    33c8:	2380      	movs	r3, #128	; 0x80
    33ca:	019b      	lsls	r3, r3, #6
    33cc:	429f      	cmp	r7, r3
    33ce:	d000      	beq.n	33d2 <usart_init+0xd2>
    33d0:	e0f7      	b.n	35c2 <usart_init+0x2c2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    33d2:	2310      	movs	r3, #16
    33d4:	9305      	str	r3, [sp, #20]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    33d6:	3b0f      	subs	r3, #15
    33d8:	9306      	str	r3, [sp, #24]
	ctrla = (uint32_t)config->data_order |
    33da:	6833      	ldr	r3, [r6, #0]
    33dc:	9302      	str	r3, [sp, #8]
		(uint32_t)config->mux_setting |
    33de:	68f3      	ldr	r3, [r6, #12]
    33e0:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
    33e2:	6973      	ldr	r3, [r6, #20]
    33e4:	469b      	mov	fp, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    33e6:	7e33      	ldrb	r3, [r6, #24]
    33e8:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    33ea:	2326      	movs	r3, #38	; 0x26
    33ec:	5cf3      	ldrb	r3, [r6, r3]
    33ee:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
    33f0:	6873      	ldr	r3, [r6, #4]
    33f2:	4699      	mov	r9, r3
	switch (transfer_mode)
    33f4:	2b00      	cmp	r3, #0
    33f6:	d100      	bne.n	33fa <usart_init+0xfa>
    33f8:	e0a0      	b.n	353c <usart_init+0x23c>
    33fa:	2380      	movs	r3, #128	; 0x80
    33fc:	055b      	lsls	r3, r3, #21
    33fe:	4599      	cmp	r9, r3
    3400:	d100      	bne.n	3404 <usart_init+0x104>
    3402:	e084      	b.n	350e <usart_init+0x20e>
	if(config->encoding_format_enable) {
    3404:	7e73      	ldrb	r3, [r6, #25]
    3406:	2b00      	cmp	r3, #0
    3408:	d002      	beq.n	3410 <usart_init+0x110>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    340a:	7eb3      	ldrb	r3, [r6, #26]
    340c:	4642      	mov	r2, r8
    340e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3410:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3412:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3414:	2b00      	cmp	r3, #0
    3416:	d1fc      	bne.n	3412 <usart_init+0x112>
	usart_hw->BAUD.reg = baud;
    3418:	330e      	adds	r3, #14
    341a:	aa06      	add	r2, sp, #24
    341c:	4694      	mov	ip, r2
    341e:	4463      	add	r3, ip
    3420:	881b      	ldrh	r3, [r3, #0]
    3422:	4642      	mov	r2, r8
    3424:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    3426:	9b02      	ldr	r3, [sp, #8]
    3428:	9a04      	ldr	r2, [sp, #16]
    342a:	4313      	orrs	r3, r2
    342c:	465a      	mov	r2, fp
    342e:	4313      	orrs	r3, r2
    3430:	464a      	mov	r2, r9
    3432:	4313      	orrs	r3, r2
    3434:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3436:	4653      	mov	r3, sl
    3438:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    343a:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    343c:	9b03      	ldr	r3, [sp, #12]
    343e:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    3440:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    3442:	2327      	movs	r3, #39	; 0x27
    3444:	5cf3      	ldrb	r3, [r6, r3]
    3446:	2b00      	cmp	r3, #0
    3448:	d101      	bne.n	344e <usart_init+0x14e>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    344a:	3304      	adds	r3, #4
    344c:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    344e:	7e73      	ldrb	r3, [r6, #25]
    3450:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3452:	7f32      	ldrb	r2, [r6, #28]
    3454:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3456:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3458:	7f72      	ldrb	r2, [r6, #29]
    345a:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    345c:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    345e:	2224      	movs	r2, #36	; 0x24
    3460:	5cb2      	ldrb	r2, [r6, r2]
    3462:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3464:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3466:	2225      	movs	r2, #37	; 0x25
    3468:	5cb2      	ldrb	r2, [r6, r2]
    346a:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    346c:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    346e:	7ab1      	ldrb	r1, [r6, #10]
    3470:	7af2      	ldrb	r2, [r6, #11]
    3472:	4311      	orrs	r1, r2
    3474:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    3476:	8933      	ldrh	r3, [r6, #8]
    3478:	2bff      	cmp	r3, #255	; 0xff
    347a:	d100      	bne.n	347e <usart_init+0x17e>
    347c:	e082      	b.n	3584 <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    347e:	2280      	movs	r2, #128	; 0x80
    3480:	0452      	lsls	r2, r2, #17
    3482:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    3484:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    3486:	232c      	movs	r3, #44	; 0x2c
    3488:	5cf3      	ldrb	r3, [r6, r3]
    348a:	2b00      	cmp	r3, #0
    348c:	d103      	bne.n	3496 <usart_init+0x196>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    348e:	4b50      	ldr	r3, [pc, #320]	; (35d0 <usart_init+0x2d0>)
    3490:	789b      	ldrb	r3, [r3, #2]
    3492:	079b      	lsls	r3, r3, #30
    3494:	d501      	bpl.n	349a <usart_init+0x19a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    3496:	2380      	movs	r3, #128	; 0x80
    3498:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    349a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    349c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    349e:	2b00      	cmp	r3, #0
    34a0:	d1fc      	bne.n	349c <usart_init+0x19c>
	usart_hw->CTRLB.reg = ctrlb;
    34a2:	4643      	mov	r3, r8
    34a4:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    34a6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    34a8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    34aa:	2b00      	cmp	r3, #0
    34ac:	d1fc      	bne.n	34a8 <usart_init+0x1a8>
	usart_hw->CTRLA.reg = ctrla;
    34ae:	4643      	mov	r3, r8
    34b0:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    34b2:	ab0e      	add	r3, sp, #56	; 0x38
    34b4:	2280      	movs	r2, #128	; 0x80
    34b6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    34b8:	2200      	movs	r2, #0
    34ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    34bc:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    34be:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    34c0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    34c2:	930a      	str	r3, [sp, #40]	; 0x28
    34c4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    34c6:	930b      	str	r3, [sp, #44]	; 0x2c
    34c8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    34ca:	930c      	str	r3, [sp, #48]	; 0x30
    34cc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    34ce:	9302      	str	r3, [sp, #8]
    34d0:	930d      	str	r3, [sp, #52]	; 0x34
    34d2:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    34d4:	ae0a      	add	r6, sp, #40	; 0x28
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    34d6:	ad0e      	add	r5, sp, #56	; 0x38
    34d8:	e063      	b.n	35a2 <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    34da:	2308      	movs	r3, #8
    34dc:	9305      	str	r3, [sp, #20]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    34de:	3b07      	subs	r3, #7
    34e0:	9306      	str	r3, [sp, #24]
    34e2:	e77a      	b.n	33da <usart_init+0xda>
	ctrla = (uint32_t)config->data_order |
    34e4:	6833      	ldr	r3, [r6, #0]
    34e6:	9302      	str	r3, [sp, #8]
		(uint32_t)config->mux_setting |
    34e8:	68f3      	ldr	r3, [r6, #12]
    34ea:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
    34ec:	6973      	ldr	r3, [r6, #20]
    34ee:	469b      	mov	fp, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    34f0:	7e33      	ldrb	r3, [r6, #24]
    34f2:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    34f4:	2326      	movs	r3, #38	; 0x26
    34f6:	5cf3      	ldrb	r3, [r6, r3]
    34f8:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
    34fa:	6873      	ldr	r3, [r6, #4]
    34fc:	4699      	mov	r9, r3
	switch (transfer_mode)
    34fe:	2b00      	cmp	r3, #0
    3500:	d018      	beq.n	3534 <usart_init+0x234>
    3502:	2380      	movs	r3, #128	; 0x80
    3504:	055b      	lsls	r3, r3, #21
    3506:	4599      	cmp	r9, r3
    3508:	d001      	beq.n	350e <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
    350a:	2000      	movs	r0, #0
    350c:	e025      	b.n	355a <usart_init+0x25a>
			if (!config->use_external_clock) {
    350e:	2327      	movs	r3, #39	; 0x27
    3510:	5cf3      	ldrb	r3, [r6, r3]
    3512:	2b00      	cmp	r3, #0
    3514:	d000      	beq.n	3518 <usart_init+0x218>
    3516:	e775      	b.n	3404 <usart_init+0x104>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3518:	6a33      	ldr	r3, [r6, #32]
    351a:	9305      	str	r3, [sp, #20]
    351c:	b2c0      	uxtb	r0, r0
    351e:	f000 feef 	bl	4300 <system_gclk_chan_get_hz>
    3522:	0001      	movs	r1, r0
    3524:	220e      	movs	r2, #14
    3526:	ab06      	add	r3, sp, #24
    3528:	469c      	mov	ip, r3
    352a:	4462      	add	r2, ip
    352c:	9805      	ldr	r0, [sp, #20]
    352e:	f7ff fd7f 	bl	3030 <_sercom_get_sync_baud_val>
    3532:	e012      	b.n	355a <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3534:	2308      	movs	r3, #8
    3536:	9305      	str	r3, [sp, #20]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3538:	2300      	movs	r3, #0
    353a:	9306      	str	r3, [sp, #24]
			if (config->use_external_clock) {
    353c:	2327      	movs	r3, #39	; 0x27
    353e:	5cf3      	ldrb	r3, [r6, r3]
    3540:	2b00      	cmp	r3, #0
    3542:	d00e      	beq.n	3562 <usart_init+0x262>
				status_code =
    3544:	9b05      	ldr	r3, [sp, #20]
    3546:	9300      	str	r3, [sp, #0]
    3548:	9b06      	ldr	r3, [sp, #24]
    354a:	220e      	movs	r2, #14
    354c:	a906      	add	r1, sp, #24
    354e:	468c      	mov	ip, r1
    3550:	4462      	add	r2, ip
    3552:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3554:	6a30      	ldr	r0, [r6, #32]
    3556:	f7ff fd83 	bl	3060 <_sercom_get_async_baud_val>
	if (status_code != STATUS_OK) {
    355a:	2800      	cmp	r0, #0
    355c:	d000      	beq.n	3560 <usart_init+0x260>
    355e:	e6e2      	b.n	3326 <usart_init+0x26>
    3560:	e750      	b.n	3404 <usart_init+0x104>
						_sercom_get_async_baud_val(config->baudrate,
    3562:	6a33      	ldr	r3, [r6, #32]
    3564:	9307      	str	r3, [sp, #28]
    3566:	b2c0      	uxtb	r0, r0
    3568:	f000 feca 	bl	4300 <system_gclk_chan_get_hz>
    356c:	0001      	movs	r1, r0
				status_code =
    356e:	9a05      	ldr	r2, [sp, #20]
    3570:	9200      	str	r2, [sp, #0]
    3572:	9b06      	ldr	r3, [sp, #24]
    3574:	220e      	movs	r2, #14
    3576:	a806      	add	r0, sp, #24
    3578:	4684      	mov	ip, r0
    357a:	4462      	add	r2, ip
    357c:	9807      	ldr	r0, [sp, #28]
    357e:	f7ff fd6f 	bl	3060 <_sercom_get_async_baud_val>
    3582:	e7ea      	b.n	355a <usart_init+0x25a>
		if(config->lin_slave_enable) {
    3584:	7ef3      	ldrb	r3, [r6, #27]
    3586:	2b00      	cmp	r3, #0
    3588:	d100      	bne.n	358c <usart_init+0x28c>
    358a:	e77c      	b.n	3486 <usart_init+0x186>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    358c:	2380      	movs	r3, #128	; 0x80
    358e:	04db      	lsls	r3, r3, #19
    3590:	431f      	orrs	r7, r3
    3592:	e778      	b.n	3486 <usart_init+0x186>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3594:	0020      	movs	r0, r4
    3596:	f7ff fdd3 	bl	3140 <_sercom_get_default_pad>
    359a:	e007      	b.n	35ac <usart_init+0x2ac>
    359c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    359e:	2f04      	cmp	r7, #4
    35a0:	d00d      	beq.n	35be <usart_init+0x2be>
    35a2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    35a4:	00bb      	lsls	r3, r7, #2
    35a6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    35a8:	2800      	cmp	r0, #0
    35aa:	d0f3      	beq.n	3594 <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
    35ac:	1c43      	adds	r3, r0, #1
    35ae:	d0f5      	beq.n	359c <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    35b0:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    35b2:	0c00      	lsrs	r0, r0, #16
    35b4:	b2c0      	uxtb	r0, r0
    35b6:	0029      	movs	r1, r5
    35b8:	f001 f86a 	bl	4690 <system_pinmux_pin_set_config>
    35bc:	e7ee      	b.n	359c <usart_init+0x29c>
	return status_code;
    35be:	2000      	movs	r0, #0
    35c0:	e6b1      	b.n	3326 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    35c2:	2310      	movs	r3, #16
    35c4:	9305      	str	r3, [sp, #20]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    35c6:	2300      	movs	r3, #0
    35c8:	9306      	str	r3, [sp, #24]
    35ca:	e706      	b.n	33da <usart_init+0xda>
    35cc:	40000400 	.word	0x40000400
    35d0:	41002000 	.word	0x41002000
	...

000035e0 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    35e0:	b570      	push	{r4, r5, r6, lr}
    35e2:	b082      	sub	sp, #8
    35e4:	0006      	movs	r6, r0
    35e6:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    35e8:	2200      	movs	r2, #0
    35ea:	466b      	mov	r3, sp
    35ec:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    35ee:	6804      	ldr	r4, [r0, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    35f0:	69e3      	ldr	r3, [r4, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    35f2:	2b00      	cmp	r3, #0
    35f4:	d1fc      	bne.n	35f0 <spi_set_baudrate+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    35f6:	338f      	adds	r3, #143	; 0x8f
    35f8:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    35fa:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    35fc:	6823      	ldr	r3, [r4, #0]
    35fe:	2202      	movs	r2, #2
    3600:	4393      	bics	r3, r2
    3602:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3604:	6830      	ldr	r0, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    3606:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    3608:	2b00      	cmp	r3, #0
    360a:	d1fc      	bne.n	3606 <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    360c:	f7ff fe58 	bl	32c0 <_sercom_get_sercom_inst_index>
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3610:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3612:	b2c0      	uxtb	r0, r0
    3614:	f000 fe74 	bl	4300 <system_gclk_chan_get_hz>
    3618:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    361a:	466b      	mov	r3, sp
    361c:	1d9a      	adds	r2, r3, #6
    361e:	0028      	movs	r0, r5
    3620:	f7ff fd06 	bl	3030 <_sercom_get_sync_baud_val>
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    3624:	2800      	cmp	r0, #0
    3626:	d002      	beq.n	362e <spi_set_baudrate+0x4e>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    3628:	2017      	movs	r0, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    362a:	b002      	add	sp, #8
    362c:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    362e:	466b      	mov	r3, sp
    3630:	3306      	adds	r3, #6
    3632:	781b      	ldrb	r3, [r3, #0]
    3634:	7323      	strb	r3, [r4, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3636:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    3638:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    363a:	2a00      	cmp	r2, #0
    363c:	d1fc      	bne.n	3638 <spi_set_baudrate+0x58>
    363e:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    3640:	2a00      	cmp	r2, #0
    3642:	d1fc      	bne.n	363e <spi_set_baudrate+0x5e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3644:	681a      	ldr	r2, [r3, #0]
    3646:	2102      	movs	r1, #2
    3648:	430a      	orrs	r2, r1
    364a:	601a      	str	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    364c:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    364e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3650:	2b00      	cmp	r3, #0
    3652:	d1fc      	bne.n	364e <spi_set_baudrate+0x6e>
    3654:	e7e9      	b.n	362a <spi_set_baudrate+0x4a>
    3656:	46c0      	nop			; (mov r8, r8)
	...

00003660 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3660:	b5f0      	push	{r4, r5, r6, r7, lr}
    3662:	46de      	mov	lr, fp
    3664:	4657      	mov	r7, sl
    3666:	4646      	mov	r6, r8
    3668:	b5c0      	push	{r6, r7, lr}
    366a:	b08a      	sub	sp, #40	; 0x28
    366c:	0006      	movs	r6, r0
    366e:	000f      	movs	r7, r1
    3670:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3672:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3674:	680b      	ldr	r3, [r1, #0]
    3676:	079b      	lsls	r3, r3, #30
    3678:	d40a      	bmi.n	3690 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    367a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    367c:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    367e:	07db      	lsls	r3, r3, #31
    3680:	d400      	bmi.n	3684 <spi_init+0x24>
    3682:	e097      	b.n	37b4 <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3684:	b00a      	add	sp, #40	; 0x28
    3686:	bc1c      	pop	{r2, r3, r4}
    3688:	4690      	mov	r8, r2
    368a:	469a      	mov	sl, r3
    368c:	46a3      	mov	fp, r4
    368e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    3690:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3692:	9305      	str	r3, [sp, #20]
    3694:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3696:	9306      	str	r3, [sp, #24]
    3698:	6b13      	ldr	r3, [r2, #48]	; 0x30
    369a:	9307      	str	r3, [sp, #28]
    369c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    369e:	9308      	str	r3, [sp, #32]
    36a0:	2500      	movs	r5, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    36a2:	231f      	movs	r3, #31
    36a4:	469a      	mov	sl, r3
    36a6:	e00a      	b.n	36be <spi_init+0x5e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    36a8:	0038      	movs	r0, r7
    36aa:	f7ff fd49 	bl	3140 <_sercom_get_default_pad>
    36ae:	e00e      	b.n	36ce <spi_init+0x6e>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    36b0:	230f      	movs	r3, #15
    36b2:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    36b4:	4580      	cmp	r8, r0
    36b6:	d12e      	bne.n	3716 <spi_init+0xb6>
    36b8:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    36ba:	2d04      	cmp	r5, #4
    36bc:	d02f      	beq.n	371e <spi_init+0xbe>
    36be:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    36c0:	00ab      	lsls	r3, r5, #2
    36c2:	aa02      	add	r2, sp, #8
    36c4:	200c      	movs	r0, #12
    36c6:	1812      	adds	r2, r2, r0
    36c8:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    36ca:	2800      	cmp	r0, #0
    36cc:	d0ec      	beq.n	36a8 <spi_init+0x48>
		if (current_pinmux == PINMUX_UNUSED) {
    36ce:	1c43      	adds	r3, r0, #1
    36d0:	d0f2      	beq.n	36b8 <spi_init+0x58>
		if ((current_pinmux & 0xFFFF) !=
    36d2:	0402      	lsls	r2, r0, #16
    36d4:	0c13      	lsrs	r3, r2, #16
    36d6:	4698      	mov	r8, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    36d8:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    36da:	b2c1      	uxtb	r1, r0
		return NULL;
    36dc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    36de:	0602      	lsls	r2, r0, #24
    36e0:	d404      	bmi.n	36ec <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    36e2:	094b      	lsrs	r3, r1, #5
    36e4:	01db      	lsls	r3, r3, #7
    36e6:	4a85      	ldr	r2, [pc, #532]	; (38fc <spi_init+0x29c>)
    36e8:	4694      	mov	ip, r2
    36ea:	4463      	add	r3, ip
	uint32_t pin_index = (gpio_pin % 32);
    36ec:	4650      	mov	r0, sl
    36ee:	4008      	ands	r0, r1
    36f0:	4684      	mov	ip, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    36f2:	1818      	adds	r0, r3, r0
    36f4:	3040      	adds	r0, #64	; 0x40
    36f6:	7800      	ldrb	r0, [r0, #0]
    36f8:	4683      	mov	fp, r0
		return SYSTEM_PINMUX_GPIO;
    36fa:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    36fc:	465a      	mov	r2, fp
    36fe:	07d2      	lsls	r2, r2, #31
    3700:	d5d8      	bpl.n	36b4 <spi_init+0x54>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    3702:	4662      	mov	r2, ip
    3704:	0850      	lsrs	r0, r2, #1
    3706:	181b      	adds	r3, r3, r0
    3708:	3330      	adds	r3, #48	; 0x30
    370a:	7818      	ldrb	r0, [r3, #0]
    370c:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    370e:	07cb      	lsls	r3, r1, #31
    3710:	d5ce      	bpl.n	36b0 <spi_init+0x50>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    3712:	0900      	lsrs	r0, r0, #4
    3714:	e7ce      	b.n	36b4 <spi_init+0x54>
			module->hw = NULL;
    3716:	2300      	movs	r3, #0
    3718:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    371a:	201c      	movs	r0, #28
    371c:	e7b2      	b.n	3684 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    371e:	2013      	movs	r0, #19
    3720:	f000 fdee 	bl	4300 <system_gclk_chan_get_hz>
	if (config->mode == SPI_MODE_MASTER) {
    3724:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    3726:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    3728:	2a01      	cmp	r2, #1
    372a:	d026      	beq.n	377a <spi_init+0x11a>
	ctrla |= config->mux_setting;
    372c:	6863      	ldr	r3, [r4, #4]
    372e:	68a2      	ldr	r2, [r4, #8]
    3730:	4313      	orrs	r3, r2
    3732:	68e2      	ldr	r2, [r4, #12]
    3734:	4313      	orrs	r3, r2
    3736:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    3738:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    373a:	7c61      	ldrb	r1, [r4, #17]
    373c:	2900      	cmp	r1, #0
    373e:	d001      	beq.n	3744 <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3740:	2180      	movs	r1, #128	; 0x80
    3742:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    3744:	7ca1      	ldrb	r1, [r4, #18]
    3746:	2900      	cmp	r1, #0
    3748:	d002      	beq.n	3750 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    374a:	2180      	movs	r1, #128	; 0x80
    374c:	0289      	lsls	r1, r1, #10
    374e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    3750:	7ce1      	ldrb	r1, [r4, #19]
    3752:	2900      	cmp	r1, #0
    3754:	d002      	beq.n	375c <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3756:	2180      	movs	r1, #128	; 0x80
    3758:	0089      	lsls	r1, r1, #2
    375a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    375c:	7d21      	ldrb	r1, [r4, #20]
    375e:	2900      	cmp	r1, #0
    3760:	d002      	beq.n	3768 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3762:	2180      	movs	r1, #128	; 0x80
    3764:	0189      	lsls	r1, r1, #6
    3766:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    3768:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    376a:	2002      	movs	r0, #2
    376c:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    376e:	428b      	cmp	r3, r1
    3770:	d017      	beq.n	37a2 <spi_init+0x142>
	module->hw = NULL;
    3772:	2300      	movs	r3, #0
    3774:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    3776:	201c      	movs	r0, #28
    3778:	e784      	b.n	3684 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    377a:	aa04      	add	r2, sp, #16
    377c:	0001      	movs	r1, r0
    377e:	69a0      	ldr	r0, [r4, #24]
    3780:	f7ff fc56 	bl	3030 <_sercom_get_sync_baud_val>
    3784:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    3786:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    3788:	2b00      	cmp	r3, #0
    378a:	d000      	beq.n	378e <spi_init+0x12e>
    378c:	e77a      	b.n	3684 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    378e:	7b3b      	ldrb	r3, [r7, #12]
    3790:	b2db      	uxtb	r3, r3
    3792:	aa04      	add	r2, sp, #16
    3794:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    3796:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    3798:	429a      	cmp	r2, r3
    379a:	d000      	beq.n	379e <spi_init+0x13e>
    379c:	e772      	b.n	3684 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    379e:	350c      	adds	r5, #12
    37a0:	e7c4      	b.n	372c <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    37a2:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    37a4:	4293      	cmp	r3, r2
    37a6:	d1e4      	bne.n	3772 <spi_init+0x112>
		module->mode           = config->mode;
    37a8:	7823      	ldrb	r3, [r4, #0]
    37aa:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    37ac:	7c23      	ldrb	r3, [r4, #16]
    37ae:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    37b0:	2000      	movs	r0, #0
    37b2:	e767      	b.n	3684 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    37b4:	0008      	movs	r0, r1
    37b6:	f7ff fd83 	bl	32c0 <_sercom_get_sercom_inst_index>
    37ba:	4a51      	ldr	r2, [pc, #324]	; (3900 <spi_init+0x2a0>)
    37bc:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    37be:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    37c0:	2301      	movs	r3, #1
    37c2:	40ab      	lsls	r3, r5
    37c4:	430b      	orrs	r3, r1
    37c6:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    37c8:	a909      	add	r1, sp, #36	; 0x24
    37ca:	2524      	movs	r5, #36	; 0x24
    37cc:	5d63      	ldrb	r3, [r4, r5]
    37ce:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    37d0:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    37d2:	b2c3      	uxtb	r3, r0
    37d4:	9301      	str	r3, [sp, #4]
    37d6:	0018      	movs	r0, r3
    37d8:	f000 fd82 	bl	42e0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
    37dc:	9801      	ldr	r0, [sp, #4]
    37de:	f000 fd37 	bl	4250 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
    37e2:	5d60      	ldrb	r0, [r4, r5]
    37e4:	2100      	movs	r1, #0
    37e6:	f7ff fc83 	bl	30f0 <sercom_set_gclk_generator>
	if (config->mode == SPI_MODE_MASTER) {
    37ea:	7823      	ldrb	r3, [r4, #0]
    37ec:	2b01      	cmp	r3, #1
    37ee:	d019      	beq.n	3824 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    37f0:	6833      	ldr	r3, [r6, #0]
    37f2:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    37f4:	ab04      	add	r3, sp, #16
    37f6:	2280      	movs	r2, #128	; 0x80
    37f8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    37fa:	2200      	movs	r2, #0
    37fc:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    37fe:	2101      	movs	r1, #1
    3800:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    3802:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    3804:	7823      	ldrb	r3, [r4, #0]
    3806:	2b00      	cmp	r3, #0
    3808:	d101      	bne.n	380e <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    380a:	ab04      	add	r3, sp, #16
    380c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    380e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3810:	9305      	str	r3, [sp, #20]
    3812:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3814:	9306      	str	r3, [sp, #24]
    3816:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3818:	9307      	str	r3, [sp, #28]
    381a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    381c:	9308      	str	r3, [sp, #32]
    381e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3820:	ad05      	add	r5, sp, #20
    3822:	e012      	b.n	384a <spi_init+0x1ea>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3824:	683b      	ldr	r3, [r7, #0]
    3826:	220c      	movs	r2, #12
    3828:	4313      	orrs	r3, r2
    382a:	603b      	str	r3, [r7, #0]
    382c:	e7e0      	b.n	37f0 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    382e:	4640      	mov	r0, r8
    3830:	f7ff fc86 	bl	3140 <_sercom_get_default_pad>
    3834:	e00e      	b.n	3854 <spi_init+0x1f4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3836:	ab02      	add	r3, sp, #8
    3838:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    383a:	0c00      	lsrs	r0, r0, #16
    383c:	b2c0      	uxtb	r0, r0
    383e:	a904      	add	r1, sp, #16
    3840:	f000 ff26 	bl	4690 <system_pinmux_pin_set_config>
    3844:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3846:	2f04      	cmp	r7, #4
    3848:	d007      	beq.n	385a <spi_init+0x1fa>
    384a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    384c:	00bb      	lsls	r3, r7, #2
    384e:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    3850:	2800      	cmp	r0, #0
    3852:	d0ec      	beq.n	382e <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    3854:	1c43      	adds	r3, r0, #1
    3856:	d1ee      	bne.n	3836 <spi_init+0x1d6>
    3858:	e7f4      	b.n	3844 <spi_init+0x1e4>
	module->mode             = config->mode;
    385a:	7823      	ldrb	r3, [r4, #0]
    385c:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    385e:	7c23      	ldrb	r3, [r4, #16]
    3860:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    3862:	7ca3      	ldrb	r3, [r4, #18]
    3864:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    3866:	7d23      	ldrb	r3, [r4, #20]
    3868:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    386a:	2200      	movs	r2, #0
    386c:	ab02      	add	r3, sp, #8
    386e:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    3870:	7823      	ldrb	r3, [r4, #0]
    3872:	2b01      	cmp	r3, #1
    3874:	d02a      	beq.n	38cc <spi_init+0x26c>
	ctrla |= config->transfer_mode;
    3876:	6863      	ldr	r3, [r4, #4]
    3878:	68a2      	ldr	r2, [r4, #8]
    387a:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    387c:	68e2      	ldr	r2, [r4, #12]
    387e:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    3880:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    3882:	7c62      	ldrb	r2, [r4, #17]
    3884:	2a00      	cmp	r2, #0
    3886:	d103      	bne.n	3890 <spi_init+0x230>
    3888:	4a1e      	ldr	r2, [pc, #120]	; (3904 <spi_init+0x2a4>)
    388a:	7892      	ldrb	r2, [r2, #2]
    388c:	0792      	lsls	r2, r2, #30
    388e:	d501      	bpl.n	3894 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3890:	2280      	movs	r2, #128	; 0x80
    3892:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    3894:	7ca2      	ldrb	r2, [r4, #18]
    3896:	2a00      	cmp	r2, #0
    3898:	d002      	beq.n	38a0 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    389a:	2280      	movs	r2, #128	; 0x80
    389c:	0292      	lsls	r2, r2, #10
    389e:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    38a0:	7ce2      	ldrb	r2, [r4, #19]
    38a2:	2a00      	cmp	r2, #0
    38a4:	d002      	beq.n	38ac <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    38a6:	2280      	movs	r2, #128	; 0x80
    38a8:	0092      	lsls	r2, r2, #2
    38aa:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    38ac:	7d22      	ldrb	r2, [r4, #20]
    38ae:	2a00      	cmp	r2, #0
    38b0:	d002      	beq.n	38b8 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    38b2:	2280      	movs	r2, #128	; 0x80
    38b4:	0192      	lsls	r2, r2, #6
    38b6:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    38b8:	4642      	mov	r2, r8
    38ba:	6812      	ldr	r2, [r2, #0]
    38bc:	4313      	orrs	r3, r2
    38be:	4642      	mov	r2, r8
    38c0:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    38c2:	6853      	ldr	r3, [r2, #4]
    38c4:	430b      	orrs	r3, r1
    38c6:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    38c8:	2000      	movs	r0, #0
    38ca:	e6db      	b.n	3684 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    38cc:	6830      	ldr	r0, [r6, #0]
    38ce:	f7ff fcf7 	bl	32c0 <_sercom_get_sercom_inst_index>
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    38d2:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    38d4:	b2c0      	uxtb	r0, r0
    38d6:	f000 fd13 	bl	4300 <system_gclk_chan_get_hz>
    38da:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    38dc:	ab02      	add	r3, sp, #8
    38de:	1d9a      	adds	r2, r3, #6
    38e0:	69a0      	ldr	r0, [r4, #24]
    38e2:	f7ff fba5 	bl	3030 <_sercom_get_sync_baud_val>
    38e6:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    38e8:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    38ea:	2b00      	cmp	r3, #0
    38ec:	d000      	beq.n	38f0 <spi_init+0x290>
    38ee:	e6c9      	b.n	3684 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    38f0:	ab02      	add	r3, sp, #8
    38f2:	3306      	adds	r3, #6
    38f4:	781b      	ldrb	r3, [r3, #0]
    38f6:	4642      	mov	r2, r8
    38f8:	7313      	strb	r3, [r2, #12]
    38fa:	e7bc      	b.n	3876 <spi_init+0x216>
    38fc:	41004400 	.word	0x41004400
    3900:	40000400 	.word	0x40000400
    3904:	41002000 	.word	0x41002000
	...

00003910 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3910:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3912:	2207      	movs	r2, #7
    3914:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    3916:	421a      	tst	r2, r3
    3918:	d1fc      	bne.n	3914 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    391a:	4770      	bx	lr
    391c:	0000      	movs	r0, r0
	...

00003920 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3920:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3922:	7e1a      	ldrb	r2, [r3, #24]
    3924:	0792      	lsls	r2, r2, #30
    3926:	d507      	bpl.n	3938 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3928:	2202      	movs	r2, #2
    392a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    392c:	8b5b      	ldrh	r3, [r3, #26]
    392e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    3930:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    3932:	17db      	asrs	r3, r3, #31
    3934:	4018      	ands	r0, r3
}
    3936:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3938:	8b5a      	ldrh	r2, [r3, #26]
    393a:	0752      	lsls	r2, r2, #29
    393c:	d506      	bpl.n	394c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    393e:	6859      	ldr	r1, [r3, #4]
    3940:	22c0      	movs	r2, #192	; 0xc0
    3942:	0292      	lsls	r2, r2, #10
    3944:	430a      	orrs	r2, r1
    3946:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    3948:	2018      	movs	r0, #24
    394a:	e7f4      	b.n	3936 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    394c:	2000      	movs	r0, #0
    394e:	e7f2      	b.n	3936 <_i2c_master_address_response+0x16>

00003950 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3950:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3952:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    3954:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3956:	2401      	movs	r4, #1
    3958:	2502      	movs	r5, #2
    395a:	7e11      	ldrb	r1, [r2, #24]
    395c:	4221      	tst	r1, r4
    395e:	d10b      	bne.n	3978 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    3960:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3962:	4229      	tst	r1, r5
    3964:	d106      	bne.n	3974 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    3966:	3301      	adds	r3, #1
    3968:	b29b      	uxth	r3, r3
    396a:	8901      	ldrh	r1, [r0, #8]
    396c:	4299      	cmp	r1, r3
    396e:	d8f4      	bhi.n	395a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    3970:	2012      	movs	r0, #18
    3972:	e002      	b.n	397a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    3974:	2000      	movs	r0, #0
    3976:	e000      	b.n	397a <_i2c_master_wait_for_bus+0x2a>
    3978:	2000      	movs	r0, #0
}
    397a:	bd30      	pop	{r4, r5, pc}
    397c:	0000      	movs	r0, r0
	...

00003980 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3980:	b5f0      	push	{r4, r5, r6, r7, lr}
    3982:	46de      	mov	lr, fp
    3984:	4657      	mov	r7, sl
    3986:	464e      	mov	r6, r9
    3988:	4645      	mov	r5, r8
    398a:	b5e0      	push	{r5, r6, r7, lr}
    398c:	b083      	sub	sp, #12
    398e:	0006      	movs	r6, r0
    3990:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3992:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3994:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ;
    3996:	880b      	ldrh	r3, [r1, #0]
    3998:	005b      	lsls	r3, r3, #1
    399a:	2201      	movs	r2, #1
    399c:	4313      	orrs	r3, r2
    399e:	626b      	str	r3, [r5, #36]	; 0x24

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    39a0:	f7ff ffd6 	bl	3950 <_i2c_master_wait_for_bus>
    39a4:	9001      	str	r0, [sp, #4]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    39a6:	686b      	ldr	r3, [r5, #4]
    39a8:	4a32      	ldr	r2, [pc, #200]	; (3a74 <_i2c_master_read_packet+0xf4>)
    39aa:	4013      	ands	r3, r2
    39ac:	606b      	str	r3, [r5, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    39ae:	2800      	cmp	r0, #0
    39b0:	d007      	beq.n	39c2 <_i2c_master_read_packet+0x42>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    39b2:	9801      	ldr	r0, [sp, #4]
    39b4:	b003      	add	sp, #12
    39b6:	bc3c      	pop	{r2, r3, r4, r5}
    39b8:	4690      	mov	r8, r2
    39ba:	4699      	mov	r9, r3
    39bc:	46a2      	mov	sl, r4
    39be:	46ab      	mov	fp, r5
    39c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_status = _i2c_master_address_response(module);
    39c2:	0030      	movs	r0, r6
    39c4:	f7ff ffac 	bl	3920 <_i2c_master_address_response>
    39c8:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    39ca:	2800      	cmp	r0, #0
    39cc:	d1f1      	bne.n	39b2 <_i2c_master_read_packet+0x32>
    39ce:	3c01      	subs	r4, #1
    39d0:	b2a4      	uxth	r4, r4
    39d2:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    39d4:	4b28      	ldr	r3, [pc, #160]	; (3a78 <_i2c_master_read_packet+0xf8>)
    39d6:	469a      	mov	sl, r3
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    39d8:	2320      	movs	r3, #32
    39da:	469b      	mov	fp, r3
    39dc:	e013      	b.n	3a06 <_i2c_master_read_packet+0x86>
				_i2c_master_wait_for_sync(module);
    39de:	0030      	movs	r0, r6
    39e0:	f7ff ff96 	bl	3910 <_i2c_master_wait_for_sync>
				packet->data[counter++] = i2c_module->DATA.reg;
    39e4:	4643      	mov	r3, r8
    39e6:	1c5f      	adds	r7, r3, #1
    39e8:	b2bf      	uxth	r7, r7
    39ea:	2328      	movs	r3, #40	; 0x28
    39ec:	5ceb      	ldrb	r3, [r5, r3]
    39ee:	464a      	mov	r2, r9
    39f0:	6852      	ldr	r2, [r2, #4]
    39f2:	4641      	mov	r1, r8
    39f4:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    39f6:	0030      	movs	r0, r6
    39f8:	f7ff ffaa 	bl	3950 <_i2c_master_wait_for_bus>
    39fc:	3c01      	subs	r4, #1
    39fe:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    3a00:	2800      	cmp	r0, #0
    3a02:	d113      	bne.n	3a2c <_i2c_master_read_packet+0xac>
				packet->data[counter++] = i2c_module->DATA.reg;
    3a04:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    3a06:	4554      	cmp	r4, sl
    3a08:	d012      	beq.n	3a30 <_i2c_master_read_packet+0xb0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3a0a:	8b6b      	ldrh	r3, [r5, #26]
    3a0c:	465a      	mov	r2, fp
    3a0e:	4213      	tst	r3, r2
    3a10:	d02c      	beq.n	3a6c <_i2c_master_read_packet+0xec>
			if (module->send_nack && tmp_data_length == 0) {
    3a12:	7af3      	ldrb	r3, [r6, #11]
    3a14:	2b00      	cmp	r3, #0
    3a16:	d0e2      	beq.n	39de <_i2c_master_read_packet+0x5e>
    3a18:	2c00      	cmp	r4, #0
    3a1a:	d1e0      	bne.n	39de <_i2c_master_read_packet+0x5e>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3a1c:	686a      	ldr	r2, [r5, #4]
    3a1e:	2380      	movs	r3, #128	; 0x80
    3a20:	02db      	lsls	r3, r3, #11
    3a22:	4313      	orrs	r3, r2
    3a24:	606b      	str	r3, [r5, #4]
    3a26:	3c01      	subs	r4, #1
    3a28:	b2a4      	uxth	r4, r4
    3a2a:	e7ec      	b.n	3a06 <_i2c_master_read_packet+0x86>
				packet->data[counter++] = i2c_module->DATA.reg;
    3a2c:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    3a2e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    3a30:	7ab3      	ldrb	r3, [r6, #10]
    3a32:	2b00      	cmp	r3, #0
    3a34:	d011      	beq.n	3a5a <_i2c_master_read_packet+0xda>
			_i2c_master_wait_for_sync(module);
    3a36:	0030      	movs	r0, r6
    3a38:	f7ff ff6a 	bl	3910 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3a3c:	686a      	ldr	r2, [r5, #4]
    3a3e:	23c0      	movs	r3, #192	; 0xc0
    3a40:	029b      	lsls	r3, r3, #10
    3a42:	4313      	orrs	r3, r2
    3a44:	606b      	str	r3, [r5, #4]
		_i2c_master_wait_for_sync(module);
    3a46:	0030      	movs	r0, r6
    3a48:	f7ff ff62 	bl	3910 <_i2c_master_wait_for_sync>
		packet->data[counter] = i2c_module->DATA.reg;
    3a4c:	2328      	movs	r3, #40	; 0x28
    3a4e:	5cea      	ldrb	r2, [r5, r3]
    3a50:	464b      	mov	r3, r9
    3a52:	685b      	ldr	r3, [r3, #4]
    3a54:	4641      	mov	r1, r8
    3a56:	545a      	strb	r2, [r3, r1]
    3a58:	e7ab      	b.n	39b2 <_i2c_master_read_packet+0x32>
		  	_i2c_master_wait_for_sync(module);
    3a5a:	0030      	movs	r0, r6
    3a5c:	f7ff ff58 	bl	3910 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
    3a60:	686a      	ldr	r2, [r5, #4]
    3a62:	2380      	movs	r3, #128	; 0x80
    3a64:	025b      	lsls	r3, r3, #9
    3a66:	4313      	orrs	r3, r2
    3a68:	606b      	str	r3, [r5, #4]
    3a6a:	e7ec      	b.n	3a46 <_i2c_master_read_packet+0xc6>
				return STATUS_ERR_PACKET_COLLISION;
    3a6c:	2341      	movs	r3, #65	; 0x41
    3a6e:	9301      	str	r3, [sp, #4]
    3a70:	e79f      	b.n	39b2 <_i2c_master_read_packet+0x32>
    3a72:	46c0      	nop			; (mov r8, r8)
    3a74:	fffbffff 	.word	0xfffbffff
    3a78:	0000ffff 	.word	0x0000ffff
    3a7c:	00000000 	.word	0x00000000

00003a80 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a82:	46de      	mov	lr, fp
    3a84:	4657      	mov	r7, sl
    3a86:	464e      	mov	r6, r9
    3a88:	4645      	mov	r5, r8
    3a8a:	b5e0      	push	{r5, r6, r7, lr}
    3a8c:	b083      	sub	sp, #12
    3a8e:	0006      	movs	r6, r0
    3a90:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3a92:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3a94:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    3a96:	f7ff ff3b 	bl	3910 <_i2c_master_wait_for_sync>

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE;
    3a9a:	883b      	ldrh	r3, [r7, #0]
    3a9c:	005b      	lsls	r3, r3, #1
    3a9e:	626b      	str	r3, [r5, #36]	; 0x24

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3aa0:	0030      	movs	r0, r6
    3aa2:	f7ff ff55 	bl	3950 <_i2c_master_wait_for_bus>
    3aa6:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3aa8:	2800      	cmp	r0, #0
    3aaa:	d007      	beq.n	3abc <_i2c_master_write_packet+0x3c>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    3aac:	9801      	ldr	r0, [sp, #4]
    3aae:	b003      	add	sp, #12
    3ab0:	bc3c      	pop	{r2, r3, r4, r5}
    3ab2:	4690      	mov	r8, r2
    3ab4:	4699      	mov	r9, r3
    3ab6:	46a2      	mov	sl, r4
    3ab8:	46ab      	mov	fp, r5
    3aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_status = _i2c_master_address_response(module);
    3abc:	0030      	movs	r0, r6
    3abe:	f7ff ff2f 	bl	3920 <_i2c_master_address_response>
    3ac2:	1e03      	subs	r3, r0, #0
    3ac4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    3ac6:	d1f1      	bne.n	3aac <_i2c_master_write_packet+0x2c>
    3ac8:	46a0      	mov	r8, r4
    3aca:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3acc:	3320      	adds	r3, #32
    3ace:	4699      	mov	r9, r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    3ad0:	3308      	adds	r3, #8
    3ad2:	469a      	mov	sl, r3
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3ad4:	3b24      	subs	r3, #36	; 0x24
    3ad6:	469b      	mov	fp, r3
		while (tmp_data_length--) {
    3ad8:	4544      	cmp	r4, r8
    3ada:	d018      	beq.n	3b0e <_i2c_master_write_packet+0x8e>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3adc:	8b6b      	ldrh	r3, [r5, #26]
    3ade:	464a      	mov	r2, r9
    3ae0:	4213      	tst	r3, r2
    3ae2:	d020      	beq.n	3b26 <_i2c_master_write_packet+0xa6>
			_i2c_master_wait_for_sync(module);
    3ae4:	0030      	movs	r0, r6
    3ae6:	f7ff ff13 	bl	3910 <_i2c_master_wait_for_sync>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    3aea:	687b      	ldr	r3, [r7, #4]
    3aec:	5d1b      	ldrb	r3, [r3, r4]
    3aee:	4652      	mov	r2, sl
    3af0:	54ab      	strb	r3, [r5, r2]
			tmp_status = _i2c_master_wait_for_bus(module);
    3af2:	0030      	movs	r0, r6
    3af4:	f7ff ff2c 	bl	3950 <_i2c_master_wait_for_bus>
			if (tmp_status != STATUS_OK) {
    3af8:	2800      	cmp	r0, #0
    3afa:	d107      	bne.n	3b0c <_i2c_master_write_packet+0x8c>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3afc:	8b6b      	ldrh	r3, [r5, #26]
    3afe:	3401      	adds	r4, #1
    3b00:	465a      	mov	r2, fp
    3b02:	4213      	tst	r3, r2
    3b04:	d0e8      	beq.n	3ad8 <_i2c_master_write_packet+0x58>
				tmp_status = STATUS_ERR_OVERFLOW;
    3b06:	231e      	movs	r3, #30
    3b08:	9301      	str	r3, [sp, #4]
    3b0a:	e000      	b.n	3b0e <_i2c_master_write_packet+0x8e>
			tmp_status = _i2c_master_wait_for_bus(module);
    3b0c:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    3b0e:	7ab3      	ldrb	r3, [r6, #10]
    3b10:	2b00      	cmp	r3, #0
    3b12:	d0cb      	beq.n	3aac <_i2c_master_write_packet+0x2c>
			_i2c_master_wait_for_sync(module);
    3b14:	0030      	movs	r0, r6
    3b16:	f7ff fefb 	bl	3910 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3b1a:	686a      	ldr	r2, [r5, #4]
    3b1c:	23c0      	movs	r3, #192	; 0xc0
    3b1e:	029b      	lsls	r3, r3, #10
    3b20:	4313      	orrs	r3, r2
    3b22:	606b      	str	r3, [r5, #4]
    3b24:	e7c2      	b.n	3aac <_i2c_master_write_packet+0x2c>
				return STATUS_ERR_PACKET_COLLISION;
    3b26:	2341      	movs	r3, #65	; 0x41
    3b28:	9301      	str	r3, [sp, #4]
    3b2a:	e7bf      	b.n	3aac <_i2c_master_write_packet+0x2c>
    3b2c:	0000      	movs	r0, r0
	...

00003b30 <i2c_master_init>:
{
    3b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b32:	46c6      	mov	lr, r8
    3b34:	b500      	push	{lr}
    3b36:	b082      	sub	sp, #8
    3b38:	0007      	movs	r7, r0
    3b3a:	000d      	movs	r5, r1
    3b3c:	0016      	movs	r6, r2
	module->hw = hw;
    3b3e:	6039      	str	r1, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3b40:	0008      	movs	r0, r1
    3b42:	f7ff fbbd 	bl	32c0 <_sercom_get_sercom_inst_index>
    3b46:	4a45      	ldr	r2, [pc, #276]	; (3c5c <i2c_master_init+0x12c>)
    3b48:	6a11      	ldr	r1, [r2, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3b4a:	1c84      	adds	r4, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3b4c:	2301      	movs	r3, #1
    3b4e:	40a3      	lsls	r3, r4
    3b50:	430b      	orrs	r3, r1
    3b52:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    3b54:	a901      	add	r1, sp, #4
    3b56:	7b33      	ldrb	r3, [r6, #12]
    3b58:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3b5a:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3b5c:	b2c4      	uxtb	r4, r0
    3b5e:	0020      	movs	r0, r4
    3b60:	f000 fbbe 	bl	42e0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
    3b64:	0020      	movs	r0, r4
    3b66:	f000 fb73 	bl	4250 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
    3b6a:	7b30      	ldrb	r0, [r6, #12]
    3b6c:	2100      	movs	r1, #0
    3b6e:	f7ff fabf 	bl	30f0 <sercom_set_gclk_generator>
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3b72:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
    3b74:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3b76:	079b      	lsls	r3, r3, #30
    3b78:	d503      	bpl.n	3b82 <i2c_master_init+0x52>
}
    3b7a:	b002      	add	sp, #8
    3b7c:	bc04      	pop	{r2}
    3b7e:	4690      	mov	r8, r2
    3b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    3b82:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
    3b84:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    3b86:	07db      	lsls	r3, r3, #31
    3b88:	d4f7      	bmi.n	3b7a <i2c_master_init+0x4a>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
    3b8a:	2314      	movs	r3, #20
    3b8c:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3b8e:	683c      	ldr	r4, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    3b90:	0020      	movs	r0, r4
    3b92:	f7ff fb95 	bl	32c0 <_sercom_get_sercom_inst_index>
    3b96:	4680      	mov	r8, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3b98:	2380      	movs	r3, #128	; 0x80
    3b9a:	466a      	mov	r2, sp
    3b9c:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3b9e:	2300      	movs	r3, #0
    3ba0:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3ba2:	2201      	movs	r2, #1
    3ba4:	4669      	mov	r1, sp
    3ba6:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    3ba8:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    3baa:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
    3bac:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
    3bae:	2800      	cmp	r0, #0
    3bb0:	d049      	beq.n	3c46 <i2c_master_init+0x116>
	pin_conf.mux_position = pad0 & 0xFFFF;
    3bb2:	466b      	mov	r3, sp
    3bb4:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3bb6:	2302      	movs	r3, #2
    3bb8:	466a      	mov	r2, sp
    3bba:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    3bbc:	0c00      	lsrs	r0, r0, #16
    3bbe:	b2c0      	uxtb	r0, r0
    3bc0:	4669      	mov	r1, sp
    3bc2:	f000 fd65 	bl	4690 <system_pinmux_pin_set_config>
	if (pad1 == PINMUX_DEFAULT) {
    3bc6:	2d00      	cmp	r5, #0
    3bc8:	d042      	beq.n	3c50 <i2c_master_init+0x120>
	pin_conf.mux_position = pad1 & 0xFFFF;
    3bca:	466b      	mov	r3, sp
    3bcc:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3bce:	2302      	movs	r3, #2
    3bd0:	466a      	mov	r2, sp
    3bd2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    3bd4:	0c28      	lsrs	r0, r5, #16
    3bd6:	b2c0      	uxtb	r0, r0
    3bd8:	4669      	mov	r1, sp
    3bda:	f000 fd59 	bl	4690 <system_pinmux_pin_set_config>
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3bde:	8ab3      	ldrh	r3, [r6, #20]
    3be0:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    3be2:	8af3      	ldrh	r3, [r6, #22]
    3be4:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    3be6:	7e32      	ldrb	r2, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3be8:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    3bea:	2a00      	cmp	r2, #0
    3bec:	d104      	bne.n	3bf8 <i2c_master_init+0xc8>
    3bee:	4b1c      	ldr	r3, [pc, #112]	; (3c60 <i2c_master_init+0x130>)
    3bf0:	789b      	ldrb	r3, [r3, #2]
    3bf2:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3bf4:	0fdb      	lsrs	r3, r3, #31
    3bf6:	01db      	lsls	r3, r3, #7
		tmp_ctrla |= config->start_hold_time;
    3bf8:	6932      	ldr	r2, [r6, #16]
    3bfa:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    3bfc:	2224      	movs	r2, #36	; 0x24
    3bfe:	5cb2      	ldrb	r2, [r6, r2]
    3c00:	2a00      	cmp	r2, #0
    3c02:	d002      	beq.n	3c0a <i2c_master_init+0xda>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3c04:	2280      	movs	r2, #128	; 0x80
    3c06:	05d2      	lsls	r2, r2, #23
    3c08:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    3c0a:	6822      	ldr	r2, [r4, #0]
    3c0c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3c0e:	430a      	orrs	r2, r1
    3c10:	4313      	orrs	r3, r2
    3c12:	6023      	str	r3, [r4, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    3c14:	2380      	movs	r3, #128	; 0x80
    3c16:	005b      	lsls	r3, r3, #1
    3c18:	6063      	str	r3, [r4, #4]
	tmp_baud = (int32_t)(div_ceil(
    3c1a:	4640      	mov	r0, r8
    3c1c:	3014      	adds	r0, #20
    3c1e:	b2c0      	uxtb	r0, r0
    3c20:	f000 fb6e 	bl	4300 <system_gclk_chan_get_hz>
    3c24:	6833      	ldr	r3, [r6, #0]
    3c26:	21fa      	movs	r1, #250	; 0xfa
    3c28:	00c9      	lsls	r1, r1, #3
    3c2a:	4359      	muls	r1, r3
    3c2c:	1e4b      	subs	r3, r1, #1
    3c2e:	1818      	adds	r0, r3, r0
    3c30:	f7fc fad0 	bl	1d4 <__udivsi3>
				(2000*(config->baud_rate))) - 5);
    3c34:	1f43      	subs	r3, r0, #5
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3c36:	2040      	movs	r0, #64	; 0x40
	if (tmp_baud > 255 || tmp_baud < 0) {
    3c38:	2bff      	cmp	r3, #255	; 0xff
    3c3a:	d89e      	bhi.n	3b7a <i2c_master_init+0x4a>
    3c3c:	30bf      	adds	r0, #191	; 0xbf
    3c3e:	4003      	ands	r3, r0
		i2c_module->BAUD.reg = (uint8_t)tmp_baud;
    3c40:	60e3      	str	r3, [r4, #12]
	enum status_code tmp_status_code = STATUS_OK;
    3c42:	2000      	movs	r0, #0
    3c44:	e799      	b.n	3b7a <i2c_master_init+0x4a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    3c46:	2100      	movs	r1, #0
    3c48:	0020      	movs	r0, r4
    3c4a:	f7ff fa79 	bl	3140 <_sercom_get_default_pad>
    3c4e:	e7b0      	b.n	3bb2 <i2c_master_init+0x82>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    3c50:	2101      	movs	r1, #1
    3c52:	0020      	movs	r0, r4
    3c54:	f7ff fa74 	bl	3140 <_sercom_get_default_pad>
    3c58:	0005      	movs	r5, r0
    3c5a:	e7b6      	b.n	3bca <i2c_master_init+0x9a>
    3c5c:	40000400 	.word	0x40000400
    3c60:	41002000 	.word	0x41002000
	...

00003c70 <i2c_master_read_packet_wait>:
{
    3c70:	b510      	push	{r4, lr}
	module->send_stop = true;
    3c72:	2301      	movs	r3, #1
    3c74:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    3c76:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    3c78:	f7ff fe82 	bl	3980 <_i2c_master_read_packet>
}
    3c7c:	bd10      	pop	{r4, pc}
    3c7e:	46c0      	nop			; (mov r8, r8)

00003c80 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3c80:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    3c82:	2300      	movs	r3, #0
    3c84:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    3c86:	3301      	adds	r3, #1
    3c88:	72c3      	strb	r3, [r0, #11]
	
	return _i2c_master_write_packet(module, packet);
    3c8a:	f7ff fef9 	bl	3a80 <_i2c_master_write_packet>
}
    3c8e:	bd10      	pop	{r4, pc}

00003c90 <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
    3c90:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3c92:	6804      	ldr	r4, [r0, #0]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
    3c94:	f7ff fe3c 	bl	3910 <_i2c_master_wait_for_sync>
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3c98:	6862      	ldr	r2, [r4, #4]
    3c9a:	23c0      	movs	r3, #192	; 0xc0
    3c9c:	029b      	lsls	r3, r3, #10
    3c9e:	4313      	orrs	r3, r2
    3ca0:	6063      	str	r3, [r4, #4]
}
    3ca2:	bd10      	pop	{r4, pc}
	...

00003cb0 <i2c_master_write_byte>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_write_byte(
		struct i2c_master_module *const module,
		uint8_t byte)
{
    3cb0:	b570      	push	{r4, r5, r6, lr}
    3cb2:	0004      	movs	r4, r0
    3cb4:	000e      	movs	r6, r1
  	enum status_code tmp_status;
  	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3cb6:	6805      	ldr	r5, [r0, #0]
	
	/* Write byte to slave. */
	_i2c_master_wait_for_sync(module);
    3cb8:	f7ff fe2a 	bl	3910 <_i2c_master_wait_for_sync>
	i2c_module->DATA.reg = byte;
    3cbc:	2328      	movs	r3, #40	; 0x28
    3cbe:	54ee      	strb	r6, [r5, r3]
	/* Wait for response. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3cc0:	0020      	movs	r0, r4
    3cc2:	f7ff fe45 	bl	3950 <_i2c_master_wait_for_bus>
	return tmp_status;
}
    3cc6:	bd70      	pop	{r4, r5, r6, pc}
	...

00003cd0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3cd0:	b510      	push	{r4, lr}
	switch (clock_source) {
    3cd2:	2808      	cmp	r0, #8
    3cd4:	d803      	bhi.n	3cde <system_clock_source_get_hz+0xe>
    3cd6:	0080      	lsls	r0, r0, #2
    3cd8:	4b1b      	ldr	r3, [pc, #108]	; (3d48 <system_clock_source_get_hz+0x78>)
    3cda:	581b      	ldr	r3, [r3, r0]
    3cdc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    3cde:	2000      	movs	r0, #0
    3ce0:	e030      	b.n	3d44 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    3ce2:	4b1a      	ldr	r3, [pc, #104]	; (3d4c <system_clock_source_get_hz+0x7c>)
    3ce4:	6918      	ldr	r0, [r3, #16]
    3ce6:	e02d      	b.n	3d44 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3ce8:	4b19      	ldr	r3, [pc, #100]	; (3d50 <system_clock_source_get_hz+0x80>)
    3cea:	6a1b      	ldr	r3, [r3, #32]
    3cec:	059b      	lsls	r3, r3, #22
    3cee:	0f9b      	lsrs	r3, r3, #30
    3cf0:	4818      	ldr	r0, [pc, #96]	; (3d54 <system_clock_source_get_hz+0x84>)
    3cf2:	40d8      	lsrs	r0, r3
    3cf4:	e026      	b.n	3d44 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    3cf6:	4b15      	ldr	r3, [pc, #84]	; (3d4c <system_clock_source_get_hz+0x7c>)
    3cf8:	6958      	ldr	r0, [r3, #20]
    3cfa:	e023      	b.n	3d44 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3cfc:	4b13      	ldr	r3, [pc, #76]	; (3d4c <system_clock_source_get_hz+0x7c>)
    3cfe:	681b      	ldr	r3, [r3, #0]
			return 0;
    3d00:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3d02:	079b      	lsls	r3, r3, #30
    3d04:	d51e      	bpl.n	3d44 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3d06:	4912      	ldr	r1, [pc, #72]	; (3d50 <system_clock_source_get_hz+0x80>)
    3d08:	2210      	movs	r2, #16
    3d0a:	68cb      	ldr	r3, [r1, #12]
    3d0c:	421a      	tst	r2, r3
    3d0e:	d0fc      	beq.n	3d0a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3d10:	4b0e      	ldr	r3, [pc, #56]	; (3d4c <system_clock_source_get_hz+0x7c>)
    3d12:	681b      	ldr	r3, [r3, #0]
    3d14:	075b      	lsls	r3, r3, #29
    3d16:	d401      	bmi.n	3d1c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    3d18:	480f      	ldr	r0, [pc, #60]	; (3d58 <system_clock_source_get_hz+0x88>)
    3d1a:	e013      	b.n	3d44 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3d1c:	2000      	movs	r0, #0
    3d1e:	f000 faef 	bl	4300 <system_gclk_chan_get_hz>
					(_system_clock_inst.dfll.mul & 0xffff);
    3d22:	4b0a      	ldr	r3, [pc, #40]	; (3d4c <system_clock_source_get_hz+0x7c>)
    3d24:	689b      	ldr	r3, [r3, #8]
    3d26:	041b      	lsls	r3, r3, #16
    3d28:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3d2a:	4358      	muls	r0, r3
    3d2c:	e00a      	b.n	3d44 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3d2e:	2350      	movs	r3, #80	; 0x50
    3d30:	4a07      	ldr	r2, [pc, #28]	; (3d50 <system_clock_source_get_hz+0x80>)
    3d32:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3d34:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3d36:	075b      	lsls	r3, r3, #29
    3d38:	d504      	bpl.n	3d44 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    3d3a:	4b04      	ldr	r3, [pc, #16]	; (3d4c <system_clock_source_get_hz+0x7c>)
    3d3c:	68d8      	ldr	r0, [r3, #12]
    3d3e:	e001      	b.n	3d44 <system_clock_source_get_hz+0x74>
		return 32768UL;
    3d40:	2080      	movs	r0, #128	; 0x80
    3d42:	0200      	lsls	r0, r0, #8
	}
}
    3d44:	bd10      	pop	{r4, pc}
    3d46:	46c0      	nop			; (mov r8, r8)
    3d48:	0000e084 	.word	0x0000e084
    3d4c:	20000b44 	.word	0x20000b44
    3d50:	40000800 	.word	0x40000800
    3d54:	007a1200 	.word	0x007a1200
    3d58:	02dc6c00 	.word	0x02dc6c00
    3d5c:	00000000 	.word	0x00000000

00003d60 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3d60:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3d62:	490c      	ldr	r1, [pc, #48]	; (3d94 <system_clock_source_osc8m_set_config+0x34>)
    3d64:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3d66:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3d68:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    3d6a:	7840      	ldrb	r0, [r0, #1]
    3d6c:	2201      	movs	r2, #1
    3d6e:	4010      	ands	r0, r2
    3d70:	0180      	lsls	r0, r0, #6
    3d72:	2640      	movs	r6, #64	; 0x40
    3d74:	43b3      	bics	r3, r6
    3d76:	4303      	orrs	r3, r0
    3d78:	402a      	ands	r2, r5
    3d7a:	01d2      	lsls	r2, r2, #7
    3d7c:	2080      	movs	r0, #128	; 0x80
    3d7e:	4383      	bics	r3, r0
    3d80:	4313      	orrs	r3, r2
    3d82:	2203      	movs	r2, #3
    3d84:	4022      	ands	r2, r4
    3d86:	0212      	lsls	r2, r2, #8
    3d88:	4803      	ldr	r0, [pc, #12]	; (3d98 <system_clock_source_osc8m_set_config+0x38>)
    3d8a:	4003      	ands	r3, r0
    3d8c:	4313      	orrs	r3, r2
    3d8e:	620b      	str	r3, [r1, #32]
}
    3d90:	bd70      	pop	{r4, r5, r6, pc}
    3d92:	46c0      	nop			; (mov r8, r8)
    3d94:	40000800 	.word	0x40000800
    3d98:	fffffcff 	.word	0xfffffcff
    3d9c:	00000000 	.word	0x00000000

00003da0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    3da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3da2:	46de      	mov	lr, fp
    3da4:	4657      	mov	r7, sl
    3da6:	464e      	mov	r6, r9
    3da8:	4645      	mov	r5, r8
    3daa:	b5e0      	push	{r5, r6, r7, lr}
    3dac:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    3dae:	4b26      	ldr	r3, [pc, #152]	; (3e48 <system_clock_source_xosc32k_set_config+0xa8>)
    3db0:	469b      	mov	fp, r3
    3db2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    3db4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    3db6:	7800      	ldrb	r0, [r0, #0]
    3db8:	4242      	negs	r2, r0
    3dba:	4142      	adcs	r2, r0
    3dbc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    3dbe:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    3dc0:	78ca      	ldrb	r2, [r1, #3]
    3dc2:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    3dc4:	790a      	ldrb	r2, [r1, #4]
    3dc6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    3dc8:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3dca:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    3dcc:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    3dce:	688a      	ldr	r2, [r1, #8]
    3dd0:	491e      	ldr	r1, [pc, #120]	; (3e4c <system_clock_source_xosc32k_set_config+0xac>)
    3dd2:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    3dd4:	2101      	movs	r1, #1
    3dd6:	464a      	mov	r2, r9
    3dd8:	0092      	lsls	r2, r2, #2
    3dda:	4691      	mov	r9, r2
    3ddc:	2204      	movs	r2, #4
    3dde:	4393      	bics	r3, r2
    3de0:	464a      	mov	r2, r9
    3de2:	4313      	orrs	r3, r2
    3de4:	4642      	mov	r2, r8
    3de6:	400a      	ands	r2, r1
    3de8:	00d2      	lsls	r2, r2, #3
    3dea:	4690      	mov	r8, r2
    3dec:	2208      	movs	r2, #8
    3dee:	4393      	bics	r3, r2
    3df0:	4642      	mov	r2, r8
    3df2:	4313      	orrs	r3, r2
    3df4:	4662      	mov	r2, ip
    3df6:	400a      	ands	r2, r1
    3df8:	0112      	lsls	r2, r2, #4
    3dfa:	4694      	mov	ip, r2
    3dfc:	2210      	movs	r2, #16
    3dfe:	4393      	bics	r3, r2
    3e00:	4662      	mov	r2, ip
    3e02:	4313      	orrs	r3, r2
    3e04:	4008      	ands	r0, r1
    3e06:	0140      	lsls	r0, r0, #5
    3e08:	2220      	movs	r2, #32
    3e0a:	4393      	bics	r3, r2
    3e0c:	4303      	orrs	r3, r0
    3e0e:	400f      	ands	r7, r1
    3e10:	01bf      	lsls	r7, r7, #6
    3e12:	2040      	movs	r0, #64	; 0x40
    3e14:	4383      	bics	r3, r0
    3e16:	433b      	orrs	r3, r7
    3e18:	400e      	ands	r6, r1
    3e1a:	01f6      	lsls	r6, r6, #7
    3e1c:	3040      	adds	r0, #64	; 0x40
    3e1e:	4383      	bics	r3, r0
    3e20:	4333      	orrs	r3, r6
    3e22:	3879      	subs	r0, #121	; 0x79
    3e24:	4005      	ands	r5, r0
    3e26:	022d      	lsls	r5, r5, #8
    3e28:	4809      	ldr	r0, [pc, #36]	; (3e50 <system_clock_source_xosc32k_set_config+0xb0>)
    3e2a:	4003      	ands	r3, r0
    3e2c:	432b      	orrs	r3, r5
    3e2e:	4021      	ands	r1, r4
    3e30:	0309      	lsls	r1, r1, #12
    3e32:	4808      	ldr	r0, [pc, #32]	; (3e54 <system_clock_source_xosc32k_set_config+0xb4>)
    3e34:	4003      	ands	r3, r0
    3e36:	430b      	orrs	r3, r1
    3e38:	465a      	mov	r2, fp
    3e3a:	8293      	strh	r3, [r2, #20]
}
    3e3c:	bc3c      	pop	{r2, r3, r4, r5}
    3e3e:	4690      	mov	r8, r2
    3e40:	4699      	mov	r9, r3
    3e42:	46a2      	mov	sl, r4
    3e44:	46ab      	mov	fp, r5
    3e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e48:	40000800 	.word	0x40000800
    3e4c:	20000b44 	.word	0x20000b44
    3e50:	fffff8ff 	.word	0xfffff8ff
    3e54:	ffffefff 	.word	0xffffefff
	...

00003e60 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    3e60:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3e62:	7a03      	ldrb	r3, [r0, #8]
    3e64:	069b      	lsls	r3, r3, #26
    3e66:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    3e68:	8942      	ldrh	r2, [r0, #10]
    3e6a:	0592      	lsls	r2, r2, #22
    3e6c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3e6e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    3e70:	4918      	ldr	r1, [pc, #96]	; (3ed4 <system_clock_source_dfll_set_config+0x74>)
    3e72:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3e74:	7983      	ldrb	r3, [r0, #6]
    3e76:	79c2      	ldrb	r2, [r0, #7]
    3e78:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    3e7a:	8842      	ldrh	r2, [r0, #2]
    3e7c:	8884      	ldrh	r4, [r0, #4]
    3e7e:	4322      	orrs	r2, r4
    3e80:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    3e82:	7842      	ldrb	r2, [r0, #1]
    3e84:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    3e86:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    3e88:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    3e8a:	7803      	ldrb	r3, [r0, #0]
    3e8c:	2b04      	cmp	r3, #4
    3e8e:	d011      	beq.n	3eb4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3e90:	2b20      	cmp	r3, #32
    3e92:	d10e      	bne.n	3eb2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3e94:	7b03      	ldrb	r3, [r0, #12]
    3e96:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3e98:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3e9a:	4313      	orrs	r3, r2
    3e9c:	89c2      	ldrh	r2, [r0, #14]
    3e9e:	0412      	lsls	r2, r2, #16
    3ea0:	490d      	ldr	r1, [pc, #52]	; (3ed8 <system_clock_source_dfll_set_config+0x78>)
    3ea2:	400a      	ands	r2, r1
    3ea4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    3ea6:	4a0b      	ldr	r2, [pc, #44]	; (3ed4 <system_clock_source_dfll_set_config+0x74>)
    3ea8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    3eaa:	6811      	ldr	r1, [r2, #0]
    3eac:	4b0b      	ldr	r3, [pc, #44]	; (3edc <system_clock_source_dfll_set_config+0x7c>)
    3eae:	430b      	orrs	r3, r1
    3eb0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    3eb2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3eb4:	7b03      	ldrb	r3, [r0, #12]
    3eb6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3eb8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3eba:	4313      	orrs	r3, r2
    3ebc:	89c2      	ldrh	r2, [r0, #14]
    3ebe:	0412      	lsls	r2, r2, #16
    3ec0:	4905      	ldr	r1, [pc, #20]	; (3ed8 <system_clock_source_dfll_set_config+0x78>)
    3ec2:	400a      	ands	r2, r1
    3ec4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    3ec6:	4a03      	ldr	r2, [pc, #12]	; (3ed4 <system_clock_source_dfll_set_config+0x74>)
    3ec8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    3eca:	6813      	ldr	r3, [r2, #0]
    3ecc:	2104      	movs	r1, #4
    3ece:	430b      	orrs	r3, r1
    3ed0:	6013      	str	r3, [r2, #0]
    3ed2:	e7ee      	b.n	3eb2 <system_clock_source_dfll_set_config+0x52>
    3ed4:	20000b44 	.word	0x20000b44
    3ed8:	03ff0000 	.word	0x03ff0000
    3edc:	00000424 	.word	0x00000424

00003ee0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3ee0:	2808      	cmp	r0, #8
    3ee2:	d803      	bhi.n	3eec <system_clock_source_enable+0xc>
    3ee4:	0080      	lsls	r0, r0, #2
    3ee6:	4b25      	ldr	r3, [pc, #148]	; (3f7c <system_clock_source_enable+0x9c>)
    3ee8:	581b      	ldr	r3, [r3, r0]
    3eea:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3eec:	2017      	movs	r0, #23
    3eee:	e044      	b.n	3f7a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3ef0:	4a23      	ldr	r2, [pc, #140]	; (3f80 <system_clock_source_enable+0xa0>)
    3ef2:	6a13      	ldr	r3, [r2, #32]
    3ef4:	2102      	movs	r1, #2
    3ef6:	430b      	orrs	r3, r1
    3ef8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    3efa:	2000      	movs	r0, #0
    3efc:	e03d      	b.n	3f7a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3efe:	4a20      	ldr	r2, [pc, #128]	; (3f80 <system_clock_source_enable+0xa0>)
    3f00:	6993      	ldr	r3, [r2, #24]
    3f02:	2102      	movs	r1, #2
    3f04:	430b      	orrs	r3, r1
    3f06:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    3f08:	2000      	movs	r0, #0
		break;
    3f0a:	e036      	b.n	3f7a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3f0c:	4a1c      	ldr	r2, [pc, #112]	; (3f80 <system_clock_source_enable+0xa0>)
    3f0e:	8a13      	ldrh	r3, [r2, #16]
    3f10:	2102      	movs	r1, #2
    3f12:	430b      	orrs	r3, r1
    3f14:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    3f16:	2000      	movs	r0, #0
		break;
    3f18:	e02f      	b.n	3f7a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3f1a:	4a19      	ldr	r2, [pc, #100]	; (3f80 <system_clock_source_enable+0xa0>)
    3f1c:	8a93      	ldrh	r3, [r2, #20]
    3f1e:	2102      	movs	r1, #2
    3f20:	430b      	orrs	r3, r1
    3f22:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    3f24:	2000      	movs	r0, #0
		break;
    3f26:	e028      	b.n	3f7a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3f28:	4916      	ldr	r1, [pc, #88]	; (3f84 <system_clock_source_enable+0xa4>)
    3f2a:	680b      	ldr	r3, [r1, #0]
    3f2c:	2202      	movs	r2, #2
    3f2e:	4313      	orrs	r3, r2
    3f30:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3f32:	4b13      	ldr	r3, [pc, #76]	; (3f80 <system_clock_source_enable+0xa0>)
    3f34:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3f36:	0019      	movs	r1, r3
    3f38:	320e      	adds	r2, #14
    3f3a:	68cb      	ldr	r3, [r1, #12]
    3f3c:	421a      	tst	r2, r3
    3f3e:	d0fc      	beq.n	3f3a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3f40:	4a10      	ldr	r2, [pc, #64]	; (3f84 <system_clock_source_enable+0xa4>)
    3f42:	6891      	ldr	r1, [r2, #8]
    3f44:	4b0e      	ldr	r3, [pc, #56]	; (3f80 <system_clock_source_enable+0xa0>)
    3f46:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3f48:	6852      	ldr	r2, [r2, #4]
    3f4a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3f4c:	2200      	movs	r2, #0
    3f4e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3f50:	0019      	movs	r1, r3
    3f52:	3210      	adds	r2, #16
    3f54:	68cb      	ldr	r3, [r1, #12]
    3f56:	421a      	tst	r2, r3
    3f58:	d0fc      	beq.n	3f54 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3f5a:	4b0a      	ldr	r3, [pc, #40]	; (3f84 <system_clock_source_enable+0xa4>)
    3f5c:	681b      	ldr	r3, [r3, #0]
    3f5e:	b29b      	uxth	r3, r3
    3f60:	4a07      	ldr	r2, [pc, #28]	; (3f80 <system_clock_source_enable+0xa0>)
    3f62:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3f64:	2000      	movs	r0, #0
    3f66:	e008      	b.n	3f7a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3f68:	4905      	ldr	r1, [pc, #20]	; (3f80 <system_clock_source_enable+0xa0>)
    3f6a:	2244      	movs	r2, #68	; 0x44
    3f6c:	5c8b      	ldrb	r3, [r1, r2]
    3f6e:	2002      	movs	r0, #2
    3f70:	4303      	orrs	r3, r0
    3f72:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3f74:	2000      	movs	r0, #0
		break;
    3f76:	e000      	b.n	3f7a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3f78:	2000      	movs	r0, #0
}
    3f7a:	4770      	bx	lr
    3f7c:	0000e0a8 	.word	0x0000e0a8
    3f80:	40000800 	.word	0x40000800
    3f84:	20000b44 	.word	0x20000b44
	...

00003f90 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3f90:	b530      	push	{r4, r5, lr}
    3f92:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3f94:	22c2      	movs	r2, #194	; 0xc2
    3f96:	00d2      	lsls	r2, r2, #3
    3f98:	4b41      	ldr	r3, [pc, #260]	; (40a0 <system_clock_init+0x110>)
    3f9a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3f9c:	4a41      	ldr	r2, [pc, #260]	; (40a4 <system_clock_init+0x114>)
    3f9e:	6853      	ldr	r3, [r2, #4]
    3fa0:	211e      	movs	r1, #30
    3fa2:	438b      	bics	r3, r1
    3fa4:	391a      	subs	r1, #26
    3fa6:	430b      	orrs	r3, r1
    3fa8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    3faa:	2201      	movs	r2, #1
    3fac:	ab01      	add	r3, sp, #4
    3fae:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3fb0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3fb2:	b2e0      	uxtb	r0, r4
    3fb4:	a901      	add	r1, sp, #4
    3fb6:	f000 f993 	bl	42e0 <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3fba:	3401      	adds	r4, #1
    3fbc:	2c25      	cmp	r4, #37	; 0x25
    3fbe:	d1f8      	bne.n	3fb2 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    3fc0:	a80a      	add	r0, sp, #40	; 0x28
    3fc2:	2300      	movs	r3, #0
    3fc4:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    3fc6:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    3fc8:	2280      	movs	r2, #128	; 0x80
    3fca:	0212      	lsls	r2, r2, #8
    3fcc:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    3fce:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    3fd0:	2201      	movs	r2, #1
    3fd2:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    3fd4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    3fd6:	2106      	movs	r1, #6
    3fd8:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    3fda:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    3fdc:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    3fde:	f7ff fedf 	bl	3da0 <system_clock_source_xosc32k_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3fe2:	2005      	movs	r0, #5
    3fe4:	f7ff ff7c 	bl	3ee0 <system_clock_source_enable>
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3fe8:	492d      	ldr	r1, [pc, #180]	; (40a0 <system_clock_init+0x110>)
    3fea:	2202      	movs	r2, #2
    3fec:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    3fee:	421a      	tst	r2, r3
    3ff0:	d0fc      	beq.n	3fec <system_clock_init+0x5c>
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    3ff2:	ab05      	add	r3, sp, #20
    3ff4:	2100      	movs	r1, #0
    3ff6:	7019      	strb	r1, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3ff8:	2200      	movs	r2, #0
    3ffa:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    3ffc:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3ffe:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4000:	71da      	strb	r2, [r3, #7]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    4002:	3106      	adds	r1, #6
    4004:	8219      	strh	r1, [r3, #16]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    4006:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4008:	4b27      	ldr	r3, [pc, #156]	; (40a8 <system_clock_init+0x118>)
    400a:	681b      	ldr	r3, [r3, #0]
    400c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    400e:	2b3f      	cmp	r3, #63	; 0x3f
    4010:	d044      	beq.n	409c <system_clock_init+0x10c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    4012:	a805      	add	r0, sp, #20
    4014:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
    4016:	2380      	movs	r3, #128	; 0x80
    4018:	009b      	lsls	r3, r3, #2
    401a:	8143      	strh	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    401c:	3bfe      	subs	r3, #254	; 0xfe
    401e:	3bff      	subs	r3, #255	; 0xff
    4020:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    4022:	331c      	adds	r3, #28
    4024:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    4026:	f7ff ff1b 	bl	3e60 <system_clock_source_dfll_set_config>
	config->run_in_standby  = false;
    402a:	a804      	add	r0, sp, #16
    402c:	2400      	movs	r4, #0
    402e:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    4030:	2501      	movs	r5, #1
    4032:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4034:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4036:	f7ff fe93 	bl	3d60 <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    403a:	2006      	movs	r0, #6
    403c:	f7ff ff50 	bl	3ee0 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4040:	f000 f836 	bl	40b0 <system_gclk_init>
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    4044:	a901      	add	r1, sp, #4
    4046:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    4048:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    404a:	2305      	movs	r3, #5
    404c:	700b      	strb	r3, [r1, #0]
    404e:	331b      	adds	r3, #27
    4050:	604b      	str	r3, [r1, #4]
    4052:	720d      	strb	r5, [r1, #8]
    4054:	2002      	movs	r0, #2
    4056:	f000 f843 	bl	40e0 <system_gclk_gen_set_config>
    405a:	2002      	movs	r0, #2
    405c:	f000 f898 	bl	4190 <system_gclk_gen_enable>
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4060:	2007      	movs	r0, #7
    4062:	f7ff ff3d 	bl	3ee0 <system_clock_source_enable>
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4066:	490e      	ldr	r1, [pc, #56]	; (40a0 <system_clock_init+0x110>)
    4068:	2210      	movs	r2, #16
    406a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    406c:	421a      	tst	r2, r3
    406e:	d0fc      	beq.n	406a <system_clock_init+0xda>
	PM->CPUSEL.reg = (uint32_t)divider;
    4070:	4a0e      	ldr	r2, [pc, #56]	; (40ac <system_clock_init+0x11c>)
    4072:	2300      	movs	r3, #0
    4074:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    4076:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    4078:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    407a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    407c:	a901      	add	r1, sp, #4
    407e:	2201      	movs	r2, #1
    4080:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    4082:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    4084:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    4086:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4088:	3307      	adds	r3, #7
    408a:	700b      	strb	r3, [r1, #0]
    408c:	2000      	movs	r0, #0
    408e:	f000 f827 	bl	40e0 <system_gclk_gen_set_config>
    4092:	2000      	movs	r0, #0
    4094:	f000 f87c 	bl	4190 <system_gclk_gen_enable>
#endif
}
    4098:	b00f      	add	sp, #60	; 0x3c
    409a:	bd30      	pop	{r4, r5, pc}
		coarse = 0x1f;
    409c:	3b20      	subs	r3, #32
    409e:	e7b8      	b.n	4012 <system_clock_init+0x82>
    40a0:	40000800 	.word	0x40000800
    40a4:	41004000 	.word	0x41004000
    40a8:	00806024 	.word	0x00806024
    40ac:	40000400 	.word	0x40000400

000040b0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    40b0:	4a06      	ldr	r2, [pc, #24]	; (40cc <system_gclk_init+0x1c>)
    40b2:	6993      	ldr	r3, [r2, #24]
    40b4:	2108      	movs	r1, #8
    40b6:	430b      	orrs	r3, r1
    40b8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    40ba:	2201      	movs	r2, #1
    40bc:	4b04      	ldr	r3, [pc, #16]	; (40d0 <system_gclk_init+0x20>)
    40be:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    40c0:	0019      	movs	r1, r3
    40c2:	780b      	ldrb	r3, [r1, #0]
    40c4:	4213      	tst	r3, r2
    40c6:	d1fc      	bne.n	40c2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    40c8:	4770      	bx	lr
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	40000400 	.word	0x40000400
    40d0:	40000c00 	.word	0x40000c00
	...

000040e0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    40e0:	b570      	push	{r4, r5, r6, lr}
    40e2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    40e4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    40e6:	780d      	ldrb	r5, [r1, #0]
    40e8:	022d      	lsls	r5, r5, #8
    40ea:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    40ec:	784b      	ldrb	r3, [r1, #1]
    40ee:	2b00      	cmp	r3, #0
    40f0:	d002      	beq.n	40f8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    40f2:	2380      	movs	r3, #128	; 0x80
    40f4:	02db      	lsls	r3, r3, #11
    40f6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    40f8:	7a4b      	ldrb	r3, [r1, #9]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d002      	beq.n	4104 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    40fe:	2380      	movs	r3, #128	; 0x80
    4100:	031b      	lsls	r3, r3, #12
    4102:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4104:	6848      	ldr	r0, [r1, #4]
    4106:	2801      	cmp	r0, #1
    4108:	d910      	bls.n	412c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    410a:	1e43      	subs	r3, r0, #1
    410c:	4218      	tst	r0, r3
    410e:	d134      	bne.n	417a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4110:	2802      	cmp	r0, #2
    4112:	d930      	bls.n	4176 <system_gclk_gen_set_config+0x96>
    4114:	2302      	movs	r3, #2
    4116:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4118:	3201      	adds	r2, #1
						mask <<= 1) {
    411a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    411c:	4298      	cmp	r0, r3
    411e:	d8fb      	bhi.n	4118 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4120:	0212      	lsls	r2, r2, #8
    4122:	4332      	orrs	r2, r6
    4124:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4126:	2380      	movs	r3, #128	; 0x80
    4128:	035b      	lsls	r3, r3, #13
    412a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    412c:	7a0b      	ldrb	r3, [r1, #8]
    412e:	2b00      	cmp	r3, #0
    4130:	d002      	beq.n	4138 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4132:	2380      	movs	r3, #128	; 0x80
    4134:	039b      	lsls	r3, r3, #14
    4136:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4138:	4a13      	ldr	r2, [pc, #76]	; (4188 <system_gclk_gen_set_config+0xa8>)
    413a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    413c:	b25b      	sxtb	r3, r3
    413e:	2b00      	cmp	r3, #0
    4140:	dbfb      	blt.n	413a <system_gclk_gen_set_config+0x5a>
 */

static inline void system_interrupt_enter_critical_section(void)
{
	//port_pin_set_output_level(PIN_PA17, true);
	cpu_irq_enter_critical();
    4142:	f000 fa15 	bl	4570 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4146:	4b11      	ldr	r3, [pc, #68]	; (418c <system_gclk_gen_set_config+0xac>)
    4148:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    414a:	4a0f      	ldr	r2, [pc, #60]	; (4188 <system_gclk_gen_set_config+0xa8>)
    414c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    414e:	b25b      	sxtb	r3, r3
    4150:	2b00      	cmp	r3, #0
    4152:	dbfb      	blt.n	414c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4154:	4b0c      	ldr	r3, [pc, #48]	; (4188 <system_gclk_gen_set_config+0xa8>)
    4156:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4158:	001a      	movs	r2, r3
    415a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    415c:	b25b      	sxtb	r3, r3
    415e:	2b00      	cmp	r3, #0
    4160:	dbfb      	blt.n	415a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4162:	4a09      	ldr	r2, [pc, #36]	; (4188 <system_gclk_gen_set_config+0xa8>)
    4164:	6853      	ldr	r3, [r2, #4]
    4166:	2180      	movs	r1, #128	; 0x80
    4168:	0249      	lsls	r1, r1, #9
    416a:	400b      	ands	r3, r1
    416c:	431d      	orrs	r5, r3
    416e:	6055      	str	r5, [r2, #4]
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	//port_pin_set_output_level(PIN_PA17, false);
	cpu_irq_leave_critical();
    4170:	f000 fa1e 	bl	45b0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    4174:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    4176:	2200      	movs	r2, #0
    4178:	e7d2      	b.n	4120 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    417a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    417c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    417e:	2380      	movs	r3, #128	; 0x80
    4180:	029b      	lsls	r3, r3, #10
    4182:	431d      	orrs	r5, r3
    4184:	e7d2      	b.n	412c <system_gclk_gen_set_config+0x4c>
    4186:	46c0      	nop			; (mov r8, r8)
    4188:	40000c00 	.word	0x40000c00
    418c:	40000c08 	.word	0x40000c08

00004190 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4190:	b510      	push	{r4, lr}
    4192:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4194:	4a0b      	ldr	r2, [pc, #44]	; (41c4 <system_gclk_gen_enable+0x34>)
    4196:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4198:	b25b      	sxtb	r3, r3
    419a:	2b00      	cmp	r3, #0
    419c:	dbfb      	blt.n	4196 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    419e:	f000 f9e7 	bl	4570 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    41a2:	4b09      	ldr	r3, [pc, #36]	; (41c8 <system_gclk_gen_enable+0x38>)
    41a4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    41a6:	4a07      	ldr	r2, [pc, #28]	; (41c4 <system_gclk_gen_enable+0x34>)
    41a8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    41aa:	b25b      	sxtb	r3, r3
    41ac:	2b00      	cmp	r3, #0
    41ae:	dbfb      	blt.n	41a8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    41b0:	4a04      	ldr	r2, [pc, #16]	; (41c4 <system_gclk_gen_enable+0x34>)
    41b2:	6851      	ldr	r1, [r2, #4]
    41b4:	2380      	movs	r3, #128	; 0x80
    41b6:	025b      	lsls	r3, r3, #9
    41b8:	430b      	orrs	r3, r1
    41ba:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    41bc:	f000 f9f8 	bl	45b0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    41c0:	bd10      	pop	{r4, pc}
    41c2:	46c0      	nop			; (mov r8, r8)
    41c4:	40000c00 	.word	0x40000c00
    41c8:	40000c04 	.word	0x40000c04
    41cc:	00000000 	.word	0x00000000

000041d0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    41d0:	b570      	push	{r4, r5, r6, lr}
    41d2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    41d4:	4a1a      	ldr	r2, [pc, #104]	; (4240 <system_gclk_gen_get_hz+0x70>)
    41d6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    41d8:	b25b      	sxtb	r3, r3
    41da:	2b00      	cmp	r3, #0
    41dc:	dbfb      	blt.n	41d6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    41de:	f000 f9c7 	bl	4570 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    41e2:	4b18      	ldr	r3, [pc, #96]	; (4244 <system_gclk_gen_get_hz+0x74>)
    41e4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    41e6:	4a16      	ldr	r2, [pc, #88]	; (4240 <system_gclk_gen_get_hz+0x70>)
    41e8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    41ea:	b25b      	sxtb	r3, r3
    41ec:	2b00      	cmp	r3, #0
    41ee:	dbfb      	blt.n	41e8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    41f0:	4e13      	ldr	r6, [pc, #76]	; (4240 <system_gclk_gen_get_hz+0x70>)
    41f2:	6870      	ldr	r0, [r6, #4]
    41f4:	04c0      	lsls	r0, r0, #19
    41f6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    41f8:	f7ff fd6a 	bl	3cd0 <system_clock_source_get_hz>
    41fc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    41fe:	4b11      	ldr	r3, [pc, #68]	; (4244 <system_gclk_gen_get_hz+0x74>)
    4200:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4202:	6876      	ldr	r6, [r6, #4]
    4204:	02f6      	lsls	r6, r6, #11
    4206:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4208:	4b0f      	ldr	r3, [pc, #60]	; (4248 <system_gclk_gen_get_hz+0x78>)
    420a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    420c:	4a0c      	ldr	r2, [pc, #48]	; (4240 <system_gclk_gen_get_hz+0x70>)
    420e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4210:	b25b      	sxtb	r3, r3
    4212:	2b00      	cmp	r3, #0
    4214:	dbfb      	blt.n	420e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4216:	4b0a      	ldr	r3, [pc, #40]	; (4240 <system_gclk_gen_get_hz+0x70>)
    4218:	689c      	ldr	r4, [r3, #8]
    421a:	0224      	lsls	r4, r4, #8
    421c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    421e:	f000 f9c7 	bl	45b0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4222:	2e00      	cmp	r6, #0
    4224:	d107      	bne.n	4236 <system_gclk_gen_get_hz+0x66>
    4226:	2c01      	cmp	r4, #1
    4228:	d907      	bls.n	423a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    422a:	0021      	movs	r1, r4
    422c:	0028      	movs	r0, r5
    422e:	f7fb ffd1 	bl	1d4 <__udivsi3>
    4232:	0005      	movs	r5, r0
    4234:	e001      	b.n	423a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4236:	3401      	adds	r4, #1
    4238:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    423a:	0028      	movs	r0, r5
    423c:	bd70      	pop	{r4, r5, r6, pc}
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	40000c00 	.word	0x40000c00
    4244:	40000c04 	.word	0x40000c04
    4248:	40000c08 	.word	0x40000c08
    424c:	00000000 	.word	0x00000000

00004250 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4250:	b510      	push	{r4, lr}
    4252:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4254:	f000 f98c 	bl	4570 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4258:	4b05      	ldr	r3, [pc, #20]	; (4270 <system_gclk_chan_enable+0x20>)
    425a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    425c:	4a05      	ldr	r2, [pc, #20]	; (4274 <system_gclk_chan_enable+0x24>)
    425e:	8853      	ldrh	r3, [r2, #2]
    4260:	2180      	movs	r1, #128	; 0x80
    4262:	01c9      	lsls	r1, r1, #7
    4264:	430b      	orrs	r3, r1
    4266:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    4268:	f000 f9a2 	bl	45b0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    426c:	bd10      	pop	{r4, pc}
    426e:	46c0      	nop			; (mov r8, r8)
    4270:	40000c02 	.word	0x40000c02
    4274:	40000c00 	.word	0x40000c00
	...

00004280 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4280:	b510      	push	{r4, lr}
    4282:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4284:	f000 f974 	bl	4570 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4288:	4b0e      	ldr	r3, [pc, #56]	; (42c4 <system_gclk_chan_disable+0x44>)
    428a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    428c:	4a0e      	ldr	r2, [pc, #56]	; (42c8 <system_gclk_chan_disable+0x48>)
    428e:	8853      	ldrh	r3, [r2, #2]
    4290:	051b      	lsls	r3, r3, #20
    4292:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4294:	8853      	ldrh	r3, [r2, #2]
    4296:	490d      	ldr	r1, [pc, #52]	; (42cc <system_gclk_chan_disable+0x4c>)
    4298:	400b      	ands	r3, r1
    429a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    429c:	8853      	ldrh	r3, [r2, #2]
    429e:	490c      	ldr	r1, [pc, #48]	; (42d0 <system_gclk_chan_disable+0x50>)
    42a0:	400b      	ands	r3, r1
    42a2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    42a4:	0011      	movs	r1, r2
    42a6:	2280      	movs	r2, #128	; 0x80
    42a8:	01d2      	lsls	r2, r2, #7
    42aa:	884b      	ldrh	r3, [r1, #2]
    42ac:	4213      	tst	r3, r2
    42ae:	d1fc      	bne.n	42aa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    42b0:	4905      	ldr	r1, [pc, #20]	; (42c8 <system_gclk_chan_disable+0x48>)
    42b2:	884a      	ldrh	r2, [r1, #2]
    42b4:	0203      	lsls	r3, r0, #8
    42b6:	4805      	ldr	r0, [pc, #20]	; (42cc <system_gclk_chan_disable+0x4c>)
    42b8:	4002      	ands	r2, r0
    42ba:	4313      	orrs	r3, r2
    42bc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    42be:	f000 f977 	bl	45b0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    42c2:	bd10      	pop	{r4, pc}
    42c4:	40000c02 	.word	0x40000c02
    42c8:	40000c00 	.word	0x40000c00
    42cc:	fffff0ff 	.word	0xfffff0ff
    42d0:	ffffbfff 	.word	0xffffbfff
	...

000042e0 <system_gclk_chan_set_config>:
{
    42e0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    42e2:	780c      	ldrb	r4, [r1, #0]
    42e4:	0224      	lsls	r4, r4, #8
    42e6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    42e8:	f7ff ffca 	bl	4280 <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    42ec:	b2a4      	uxth	r4, r4
    42ee:	4b01      	ldr	r3, [pc, #4]	; (42f4 <system_gclk_chan_set_config+0x14>)
    42f0:	805c      	strh	r4, [r3, #2]
}
    42f2:	bd10      	pop	{r4, pc}
    42f4:	40000c00 	.word	0x40000c00
	...

00004300 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4300:	b510      	push	{r4, lr}
    4302:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4304:	f000 f934 	bl	4570 <cpu_irq_enter_critical>
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4308:	4b05      	ldr	r3, [pc, #20]	; (4320 <system_gclk_chan_get_hz+0x20>)
    430a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    430c:	4b05      	ldr	r3, [pc, #20]	; (4324 <system_gclk_chan_get_hz+0x24>)
    430e:	885c      	ldrh	r4, [r3, #2]
    4310:	0524      	lsls	r4, r4, #20
    4312:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    4314:	f000 f94c 	bl	45b0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4318:	0020      	movs	r0, r4
    431a:	f7ff ff59 	bl	41d0 <system_gclk_gen_get_hz>
}
    431e:	bd10      	pop	{r4, pc}
    4320:	40000c02 	.word	0x40000c02
    4324:	40000c00 	.word	0x40000c00
	...

00004330 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4330:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4332:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    4334:	b25b      	sxtb	r3, r3
    4336:	2b00      	cmp	r3, #0
    4338:	dbfb      	blt.n	4332 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    433a:	8813      	ldrh	r3, [r2, #0]
    433c:	2102      	movs	r1, #2
    433e:	430b      	orrs	r3, r1
    4340:	8013      	strh	r3, [r2, #0]
}
    4342:	4770      	bx	lr
	...

00004350 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4350:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4352:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    4354:	b25b      	sxtb	r3, r3
    4356:	2b00      	cmp	r3, #0
    4358:	dbfb      	blt.n	4352 <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    435a:	23c1      	movs	r3, #193	; 0xc1
    435c:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    435e:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    4360:	8813      	ldrh	r3, [r2, #0]
    4362:	2102      	movs	r1, #2
    4364:	438b      	bics	r3, r1
    4366:	8013      	strh	r3, [r2, #0]
}
    4368:	4770      	bx	lr
    436a:	46c0      	nop			; (mov r8, r8)
    436c:	0000      	movs	r0, r0
	...

00004370 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    4370:	b570      	push	{r4, r5, r6, lr}
    4372:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4374:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    4376:	f7ff ffeb 	bl	4350 <rtc_calendar_disable>
	Rtc *const rtc_module = module->hw;
    437a:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    437c:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    437e:	b25b      	sxtb	r3, r3
    4380:	2b00      	cmp	r3, #0
    4382:	dbfb      	blt.n	437c <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    4384:	882b      	ldrh	r3, [r5, #0]
    4386:	2201      	movs	r2, #1
    4388:	4313      	orrs	r3, r2
    438a:	802b      	strh	r3, [r5, #0]
}
    438c:	bd70      	pop	{r4, r5, r6, pc}
    438e:	46c0      	nop			; (mov r8, r8)

00004390 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    4390:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    4392:	88cb      	ldrh	r3, [r1, #6]
    4394:	88c2      	ldrh	r2, [r0, #6]
    4396:	1a9a      	subs	r2, r3, r2
    4398:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    439a:	794b      	ldrb	r3, [r1, #5]
    439c:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    439e:	790c      	ldrb	r4, [r1, #4]
    43a0:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    43a2:	4323      	orrs	r3, r4
    43a4:	788c      	ldrb	r4, [r1, #2]
    43a6:	0324      	lsls	r4, r4, #12
    43a8:	4323      	orrs	r3, r4
    43aa:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    43ac:	7902      	ldrb	r2, [r0, #4]
    43ae:	2a00      	cmp	r2, #0
    43b0:	d105      	bne.n	43be <rtc_calendar_time_to_register_value+0x2e>
    43b2:	78ca      	ldrb	r2, [r1, #3]
    43b4:	2a00      	cmp	r2, #0
    43b6:	d002      	beq.n	43be <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    43b8:	2280      	movs	r2, #128	; 0x80
    43ba:	0252      	lsls	r2, r2, #9
    43bc:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    43be:	7848      	ldrb	r0, [r1, #1]
    43c0:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    43c2:	780a      	ldrb	r2, [r1, #0]
    43c4:	4310      	orrs	r0, r2
    43c6:	4318      	orrs	r0, r3

	return register_value;
}
    43c8:	bd10      	pop	{r4, pc}
    43ca:	46c0      	nop			; (mov r8, r8)
    43cc:	0000      	movs	r0, r0
	...

000043d0 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    43d0:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    43d2:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    43d4:	88c4      	ldrh	r4, [r0, #6]
    43d6:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    43d8:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    43da:	018b      	lsls	r3, r1, #6
    43dc:	0f1b      	lsrs	r3, r3, #28
    43de:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    43e0:	028b      	lsls	r3, r1, #10
    43e2:	0edb      	lsrs	r3, r3, #27
    43e4:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    43e6:	7903      	ldrb	r3, [r0, #4]
    43e8:	2b00      	cmp	r3, #0
    43ea:	d10c      	bne.n	4406 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    43ec:	040b      	lsls	r3, r1, #16
    43ee:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    43f0:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    43f2:	03cb      	lsls	r3, r1, #15
    43f4:	0fdb      	lsrs	r3, r3, #31
    43f6:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    43f8:	0988      	lsrs	r0, r1, #6
    43fa:	233f      	movs	r3, #63	; 0x3f
    43fc:	4018      	ands	r0, r3
    43fe:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    4400:	4019      	ands	r1, r3
    4402:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    4404:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    4406:	03cb      	lsls	r3, r1, #15
    4408:	0edb      	lsrs	r3, r3, #27
    440a:	7093      	strb	r3, [r2, #2]
    440c:	e7f4      	b.n	43f8 <rtc_calendar_register_value_to_time+0x28>
    440e:	46c0      	nop			; (mov r8, r8)

00004410 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    4410:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4412:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
    4414:	f7ff ffbc 	bl	4390 <rtc_calendar_time_to_register_value>
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4418:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
    441a:	b25b      	sxtb	r3, r3
    441c:	2b00      	cmp	r3, #0
    441e:	dbfb      	blt.n	4418 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    4420:	6120      	str	r0, [r4, #16]
}
    4422:	bd10      	pop	{r4, pc}
	...

00004430 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    4430:	b510      	push	{r4, lr}
    4432:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4434:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    4436:	7941      	ldrb	r1, [r0, #5]
    4438:	2900      	cmp	r1, #0
    443a:	d006      	beq.n	444a <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    443c:	8859      	ldrh	r1, [r3, #2]
    443e:	0449      	lsls	r1, r1, #17
    4440:	d50b      	bpl.n	445a <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    4442:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    4444:	f7ff ffc4 	bl	43d0 <rtc_calendar_register_value_to_time>
}
    4448:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    444a:	4909      	ldr	r1, [pc, #36]	; (4470 <rtc_calendar_get_time+0x40>)
    444c:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    444e:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4450:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    4452:	b249      	sxtb	r1, r1
    4454:	2900      	cmp	r1, #0
    4456:	dbfb      	blt.n	4450 <rtc_calendar_get_time+0x20>
    4458:	e7f3      	b.n	4442 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    445a:	8859      	ldrh	r1, [r3, #2]
    445c:	24c0      	movs	r4, #192	; 0xc0
    445e:	0224      	lsls	r4, r4, #8
    4460:	4321      	orrs	r1, r4
    4462:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    4464:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4466:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    4468:	b249      	sxtb	r1, r1
    446a:	2900      	cmp	r1, #0
    446c:	dbfb      	blt.n	4466 <rtc_calendar_get_time+0x36>
    446e:	e7e8      	b.n	4442 <rtc_calendar_get_time+0x12>
    4470:	ffff8000 	.word	0xffff8000
	...

00004480 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    4480:	b570      	push	{r4, r5, r6, lr}
    4482:	000d      	movs	r5, r1
    4484:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    4486:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    4488:	2a01      	cmp	r2, #1
    448a:	d901      	bls.n	4490 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    448c:	0018      	movs	r0, r3
    448e:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    4490:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    4492:	f7ff ff7d 	bl	4390 <rtc_calendar_time_to_register_value>
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4496:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    4498:	b25b      	sxtb	r3, r3
    449a:	2b00      	cmp	r3, #0
    449c:	dbfb      	blt.n	4496 <rtc_calendar_set_alarm+0x16>
    449e:	00e4      	lsls	r4, r4, #3
    44a0:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    44a2:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    44a4:	7a2b      	ldrb	r3, [r5, #8]
    44a6:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    44a8:	2300      	movs	r3, #0
    44aa:	e7ef      	b.n	448c <rtc_calendar_set_alarm+0xc>
    44ac:	0000      	movs	r0, r0
	...

000044b0 <rtc_calendar_init>:
{
    44b0:	b530      	push	{r4, r5, lr}
    44b2:	b083      	sub	sp, #12
    44b4:	0005      	movs	r5, r0
    44b6:	0014      	movs	r4, r2
	module->hw = hw;
    44b8:	6001      	str	r1, [r0, #0]
    44ba:	4a1c      	ldr	r2, [pc, #112]	; (452c <rtc_calendar_init+0x7c>)
    44bc:	6993      	ldr	r3, [r2, #24]
    44be:	2120      	movs	r1, #32
    44c0:	430b      	orrs	r3, r1
    44c2:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    44c4:	a901      	add	r1, sp, #4
    44c6:	2302      	movs	r3, #2
    44c8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    44ca:	2004      	movs	r0, #4
    44cc:	f7ff ff08 	bl	42e0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(RTC_GCLK_ID);
    44d0:	2004      	movs	r0, #4
    44d2:	f7ff febd 	bl	4250 <system_gclk_chan_enable>
	rtc_calendar_reset(module);
    44d6:	0028      	movs	r0, r5
    44d8:	f7ff ff4a 	bl	4370 <rtc_calendar_reset>
	module->clock_24h           = config->clock_24h;
    44dc:	7923      	ldrb	r3, [r4, #4]
    44de:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    44e0:	78e3      	ldrb	r3, [r4, #3]
    44e2:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    44e4:	88e3      	ldrh	r3, [r4, #6]
    44e6:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    44e8:	4b11      	ldr	r3, [pc, #68]	; (4530 <rtc_calendar_init+0x80>)
    44ea:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    44ec:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    44ee:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    44f0:	7921      	ldrb	r1, [r4, #4]
    44f2:	2900      	cmp	r1, #0
    44f4:	d017      	beq.n	4526 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    44f6:	2108      	movs	r1, #8
    44f8:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    44fa:	78a1      	ldrb	r1, [r4, #2]
    44fc:	2900      	cmp	r1, #0
    44fe:	d001      	beq.n	4504 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    4500:	2180      	movs	r1, #128	; 0x80
    4502:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    4504:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    4506:	78e3      	ldrb	r3, [r4, #3]
    4508:	2b00      	cmp	r3, #0
    450a:	d004      	beq.n	4516 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    450c:	8853      	ldrh	r3, [r2, #2]
    450e:	2180      	movs	r1, #128	; 0x80
    4510:	01c9      	lsls	r1, r1, #7
    4512:	430b      	orrs	r3, r1
    4514:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    4516:	0021      	movs	r1, r4
    4518:	3108      	adds	r1, #8
    451a:	2200      	movs	r2, #0
    451c:	0028      	movs	r0, r5
    451e:	f7ff ffaf 	bl	4480 <rtc_calendar_set_alarm>
}
    4522:	b003      	add	sp, #12
    4524:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    4526:	2148      	movs	r1, #72	; 0x48
    4528:	430b      	orrs	r3, r1
    452a:	e7e6      	b.n	44fa <rtc_calendar_init+0x4a>
    452c:	40000400 	.word	0x40000400
    4530:	20000b5c 	.word	0x20000b5c
	...

00004540 <rtc_calendar_frequency_correction>:
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check if valid argument. */
	if (abs(value) > 0x7F) {
    4540:	17ca      	asrs	r2, r1, #31
    4542:	188b      	adds	r3, r1, r2
    4544:	4053      	eors	r3, r2
		/* Value bigger than allowed, return invalid argument. */
		return STATUS_ERR_INVALID_ARG;
    4546:	2217      	movs	r2, #23
	if (abs(value) > 0x7F) {
    4548:	2b7f      	cmp	r3, #127	; 0x7f
    454a:	dd01      	ble.n	4550 <rtc_calendar_frequency_correction+0x10>

	/* Set value. */
	rtc_module->MODE2.FREQCORR.reg = new_correction_value;

	return STATUS_OK;
}
    454c:	0010      	movs	r0, r2
    454e:	4770      	bx	lr
	new_correction_value = abs(value);
    4550:	001a      	movs	r2, r3
	if (value < 0) {
    4552:	2900      	cmp	r1, #0
    4554:	db08      	blt.n	4568 <rtc_calendar_frequency_correction+0x28>
	Rtc *const rtc_module = module->hw;
    4556:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4558:	7a8b      	ldrb	r3, [r1, #10]
	while (rtc_calendar_is_syncing(module)) {
    455a:	b25b      	sxtb	r3, r3
    455c:	2b00      	cmp	r3, #0
    455e:	dbfb      	blt.n	4558 <rtc_calendar_frequency_correction+0x18>
	rtc_module->MODE2.FREQCORR.reg = new_correction_value;
    4560:	b2d2      	uxtb	r2, r2
    4562:	730a      	strb	r2, [r1, #12]
	return STATUS_OK;
    4564:	2200      	movs	r2, #0
    4566:	e7f1      	b.n	454c <rtc_calendar_frequency_correction+0xc>
		new_correction_value |= RTC_FREQCORR_SIGN;
    4568:	2280      	movs	r2, #128	; 0x80
    456a:	431a      	orrs	r2, r3
    456c:	e7f3      	b.n	4556 <rtc_calendar_frequency_correction+0x16>
    456e:	46c0      	nop			; (mov r8, r8)

00004570 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4570:	4b0c      	ldr	r3, [pc, #48]	; (45a4 <cpu_irq_enter_critical+0x34>)
    4572:	681b      	ldr	r3, [r3, #0]
    4574:	2b00      	cmp	r3, #0
    4576:	d106      	bne.n	4586 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4578:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    457c:	2b00      	cmp	r3, #0
    457e:	d007      	beq.n	4590 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4580:	2200      	movs	r2, #0
    4582:	4b09      	ldr	r3, [pc, #36]	; (45a8 <cpu_irq_enter_critical+0x38>)
    4584:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4586:	4a07      	ldr	r2, [pc, #28]	; (45a4 <cpu_irq_enter_critical+0x34>)
    4588:	6813      	ldr	r3, [r2, #0]
    458a:	3301      	adds	r3, #1
    458c:	6013      	str	r3, [r2, #0]
}
    458e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4590:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4592:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4596:	2200      	movs	r2, #0
    4598:	4b04      	ldr	r3, [pc, #16]	; (45ac <cpu_irq_enter_critical+0x3c>)
    459a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    459c:	3201      	adds	r2, #1
    459e:	4b02      	ldr	r3, [pc, #8]	; (45a8 <cpu_irq_enter_critical+0x38>)
    45a0:	701a      	strb	r2, [r3, #0]
    45a2:	e7f0      	b.n	4586 <cpu_irq_enter_critical+0x16>
    45a4:	20000b60 	.word	0x20000b60
    45a8:	20000b64 	.word	0x20000b64
    45ac:	20000800 	.word	0x20000800

000045b0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    45b0:	4b08      	ldr	r3, [pc, #32]	; (45d4 <cpu_irq_leave_critical+0x24>)
    45b2:	681a      	ldr	r2, [r3, #0]
    45b4:	3a01      	subs	r2, #1
    45b6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    45b8:	681b      	ldr	r3, [r3, #0]
    45ba:	2b00      	cmp	r3, #0
    45bc:	d109      	bne.n	45d2 <cpu_irq_leave_critical+0x22>
    45be:	4b06      	ldr	r3, [pc, #24]	; (45d8 <cpu_irq_leave_critical+0x28>)
    45c0:	781b      	ldrb	r3, [r3, #0]
    45c2:	2b00      	cmp	r3, #0
    45c4:	d005      	beq.n	45d2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    45c6:	2201      	movs	r2, #1
    45c8:	4b04      	ldr	r3, [pc, #16]	; (45dc <cpu_irq_leave_critical+0x2c>)
    45ca:	701a      	strb	r2, [r3, #0]
    45cc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    45d0:	b662      	cpsie	i
	}
}
    45d2:	4770      	bx	lr
    45d4:	20000b60 	.word	0x20000b60
    45d8:	20000b64 	.word	0x20000b64
    45dc:	20000800 	.word	0x20000800

000045e0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    45e0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    45e2:	78d3      	ldrb	r3, [r2, #3]
    45e4:	2b00      	cmp	r3, #0
    45e6:	d135      	bne.n	4654 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    45e8:	7813      	ldrb	r3, [r2, #0]
    45ea:	2b80      	cmp	r3, #128	; 0x80
    45ec:	d029      	beq.n	4642 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    45ee:	061b      	lsls	r3, r3, #24
    45f0:	2480      	movs	r4, #128	; 0x80
    45f2:	0264      	lsls	r4, r4, #9
    45f4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    45f6:	7854      	ldrb	r4, [r2, #1]
    45f8:	2502      	movs	r5, #2
    45fa:	43ac      	bics	r4, r5
    45fc:	d106      	bne.n	460c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    45fe:	7894      	ldrb	r4, [r2, #2]
    4600:	2c00      	cmp	r4, #0
    4602:	d120      	bne.n	4646 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    4604:	2480      	movs	r4, #128	; 0x80
    4606:	02a4      	lsls	r4, r4, #10
    4608:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    460a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    460c:	7854      	ldrb	r4, [r2, #1]
    460e:	3c01      	subs	r4, #1
    4610:	2c01      	cmp	r4, #1
    4612:	d91c      	bls.n	464e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4614:	040d      	lsls	r5, r1, #16
    4616:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4618:	24a0      	movs	r4, #160	; 0xa0
    461a:	05e4      	lsls	r4, r4, #23
    461c:	432c      	orrs	r4, r5
    461e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4620:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4622:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4624:	24d0      	movs	r4, #208	; 0xd0
    4626:	0624      	lsls	r4, r4, #24
    4628:	432c      	orrs	r4, r5
    462a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    462c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    462e:	78d4      	ldrb	r4, [r2, #3]
    4630:	2c00      	cmp	r4, #0
    4632:	d122      	bne.n	467a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4634:	035b      	lsls	r3, r3, #13
    4636:	d51c      	bpl.n	4672 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4638:	7893      	ldrb	r3, [r2, #2]
    463a:	2b01      	cmp	r3, #1
    463c:	d01e      	beq.n	467c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    463e:	6141      	str	r1, [r0, #20]
    4640:	e017      	b.n	4672 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    4642:	2300      	movs	r3, #0
    4644:	e7d7      	b.n	45f6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4646:	24c0      	movs	r4, #192	; 0xc0
    4648:	02e4      	lsls	r4, r4, #11
    464a:	4323      	orrs	r3, r4
    464c:	e7dd      	b.n	460a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    464e:	4c0d      	ldr	r4, [pc, #52]	; (4684 <_system_pinmux_config+0xa4>)
    4650:	4023      	ands	r3, r4
    4652:	e7df      	b.n	4614 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    4654:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4656:	040c      	lsls	r4, r1, #16
    4658:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    465a:	23a0      	movs	r3, #160	; 0xa0
    465c:	05db      	lsls	r3, r3, #23
    465e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4660:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4662:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4664:	23d0      	movs	r3, #208	; 0xd0
    4666:	061b      	lsls	r3, r3, #24
    4668:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    466a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    466c:	78d3      	ldrb	r3, [r2, #3]
    466e:	2b00      	cmp	r3, #0
    4670:	d103      	bne.n	467a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4672:	7853      	ldrb	r3, [r2, #1]
    4674:	3b01      	subs	r3, #1
    4676:	2b01      	cmp	r3, #1
    4678:	d902      	bls.n	4680 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    467a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    467c:	6181      	str	r1, [r0, #24]
    467e:	e7f8      	b.n	4672 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    4680:	6081      	str	r1, [r0, #8]
}
    4682:	e7fa      	b.n	467a <_system_pinmux_config+0x9a>
    4684:	fffbffff 	.word	0xfffbffff
	...

00004690 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4690:	b510      	push	{r4, lr}
    4692:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    4694:	09c1      	lsrs	r1, r0, #7
		return NULL;
    4696:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4698:	2900      	cmp	r1, #0
    469a:	d104      	bne.n	46a6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    469c:	0943      	lsrs	r3, r0, #5
    469e:	01db      	lsls	r3, r3, #7
    46a0:	4905      	ldr	r1, [pc, #20]	; (46b8 <system_pinmux_pin_set_config+0x28>)
    46a2:	468c      	mov	ip, r1
    46a4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    46a6:	241f      	movs	r4, #31
    46a8:	4020      	ands	r0, r4
    46aa:	2101      	movs	r1, #1
    46ac:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    46ae:	0018      	movs	r0, r3
    46b0:	f7ff ff96 	bl	45e0 <_system_pinmux_config>
}
    46b4:	bd10      	pop	{r4, pc}
    46b6:	46c0      	nop			; (mov r8, r8)
    46b8:	41004400 	.word	0x41004400
    46bc:	00000000 	.word	0x00000000

000046c0 <_exit>:
    46c0:	be00      	bkpt	0x0000
    46c2:	e7fe      	b.n	46c2 <_exit+0x2>
	...

000046d0 <_kill>:
    46d0:	4770      	bx	lr
    46d2:	46c0      	nop			; (mov r8, r8)
	...

000046e0 <_getpid>:
    46e0:	2001      	movs	r0, #1
    46e2:	4240      	negs	r0, r0
    46e4:	4770      	bx	lr
    46e6:	46c0      	nop			; (mov r8, r8)
	...

000046f0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    46f0:	4770      	bx	lr
    46f2:	46c0      	nop			; (mov r8, r8)
	...

00004700 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4700:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4702:	f7ff fc45 	bl	3f90 <system_clock_init>

	/* Initialize board hardware */
	system_board_init();
    4706:	f7ff fff3 	bl	46f0 <_system_dummy_init>

	/* Initialize EVSYS hardware */
	_system_events_init();
    470a:	f7ff fff1 	bl	46f0 <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    470e:	f000 f9d7 	bl	4ac0 <_system_extint_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4712:	f7ff ffed 	bl	46f0 <_system_dummy_init>
}
    4716:	bd10      	pop	{r4, pc}
	...

00004720 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4720:	b500      	push	{lr}
    4722:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4724:	ab01      	add	r3, sp, #4
    4726:	2280      	movs	r2, #128	; 0x80
    4728:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    472a:	780a      	ldrb	r2, [r1, #0]
    472c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    472e:	784a      	ldrb	r2, [r1, #1]
    4730:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4732:	788a      	ldrb	r2, [r1, #2]
    4734:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4736:	0019      	movs	r1, r3
    4738:	f7ff ffaa 	bl	4690 <system_pinmux_pin_set_config>
}
    473c:	b003      	add	sp, #12
    473e:	bd00      	pop	{pc}

00004740 <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
    4740:	2300      	movs	r3, #0
    4742:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
    4744:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTION_TRANSACTION;
    4746:	2203      	movs	r2, #3
    4748:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
    474a:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
    474c:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
    474e:	4770      	bx	lr

00004750 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
    4750:	b5f0      	push	{r4, r5, r6, r7, lr}
    4752:	46c6      	mov	lr, r8
    4754:	b500      	push	{lr}
    4756:	0005      	movs	r5, r0
    4758:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
    475a:	f7ff ff09 	bl	4570 <cpu_irq_enter_critical>

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
    475e:	4b3c      	ldr	r3, [pc, #240]	; (4850 <dma_allocate+0x100>)
    4760:	781b      	ldrb	r3, [r3, #0]
    4762:	2b00      	cmp	r3, #0
    4764:	d118      	bne.n	4798 <dma_allocate+0x48>
	PM->AHBMASK.reg |= ahb_mask;
    4766:	4b3b      	ldr	r3, [pc, #236]	; (4854 <dma_allocate+0x104>)
    4768:	695a      	ldr	r2, [r3, #20]
    476a:	2120      	movs	r1, #32
    476c:	430a      	orrs	r2, r1
    476e:	615a      	str	r2, [r3, #20]
			PM->APBBMASK.reg |= mask;
    4770:	69da      	ldr	r2, [r3, #28]
    4772:	3910      	subs	r1, #16
    4774:	430a      	orrs	r2, r1
    4776:	61da      	str	r2, [r3, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    4778:	4b37      	ldr	r3, [pc, #220]	; (4858 <dma_allocate+0x108>)
    477a:	881a      	ldrh	r2, [r3, #0]
    477c:	390e      	subs	r1, #14
    477e:	438a      	bics	r2, r1
    4780:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    4782:	2201      	movs	r2, #1
    4784:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
    4786:	4a35      	ldr	r2, [pc, #212]	; (485c <dma_allocate+0x10c>)
    4788:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
    478a:	4a35      	ldr	r2, [pc, #212]	; (4860 <dma_allocate+0x110>)
    478c:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    478e:	4a35      	ldr	r2, [pc, #212]	; (4864 <dma_allocate+0x114>)
    4790:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
    4792:	4b2f      	ldr	r3, [pc, #188]	; (4850 <dma_allocate+0x100>)
    4794:	2201      	movs	r2, #1
    4796:	701a      	strb	r2, [r3, #0]
    4798:	f7ff feea 	bl	4570 <cpu_irq_enter_critical>
	tmp = _dma_inst.allocated_channels;
    479c:	4b2c      	ldr	r3, [pc, #176]	; (4850 <dma_allocate+0x100>)
    479e:	685b      	ldr	r3, [r3, #4]
		if (!(tmp & 0x00000001)) {
    47a0:	07db      	lsls	r3, r3, #31
    47a2:	d507      	bpl.n	47b4 <dma_allocate+0x64>
	cpu_irq_leave_critical();
    47a4:	f7ff ff04 	bl	45b0 <cpu_irq_leave_critical>
    47a8:	f7ff ff02 	bl	45b0 <cpu_irq_leave_critical>

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		system_interrupt_leave_critical_section();

		return STATUS_ERR_NOT_FOUND;
    47ac:	2014      	movs	r0, #20
	_dma_active_resource[resource->channel_id] = resource;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
    47ae:	bc04      	pop	{r2}
    47b0:	4690      	mov	r8, r2
    47b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_dma_inst.allocated_channels |= 1 << count;
    47b4:	4b26      	ldr	r3, [pc, #152]	; (4850 <dma_allocate+0x100>)
    47b6:	685a      	ldr	r2, [r3, #4]
    47b8:	2701      	movs	r7, #1
    47ba:	433a      	orrs	r2, r7
    47bc:	605a      	str	r2, [r3, #4]
			_dma_inst.free_channels--;
    47be:	7a1a      	ldrb	r2, [r3, #8]
    47c0:	3a01      	subs	r2, #1
    47c2:	721a      	strb	r2, [r3, #8]
    47c4:	f7ff fef4 	bl	45b0 <cpu_irq_leave_critical>
	resource->channel_id = new_channel;
    47c8:	2300      	movs	r3, #0
    47ca:	702b      	strb	r3, [r5, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    47cc:	4c22      	ldr	r4, [pc, #136]	; (4858 <dma_allocate+0x108>)
    47ce:	223f      	movs	r2, #63	; 0x3f
    47d0:	4690      	mov	r8, r2
    47d2:	54a3      	strb	r3, [r4, r2]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    47d4:	3340      	adds	r3, #64	; 0x40
    47d6:	5ce2      	ldrb	r2, [r4, r3]
    47d8:	2102      	movs	r1, #2
    47da:	438a      	bics	r2, r1
    47dc:	54e2      	strb	r2, [r4, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    47de:	54e7      	strb	r7, [r4, r3]
	cpu_irq_enter_critical();
    47e0:	f7ff fec6 	bl	4570 <cpu_irq_enter_critical>
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    47e4:	782a      	ldrb	r2, [r5, #0]
    47e6:	230f      	movs	r3, #15
    47e8:	4013      	ands	r3, r2
    47ea:	4642      	mov	r2, r8
    47ec:	54a3      	strb	r3, [r4, r2]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
    47ee:	6923      	ldr	r3, [r4, #16]
    47f0:	782a      	ldrb	r2, [r5, #0]
    47f2:	4097      	lsls	r7, r2
    47f4:	43bb      	bics	r3, r7
    47f6:	6123      	str	r3, [r4, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    47f8:	7832      	ldrb	r2, [r6, #0]
    47fa:	0152      	lsls	r2, r2, #5
    47fc:	2360      	movs	r3, #96	; 0x60
    47fe:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
    4800:	7872      	ldrb	r2, [r6, #1]
    4802:	0212      	lsls	r2, r2, #8
    4804:	21fc      	movs	r1, #252	; 0xfc
    4806:	0189      	lsls	r1, r1, #6
    4808:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    480a:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
    480c:	78b2      	ldrb	r2, [r6, #2]
    480e:	0592      	lsls	r2, r2, #22
    4810:	21c0      	movs	r1, #192	; 0xc0
    4812:	0409      	lsls	r1, r1, #16
    4814:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    4816:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
    4818:	78f1      	ldrb	r1, [r6, #3]
    481a:	2900      	cmp	r1, #0
    481c:	d004      	beq.n	4828 <dma_allocate+0xd8>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
    481e:	2207      	movs	r2, #7
    4820:	400a      	ands	r2, r1
    4822:	2108      	movs	r1, #8
    4824:	430a      	orrs	r2, r1
    4826:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
    4828:	7932      	ldrb	r2, [r6, #4]
    482a:	2a00      	cmp	r2, #0
    482c:	d001      	beq.n	4832 <dma_allocate+0xe2>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
    482e:	2210      	movs	r2, #16
    4830:	4313      	orrs	r3, r2
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
    4832:	4a09      	ldr	r2, [pc, #36]	; (4858 <dma_allocate+0x108>)
    4834:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
    4836:	f7ff febb 	bl	45b0 <cpu_irq_leave_critical>
	resource->descriptor = NULL;
    483a:	2300      	movs	r3, #0
    483c:	61ab      	str	r3, [r5, #24]
	_dma_active_resource[resource->channel_id] = resource;
    483e:	782b      	ldrb	r3, [r5, #0]
    4840:	009b      	lsls	r3, r3, #2
    4842:	4a09      	ldr	r2, [pc, #36]	; (4868 <dma_allocate+0x118>)
    4844:	509d      	str	r5, [r3, r2]
    4846:	f7ff feb3 	bl	45b0 <cpu_irq_leave_critical>
	return STATUS_OK;
    484a:	2000      	movs	r0, #0
    484c:	e7af      	b.n	47ae <dma_allocate+0x5e>
    484e:	46c0      	nop			; (mov r8, r8)
    4850:	20000804 	.word	0x20000804
    4854:	40000400 	.word	0x40000400
    4858:	41004800 	.word	0x41004800
    485c:	20000b80 	.word	0x20000b80
    4860:	20000b70 	.word	0x20000b70
    4864:	00000f02 	.word	0x00000f02
    4868:	20000b68 	.word	0x20000b68
    486c:	00000000 	.word	0x00000000

00004870 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
    4870:	b570      	push	{r4, r5, r6, lr}
    4872:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4874:	f7ff fe7c 	bl	4570 <cpu_irq_enter_critical>
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
    4878:	7c63      	ldrb	r3, [r4, #17]
    487a:	2b05      	cmp	r3, #5
    487c:	d008      	beq.n	4890 <dma_start_transfer_job+0x20>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
    487e:	69a3      	ldr	r3, [r4, #24]
    4880:	885b      	ldrh	r3, [r3, #2]
    4882:	b29b      	uxth	r3, r3
    4884:	2b00      	cmp	r3, #0
    4886:	d107      	bne.n	4898 <dma_start_transfer_job+0x28>
	cpu_irq_leave_critical();
    4888:	f7ff fe92 	bl	45b0 <cpu_irq_leave_critical>
		system_interrupt_leave_critical_section();
		return STATUS_ERR_INVALID_ARG;
    488c:	2017      	movs	r0, #23
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
    488e:	bd70      	pop	{r4, r5, r6, pc}
    4890:	f7ff fe8e 	bl	45b0 <cpu_irq_leave_critical>
		return STATUS_BUSY;
    4894:	2005      	movs	r0, #5
    4896:	e7fa      	b.n	488e <dma_start_transfer_job+0x1e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4898:	2640      	movs	r6, #64	; 0x40
    489a:	4b10      	ldr	r3, [pc, #64]	; (48dc <dma_start_transfer_job+0x6c>)
    489c:	601e      	str	r6, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    489e:	7822      	ldrb	r2, [r4, #0]
    48a0:	230f      	movs	r3, #15
    48a2:	4013      	ands	r3, r2
    48a4:	4d0e      	ldr	r5, [pc, #56]	; (48e0 <dma_start_transfer_job+0x70>)
    48a6:	223f      	movs	r2, #63	; 0x3f
    48a8:	54ab      	strb	r3, [r5, r2]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
    48aa:	7823      	ldrb	r3, [r4, #0]
    48ac:	4a0d      	ldr	r2, [pc, #52]	; (48e4 <dma_start_transfer_job+0x74>)
    48ae:	5cd2      	ldrb	r2, [r2, r3]
    48b0:	2307      	movs	r3, #7
    48b2:	4013      	ands	r3, r2
    48b4:	224d      	movs	r2, #77	; 0x4d
    48b6:	54ab      	strb	r3, [r5, r2]
	resource->job_status = STATUS_BUSY;
    48b8:	2305      	movs	r3, #5
    48ba:	7463      	strb	r3, [r4, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
    48bc:	7823      	ldrb	r3, [r4, #0]
    48be:	011b      	lsls	r3, r3, #4
    48c0:	4809      	ldr	r0, [pc, #36]	; (48e8 <dma_start_transfer_job+0x78>)
    48c2:	18c0      	adds	r0, r0, r3
    48c4:	69a1      	ldr	r1, [r4, #24]
    48c6:	3a3d      	subs	r2, #61	; 0x3d
    48c8:	f009 f919 	bl	dafe <memcpy>
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    48cc:	5dab      	ldrb	r3, [r5, r6]
    48ce:	2202      	movs	r2, #2
    48d0:	4313      	orrs	r3, r2
    48d2:	55ab      	strb	r3, [r5, r6]
	cpu_irq_leave_critical();
    48d4:	f7ff fe6c 	bl	45b0 <cpu_irq_leave_critical>
	return STATUS_OK;
    48d8:	2000      	movs	r0, #0
    48da:	e7d8      	b.n	488e <dma_start_transfer_job+0x1e>
    48dc:	e000e100 	.word	0xe000e100
    48e0:	41004800 	.word	0x41004800
    48e4:	20000b90 	.word	0x20000b90
    48e8:	20000b80 	.word	0x20000b80
    48ec:	00000000 	.word	0x00000000

000048f0 <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
    48f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
    48f2:	780a      	ldrb	r2, [r1, #0]
    48f4:	8803      	ldrh	r3, [r0, #0]
    48f6:	2601      	movs	r6, #1
    48f8:	4032      	ands	r2, r6
    48fa:	2401      	movs	r4, #1
    48fc:	43a3      	bics	r3, r4
    48fe:	4313      	orrs	r3, r2
    4900:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
    4902:	784b      	ldrb	r3, [r1, #1]
    4904:	8804      	ldrh	r4, [r0, #0]
    4906:	2703      	movs	r7, #3
    4908:	403b      	ands	r3, r7
    490a:	005b      	lsls	r3, r3, #1
    490c:	2206      	movs	r2, #6
    490e:	4394      	bics	r4, r2
    4910:	431c      	orrs	r4, r3
    4912:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
    4914:	788d      	ldrb	r5, [r1, #2]
    4916:	8804      	ldrh	r4, [r0, #0]
    4918:	403d      	ands	r5, r7
    491a:	00ed      	lsls	r5, r5, #3
    491c:	2318      	movs	r3, #24
    491e:	439c      	bics	r4, r3
    4920:	432c      	orrs	r4, r5
    4922:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
    4924:	78ca      	ldrb	r2, [r1, #3]
    4926:	8803      	ldrh	r3, [r0, #0]
    4928:	403a      	ands	r2, r7
    492a:	0212      	lsls	r2, r2, #8
    492c:	4c16      	ldr	r4, [pc, #88]	; (4988 <dma_descriptor_create+0x98>)
    492e:	4023      	ands	r3, r4
    4930:	4313      	orrs	r3, r2
    4932:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
    4934:	790b      	ldrb	r3, [r1, #4]
    4936:	8804      	ldrh	r4, [r0, #0]
    4938:	4033      	ands	r3, r6
    493a:	029b      	lsls	r3, r3, #10
    493c:	4a13      	ldr	r2, [pc, #76]	; (498c <dma_descriptor_create+0x9c>)
    493e:	4014      	ands	r4, r2
    4940:	431c      	orrs	r4, r3
    4942:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
    4944:	794d      	ldrb	r5, [r1, #5]
    4946:	8804      	ldrh	r4, [r0, #0]
    4948:	4035      	ands	r5, r6
    494a:	02ed      	lsls	r5, r5, #11
    494c:	4b10      	ldr	r3, [pc, #64]	; (4990 <dma_descriptor_create+0xa0>)
    494e:	401c      	ands	r4, r3
    4950:	432c      	orrs	r4, r5
    4952:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
    4954:	798a      	ldrb	r2, [r1, #6]
    4956:	8803      	ldrh	r3, [r0, #0]
    4958:	4032      	ands	r2, r6
    495a:	0312      	lsls	r2, r2, #12
    495c:	4c0d      	ldr	r4, [pc, #52]	; (4994 <dma_descriptor_create+0xa4>)
    495e:	4023      	ands	r3, r4
    4960:	4313      	orrs	r3, r2
    4962:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
    4964:	79cb      	ldrb	r3, [r1, #7]
    4966:	2207      	movs	r2, #7
    4968:	401a      	ands	r2, r3
    496a:	8803      	ldrh	r3, [r0, #0]
    496c:	0352      	lsls	r2, r2, #13
    496e:	04db      	lsls	r3, r3, #19
    4970:	0cdb      	lsrs	r3, r3, #19
    4972:	4313      	orrs	r3, r2
    4974:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
    4976:	890b      	ldrh	r3, [r1, #8]
    4978:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
    497a:	68cb      	ldr	r3, [r1, #12]
    497c:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
    497e:	690b      	ldr	r3, [r1, #16]
    4980:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
    4982:	694b      	ldr	r3, [r1, #20]
    4984:	60c3      	str	r3, [r0, #12]
}
    4986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4988:	fffffcff 	.word	0xfffffcff
    498c:	fffffbff 	.word	0xfffffbff
    4990:	fffff7ff 	.word	0xfffff7ff
    4994:	ffffefff 	.word	0xffffefff
	...

000049a0 <dma_add_descriptor>:
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
    49a0:	7c42      	ldrb	r2, [r0, #17]
		return STATUS_BUSY;
    49a2:	2305      	movs	r3, #5
	if (resource->job_status == STATUS_BUSY) {
    49a4:	2a05      	cmp	r2, #5
    49a6:	d00b      	beq.n	49c0 <dma_add_descriptor+0x20>
	DmacDescriptor* desc = resource->descriptor;
    49a8:	6983      	ldr	r3, [r0, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
    49aa:	2b00      	cmp	r3, #0
    49ac:	d00a      	beq.n	49c4 <dma_add_descriptor+0x24>
		resource->descriptor = descriptor;
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
    49ae:	68da      	ldr	r2, [r3, #12]
    49b0:	2a00      	cmp	r2, #0
    49b2:	d003      	beq.n	49bc <dma_add_descriptor+0x1c>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
    49b4:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
    49b6:	68da      	ldr	r2, [r3, #12]
    49b8:	2a00      	cmp	r2, #0
    49ba:	d1fb      	bne.n	49b4 <dma_add_descriptor+0x14>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
    49bc:	60d9      	str	r1, [r3, #12]
	}

	return STATUS_OK;
    49be:	2300      	movs	r3, #0
}
    49c0:	0018      	movs	r0, r3
    49c2:	4770      	bx	lr
		resource->descriptor = descriptor;
    49c4:	6181      	str	r1, [r0, #24]
	return STATUS_OK;
    49c6:	2300      	movs	r3, #0
    49c8:	e7fa      	b.n	49c0 <dma_add_descriptor+0x20>
    49ca:	46c0      	nop			; (mov r8, r8)
    49cc:	0000      	movs	r0, r0
	...

000049d0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    49d0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    49d2:	2a00      	cmp	r2, #0
    49d4:	d001      	beq.n	49da <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    49d6:	0018      	movs	r0, r3
    49d8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    49da:	008b      	lsls	r3, r1, #2
    49dc:	4a06      	ldr	r2, [pc, #24]	; (49f8 <extint_register_callback+0x28>)
    49de:	589b      	ldr	r3, [r3, r2]
    49e0:	2b00      	cmp	r3, #0
    49e2:	d003      	beq.n	49ec <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    49e4:	4283      	cmp	r3, r0
    49e6:	d005      	beq.n	49f4 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    49e8:	231d      	movs	r3, #29
    49ea:	e7f4      	b.n	49d6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    49ec:	0089      	lsls	r1, r1, #2
    49ee:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    49f0:	2300      	movs	r3, #0
    49f2:	e7f0      	b.n	49d6 <extint_register_callback+0x6>
		return STATUS_OK;
    49f4:	2300      	movs	r3, #0
    49f6:	e7ee      	b.n	49d6 <extint_register_callback+0x6>
    49f8:	20000b94 	.word	0x20000b94
    49fc:	00000000 	.word	0x00000000

00004a00 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4a00:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4a02:	2900      	cmp	r1, #0
    4a04:	d001      	beq.n	4a0a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4a06:	0018      	movs	r0, r3
    4a08:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    4a0a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4a0c:	281f      	cmp	r0, #31
    4a0e:	d800      	bhi.n	4a12 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4a10:	4a02      	ldr	r2, [pc, #8]	; (4a1c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4a12:	2301      	movs	r3, #1
    4a14:	4083      	lsls	r3, r0
    4a16:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4a18:	2300      	movs	r3, #0
    4a1a:	e7f4      	b.n	4a06 <extint_chan_enable_callback+0x6>
    4a1c:	40001800 	.word	0x40001800

00004a20 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4a20:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4a22:	2900      	cmp	r1, #0
    4a24:	d001      	beq.n	4a2a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    4a26:	0018      	movs	r0, r3
    4a28:	4770      	bx	lr
		return NULL;
    4a2a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4a2c:	281f      	cmp	r0, #31
    4a2e:	d800      	bhi.n	4a32 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    4a30:	4a02      	ldr	r2, [pc, #8]	; (4a3c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    4a32:	2301      	movs	r3, #1
    4a34:	4083      	lsls	r3, r0
    4a36:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    4a38:	2300      	movs	r3, #0
    4a3a:	e7f4      	b.n	4a26 <extint_chan_disable_callback+0x6>
    4a3c:	40001800 	.word	0x40001800

00004a40 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4a40:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4a42:	2200      	movs	r2, #0
    4a44:	4b10      	ldr	r3, [pc, #64]	; (4a88 <EIC_Handler+0x48>)
    4a46:	701a      	strb	r2, [r3, #0]
    4a48:	2300      	movs	r3, #0
    4a4a:	4910      	ldr	r1, [pc, #64]	; (4a8c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4a4c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4a4e:	4e10      	ldr	r6, [pc, #64]	; (4a90 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4a50:	4c0d      	ldr	r4, [pc, #52]	; (4a88 <EIC_Handler+0x48>)
    4a52:	e00a      	b.n	4a6a <EIC_Handler+0x2a>
		return eics[eic_index];
    4a54:	490d      	ldr	r1, [pc, #52]	; (4a8c <EIC_Handler+0x4c>)
    4a56:	e008      	b.n	4a6a <EIC_Handler+0x2a>
    4a58:	7823      	ldrb	r3, [r4, #0]
    4a5a:	3301      	adds	r3, #1
    4a5c:	b2db      	uxtb	r3, r3
    4a5e:	7023      	strb	r3, [r4, #0]
    4a60:	2b0f      	cmp	r3, #15
    4a62:	d810      	bhi.n	4a86 <EIC_Handler+0x46>
		return NULL;
    4a64:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4a66:	2b1f      	cmp	r3, #31
    4a68:	d9f4      	bls.n	4a54 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4a6a:	0028      	movs	r0, r5
    4a6c:	4018      	ands	r0, r3
    4a6e:	2201      	movs	r2, #1
    4a70:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4a72:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    4a74:	4210      	tst	r0, r2
    4a76:	d0ef      	beq.n	4a58 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4a78:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4a7a:	009b      	lsls	r3, r3, #2
    4a7c:	599b      	ldr	r3, [r3, r6]
    4a7e:	2b00      	cmp	r3, #0
    4a80:	d0ea      	beq.n	4a58 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4a82:	4798      	blx	r3
    4a84:	e7e8      	b.n	4a58 <EIC_Handler+0x18>
			}
		}
	}
}
    4a86:	bd70      	pop	{r4, r5, r6, pc}
    4a88:	20000b91 	.word	0x20000b91
    4a8c:	40001800 	.word	0x40001800
    4a90:	20000b94 	.word	0x20000b94
	...

00004aa0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4aa0:	4a04      	ldr	r2, [pc, #16]	; (4ab4 <_extint_enable+0x14>)
    4aa2:	7813      	ldrb	r3, [r2, #0]
    4aa4:	2102      	movs	r1, #2
    4aa6:	430b      	orrs	r3, r1
    4aa8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4aaa:	7853      	ldrb	r3, [r2, #1]
    4aac:	b25b      	sxtb	r3, r3
    4aae:	2b00      	cmp	r3, #0
    4ab0:	dbfb      	blt.n	4aaa <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4ab2:	4770      	bx	lr
    4ab4:	40001800 	.word	0x40001800
	...

00004ac0 <_system_extint_init>:
{
    4ac0:	b500      	push	{lr}
    4ac2:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    4ac4:	4a12      	ldr	r2, [pc, #72]	; (4b10 <_system_extint_init+0x50>)
    4ac6:	6993      	ldr	r3, [r2, #24]
    4ac8:	2140      	movs	r1, #64	; 0x40
    4aca:	430b      	orrs	r3, r1
    4acc:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4ace:	a901      	add	r1, sp, #4
    4ad0:	2300      	movs	r3, #0
    4ad2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4ad4:	2005      	movs	r0, #5
    4ad6:	f7ff fc03 	bl	42e0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(EIC_GCLK_ID);
    4ada:	2005      	movs	r0, #5
    4adc:	f7ff fbb8 	bl	4250 <system_gclk_chan_enable>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4ae0:	4a0c      	ldr	r2, [pc, #48]	; (4b14 <_system_extint_init+0x54>)
    4ae2:	7813      	ldrb	r3, [r2, #0]
    4ae4:	2101      	movs	r1, #1
    4ae6:	430b      	orrs	r3, r1
    4ae8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4aea:	7853      	ldrb	r3, [r2, #1]
    4aec:	b25b      	sxtb	r3, r3
    4aee:	2b00      	cmp	r3, #0
    4af0:	dbfb      	blt.n	4aea <_system_extint_init+0x2a>
    4af2:	4b09      	ldr	r3, [pc, #36]	; (4b18 <_system_extint_init+0x58>)
    4af4:	0019      	movs	r1, r3
    4af6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4af8:	2200      	movs	r2, #0
    4afa:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4afc:	4299      	cmp	r1, r3
    4afe:	d1fc      	bne.n	4afa <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4b00:	2210      	movs	r2, #16
    4b02:	4b06      	ldr	r3, [pc, #24]	; (4b1c <_system_extint_init+0x5c>)
    4b04:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4b06:	f7ff ffcb 	bl	4aa0 <_extint_enable>
}
    4b0a:	b003      	add	sp, #12
    4b0c:	bd00      	pop	{pc}
    4b0e:	46c0      	nop			; (mov r8, r8)
    4b10:	40000400 	.word	0x40000400
    4b14:	40001800 	.word	0x40001800
    4b18:	20000b94 	.word	0x20000b94
    4b1c:	e000e100 	.word	0xe000e100

00004b20 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4b20:	2300      	movs	r3, #0
    4b22:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4b24:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4b26:	2201      	movs	r2, #1
    4b28:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    4b2a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    4b2c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4b2e:	3302      	adds	r3, #2
    4b30:	72c3      	strb	r3, [r0, #11]
}
    4b32:	4770      	bx	lr
	...

00004b40 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b42:	b083      	sub	sp, #12
    4b44:	0005      	movs	r5, r0
    4b46:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4b48:	a901      	add	r1, sp, #4
    4b4a:	2300      	movs	r3, #0
    4b4c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4b4e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4b50:	7923      	ldrb	r3, [r4, #4]
    4b52:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4b54:	7a23      	ldrb	r3, [r4, #8]
    4b56:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4b58:	7820      	ldrb	r0, [r4, #0]
    4b5a:	f7ff fd99 	bl	4690 <system_pinmux_pin_set_config>
		return NULL;
    4b5e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    4b60:	2d1f      	cmp	r5, #31
    4b62:	d800      	bhi.n	4b66 <extint_chan_set_config+0x26>
		return eics[eic_index];
    4b64:	4812      	ldr	r0, [pc, #72]	; (4bb0 <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4b66:	2207      	movs	r2, #7
    4b68:	402a      	ands	r2, r5
    4b6a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4b6c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4b6e:	7aa3      	ldrb	r3, [r4, #10]
    4b70:	2b00      	cmp	r3, #0
    4b72:	d001      	beq.n	4b78 <extint_chan_set_config+0x38>
    4b74:	2308      	movs	r3, #8
    4b76:	431f      	orrs	r7, r3
    4b78:	08eb      	lsrs	r3, r5, #3
    4b7a:	009b      	lsls	r3, r3, #2
    4b7c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4b7e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4b80:	260f      	movs	r6, #15
    4b82:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4b84:	43b1      	bics	r1, r6
			(new_config << config_pos);
    4b86:	4097      	lsls	r7, r2
    4b88:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4b8a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    4b8c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    4b8e:	7a63      	ldrb	r3, [r4, #9]
    4b90:	2b00      	cmp	r3, #0
    4b92:	d106      	bne.n	4ba2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4b94:	6943      	ldr	r3, [r0, #20]
    4b96:	2201      	movs	r2, #1
    4b98:	40aa      	lsls	r2, r5
    4b9a:	4393      	bics	r3, r2
    4b9c:	6143      	str	r3, [r0, #20]
	}
}
    4b9e:	b003      	add	sp, #12
    4ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    4ba2:	6942      	ldr	r2, [r0, #20]
    4ba4:	2301      	movs	r3, #1
    4ba6:	40ab      	lsls	r3, r5
    4ba8:	4313      	orrs	r3, r2
    4baa:	6143      	str	r3, [r0, #20]
    4bac:	e7f7      	b.n	4b9e <extint_chan_set_config+0x5e>
    4bae:	46c0      	nop			; (mov r8, r8)
    4bb0:	40001800 	.word	0x40001800
	...

00004bc0 <extint_nmi_set_config>:
 * \retval  STATUS_ERR_BAD_FORMAT       An invalid detection mode was requested
 */
enum status_code extint_nmi_set_config(
		const uint8_t nmi_channel,
		const struct extint_nmi_conf *const config)
{
    4bc0:	b570      	push	{r4, r5, r6, lr}
    4bc2:	b082      	sub	sp, #8
    4bc4:	0004      	movs	r4, r0
    4bc6:	000e      	movs	r6, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4bc8:	a901      	add	r1, sp, #4
    4bca:	2300      	movs	r3, #0
    4bcc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4bce:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4bd0:	7933      	ldrb	r3, [r6, #4]
    4bd2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4bd4:	7a33      	ldrb	r3, [r6, #8]
    4bd6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4bd8:	7830      	ldrb	r0, [r6, #0]
    4bda:	f7ff fd59 	bl	4690 <system_pinmux_pin_set_config>
		return NULL;
    4bde:	2500      	movs	r5, #0
	if (eic_index < EIC_INST_NUM) {
    4be0:	2c00      	cmp	r4, #0
    4be2:	d100      	bne.n	4be6 <extint_nmi_set_config+0x26>
		return eics[eic_index];
    4be4:	4d0d      	ldr	r5, [pc, #52]	; (4c1c <extint_nmi_set_config+0x5c>)
	Eic *const EIC_module = _extint_get_eic_from_nmi(nmi_channel);

	uint32_t new_config;

	/* Determine the NMI's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_NMICTRL_NMISENSE_Pos);
    4be6:	7ab4      	ldrb	r4, [r6, #10]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4be8:	7a73      	ldrb	r3, [r6, #9]
    4bea:	2b00      	cmp	r3, #0
    4bec:	d001      	beq.n	4bf2 <extint_nmi_set_config+0x32>
    4bee:	2308      	movs	r3, #8
    4bf0:	431c      	orrs	r4, r3
		eics[i]->CTRL.reg &= ~EIC_CTRL_ENABLE;
    4bf2:	4a0a      	ldr	r2, [pc, #40]	; (4c1c <extint_nmi_set_config+0x5c>)
    4bf4:	7813      	ldrb	r3, [r2, #0]
    4bf6:	2102      	movs	r1, #2
    4bf8:	438b      	bics	r3, r1
    4bfa:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4bfc:	7853      	ldrb	r3, [r2, #1]
    4bfe:	b25b      	sxtb	r3, r3
    4c00:	2b00      	cmp	r3, #0
    4c02:	dbfb      	blt.n	4bfc <extint_nmi_set_config+0x3c>
		new_config |= EIC_NMICTRL_NMIFILTEN;
	}

	/* Disable EIC and general clock to configure NMI */
	_extint_disable();
	system_gclk_chan_disable(EIC_GCLK_ID);
    4c04:	2005      	movs	r0, #5
    4c06:	f7ff fb3b 	bl	4280 <system_gclk_chan_disable>

	EIC_module->NMICTRL.reg = new_config;
    4c0a:	70ac      	strb	r4, [r5, #2]

	/* Enable the general clock and EIC after configure NMI */
	system_gclk_chan_enable(EIC_GCLK_ID);
    4c0c:	2005      	movs	r0, #5
    4c0e:	f7ff fb1f 	bl	4250 <system_gclk_chan_enable>
	_extint_enable();
    4c12:	f7ff ff45 	bl	4aa0 <_extint_enable>

	return STATUS_OK;
}
    4c16:	2000      	movs	r0, #0
    4c18:	b002      	add	sp, #8
    4c1a:	bd70      	pop	{r4, r5, r6, pc}
    4c1c:	40001800 	.word	0x40001800

00004c20 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
    4c20:	b510      	push	{r4, lr}
    4c22:	0004      	movs	r4, r0
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
    4c24:	280a      	cmp	r0, #10
    4c26:	d008      	beq.n	4c3a <xputc+0x1a>

	if (outptr) {
    4c28:	4b09      	ldr	r3, [pc, #36]	; (4c50 <xputc+0x30>)
    4c2a:	681b      	ldr	r3, [r3, #0]
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	d008      	beq.n	4c42 <xputc+0x22>
		*outptr++ = (unsigned char)c;
    4c30:	1c59      	adds	r1, r3, #1
    4c32:	4a07      	ldr	r2, [pc, #28]	; (4c50 <xputc+0x30>)
    4c34:	6011      	str	r1, [r2, #0]
    4c36:	701c      	strb	r4, [r3, #0]
		return;
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
}
    4c38:	bd10      	pop	{r4, pc}
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
    4c3a:	200d      	movs	r0, #13
    4c3c:	f7ff fff0 	bl	4c20 <xputc>
    4c40:	e7f2      	b.n	4c28 <xputc+0x8>
	if (xfunc_out) xfunc_out((unsigned char)c);
    4c42:	4b04      	ldr	r3, [pc, #16]	; (4c54 <xputc+0x34>)
    4c44:	681b      	ldr	r3, [r3, #0]
    4c46:	2b00      	cmp	r3, #0
    4c48:	d0f6      	beq.n	4c38 <xputc+0x18>
    4c4a:	0020      	movs	r0, r4
    4c4c:	4798      	blx	r3
    4c4e:	e7f3      	b.n	4c38 <xputc+0x18>
    4c50:	20000bd4 	.word	0x20000bd4
    4c54:	20000bdc 	.word	0x20000bdc
	...

00004c60 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
    4c60:	b510      	push	{r4, lr}
    4c62:	0004      	movs	r4, r0
	while (*str)
    4c64:	7800      	ldrb	r0, [r0, #0]
    4c66:	2800      	cmp	r0, #0
    4c68:	d005      	beq.n	4c76 <xputs+0x16>
		xputc(*str++);
    4c6a:	3401      	adds	r4, #1
    4c6c:	f7ff ffd8 	bl	4c20 <xputc>
	while (*str)
    4c70:	7820      	ldrb	r0, [r4, #0]
    4c72:	2800      	cmp	r0, #0
    4c74:	d1f9      	bne.n	4c6a <xputs+0xa>
}
    4c76:	bd10      	pop	{r4, pc}
	...

00004c80 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
    4c80:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c82:	46de      	mov	lr, fp
    4c84:	4657      	mov	r7, sl
    4c86:	464e      	mov	r6, r9
    4c88:	4645      	mov	r5, r8
    4c8a:	b5e0      	push	{r5, r6, r7, lr}
    4c8c:	b087      	sub	sp, #28
    4c8e:	4680      	mov	r8, r0
    4c90:	9101      	str	r1, [sp, #4]
    4c92:	e0f2      	b.n	4e7a <xvprintf+0x1fa>
		if (!c) break;				/* End of format? */
		d = c;
		if (d >= 'a') d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, char*);
    4c94:	464b      	mov	r3, r9
    4c96:	9301      	str	r3, [sp, #4]
    4c98:	e0ef      	b.n	4e7a <xvprintf+0x1fa>
		c = *fmt++;					/* Get first char of the sequense */
    4c9a:	4643      	mov	r3, r8
    4c9c:	785b      	ldrb	r3, [r3, #1]
		if (c == '0') {				/* Flag: '0' padded */
    4c9e:	2b30      	cmp	r3, #48	; 0x30
    4ca0:	d030      	beq.n	4d04 <xvprintf+0x84>
			if (c == '-') {			/* Flag: left justified */
    4ca2:	2b2d      	cmp	r3, #45	; 0x2d
    4ca4:	d034      	beq.n	4d10 <xvprintf+0x90>
		c = *fmt++;					/* Get first char of the sequense */
    4ca6:	4642      	mov	r2, r8
    4ca8:	3202      	adds	r2, #2
		f = 0;
    4caa:	2100      	movs	r1, #0
    4cac:	468a      	mov	sl, r1
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
    4cae:	0019      	movs	r1, r3
    4cb0:	3930      	subs	r1, #48	; 0x30
    4cb2:	2909      	cmp	r1, #9
    4cb4:	d832      	bhi.n	4d1c <xvprintf+0x9c>
    4cb6:	2600      	movs	r6, #0
    4cb8:	0019      	movs	r1, r3
			w = w * 10 + c - '0';
    4cba:	00b3      	lsls	r3, r6, #2
    4cbc:	199b      	adds	r3, r3, r6
    4cbe:	005b      	lsls	r3, r3, #1
    4cc0:	185b      	adds	r3, r3, r1
    4cc2:	3b30      	subs	r3, #48	; 0x30
    4cc4:	001e      	movs	r6, r3
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
    4cc6:	1c53      	adds	r3, r2, #1
    4cc8:	7811      	ldrb	r1, [r2, #0]
    4cca:	001a      	movs	r2, r3
    4ccc:	0008      	movs	r0, r1
    4cce:	3830      	subs	r0, #48	; 0x30
    4cd0:	2809      	cmp	r0, #9
    4cd2:	d9f2      	bls.n	4cba <xvprintf+0x3a>
    4cd4:	4698      	mov	r8, r3
    4cd6:	000b      	movs	r3, r1
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
    4cd8:	001a      	movs	r2, r3
    4cda:	2120      	movs	r1, #32
    4cdc:	438a      	bics	r2, r1
    4cde:	2a4c      	cmp	r2, #76	; 0x4c
    4ce0:	d01f      	beq.n	4d22 <xvprintf+0xa2>
		if (!c) break;				/* End of format? */
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d100      	bne.n	4ce8 <xvprintf+0x68>
    4ce6:	e109      	b.n	4efc <xvprintf+0x27c>
		d = c;
    4ce8:	0019      	movs	r1, r3
		if (d >= 'a') d -= 0x20;
    4cea:	2b60      	cmp	r3, #96	; 0x60
    4cec:	d901      	bls.n	4cf2 <xvprintf+0x72>
    4cee:	3920      	subs	r1, #32
    4cf0:	b2c9      	uxtb	r1, r1
		switch (d) {				/* Type is... */
    4cf2:	000a      	movs	r2, r1
    4cf4:	3a42      	subs	r2, #66	; 0x42
    4cf6:	b2d0      	uxtb	r0, r2
    4cf8:	2816      	cmp	r0, #22
    4cfa:	d851      	bhi.n	4da0 <xvprintf+0x120>
    4cfc:	0082      	lsls	r2, r0, #2
    4cfe:	4883      	ldr	r0, [pc, #524]	; (4f0c <xvprintf+0x28c>)
    4d00:	5882      	ldr	r2, [r0, r2]
    4d02:	4697      	mov	pc, r2
			f = 1; c = *fmt++;
    4d04:	4643      	mov	r3, r8
    4d06:	1cda      	adds	r2, r3, #3
    4d08:	789b      	ldrb	r3, [r3, #2]
    4d0a:	2101      	movs	r1, #1
    4d0c:	468a      	mov	sl, r1
    4d0e:	e7ce      	b.n	4cae <xvprintf+0x2e>
				f = 2; c = *fmt++;
    4d10:	4643      	mov	r3, r8
    4d12:	1cda      	adds	r2, r3, #3
    4d14:	789b      	ldrb	r3, [r3, #2]
    4d16:	2102      	movs	r1, #2
    4d18:	468a      	mov	sl, r1
    4d1a:	e7c8      	b.n	4cae <xvprintf+0x2e>
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
    4d1c:	4690      	mov	r8, r2
    4d1e:	2600      	movs	r6, #0
    4d20:	e7da      	b.n	4cd8 <xvprintf+0x58>
			f |= 4; c = *fmt++;
    4d22:	4653      	mov	r3, sl
    4d24:	3a48      	subs	r2, #72	; 0x48
    4d26:	4313      	orrs	r3, r2
    4d28:	469a      	mov	sl, r3
    4d2a:	4643      	mov	r3, r8
    4d2c:	781b      	ldrb	r3, [r3, #0]
    4d2e:	3a03      	subs	r2, #3
    4d30:	4694      	mov	ip, r2
    4d32:	44e0      	add	r8, ip
    4d34:	e7d5      	b.n	4ce2 <xvprintf+0x62>
			p = va_arg(arp, char*);
    4d36:	9b01      	ldr	r3, [sp, #4]
    4d38:	1d1a      	adds	r2, r3, #4
    4d3a:	4691      	mov	r9, r2
    4d3c:	681f      	ldr	r7, [r3, #0]
			for (j = 0; p[j]; j++) ;
    4d3e:	783b      	ldrb	r3, [r7, #0]
    4d40:	2b00      	cmp	r3, #0
    4d42:	d022      	beq.n	4d8a <xvprintf+0x10a>
    4d44:	2400      	movs	r4, #0
    4d46:	3401      	adds	r4, #1
    4d48:	5d3b      	ldrb	r3, [r7, r4]
    4d4a:	2b00      	cmp	r3, #0
    4d4c:	d1fb      	bne.n	4d46 <xvprintf+0xc6>
			while (!(f & 2) && j++ < w) xputc(' ');
    4d4e:	4653      	mov	r3, sl
    4d50:	079b      	lsls	r3, r3, #30
    4d52:	d40a      	bmi.n	4d6a <xvprintf+0xea>
    4d54:	1c65      	adds	r5, r4, #1
    4d56:	42b4      	cmp	r4, r6
    4d58:	d219      	bcs.n	4d8e <xvprintf+0x10e>
    4d5a:	1c74      	adds	r4, r6, #1
    4d5c:	2020      	movs	r0, #32
    4d5e:	f7ff ff5f 	bl	4c20 <xputc>
    4d62:	3501      	adds	r5, #1
    4d64:	42ac      	cmp	r4, r5
    4d66:	d1f9      	bne.n	4d5c <xvprintf+0xdc>
    4d68:	1c74      	adds	r4, r6, #1
			xputs(p);
    4d6a:	0038      	movs	r0, r7
    4d6c:	f7ff ff78 	bl	4c60 <xputs>
			while (j++ < w) xputc(' ');
    4d70:	1c65      	adds	r5, r4, #1
    4d72:	42b4      	cmp	r4, r6
    4d74:	d28e      	bcs.n	4c94 <xvprintf+0x14>
    4d76:	3601      	adds	r6, #1
    4d78:	2020      	movs	r0, #32
    4d7a:	f7ff ff51 	bl	4c20 <xputc>
    4d7e:	3501      	adds	r5, #1
    4d80:	42b5      	cmp	r5, r6
    4d82:	d1f9      	bne.n	4d78 <xvprintf+0xf8>
			p = va_arg(arp, char*);
    4d84:	464b      	mov	r3, r9
    4d86:	9301      	str	r3, [sp, #4]
    4d88:	e077      	b.n	4e7a <xvprintf+0x1fa>
			for (j = 0; p[j]; j++) ;
    4d8a:	2400      	movs	r4, #0
    4d8c:	e7df      	b.n	4d4e <xvprintf+0xce>
			while (!(f & 2) && j++ < w) xputc(' ');
    4d8e:	002c      	movs	r4, r5
    4d90:	e7eb      	b.n	4d6a <xvprintf+0xea>
			continue;
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
    4d92:	9b01      	ldr	r3, [sp, #4]
    4d94:	1d1c      	adds	r4, r3, #4
    4d96:	7818      	ldrb	r0, [r3, #0]
    4d98:	f7ff ff42 	bl	4c20 <xputc>
    4d9c:	9401      	str	r4, [sp, #4]
    4d9e:	e06c      	b.n	4e7a <xvprintf+0x1fa>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
    4da0:	0018      	movs	r0, r3
    4da2:	f7ff ff3d 	bl	4c20 <xputc>
    4da6:	e068      	b.n	4e7a <xvprintf+0x1fa>
			r = 10; break;
    4da8:	220a      	movs	r2, #10
    4daa:	9200      	str	r2, [sp, #0]
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
    4dac:	3a06      	subs	r2, #6
    4dae:	4650      	mov	r0, sl
    4db0:	4202      	tst	r2, r0
    4db2:	d111      	bne.n	4dd8 <xvprintf+0x158>
    4db4:	2944      	cmp	r1, #68	; 0x44
    4db6:	d175      	bne.n	4ea4 <xvprintf+0x224>
    4db8:	9a01      	ldr	r2, [sp, #4]
    4dba:	6811      	ldr	r1, [r2, #0]
    4dbc:	0008      	movs	r0, r1
    4dbe:	3204      	adds	r2, #4
    4dc0:	9201      	str	r2, [sp, #4]
		if (d == 'D' && (v & 0x80000000)) {
    4dc2:	2800      	cmp	r0, #0
    4dc4:	da73      	bge.n	4eae <xvprintf+0x22e>
			v = 0 - v;
    4dc6:	4242      	negs	r2, r0
    4dc8:	0010      	movs	r0, r2
			f |= 8;
    4dca:	2208      	movs	r2, #8
    4dcc:	4651      	mov	r1, sl
    4dce:	4311      	orrs	r1, r2
    4dd0:	468a      	mov	sl, r1
    4dd2:	e06c      	b.n	4eae <xvprintf+0x22e>
			r = 16; break;
    4dd4:	2210      	movs	r2, #16
    4dd6:	9200      	str	r2, [sp, #0]
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
    4dd8:	9801      	ldr	r0, [sp, #4]
    4dda:	0002      	movs	r2, r0
    4ddc:	3204      	adds	r2, #4
    4dde:	6800      	ldr	r0, [r0, #0]
    4de0:	9201      	str	r2, [sp, #4]
		if (d == 'D' && (v & 0x80000000)) {
    4de2:	2944      	cmp	r1, #68	; 0x44
    4de4:	d0ed      	beq.n	4dc2 <xvprintf+0x142>
    4de6:	e062      	b.n	4eae <xvprintf+0x22e>
    4de8:	2227      	movs	r2, #39	; 0x27
    4dea:	e063      	b.n	4eb4 <xvprintf+0x234>
		}
		i = 0;
		do {
			d = (char)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
    4dec:	1c7b      	adds	r3, r7, #1
    4dee:	3530      	adds	r5, #48	; 0x30
    4df0:	aa02      	add	r2, sp, #8
    4df2:	55d5      	strb	r5, [r2, r7]
		} while (v && i < sizeof(s));
    4df4:	2c00      	cmp	r4, #0
    4df6:	d011      	beq.n	4e1c <xvprintf+0x19c>
    4df8:	2b10      	cmp	r3, #16
    4dfa:	d00f      	beq.n	4e1c <xvprintf+0x19c>
			s[i++] = d + '0';
    4dfc:	001f      	movs	r7, r3
			d = (char)(v % r); v /= r;
    4dfe:	9900      	ldr	r1, [sp, #0]
    4e00:	0020      	movs	r0, r4
    4e02:	f7fb fa6d 	bl	2e0 <__aeabi_uidivmod>
    4e06:	b2cd      	uxtb	r5, r1
    4e08:	9900      	ldr	r1, [sp, #0]
    4e0a:	0020      	movs	r0, r4
    4e0c:	f7fb f9e2 	bl	1d4 <__udivsi3>
    4e10:	0004      	movs	r4, r0
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    4e12:	2d09      	cmp	r5, #9
    4e14:	d9ea      	bls.n	4dec <xvprintf+0x16c>
    4e16:	1975      	adds	r5, r6, r5
    4e18:	b2ed      	uxtb	r5, r5
    4e1a:	e7e7      	b.n	4dec <xvprintf+0x16c>
    4e1c:	464e      	mov	r6, r9
    4e1e:	001c      	movs	r4, r3
		if (f & 8) s[i++] = '-';
    4e20:	4653      	mov	r3, sl
    4e22:	071b      	lsls	r3, r3, #28
    4e24:	d503      	bpl.n	4e2e <xvprintf+0x1ae>
    4e26:	232d      	movs	r3, #45	; 0x2d
    4e28:	aa02      	add	r2, sp, #8
    4e2a:	5513      	strb	r3, [r2, r4]
    4e2c:	1cbc      	adds	r4, r7, #2
		j = i; d = (f & 1) ? '0' : ' ';
    4e2e:	2330      	movs	r3, #48	; 0x30
    4e30:	9300      	str	r3, [sp, #0]
    4e32:	4653      	mov	r3, sl
    4e34:	07db      	lsls	r3, r3, #31
    4e36:	d401      	bmi.n	4e3c <xvprintf+0x1bc>
    4e38:	2320      	movs	r3, #32
    4e3a:	9300      	str	r3, [sp, #0]
		while (!(f & 2) && j++ < w) xputc(d);
    4e3c:	4653      	mov	r3, sl
    4e3e:	079b      	lsls	r3, r3, #30
    4e40:	d428      	bmi.n	4e94 <xvprintf+0x214>
    4e42:	1c67      	adds	r7, r4, #1
    4e44:	42b4      	cmp	r4, r6
    4e46:	d207      	bcs.n	4e58 <xvprintf+0x1d8>
    4e48:	1c75      	adds	r5, r6, #1
    4e4a:	9800      	ldr	r0, [sp, #0]
    4e4c:	f7ff fee8 	bl	4c20 <xputc>
    4e50:	3701      	adds	r7, #1
    4e52:	42bd      	cmp	r5, r7
    4e54:	d1f9      	bne.n	4e4a <xvprintf+0x1ca>
    4e56:	1c77      	adds	r7, r6, #1
		do xputc(s[--i]); while(i);
    4e58:	3c01      	subs	r4, #1
    4e5a:	ab02      	add	r3, sp, #8
    4e5c:	5ce0      	ldrb	r0, [r4, r3]
    4e5e:	f7ff fedf 	bl	4c20 <xputc>
    4e62:	2c00      	cmp	r4, #0
    4e64:	d1f8      	bne.n	4e58 <xvprintf+0x1d8>
		while (j++ < w) xputc(' ');
    4e66:	1c7c      	adds	r4, r7, #1
    4e68:	42b7      	cmp	r7, r6
    4e6a:	d206      	bcs.n	4e7a <xvprintf+0x1fa>
    4e6c:	3601      	adds	r6, #1
    4e6e:	2020      	movs	r0, #32
    4e70:	f7ff fed6 	bl	4c20 <xputc>
    4e74:	3401      	adds	r4, #1
    4e76:	42b4      	cmp	r4, r6
    4e78:	d1f9      	bne.n	4e6e <xvprintf+0x1ee>
		c = *fmt++;					/* Get a char */
    4e7a:	4643      	mov	r3, r8
    4e7c:	7818      	ldrb	r0, [r3, #0]
		if (!c) break;				/* End of format? */
    4e7e:	2800      	cmp	r0, #0
    4e80:	d03c      	beq.n	4efc <xvprintf+0x27c>
		if (c != '%') {				/* Pass through it if not a % sequense */
    4e82:	2825      	cmp	r0, #37	; 0x25
    4e84:	d100      	bne.n	4e88 <xvprintf+0x208>
    4e86:	e708      	b.n	4c9a <xvprintf+0x1a>
		c = *fmt++;					/* Get a char */
    4e88:	2301      	movs	r3, #1
    4e8a:	469c      	mov	ip, r3
    4e8c:	44e0      	add	r8, ip
			xputc(c); continue;
    4e8e:	f7ff fec7 	bl	4c20 <xputc>
    4e92:	e7f2      	b.n	4e7a <xvprintf+0x1fa>
		j = i; d = (f & 1) ? '0' : ' ';
    4e94:	0027      	movs	r7, r4
    4e96:	e7df      	b.n	4e58 <xvprintf+0x1d8>
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
    4e98:	2204      	movs	r2, #4
    4e9a:	4650      	mov	r0, sl
    4e9c:	4202      	tst	r2, r0
    4e9e:	d199      	bne.n	4dd4 <xvprintf+0x154>
			r = 16; break;
    4ea0:	320c      	adds	r2, #12
    4ea2:	9200      	str	r2, [sp, #0]
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
    4ea4:	9a01      	ldr	r2, [sp, #4]
    4ea6:	6811      	ldr	r1, [r2, #0]
    4ea8:	0008      	movs	r0, r1
    4eaa:	3204      	adds	r2, #4
    4eac:	9201      	str	r2, [sp, #4]
    4eae:	2207      	movs	r2, #7
    4eb0:	2b78      	cmp	r3, #120	; 0x78
    4eb2:	d099      	beq.n	4de8 <xvprintf+0x168>
    4eb4:	b2d3      	uxtb	r3, r2
		i = 0;
    4eb6:	2700      	movs	r7, #0
    4eb8:	0004      	movs	r4, r0
    4eba:	46b1      	mov	r9, r6
    4ebc:	001e      	movs	r6, r3
    4ebe:	e79e      	b.n	4dfe <xvprintf+0x17e>
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
    4ec0:	9a01      	ldr	r2, [sp, #4]
    4ec2:	6811      	ldr	r1, [r2, #0]
    4ec4:	0008      	movs	r0, r1
    4ec6:	3204      	adds	r2, #4
    4ec8:	9201      	str	r2, [sp, #4]
			r = 2; break;
    4eca:	2202      	movs	r2, #2
    4ecc:	9200      	str	r2, [sp, #0]
    4ece:	e7ee      	b.n	4eae <xvprintf+0x22e>
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
    4ed0:	2204      	movs	r2, #4
    4ed2:	4650      	mov	r0, sl
    4ed4:	4202      	tst	r2, r0
    4ed6:	d1f3      	bne.n	4ec0 <xvprintf+0x240>
			r = 2; break;
    4ed8:	3a02      	subs	r2, #2
    4eda:	9200      	str	r2, [sp, #0]
    4edc:	e76a      	b.n	4db4 <xvprintf+0x134>
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
    4ede:	9a01      	ldr	r2, [sp, #4]
    4ee0:	6811      	ldr	r1, [r2, #0]
    4ee2:	0008      	movs	r0, r1
    4ee4:	3204      	adds	r2, #4
    4ee6:	9201      	str	r2, [sp, #4]
			r = 8; break;
    4ee8:	2208      	movs	r2, #8
    4eea:	9200      	str	r2, [sp, #0]
    4eec:	e7df      	b.n	4eae <xvprintf+0x22e>
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
    4eee:	2204      	movs	r2, #4
    4ef0:	4651      	mov	r1, sl
    4ef2:	420a      	tst	r2, r1
    4ef4:	d1f3      	bne.n	4ede <xvprintf+0x25e>
			r = 8; break;
    4ef6:	3204      	adds	r2, #4
    4ef8:	9200      	str	r2, [sp, #0]
    4efa:	e7d3      	b.n	4ea4 <xvprintf+0x224>
	}
}
    4efc:	b007      	add	sp, #28
    4efe:	bc3c      	pop	{r2, r3, r4, r5}
    4f00:	4690      	mov	r8, r2
    4f02:	4699      	mov	r9, r3
    4f04:	46a2      	mov	sl, r4
    4f06:	46ab      	mov	fp, r5
    4f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f0a:	46c0      	nop			; (mov r8, r8)
    4f0c:	0000e0cc 	.word	0x0000e0cc

00004f10 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
    4f10:	b40f      	push	{r0, r1, r2, r3}
    4f12:	b500      	push	{lr}
    4f14:	b083      	sub	sp, #12
    4f16:	a904      	add	r1, sp, #16
    4f18:	c901      	ldmia	r1!, {r0}
	va_list arp;


	va_start(arp, fmt);
    4f1a:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
    4f1c:	f7ff feb0 	bl	4c80 <xvprintf>
	va_end(arp);
}
    4f20:	b003      	add	sp, #12
    4f22:	bc08      	pop	{r3}
    4f24:	b004      	add	sp, #16
    4f26:	4718      	bx	r3
	...

00004f30 <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
    4f30:	b40e      	push	{r1, r2, r3}
    4f32:	b510      	push	{r4, lr}
    4f34:	b083      	sub	sp, #12
    4f36:	a905      	add	r1, sp, #20
    4f38:	c908      	ldmia	r1!, {r3}
	va_list arp;


	outptr = buff;		/* Switch destination for memory */
    4f3a:	4c07      	ldr	r4, [pc, #28]	; (4f58 <xsprintf+0x28>)
    4f3c:	6020      	str	r0, [r4, #0]

	va_start(arp, fmt);
    4f3e:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
    4f40:	0018      	movs	r0, r3
    4f42:	f7ff fe9d 	bl	4c80 <xvprintf>
	va_end(arp);

	*outptr = 0;		/* Terminate output string with a \0 */
    4f46:	2300      	movs	r3, #0
    4f48:	6822      	ldr	r2, [r4, #0]
    4f4a:	7013      	strb	r3, [r2, #0]
	outptr = 0;			/* Switch destination for device */
    4f4c:	6023      	str	r3, [r4, #0]
}
    4f4e:	b003      	add	sp, #12
    4f50:	bc10      	pop	{r4}
    4f52:	bc08      	pop	{r3}
    4f54:	b003      	add	sp, #12
    4f56:	4718      	bx	r3
    4f58:	20000bd4 	.word	0x20000bd4
    4f5c:	00000000 	.word	0x00000000

00004f60 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
int set_int_enable(unsigned char enable)
{
    4f60:	b500      	push	{lr}
    4f62:	b083      	sub	sp, #12
    4f64:	466b      	mov	r3, sp
    4f66:	3307      	adds	r3, #7
    4f68:	7018      	strb	r0, [r3, #0]
	if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &enable))
    4f6a:	4a09      	ldr	r2, [pc, #36]	; (4f90 <set_int_enable+0x30>)
    4f6c:	6811      	ldr	r1, [r2, #0]
    4f6e:	7c49      	ldrb	r1, [r1, #17]
    4f70:	6852      	ldr	r2, [r2, #4]
    4f72:	7810      	ldrb	r0, [r2, #0]
    4f74:	2201      	movs	r2, #1
    4f76:	f007 fb0b 	bl	c590 <i2c_write>
    4f7a:	2800      	cmp	r0, #0
    4f7c:	d105      	bne.n	4f8a <set_int_enable+0x2a>
		return -1;

	st.chip_cfg.int_enable = enable;
    4f7e:	466b      	mov	r3, sp
    4f80:	79da      	ldrb	r2, [r3, #7]
    4f82:	4b03      	ldr	r3, [pc, #12]	; (4f90 <set_int_enable+0x30>)
    4f84:	745a      	strb	r2, [r3, #17]
//        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
//            return -1;
//        st.chip_cfg.int_enable = tmp;
//    }
    return 0;
}
    4f86:	b003      	add	sp, #12
    4f88:	bd00      	pop	{pc}
		return -1;
    4f8a:	2001      	movs	r0, #1
    4f8c:	4240      	negs	r0, r0
    4f8e:	e7fa      	b.n	4f86 <set_int_enable+0x26>
    4f90:	20000810 	.word	0x20000810
	...

00004fa0 <mpu_read_reg>:
 *  @param[in]  reg     Register address.
 *  @param[out] data    Register data.
 *  @return     0 if successful.
 */
int mpu_read_reg(unsigned char regaddr, unsigned char *data)
{
    4fa0:	b510      	push	{r4, lr}
    if (regaddr == st.reg->fifo_r_w || regaddr == st.reg->mem_r_w)
    4fa2:	4a0f      	ldr	r2, [pc, #60]	; (4fe0 <mpu_read_reg+0x40>)
    4fa4:	6812      	ldr	r2, [r2, #0]
    4fa6:	7b54      	ldrb	r4, [r2, #13]
    4fa8:	4284      	cmp	r4, r0
    4faa:	d00f      	beq.n	4fcc <mpu_read_reg+0x2c>
    4fac:	7e12      	ldrb	r2, [r2, #24]
    4fae:	4282      	cmp	r2, r0
    4fb0:	d00f      	beq.n	4fd2 <mpu_read_reg+0x32>
        return -1;
    if (regaddr >= st.hw->num_reg)
    4fb2:	4b0b      	ldr	r3, [pc, #44]	; (4fe0 <mpu_read_reg+0x40>)
    4fb4:	685a      	ldr	r2, [r3, #4]
    4fb6:	7914      	ldrb	r4, [r2, #4]
    4fb8:	4284      	cmp	r4, r0
    4fba:	d90d      	bls.n	4fd8 <mpu_read_reg+0x38>
        return -1;
    return i2c_read(st.hw->addr, regaddr, 1, data);
    4fbc:	7814      	ldrb	r4, [r2, #0]
    4fbe:	000b      	movs	r3, r1
    4fc0:	2201      	movs	r2, #1
    4fc2:	0001      	movs	r1, r0
    4fc4:	0020      	movs	r0, r4
    4fc6:	f007 fb0b 	bl	c5e0 <i2c_read>
}
    4fca:	bd10      	pop	{r4, pc}
        return -1;
    4fcc:	2001      	movs	r0, #1
    4fce:	4240      	negs	r0, r0
    4fd0:	e7fb      	b.n	4fca <mpu_read_reg+0x2a>
    4fd2:	2001      	movs	r0, #1
    4fd4:	4240      	negs	r0, r0
    4fd6:	e7f8      	b.n	4fca <mpu_read_reg+0x2a>
        return -1;
    4fd8:	2001      	movs	r0, #1
    4fda:	4240      	negs	r0, r0
    4fdc:	e7f5      	b.n	4fca <mpu_read_reg+0x2a>
    4fde:	46c0      	nop			; (mov r8, r8)
    4fe0:	20000810 	.word	0x20000810
	...

00004ff0 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
    4ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ff2:	b083      	sub	sp, #12
    4ff4:	0006      	movs	r6, r0
    4ff6:	000d      	movs	r5, r1
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
    4ff8:	4b20      	ldr	r3, [pc, #128]	; (507c <mpu_get_temperature+0x8c>)
    4ffa:	7a9b      	ldrb	r3, [r3, #10]
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d036      	beq.n	506e <mpu_get_temperature+0x7e>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
    5000:	4b1e      	ldr	r3, [pc, #120]	; (507c <mpu_get_temperature+0x8c>)
    5002:	681a      	ldr	r2, [r3, #0]
    5004:	7c11      	ldrb	r1, [r2, #16]
    5006:	685b      	ldr	r3, [r3, #4]
    5008:	7818      	ldrb	r0, [r3, #0]
    500a:	ab01      	add	r3, sp, #4
    500c:	2202      	movs	r2, #2
    500e:	f007 fae7 	bl	c5e0 <i2c_read>
    5012:	1e04      	subs	r4, r0, #0
    5014:	d12e      	bne.n	5074 <mpu_get_temperature+0x84>
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
    5016:	aa01      	add	r2, sp, #4
    5018:	7813      	ldrb	r3, [r2, #0]
    501a:	021b      	lsls	r3, r3, #8
    501c:	7850      	ldrb	r0, [r2, #1]
    501e:	4318      	orrs	r0, r3
    5020:	b200      	sxth	r0, r0
    if (timestamp)
    5022:	2d00      	cmp	r5, #0
    5024:	d001      	beq.n	502a <mpu_get_temperature+0x3a>
	*count = 0;
    5026:	2300      	movs	r3, #0
    5028:	602b      	str	r3, [r5, #0]
        get_ms(timestamp);

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
    502a:	4b14      	ldr	r3, [pc, #80]	; (507c <mpu_get_temperature+0x8c>)
    502c:	685d      	ldr	r5, [r3, #4]
    502e:	f7fc f939 	bl	12a4 <__aeabi_i2f>
    5032:	1c07      	adds	r7, r0, #0
    5034:	2308      	movs	r3, #8
    5036:	5ee8      	ldrsh	r0, [r5, r3]
    5038:	f7fc f934 	bl	12a4 <__aeabi_i2f>
    503c:	1c01      	adds	r1, r0, #0
    503e:	1c38      	adds	r0, r7, #0
    5040:	f7fb ff5c 	bl	efc <__aeabi_fsub>
    5044:	1c07      	adds	r7, r0, #0
    5046:	88e8      	ldrh	r0, [r5, #6]
    5048:	f7fc f92c 	bl	12a4 <__aeabi_i2f>
    504c:	1c01      	adds	r1, r0, #0
    504e:	1c38      	adds	r0, r7, #0
    5050:	f7fb fc44 	bl	8dc <__aeabi_fdiv>
    5054:	490a      	ldr	r1, [pc, #40]	; (5080 <mpu_get_temperature+0x90>)
    5056:	f7fb faaf 	bl	5b8 <__aeabi_fadd>
    505a:	218f      	movs	r1, #143	; 0x8f
    505c:	05c9      	lsls	r1, r1, #23
    505e:	f7fb fe2d 	bl	cbc <__aeabi_fmul>
    5062:	f7fc f8ff 	bl	1264 <__aeabi_f2iz>
    5066:	6030      	str	r0, [r6, #0]
    return 0;
}
    5068:	0020      	movs	r0, r4
    506a:	b003      	add	sp, #12
    506c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    506e:	2401      	movs	r4, #1
    5070:	4264      	negs	r4, r4
    5072:	e7f9      	b.n	5068 <mpu_get_temperature+0x78>
        return -1;
    5074:	2401      	movs	r4, #1
    5076:	4264      	negs	r4, r4
    5078:	e7f6      	b.n	5068 <mpu_get_temperature+0x78>
    507a:	46c0      	nop			; (mov r8, r8)
    507c:	20000810 	.word	0x20000810
    5080:	420c0000 	.word	0x420c0000
	...

00005090 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
    5090:	b500      	push	{lr}
    5092:	b083      	sub	sp, #12
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    5094:	4b70      	ldr	r3, [pc, #448]	; (5258 <mpu_reset_fifo+0x1c8>)
    5096:	7a9b      	ldrb	r3, [r3, #10]
    5098:	2b00      	cmp	r3, #0
    509a:	d100      	bne.n	509e <mpu_reset_fifo+0xe>
    509c:	e0bd      	b.n	521a <mpu_reset_fifo+0x18a>
        return -1;

    data = 0;
    509e:	466b      	mov	r3, sp
    50a0:	3307      	adds	r3, #7
    50a2:	2200      	movs	r2, #0
    50a4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
    50a6:	4a6c      	ldr	r2, [pc, #432]	; (5258 <mpu_reset_fifo+0x1c8>)
    50a8:	6811      	ldr	r1, [r2, #0]
    50aa:	7c49      	ldrb	r1, [r1, #17]
    50ac:	6852      	ldr	r2, [r2, #4]
    50ae:	7810      	ldrb	r0, [r2, #0]
    50b0:	2201      	movs	r2, #1
    50b2:	f007 fa6d 	bl	c590 <i2c_write>
    50b6:	2800      	cmp	r0, #0
    50b8:	d000      	beq.n	50bc <mpu_reset_fifo+0x2c>
    50ba:	e0b1      	b.n	5220 <mpu_reset_fifo+0x190>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
    50bc:	4b66      	ldr	r3, [pc, #408]	; (5258 <mpu_reset_fifo+0x1c8>)
    50be:	681a      	ldr	r2, [r3, #0]
    50c0:	7951      	ldrb	r1, [r2, #5]
    50c2:	685b      	ldr	r3, [r3, #4]
    50c4:	7818      	ldrb	r0, [r3, #0]
    50c6:	466b      	mov	r3, sp
    50c8:	3307      	adds	r3, #7
    50ca:	2201      	movs	r2, #1
    50cc:	f007 fa60 	bl	c590 <i2c_write>
    50d0:	2800      	cmp	r0, #0
    50d2:	d000      	beq.n	50d6 <mpu_reset_fifo+0x46>
    50d4:	e0a7      	b.n	5226 <mpu_reset_fifo+0x196>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
    50d6:	4b60      	ldr	r3, [pc, #384]	; (5258 <mpu_reset_fifo+0x1c8>)
    50d8:	681a      	ldr	r2, [r3, #0]
    50da:	7911      	ldrb	r1, [r2, #4]
    50dc:	685b      	ldr	r3, [r3, #4]
    50de:	7818      	ldrb	r0, [r3, #0]
    50e0:	466b      	mov	r3, sp
    50e2:	3307      	adds	r3, #7
    50e4:	2201      	movs	r2, #1
    50e6:	f007 fa53 	bl	c590 <i2c_write>
    50ea:	2800      	cmp	r0, #0
    50ec:	d000      	beq.n	50f0 <mpu_reset_fifo+0x60>
    50ee:	e09d      	b.n	522c <mpu_reset_fifo+0x19c>
        return -1;

    if (st.chip_cfg.dmp_on) {
    50f0:	2324      	movs	r3, #36	; 0x24
    50f2:	4a59      	ldr	r2, [pc, #356]	; (5258 <mpu_reset_fifo+0x1c8>)
    50f4:	5cd3      	ldrb	r3, [r2, r3]
    50f6:	2b00      	cmp	r3, #0
    50f8:	d046      	beq.n	5188 <mpu_reset_fifo+0xf8>
        data = BIT_FIFO_RST | BIT_DMP_RST;
    50fa:	466b      	mov	r3, sp
    50fc:	3307      	adds	r3, #7
    50fe:	220c      	movs	r2, #12
    5100:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
    5102:	4a55      	ldr	r2, [pc, #340]	; (5258 <mpu_reset_fifo+0x1c8>)
    5104:	6811      	ldr	r1, [r2, #0]
    5106:	7909      	ldrb	r1, [r1, #4]
    5108:	6852      	ldr	r2, [r2, #4]
    510a:	7810      	ldrb	r0, [r2, #0]
    510c:	2201      	movs	r2, #1
    510e:	f007 fa3f 	bl	c590 <i2c_write>
    5112:	2800      	cmp	r0, #0
    5114:	d000      	beq.n	5118 <mpu_reset_fifo+0x88>
    5116:	e08c      	b.n	5232 <mpu_reset_fifo+0x1a2>
            return -1;
        delay_ms(50);
    5118:	3032      	adds	r0, #50	; 0x32
    511a:	f007 ff89 	bl	d030 <delay_ms>
        data = BIT_DMP_EN | BIT_FIFO_EN;
    511e:	22c0      	movs	r2, #192	; 0xc0
    5120:	466b      	mov	r3, sp
    5122:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
    5124:	4b4c      	ldr	r3, [pc, #304]	; (5258 <mpu_reset_fifo+0x1c8>)
    5126:	7a9b      	ldrb	r3, [r3, #10]
    5128:	07db      	lsls	r3, r3, #31
    512a:	d502      	bpl.n	5132 <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
    512c:	3220      	adds	r2, #32
    512e:	466b      	mov	r3, sp
    5130:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
    5132:	4b49      	ldr	r3, [pc, #292]	; (5258 <mpu_reset_fifo+0x1c8>)
    5134:	681a      	ldr	r2, [r3, #0]
    5136:	7911      	ldrb	r1, [r2, #4]
    5138:	685b      	ldr	r3, [r3, #4]
    513a:	7818      	ldrb	r0, [r3, #0]
    513c:	466b      	mov	r3, sp
    513e:	3307      	adds	r3, #7
    5140:	2201      	movs	r2, #1
    5142:	f007 fa25 	bl	c590 <i2c_write>
    5146:	2800      	cmp	r0, #0
    5148:	d000      	beq.n	514c <mpu_reset_fifo+0xbc>
    514a:	e075      	b.n	5238 <mpu_reset_fifo+0x1a8>
            return -1;
        data = st.chip_cfg.int_enable;
    514c:	466b      	mov	r3, sp
    514e:	3307      	adds	r3, #7
    5150:	4a41      	ldr	r2, [pc, #260]	; (5258 <mpu_reset_fifo+0x1c8>)
    5152:	7c51      	ldrb	r1, [r2, #17]
    5154:	7019      	strb	r1, [r3, #0]
//        if (st.chip_cfg.int_enable)
//            data = BIT_DMP_INT_EN;
//        else
//            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
    5156:	6811      	ldr	r1, [r2, #0]
    5158:	7c49      	ldrb	r1, [r1, #17]
    515a:	6852      	ldr	r2, [r2, #4]
    515c:	7810      	ldrb	r0, [r2, #0]
    515e:	2201      	movs	r2, #1
    5160:	f007 fa16 	bl	c590 <i2c_write>
    5164:	2800      	cmp	r0, #0
    5166:	d16a      	bne.n	523e <mpu_reset_fifo+0x1ae>
            return -1;
        data = 0;
    5168:	466b      	mov	r3, sp
    516a:	3307      	adds	r3, #7
    516c:	2200      	movs	r2, #0
    516e:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
    5170:	4a39      	ldr	r2, [pc, #228]	; (5258 <mpu_reset_fifo+0x1c8>)
    5172:	6811      	ldr	r1, [r2, #0]
    5174:	7949      	ldrb	r1, [r1, #5]
    5176:	6852      	ldr	r2, [r2, #4]
    5178:	7810      	ldrb	r0, [r2, #0]
    517a:	2201      	movs	r2, #1
    517c:	f007 fa08 	bl	c590 <i2c_write>
    5180:	1e43      	subs	r3, r0, #1
    5182:	4198      	sbcs	r0, r3
    5184:	4240      	negs	r0, r0
    5186:	e042      	b.n	520e <mpu_reset_fifo+0x17e>
            return -1;
    } else {
        data = BIT_FIFO_RST;
    5188:	466b      	mov	r3, sp
    518a:	3307      	adds	r3, #7
    518c:	2204      	movs	r2, #4
    518e:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
    5190:	4a31      	ldr	r2, [pc, #196]	; (5258 <mpu_reset_fifo+0x1c8>)
    5192:	6811      	ldr	r1, [r2, #0]
    5194:	7909      	ldrb	r1, [r1, #4]
    5196:	6852      	ldr	r2, [r2, #4]
    5198:	7810      	ldrb	r0, [r2, #0]
    519a:	2201      	movs	r2, #1
    519c:	f007 f9f8 	bl	c590 <i2c_write>
    51a0:	2800      	cmp	r0, #0
    51a2:	d14f      	bne.n	5244 <mpu_reset_fifo+0x1b4>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
    51a4:	4b2c      	ldr	r3, [pc, #176]	; (5258 <mpu_reset_fifo+0x1c8>)
    51a6:	7c9b      	ldrb	r3, [r3, #18]
    51a8:	2b00      	cmp	r3, #0
    51aa:	d103      	bne.n	51b4 <mpu_reset_fifo+0x124>
    51ac:	4b2a      	ldr	r3, [pc, #168]	; (5258 <mpu_reset_fifo+0x1c8>)
    51ae:	7a9b      	ldrb	r3, [r3, #10]
    51b0:	07db      	lsls	r3, r3, #31
    51b2:	d42e      	bmi.n	5212 <mpu_reset_fifo+0x182>
            data = BIT_FIFO_EN;
    51b4:	2240      	movs	r2, #64	; 0x40
    51b6:	466b      	mov	r3, sp
    51b8:	71da      	strb	r2, [r3, #7]
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
    51ba:	4b27      	ldr	r3, [pc, #156]	; (5258 <mpu_reset_fifo+0x1c8>)
    51bc:	681a      	ldr	r2, [r3, #0]
    51be:	7911      	ldrb	r1, [r2, #4]
    51c0:	685b      	ldr	r3, [r3, #4]
    51c2:	7818      	ldrb	r0, [r3, #0]
    51c4:	466b      	mov	r3, sp
    51c6:	3307      	adds	r3, #7
    51c8:	2201      	movs	r2, #1
    51ca:	f007 f9e1 	bl	c590 <i2c_write>
    51ce:	2800      	cmp	r0, #0
    51d0:	d13b      	bne.n	524a <mpu_reset_fifo+0x1ba>
            return -1;
        delay_ms(50);
    51d2:	3032      	adds	r0, #50	; 0x32
    51d4:	f007 ff2c 	bl	d030 <delay_ms>
        data = st.chip_cfg.int_enable;
    51d8:	466b      	mov	r3, sp
    51da:	3307      	adds	r3, #7
    51dc:	4a1e      	ldr	r2, [pc, #120]	; (5258 <mpu_reset_fifo+0x1c8>)
    51de:	7c51      	ldrb	r1, [r2, #17]
    51e0:	7019      	strb	r1, [r3, #0]
//        if (st.chip_cfg.int_enable)
//            data = BIT_DMP_INT_EN;
//        else
//            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
    51e2:	6811      	ldr	r1, [r2, #0]
    51e4:	7c49      	ldrb	r1, [r1, #17]
    51e6:	6852      	ldr	r2, [r2, #4]
    51e8:	7810      	ldrb	r0, [r2, #0]
    51ea:	2201      	movs	r2, #1
    51ec:	f007 f9d0 	bl	c590 <i2c_write>
    51f0:	2800      	cmp	r0, #0
    51f2:	d12d      	bne.n	5250 <mpu_reset_fifo+0x1c0>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
    51f4:	4a18      	ldr	r2, [pc, #96]	; (5258 <mpu_reset_fifo+0x1c8>)
    51f6:	0013      	movs	r3, r2
    51f8:	3310      	adds	r3, #16
    51fa:	6811      	ldr	r1, [r2, #0]
    51fc:	7949      	ldrb	r1, [r1, #5]
    51fe:	6852      	ldr	r2, [r2, #4]
    5200:	7810      	ldrb	r0, [r2, #0]
    5202:	2201      	movs	r2, #1
    5204:	f007 f9c4 	bl	c590 <i2c_write>
    5208:	1e43      	subs	r3, r0, #1
    520a:	4198      	sbcs	r0, r3
    520c:	4240      	negs	r0, r0
            return -1;
    }
    return 0;
}
    520e:	b003      	add	sp, #12
    5210:	bd00      	pop	{pc}
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
    5212:	2260      	movs	r2, #96	; 0x60
    5214:	466b      	mov	r3, sp
    5216:	71da      	strb	r2, [r3, #7]
    5218:	e7cf      	b.n	51ba <mpu_reset_fifo+0x12a>
        return -1;
    521a:	2001      	movs	r0, #1
    521c:	4240      	negs	r0, r0
    521e:	e7f6      	b.n	520e <mpu_reset_fifo+0x17e>
        return -1;
    5220:	2001      	movs	r0, #1
    5222:	4240      	negs	r0, r0
    5224:	e7f3      	b.n	520e <mpu_reset_fifo+0x17e>
        return -1;
    5226:	2001      	movs	r0, #1
    5228:	4240      	negs	r0, r0
    522a:	e7f0      	b.n	520e <mpu_reset_fifo+0x17e>
        return -1;
    522c:	2001      	movs	r0, #1
    522e:	4240      	negs	r0, r0
    5230:	e7ed      	b.n	520e <mpu_reset_fifo+0x17e>
            return -1;
    5232:	2001      	movs	r0, #1
    5234:	4240      	negs	r0, r0
    5236:	e7ea      	b.n	520e <mpu_reset_fifo+0x17e>
            return -1;
    5238:	2001      	movs	r0, #1
    523a:	4240      	negs	r0, r0
    523c:	e7e7      	b.n	520e <mpu_reset_fifo+0x17e>
            return -1;
    523e:	2001      	movs	r0, #1
    5240:	4240      	negs	r0, r0
    5242:	e7e4      	b.n	520e <mpu_reset_fifo+0x17e>
            return -1;
    5244:	2001      	movs	r0, #1
    5246:	4240      	negs	r0, r0
    5248:	e7e1      	b.n	520e <mpu_reset_fifo+0x17e>
            return -1;
    524a:	2001      	movs	r0, #1
    524c:	4240      	negs	r0, r0
    524e:	e7de      	b.n	520e <mpu_reset_fifo+0x17e>
            return -1;
    5250:	2001      	movs	r0, #1
    5252:	4240      	negs	r0, r0
    5254:	e7db      	b.n	520e <mpu_reset_fifo+0x17e>
    5256:	46c0      	nop			; (mov r8, r8)
    5258:	20000810 	.word	0x20000810
    525c:	00000000 	.word	0x00000000

00005260 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
    5260:	b500      	push	{lr}
    5262:	b083      	sub	sp, #12
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    5264:	4b23      	ldr	r3, [pc, #140]	; (52f4 <mpu_set_gyro_fsr+0x94>)
    5266:	7a9b      	ldrb	r3, [r3, #10]
    5268:	2b00      	cmp	r3, #0
    526a:	d03a      	beq.n	52e2 <mpu_set_gyro_fsr+0x82>
        return -1;

    switch (fsr) {
    526c:	23fa      	movs	r3, #250	; 0xfa
    526e:	005b      	lsls	r3, r3, #1
    5270:	4298      	cmp	r0, r3
    5272:	d02e      	beq.n	52d2 <mpu_set_gyro_fsr+0x72>
    5274:	d90b      	bls.n	528e <mpu_set_gyro_fsr+0x2e>
    5276:	23fa      	movs	r3, #250	; 0xfa
    5278:	009b      	lsls	r3, r3, #2
    527a:	4298      	cmp	r0, r3
    527c:	d02d      	beq.n	52da <mpu_set_gyro_fsr+0x7a>
    527e:	23fa      	movs	r3, #250	; 0xfa
    5280:	00db      	lsls	r3, r3, #3
    5282:	4298      	cmp	r0, r3
    5284:	d130      	bne.n	52e8 <mpu_set_gyro_fsr+0x88>
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
    5286:	2218      	movs	r2, #24
    5288:	466b      	mov	r3, sp
    528a:	71da      	strb	r2, [r3, #7]
        break;
    528c:	e004      	b.n	5298 <mpu_set_gyro_fsr+0x38>
    switch (fsr) {
    528e:	28fa      	cmp	r0, #250	; 0xfa
    5290:	d12a      	bne.n	52e8 <mpu_set_gyro_fsr+0x88>
        data = INV_FSR_250DPS << 3;
    5292:	2200      	movs	r2, #0
    5294:	466b      	mov	r3, sp
    5296:	71da      	strb	r2, [r3, #7]
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
    5298:	466b      	mov	r3, sp
    529a:	3307      	adds	r3, #7
    529c:	781b      	ldrb	r3, [r3, #0]
    529e:	4a15      	ldr	r2, [pc, #84]	; (52f4 <mpu_set_gyro_fsr+0x94>)
    52a0:	7a12      	ldrb	r2, [r2, #8]
    52a2:	08db      	lsrs	r3, r3, #3
        return 0;
    52a4:	2000      	movs	r0, #0
    if (st.chip_cfg.gyro_fsr == (data >> 3))
    52a6:	429a      	cmp	r2, r3
    52a8:	d011      	beq.n	52ce <mpu_set_gyro_fsr+0x6e>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
    52aa:	4b12      	ldr	r3, [pc, #72]	; (52f4 <mpu_set_gyro_fsr+0x94>)
    52ac:	681a      	ldr	r2, [r3, #0]
    52ae:	7991      	ldrb	r1, [r2, #6]
    52b0:	685b      	ldr	r3, [r3, #4]
    52b2:	7818      	ldrb	r0, [r3, #0]
    52b4:	466b      	mov	r3, sp
    52b6:	3307      	adds	r3, #7
    52b8:	2201      	movs	r2, #1
    52ba:	f007 f969 	bl	c590 <i2c_write>
    52be:	2800      	cmp	r0, #0
    52c0:	d115      	bne.n	52ee <mpu_set_gyro_fsr+0x8e>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
    52c2:	466b      	mov	r3, sp
    52c4:	3307      	adds	r3, #7
    52c6:	781b      	ldrb	r3, [r3, #0]
    52c8:	08db      	lsrs	r3, r3, #3
    52ca:	4a0a      	ldr	r2, [pc, #40]	; (52f4 <mpu_set_gyro_fsr+0x94>)
    52cc:	7213      	strb	r3, [r2, #8]
    return 0;
}
    52ce:	b003      	add	sp, #12
    52d0:	bd00      	pop	{pc}
        data = INV_FSR_500DPS << 3;
    52d2:	2208      	movs	r2, #8
    52d4:	466b      	mov	r3, sp
    52d6:	71da      	strb	r2, [r3, #7]
        break;
    52d8:	e7de      	b.n	5298 <mpu_set_gyro_fsr+0x38>
        data = INV_FSR_1000DPS << 3;
    52da:	2210      	movs	r2, #16
    52dc:	466b      	mov	r3, sp
    52de:	71da      	strb	r2, [r3, #7]
        break;
    52e0:	e7da      	b.n	5298 <mpu_set_gyro_fsr+0x38>
        return -1;
    52e2:	2001      	movs	r0, #1
    52e4:	4240      	negs	r0, r0
    52e6:	e7f2      	b.n	52ce <mpu_set_gyro_fsr+0x6e>
        return -1;
    52e8:	2001      	movs	r0, #1
    52ea:	4240      	negs	r0, r0
    52ec:	e7ef      	b.n	52ce <mpu_set_gyro_fsr+0x6e>
        return -1;
    52ee:	2001      	movs	r0, #1
    52f0:	4240      	negs	r0, r0
    52f2:	e7ec      	b.n	52ce <mpu_set_gyro_fsr+0x6e>
    52f4:	20000810 	.word	0x20000810
	...

00005300 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
    5300:	4b11      	ldr	r3, [pc, #68]	; (5348 <mpu_get_accel_fsr+0x48>)
    5302:	7a5b      	ldrb	r3, [r3, #9]
    5304:	2b01      	cmp	r3, #1
    5306:	d015      	beq.n	5334 <mpu_get_accel_fsr+0x34>
    5308:	2b00      	cmp	r3, #0
    530a:	d006      	beq.n	531a <mpu_get_accel_fsr+0x1a>
    530c:	2b02      	cmp	r3, #2
    530e:	d014      	beq.n	533a <mpu_get_accel_fsr+0x3a>
    5310:	2b03      	cmp	r3, #3
    5312:	d015      	beq.n	5340 <mpu_get_accel_fsr+0x40>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
    5314:	2301      	movs	r3, #1
    5316:	425b      	negs	r3, r3
    5318:	e00a      	b.n	5330 <mpu_get_accel_fsr+0x30>
        fsr[0] = 2;
    531a:	2302      	movs	r3, #2
    531c:	7003      	strb	r3, [r0, #0]
    }
    if (st.chip_cfg.accel_half)
    531e:	4b0a      	ldr	r3, [pc, #40]	; (5348 <mpu_get_accel_fsr+0x48>)
    5320:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
    5322:	2300      	movs	r3, #0
    if (st.chip_cfg.accel_half)
    5324:	2a00      	cmp	r2, #0
    5326:	d003      	beq.n	5330 <mpu_get_accel_fsr+0x30>
        fsr[0] <<= 1;
    5328:	7803      	ldrb	r3, [r0, #0]
    532a:	005b      	lsls	r3, r3, #1
    532c:	7003      	strb	r3, [r0, #0]
    return 0;
    532e:	2300      	movs	r3, #0
}
    5330:	0018      	movs	r0, r3
    5332:	4770      	bx	lr
        fsr[0] = 4;
    5334:	2304      	movs	r3, #4
    5336:	7003      	strb	r3, [r0, #0]
        break;
    5338:	e7f1      	b.n	531e <mpu_get_accel_fsr+0x1e>
        fsr[0] = 8;
    533a:	2308      	movs	r3, #8
    533c:	7003      	strb	r3, [r0, #0]
        break;
    533e:	e7ee      	b.n	531e <mpu_get_accel_fsr+0x1e>
        fsr[0] = 16;
    5340:	2310      	movs	r3, #16
    5342:	7003      	strb	r3, [r0, #0]
        break;
    5344:	e7eb      	b.n	531e <mpu_get_accel_fsr+0x1e>
    5346:	46c0      	nop			; (mov r8, r8)
    5348:	20000810 	.word	0x20000810
    534c:	00000000 	.word	0x00000000

00005350 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
    5350:	b500      	push	{lr}
    5352:	b083      	sub	sp, #12
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    5354:	4b20      	ldr	r3, [pc, #128]	; (53d8 <mpu_set_accel_fsr+0x88>)
    5356:	7a9b      	ldrb	r3, [r3, #10]
    5358:	2b00      	cmp	r3, #0
    535a:	d034      	beq.n	53c6 <mpu_set_accel_fsr+0x76>
        return -1;

    switch (fsr) {
    535c:	2804      	cmp	r0, #4
    535e:	d02a      	beq.n	53b6 <mpu_set_accel_fsr+0x66>
    5360:	d907      	bls.n	5372 <mpu_set_accel_fsr+0x22>
    5362:	2808      	cmp	r0, #8
    5364:	d02b      	beq.n	53be <mpu_set_accel_fsr+0x6e>
    5366:	2810      	cmp	r0, #16
    5368:	d130      	bne.n	53cc <mpu_set_accel_fsr+0x7c>
        break;
    case 8:
        data = INV_FSR_8G << 3;
        break;
    case 16:
        data = INV_FSR_16G << 3;
    536a:	2218      	movs	r2, #24
    536c:	466b      	mov	r3, sp
    536e:	71da      	strb	r2, [r3, #7]
        break;
    5370:	e004      	b.n	537c <mpu_set_accel_fsr+0x2c>
    switch (fsr) {
    5372:	2802      	cmp	r0, #2
    5374:	d12a      	bne.n	53cc <mpu_set_accel_fsr+0x7c>
        data = INV_FSR_2G << 3;
    5376:	2200      	movs	r2, #0
    5378:	466b      	mov	r3, sp
    537a:	71da      	strb	r2, [r3, #7]
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
    537c:	466b      	mov	r3, sp
    537e:	3307      	adds	r3, #7
    5380:	781b      	ldrb	r3, [r3, #0]
    5382:	4a15      	ldr	r2, [pc, #84]	; (53d8 <mpu_set_accel_fsr+0x88>)
    5384:	7a52      	ldrb	r2, [r2, #9]
    5386:	08db      	lsrs	r3, r3, #3
        return 0;
    5388:	2000      	movs	r0, #0
    if (st.chip_cfg.accel_fsr == (data >> 3))
    538a:	429a      	cmp	r2, r3
    538c:	d011      	beq.n	53b2 <mpu_set_accel_fsr+0x62>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
    538e:	4b12      	ldr	r3, [pc, #72]	; (53d8 <mpu_set_accel_fsr+0x88>)
    5390:	681a      	ldr	r2, [r3, #0]
    5392:	79d1      	ldrb	r1, [r2, #7]
    5394:	685b      	ldr	r3, [r3, #4]
    5396:	7818      	ldrb	r0, [r3, #0]
    5398:	466b      	mov	r3, sp
    539a:	3307      	adds	r3, #7
    539c:	2201      	movs	r2, #1
    539e:	f007 f8f7 	bl	c590 <i2c_write>
    53a2:	2800      	cmp	r0, #0
    53a4:	d115      	bne.n	53d2 <mpu_set_accel_fsr+0x82>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
    53a6:	466b      	mov	r3, sp
    53a8:	3307      	adds	r3, #7
    53aa:	781b      	ldrb	r3, [r3, #0]
    53ac:	08db      	lsrs	r3, r3, #3
    53ae:	4a0a      	ldr	r2, [pc, #40]	; (53d8 <mpu_set_accel_fsr+0x88>)
    53b0:	7253      	strb	r3, [r2, #9]
    return 0;
}
    53b2:	b003      	add	sp, #12
    53b4:	bd00      	pop	{pc}
        data = INV_FSR_4G << 3;
    53b6:	2208      	movs	r2, #8
    53b8:	466b      	mov	r3, sp
    53ba:	71da      	strb	r2, [r3, #7]
        break;
    53bc:	e7de      	b.n	537c <mpu_set_accel_fsr+0x2c>
        data = INV_FSR_8G << 3;
    53be:	2210      	movs	r2, #16
    53c0:	466b      	mov	r3, sp
    53c2:	71da      	strb	r2, [r3, #7]
        break;
    53c4:	e7da      	b.n	537c <mpu_set_accel_fsr+0x2c>
        return -1;
    53c6:	2001      	movs	r0, #1
    53c8:	4240      	negs	r0, r0
    53ca:	e7f2      	b.n	53b2 <mpu_set_accel_fsr+0x62>
        return -1;
    53cc:	2001      	movs	r0, #1
    53ce:	4240      	negs	r0, r0
    53d0:	e7ef      	b.n	53b2 <mpu_set_accel_fsr+0x62>
        return -1;
    53d2:	2001      	movs	r0, #1
    53d4:	4240      	negs	r0, r0
    53d6:	e7ec      	b.n	53b2 <mpu_set_accel_fsr+0x62>
    53d8:	20000810 	.word	0x20000810
    53dc:	00000000 	.word	0x00000000

000053e0 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
    53e0:	b500      	push	{lr}
    53e2:	b083      	sub	sp, #12
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    53e4:	4b22      	ldr	r3, [pc, #136]	; (5470 <mpu_set_lpf+0x90>)
    53e6:	7a9b      	ldrb	r3, [r3, #10]
    53e8:	2b00      	cmp	r3, #0
    53ea:	d03a      	beq.n	5462 <mpu_set_lpf+0x82>
        return -1;

    if (lpf >= 188)
    53ec:	28bb      	cmp	r0, #187	; 0xbb
    53ee:	d91c      	bls.n	542a <mpu_set_lpf+0x4a>
        data = INV_FILTER_188HZ;
    53f0:	2201      	movs	r2, #1
    53f2:	466b      	mov	r3, sp
    53f4:	71da      	strb	r2, [r3, #7]
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
    53f6:	4b1e      	ldr	r3, [pc, #120]	; (5470 <mpu_set_lpf+0x90>)
    53f8:	7ada      	ldrb	r2, [r3, #11]
    53fa:	466b      	mov	r3, sp
    53fc:	3307      	adds	r3, #7
    53fe:	781b      	ldrb	r3, [r3, #0]
        return 0;
    5400:	2000      	movs	r0, #0
    if (st.chip_cfg.lpf == data)
    5402:	429a      	cmp	r2, r3
    5404:	d00f      	beq.n	5426 <mpu_set_lpf+0x46>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
    5406:	4b1a      	ldr	r3, [pc, #104]	; (5470 <mpu_set_lpf+0x90>)
    5408:	681a      	ldr	r2, [r3, #0]
    540a:	7891      	ldrb	r1, [r2, #2]
    540c:	685b      	ldr	r3, [r3, #4]
    540e:	7818      	ldrb	r0, [r3, #0]
    5410:	466b      	mov	r3, sp
    5412:	3307      	adds	r3, #7
    5414:	2201      	movs	r2, #1
    5416:	f007 f8bb 	bl	c590 <i2c_write>
    541a:	2800      	cmp	r0, #0
    541c:	d124      	bne.n	5468 <mpu_set_lpf+0x88>
        return -1;
    st.chip_cfg.lpf = data;
    541e:	466b      	mov	r3, sp
    5420:	79da      	ldrb	r2, [r3, #7]
    5422:	4b13      	ldr	r3, [pc, #76]	; (5470 <mpu_set_lpf+0x90>)
    5424:	72da      	strb	r2, [r3, #11]
    return 0;
}
    5426:	b003      	add	sp, #12
    5428:	bd00      	pop	{pc}
    else if (lpf >= 98)
    542a:	2861      	cmp	r0, #97	; 0x61
    542c:	d903      	bls.n	5436 <mpu_set_lpf+0x56>
        data = INV_FILTER_98HZ;
    542e:	2202      	movs	r2, #2
    5430:	466b      	mov	r3, sp
    5432:	71da      	strb	r2, [r3, #7]
    5434:	e7df      	b.n	53f6 <mpu_set_lpf+0x16>
    else if (lpf >= 42)
    5436:	2829      	cmp	r0, #41	; 0x29
    5438:	d903      	bls.n	5442 <mpu_set_lpf+0x62>
        data = INV_FILTER_42HZ;
    543a:	2203      	movs	r2, #3
    543c:	466b      	mov	r3, sp
    543e:	71da      	strb	r2, [r3, #7]
    5440:	e7d9      	b.n	53f6 <mpu_set_lpf+0x16>
    else if (lpf >= 20)
    5442:	2813      	cmp	r0, #19
    5444:	d903      	bls.n	544e <mpu_set_lpf+0x6e>
        data = INV_FILTER_20HZ;
    5446:	2204      	movs	r2, #4
    5448:	466b      	mov	r3, sp
    544a:	71da      	strb	r2, [r3, #7]
    544c:	e7d3      	b.n	53f6 <mpu_set_lpf+0x16>
    else if (lpf >= 10)
    544e:	2809      	cmp	r0, #9
    5450:	d903      	bls.n	545a <mpu_set_lpf+0x7a>
        data = INV_FILTER_10HZ;
    5452:	2205      	movs	r2, #5
    5454:	466b      	mov	r3, sp
    5456:	71da      	strb	r2, [r3, #7]
    5458:	e7cd      	b.n	53f6 <mpu_set_lpf+0x16>
        data = INV_FILTER_5HZ;
    545a:	2206      	movs	r2, #6
    545c:	466b      	mov	r3, sp
    545e:	71da      	strb	r2, [r3, #7]
    5460:	e7c9      	b.n	53f6 <mpu_set_lpf+0x16>
        return -1;
    5462:	2001      	movs	r0, #1
    5464:	4240      	negs	r0, r0
    5466:	e7de      	b.n	5426 <mpu_set_lpf+0x46>
        return -1;
    5468:	2001      	movs	r0, #1
    546a:	4240      	negs	r0, r0
    546c:	e7db      	b.n	5426 <mpu_set_lpf+0x46>
    546e:	46c0      	nop			; (mov r8, r8)
    5470:	20000810 	.word	0x20000810
	...

00005480 <mpu_get_compass_sample_rate>:
 *  @return     0 if successful.
 */
int mpu_get_compass_sample_rate(unsigned short *rate)
{
#ifdef AK89xx_SECONDARY
    rate[0] = st.chip_cfg.compass_sample_rate;
    5480:	4b02      	ldr	r3, [pc, #8]	; (548c <mpu_get_compass_sample_rate+0xc>)
    5482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5484:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    rate[0] = 0;
    return -1;
#endif
}
    5486:	2000      	movs	r0, #0
    5488:	4770      	bx	lr
    548a:	46c0      	nop			; (mov r8, r8)
    548c:	20000810 	.word	0x20000810

00005490 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
    5490:	b530      	push	{r4, r5, lr}
    5492:	b083      	sub	sp, #12
    5494:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
    5496:	d022      	beq.n	54de <mpu_set_compass_sample_rate+0x4e>
    5498:	4b17      	ldr	r3, [pc, #92]	; (54f8 <mpu_set_compass_sample_rate+0x68>)
    549a:	89d8      	ldrh	r0, [r3, #14]
    549c:	4281      	cmp	r1, r0
    549e:	d821      	bhi.n	54e4 <mpu_set_compass_sample_rate+0x54>
    54a0:	2964      	cmp	r1, #100	; 0x64
    54a2:	d822      	bhi.n	54ea <mpu_set_compass_sample_rate+0x5a>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
    54a4:	466b      	mov	r3, sp
    54a6:	1ddc      	adds	r4, r3, #7
    54a8:	f7fa fe94 	bl	1d4 <__udivsi3>
    54ac:	3801      	subs	r0, #1
    54ae:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
    54b0:	4b11      	ldr	r3, [pc, #68]	; (54f8 <mpu_set_compass_sample_rate+0x68>)
    54b2:	2224      	movs	r2, #36	; 0x24
    54b4:	6819      	ldr	r1, [r3, #0]
    54b6:	5c89      	ldrb	r1, [r1, r2]
    54b8:	685b      	ldr	r3, [r3, #4]
    54ba:	7818      	ldrb	r0, [r3, #0]
    54bc:	0023      	movs	r3, r4
    54be:	3a23      	subs	r2, #35	; 0x23
    54c0:	f007 f866 	bl	c590 <i2c_write>
    54c4:	1e04      	subs	r4, r0, #0
    54c6:	d113      	bne.n	54f0 <mpu_set_compass_sample_rate+0x60>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    54c8:	4d0b      	ldr	r5, [pc, #44]	; (54f8 <mpu_set_compass_sample_rate+0x68>)
    54ca:	89e8      	ldrh	r0, [r5, #14]
    54cc:	466b      	mov	r3, sp
    54ce:	79d9      	ldrb	r1, [r3, #7]
    54d0:	3101      	adds	r1, #1
    54d2:	f7fa ff09 	bl	2e8 <__divsi3>
    54d6:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
#else
    return -1;
#endif
}
    54d8:	0020      	movs	r0, r4
    54da:	b003      	add	sp, #12
    54dc:	bd30      	pop	{r4, r5, pc}
        return -1;
    54de:	2401      	movs	r4, #1
    54e0:	4264      	negs	r4, r4
    54e2:	e7f9      	b.n	54d8 <mpu_set_compass_sample_rate+0x48>
    54e4:	2401      	movs	r4, #1
    54e6:	4264      	negs	r4, r4
    54e8:	e7f6      	b.n	54d8 <mpu_set_compass_sample_rate+0x48>
    54ea:	2401      	movs	r4, #1
    54ec:	4264      	negs	r4, r4
    54ee:	e7f3      	b.n	54d8 <mpu_set_compass_sample_rate+0x48>
        return -1;
    54f0:	2401      	movs	r4, #1
    54f2:	4264      	negs	r4, r4
    54f4:	e7f0      	b.n	54d8 <mpu_set_compass_sample_rate+0x48>
    54f6:	46c0      	nop			; (mov r8, r8)
    54f8:	20000810 	.word	0x20000810
    54fc:	00000000 	.word	0x00000000

00005500 <mpu_get_gyro_sens>:
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
    switch (st.chip_cfg.gyro_fsr) {
    5500:	4b0e      	ldr	r3, [pc, #56]	; (553c <mpu_get_gyro_sens+0x3c>)
    5502:	7a1b      	ldrb	r3, [r3, #8]
    5504:	2b01      	cmp	r3, #1
    5506:	d00c      	beq.n	5522 <mpu_get_gyro_sens+0x22>
    5508:	2b00      	cmp	r3, #0
    550a:	d006      	beq.n	551a <mpu_get_gyro_sens+0x1a>
    550c:	2b02      	cmp	r3, #2
    550e:	d00c      	beq.n	552a <mpu_get_gyro_sens+0x2a>
    5510:	2b03      	cmp	r3, #3
    5512:	d00e      	beq.n	5532 <mpu_get_gyro_sens+0x32>
        break;
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
        break;
    default:
        return -1;
    5514:	2001      	movs	r0, #1
    5516:	4240      	negs	r0, r0
    5518:	e002      	b.n	5520 <mpu_get_gyro_sens+0x20>
        sens[0] = 131.f;
    551a:	4b09      	ldr	r3, [pc, #36]	; (5540 <mpu_get_gyro_sens+0x40>)
    551c:	6003      	str	r3, [r0, #0]
    }
    return 0;
    551e:	2000      	movs	r0, #0
}
    5520:	4770      	bx	lr
        sens[0] = 65.5f;
    5522:	4b08      	ldr	r3, [pc, #32]	; (5544 <mpu_get_gyro_sens+0x44>)
    5524:	6003      	str	r3, [r0, #0]
    return 0;
    5526:	2000      	movs	r0, #0
        break;
    5528:	e7fa      	b.n	5520 <mpu_get_gyro_sens+0x20>
        sens[0] = 32.8f;
    552a:	4b07      	ldr	r3, [pc, #28]	; (5548 <mpu_get_gyro_sens+0x48>)
    552c:	6003      	str	r3, [r0, #0]
    return 0;
    552e:	2000      	movs	r0, #0
        break;
    5530:	e7f6      	b.n	5520 <mpu_get_gyro_sens+0x20>
        sens[0] = 16.4f;
    5532:	4b06      	ldr	r3, [pc, #24]	; (554c <mpu_get_gyro_sens+0x4c>)
    5534:	6003      	str	r3, [r0, #0]
    return 0;
    5536:	2000      	movs	r0, #0
        break;
    5538:	e7f2      	b.n	5520 <mpu_get_gyro_sens+0x20>
    553a:	46c0      	nop			; (mov r8, r8)
    553c:	20000810 	.word	0x20000810
    5540:	43030000 	.word	0x43030000
    5544:	42830000 	.word	0x42830000
    5548:	42033333 	.word	0x42033333
    554c:	41833333 	.word	0x41833333

00005550 <mpu_get_accel_sens>:
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
    switch (st.chip_cfg.accel_fsr) {
    5550:	4b13      	ldr	r3, [pc, #76]	; (55a0 <mpu_get_accel_sens+0x50>)
    5552:	7a5b      	ldrb	r3, [r3, #9]
    5554:	2b01      	cmp	r3, #1
    5556:	d016      	beq.n	5586 <mpu_get_accel_sens+0x36>
    5558:	2b00      	cmp	r3, #0
    555a:	d006      	beq.n	556a <mpu_get_accel_sens+0x1a>
    555c:	2b02      	cmp	r3, #2
    555e:	d016      	beq.n	558e <mpu_get_accel_sens+0x3e>
    5560:	2b03      	cmp	r3, #3
    5562:	d018      	beq.n	5596 <mpu_get_accel_sens+0x46>
        break;
    case INV_FSR_16G:
        sens[0] = 2048;
        break;
    default:
        return -1;
    5564:	2301      	movs	r3, #1
    5566:	425b      	negs	r3, r3
    5568:	e00b      	b.n	5582 <mpu_get_accel_sens+0x32>
        sens[0] = 16384;
    556a:	2380      	movs	r3, #128	; 0x80
    556c:	01db      	lsls	r3, r3, #7
    556e:	8003      	strh	r3, [r0, #0]
    }
    if (st.chip_cfg.accel_half)
    5570:	4b0b      	ldr	r3, [pc, #44]	; (55a0 <mpu_get_accel_sens+0x50>)
    5572:	7cda      	ldrb	r2, [r3, #19]
        sens[0] >>= 1;
    return 0;
    5574:	2300      	movs	r3, #0
    if (st.chip_cfg.accel_half)
    5576:	2a00      	cmp	r2, #0
    5578:	d003      	beq.n	5582 <mpu_get_accel_sens+0x32>
        sens[0] >>= 1;
    557a:	8803      	ldrh	r3, [r0, #0]
    557c:	085b      	lsrs	r3, r3, #1
    557e:	8003      	strh	r3, [r0, #0]
    return 0;
    5580:	2300      	movs	r3, #0
}
    5582:	0018      	movs	r0, r3
    5584:	4770      	bx	lr
        sens[0] = 8192;
    5586:	2380      	movs	r3, #128	; 0x80
    5588:	019b      	lsls	r3, r3, #6
    558a:	8003      	strh	r3, [r0, #0]
        break;
    558c:	e7f0      	b.n	5570 <mpu_get_accel_sens+0x20>
        sens[0] = 4096;
    558e:	2380      	movs	r3, #128	; 0x80
    5590:	015b      	lsls	r3, r3, #5
    5592:	8003      	strh	r3, [r0, #0]
        break;
    5594:	e7ec      	b.n	5570 <mpu_get_accel_sens+0x20>
        sens[0] = 2048;
    5596:	2380      	movs	r3, #128	; 0x80
    5598:	011b      	lsls	r3, r3, #4
    559a:	8003      	strh	r3, [r0, #0]
        break;
    559c:	e7e8      	b.n	5570 <mpu_get_accel_sens+0x20>
    559e:	46c0      	nop			; (mov r8, r8)
    55a0:	20000810 	.word	0x20000810
	...

000055b0 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
    55b0:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
    55b2:	2324      	movs	r3, #36	; 0x24
    55b4:	4a16      	ldr	r2, [pc, #88]	; (5610 <mpu_configure_fifo+0x60>)
    55b6:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
    55b8:	2400      	movs	r4, #0
    if (st.chip_cfg.dmp_on)
    55ba:	2b00      	cmp	r3, #0
    55bc:	d113      	bne.n	55e6 <mpu_configure_fifo+0x36>
    else {
        if (!(st.chip_cfg.sensors))
    55be:	7a94      	ldrb	r4, [r2, #10]
    55c0:	2c00      	cmp	r4, #0
    55c2:	d015      	beq.n	55f0 <mpu_configure_fifo+0x40>
    sensors &= ~INV_XYZ_COMPASS;
    55c4:	2301      	movs	r3, #1
    55c6:	4398      	bics	r0, r3
            return -1;
        prev = st.chip_cfg.fifo_enable;
    55c8:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
    55ca:	4004      	ands	r4, r0
    55cc:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
    55ce:	1b04      	subs	r4, r0, r4
    55d0:	1e63      	subs	r3, r4, #1
    55d2:	419c      	sbcs	r4, r3
    55d4:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
    55d6:	2800      	cmp	r0, #0
    55d8:	d10d      	bne.n	55f6 <mpu_configure_fifo+0x46>
    55da:	7d13      	ldrb	r3, [r2, #20]
    55dc:	2b00      	cmp	r3, #0
    55de:	d004      	beq.n	55ea <mpu_configure_fifo+0x3a>
            set_int_enable(1);
    55e0:	2001      	movs	r0, #1
    55e2:	f7ff fcbd 	bl	4f60 <set_int_enable>
            }
        }
    }

    return result;
}
    55e6:	0020      	movs	r0, r4
    55e8:	bd70      	pop	{r4, r5, r6, pc}
            set_int_enable(0);
    55ea:	f7ff fcb9 	bl	4f60 <set_int_enable>
    55ee:	e7fa      	b.n	55e6 <mpu_configure_fifo+0x36>
            return -1;
    55f0:	2401      	movs	r4, #1
    55f2:	4264      	negs	r4, r4
    55f4:	e7f7      	b.n	55e6 <mpu_configure_fifo+0x36>
            set_int_enable(1);
    55f6:	2001      	movs	r0, #1
    55f8:	f7ff fcb2 	bl	4f60 <set_int_enable>
            if (mpu_reset_fifo()) {
    55fc:	f7ff fd48 	bl	5090 <mpu_reset_fifo>
    5600:	2800      	cmp	r0, #0
    5602:	d0f0      	beq.n	55e6 <mpu_configure_fifo+0x36>
                st.chip_cfg.fifo_enable = prev;
    5604:	4b02      	ldr	r3, [pc, #8]	; (5610 <mpu_configure_fifo+0x60>)
    5606:	741d      	strb	r5, [r3, #16]
                return -1;
    5608:	2401      	movs	r4, #1
    560a:	4264      	negs	r4, r4
    560c:	e7eb      	b.n	55e6 <mpu_configure_fifo+0x36>
    560e:	46c0      	nop			; (mov r8, r8)
    5610:	20000810 	.word	0x20000810
	...

00005620 <mpu_get_int_status>:
 *  @brief      Read the MPU interrupt status registers.
 *  @param[out] status  Mask of interrupt bits.
 *  @return     0 if successful.
 */
int mpu_get_int_status(short *status)
{
    5620:	b510      	push	{r4, lr}
    5622:	b082      	sub	sp, #8
    5624:	0004      	movs	r4, r0
    unsigned char tmp[2];
    if (!st.chip_cfg.sensors)
    5626:	4b0e      	ldr	r3, [pc, #56]	; (5660 <mpu_get_int_status+0x40>)
    5628:	7a9b      	ldrb	r3, [r3, #10]
    562a:	2b00      	cmp	r3, #0
    562c:	d012      	beq.n	5654 <mpu_get_int_status+0x34>
        return -1;
    if (i2c_read(st.hw->addr, st.reg->dmp_int_status, 2, tmp))
    562e:	4b0c      	ldr	r3, [pc, #48]	; (5660 <mpu_get_int_status+0x40>)
    5630:	681a      	ldr	r2, [r3, #0]
    5632:	7c91      	ldrb	r1, [r2, #18]
    5634:	685b      	ldr	r3, [r3, #4]
    5636:	7818      	ldrb	r0, [r3, #0]
    5638:	ab01      	add	r3, sp, #4
    563a:	2202      	movs	r2, #2
    563c:	f006 ffd0 	bl	c5e0 <i2c_read>
    5640:	2800      	cmp	r0, #0
    5642:	d10a      	bne.n	565a <mpu_get_int_status+0x3a>
        return -1;
    status[0] = (tmp[0] << 8) | tmp[1];
    5644:	a901      	add	r1, sp, #4
    5646:	780a      	ldrb	r2, [r1, #0]
    5648:	0212      	lsls	r2, r2, #8
    564a:	784b      	ldrb	r3, [r1, #1]
    564c:	4313      	orrs	r3, r2
    564e:	8023      	strh	r3, [r4, #0]
    return 0;
}
    5650:	b002      	add	sp, #8
    5652:	bd10      	pop	{r4, pc}
        return -1;
    5654:	2001      	movs	r0, #1
    5656:	4240      	negs	r0, r0
    5658:	e7fa      	b.n	5650 <mpu_get_int_status+0x30>
        return -1;
    565a:	2001      	movs	r0, #1
    565c:	4240      	negs	r0, r0
    565e:	e7f7      	b.n	5650 <mpu_get_int_status+0x30>
    5660:	20000810 	.word	0x20000810
	...

00005670 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
    5670:	b5f0      	push	{r4, r5, r6, r7, lr}
    5672:	b083      	sub	sp, #12
    5674:	0005      	movs	r5, r0
    5676:	000e      	movs	r6, r1
    5678:	0017      	movs	r7, r2
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
    567a:	2324      	movs	r3, #36	; 0x24
    567c:	4a2c      	ldr	r2, [pc, #176]	; (5730 <mpu_read_fifo_stream+0xc0>)
    567e:	5cd3      	ldrb	r3, [r2, r3]
    5680:	2b00      	cmp	r3, #0
    5682:	d046      	beq.n	5712 <mpu_read_fifo_stream+0xa2>
        return -1;

    if (!st.chip_cfg.sensors)
    5684:	7a93      	ldrb	r3, [r2, #10]
    5686:	2b00      	cmp	r3, #0
    5688:	d046      	beq.n	5718 <mpu_read_fifo_stream+0xa8>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
    568a:	0013      	movs	r3, r2
    568c:	6812      	ldr	r2, [r2, #0]
    568e:	7b11      	ldrb	r1, [r2, #12]
    5690:	685b      	ldr	r3, [r3, #4]
    5692:	7818      	ldrb	r0, [r3, #0]
    5694:	ab01      	add	r3, sp, #4
    5696:	2202      	movs	r2, #2
    5698:	f006 ffa2 	bl	c5e0 <i2c_read>
    569c:	2800      	cmp	r0, #0
    569e:	d13e      	bne.n	571e <mpu_read_fifo_stream+0xae>
        return -1;
    fifo_count = (tmp[0] << 8) | tmp[1];
    56a0:	ab01      	add	r3, sp, #4
    56a2:	781c      	ldrb	r4, [r3, #0]
    56a4:	0224      	lsls	r4, r4, #8
    56a6:	785b      	ldrb	r3, [r3, #1]
    56a8:	431c      	orrs	r4, r3
    if (fifo_count < length) {
    56aa:	42ac      	cmp	r4, r5
    56ac:	d327      	bcc.n	56fe <mpu_read_fifo_stream+0x8e>
        more[0] = 0;
        return -1;
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
    56ae:	4b20      	ldr	r3, [pc, #128]	; (5730 <mpu_read_fifo_stream+0xc0>)
    56b0:	685a      	ldr	r2, [r3, #4]
    56b2:	8853      	ldrh	r3, [r2, #2]
    56b4:	085b      	lsrs	r3, r3, #1
    56b6:	429c      	cmp	r4, r3
    56b8:	d90d      	bls.n	56d6 <mpu_read_fifo_stream+0x66>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
    56ba:	4b1d      	ldr	r3, [pc, #116]	; (5730 <mpu_read_fifo_stream+0xc0>)
    56bc:	681b      	ldr	r3, [r3, #0]
    56be:	7cd9      	ldrb	r1, [r3, #19]
    56c0:	7810      	ldrb	r0, [r2, #0]
    56c2:	ab01      	add	r3, sp, #4
    56c4:	2201      	movs	r2, #1
    56c6:	f006 ff8b 	bl	c5e0 <i2c_read>
    56ca:	2800      	cmp	r0, #0
    56cc:	d12a      	bne.n	5724 <mpu_read_fifo_stream+0xb4>
            return -1;
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
    56ce:	ab01      	add	r3, sp, #4
    56d0:	781b      	ldrb	r3, [r3, #0]
    56d2:	06db      	lsls	r3, r3, #27
    56d4:	d418      	bmi.n	5708 <mpu_read_fifo_stream+0x98>
            mpu_reset_fifo();
            return -2;
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
    56d6:	b2ea      	uxtb	r2, r5
    56d8:	4b15      	ldr	r3, [pc, #84]	; (5730 <mpu_read_fifo_stream+0xc0>)
    56da:	6819      	ldr	r1, [r3, #0]
    56dc:	7b49      	ldrb	r1, [r1, #13]
    56de:	685b      	ldr	r3, [r3, #4]
    56e0:	7818      	ldrb	r0, [r3, #0]
    56e2:	0033      	movs	r3, r6
    56e4:	f006 ff7c 	bl	c5e0 <i2c_read>
    56e8:	1e06      	subs	r6, r0, #0
    56ea:	d11e      	bne.n	572a <mpu_read_fifo_stream+0xba>
        return -1;
    more[0] = fifo_count / length - 1;
    56ec:	0029      	movs	r1, r5
    56ee:	0020      	movs	r0, r4
    56f0:	f7fa fd70 	bl	1d4 <__udivsi3>
    56f4:	3801      	subs	r0, #1
    56f6:	7038      	strb	r0, [r7, #0]
    return 0;
}
    56f8:	0030      	movs	r0, r6
    56fa:	b003      	add	sp, #12
    56fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        more[0] = 0;
    56fe:	2300      	movs	r3, #0
    5700:	703b      	strb	r3, [r7, #0]
        return -1;
    5702:	2601      	movs	r6, #1
    5704:	4276      	negs	r6, r6
    5706:	e7f7      	b.n	56f8 <mpu_read_fifo_stream+0x88>
            mpu_reset_fifo();
    5708:	f7ff fcc2 	bl	5090 <mpu_reset_fifo>
            return -2;
    570c:	2602      	movs	r6, #2
    570e:	4276      	negs	r6, r6
    5710:	e7f2      	b.n	56f8 <mpu_read_fifo_stream+0x88>
        return -1;
    5712:	2601      	movs	r6, #1
    5714:	4276      	negs	r6, r6
    5716:	e7ef      	b.n	56f8 <mpu_read_fifo_stream+0x88>
        return -1;
    5718:	2601      	movs	r6, #1
    571a:	4276      	negs	r6, r6
    571c:	e7ec      	b.n	56f8 <mpu_read_fifo_stream+0x88>
        return -1;
    571e:	2601      	movs	r6, #1
    5720:	4276      	negs	r6, r6
    5722:	e7e9      	b.n	56f8 <mpu_read_fifo_stream+0x88>
            return -1;
    5724:	2601      	movs	r6, #1
    5726:	4276      	negs	r6, r6
    5728:	e7e6      	b.n	56f8 <mpu_read_fifo_stream+0x88>
        return -1;
    572a:	2601      	movs	r6, #1
    572c:	4276      	negs	r6, r6
    572e:	e7e3      	b.n	56f8 <mpu_read_fifo_stream+0x88>
    5730:	20000810 	.word	0x20000810
	...

00005740 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
    5740:	b510      	push	{r4, lr}
    5742:	b082      	sub	sp, #8
    5744:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
    5746:	4b59      	ldr	r3, [pc, #356]	; (58ac <mpu_set_bypass+0x16c>)
    5748:	7c9b      	ldrb	r3, [r3, #18]
    574a:	4283      	cmp	r3, r0
    574c:	d100      	bne.n	5750 <mpu_set_bypass+0x10>
    574e:	e09b      	b.n	5888 <mpu_set_bypass+0x148>
        return 0;

    if (bypass_on) {
    5750:	2800      	cmp	r0, #0
    5752:	d045      	beq.n	57e0 <mpu_set_bypass+0xa0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
    5754:	4b55      	ldr	r3, [pc, #340]	; (58ac <mpu_set_bypass+0x16c>)
    5756:	681a      	ldr	r2, [r3, #0]
    5758:	7911      	ldrb	r1, [r2, #4]
    575a:	685b      	ldr	r3, [r3, #4]
    575c:	7818      	ldrb	r0, [r3, #0]
    575e:	466b      	mov	r3, sp
    5760:	3307      	adds	r3, #7
    5762:	2201      	movs	r2, #1
    5764:	f006 ff3c 	bl	c5e0 <i2c_read>
    5768:	2800      	cmp	r0, #0
    576a:	d000      	beq.n	576e <mpu_set_bypass+0x2e>
    576c:	e08e      	b.n	588c <mpu_set_bypass+0x14c>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
    576e:	466b      	mov	r3, sp
    5770:	3307      	adds	r3, #7
    5772:	781a      	ldrb	r2, [r3, #0]
    5774:	2120      	movs	r1, #32
    5776:	438a      	bics	r2, r1
    5778:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
    577a:	4a4c      	ldr	r2, [pc, #304]	; (58ac <mpu_set_bypass+0x16c>)
    577c:	6811      	ldr	r1, [r2, #0]
    577e:	7909      	ldrb	r1, [r1, #4]
    5780:	6852      	ldr	r2, [r2, #4]
    5782:	7810      	ldrb	r0, [r2, #0]
    5784:	2201      	movs	r2, #1
    5786:	f006 ff03 	bl	c590 <i2c_write>
    578a:	2800      	cmp	r0, #0
    578c:	d000      	beq.n	5790 <mpu_set_bypass+0x50>
    578e:	e080      	b.n	5892 <mpu_set_bypass+0x152>
            return -1;
        delay_ms(3);
    5790:	3003      	adds	r0, #3
    5792:	f007 fc4d 	bl	d030 <delay_ms>
        tmp = BIT_BYPASS_EN;
    5796:	2202      	movs	r2, #2
    5798:	466b      	mov	r3, sp
    579a:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
    579c:	2322      	movs	r3, #34	; 0x22
    579e:	4a43      	ldr	r2, [pc, #268]	; (58ac <mpu_set_bypass+0x16c>)
    57a0:	5cd3      	ldrb	r3, [r2, r3]
    57a2:	2b00      	cmp	r3, #0
    57a4:	d002      	beq.n	57ac <mpu_set_bypass+0x6c>
            tmp |= BIT_ACTL;
    57a6:	2282      	movs	r2, #130	; 0x82
    57a8:	466b      	mov	r3, sp
    57aa:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
    57ac:	2323      	movs	r3, #35	; 0x23
    57ae:	4a3f      	ldr	r2, [pc, #252]	; (58ac <mpu_set_bypass+0x16c>)
    57b0:	5cd3      	ldrb	r3, [r2, r3]
    57b2:	2b00      	cmp	r3, #0
    57b4:	d005      	beq.n	57c2 <mpu_set_bypass+0x82>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
    57b6:	466b      	mov	r3, sp
    57b8:	1dda      	adds	r2, r3, #7
    57ba:	79db      	ldrb	r3, [r3, #7]
    57bc:	2130      	movs	r1, #48	; 0x30
    57be:	430b      	orrs	r3, r1
    57c0:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
    57c2:	4b3a      	ldr	r3, [pc, #232]	; (58ac <mpu_set_bypass+0x16c>)
    57c4:	681a      	ldr	r2, [r3, #0]
    57c6:	7dd1      	ldrb	r1, [r2, #23]
    57c8:	685b      	ldr	r3, [r3, #4]
    57ca:	7818      	ldrb	r0, [r3, #0]
    57cc:	466b      	mov	r3, sp
    57ce:	3307      	adds	r3, #7
    57d0:	2201      	movs	r2, #1
    57d2:	f006 fedd 	bl	c590 <i2c_write>
    57d6:	2800      	cmp	r0, #0
    57d8:	d046      	beq.n	5868 <mpu_set_bypass+0x128>
            return -1;
    57da:	2001      	movs	r0, #1
    57dc:	4240      	negs	r0, r0
    57de:	e046      	b.n	586e <mpu_set_bypass+0x12e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
    57e0:	4b32      	ldr	r3, [pc, #200]	; (58ac <mpu_set_bypass+0x16c>)
    57e2:	681a      	ldr	r2, [r3, #0]
    57e4:	7911      	ldrb	r1, [r2, #4]
    57e6:	685b      	ldr	r3, [r3, #4]
    57e8:	7818      	ldrb	r0, [r3, #0]
    57ea:	466b      	mov	r3, sp
    57ec:	3307      	adds	r3, #7
    57ee:	2201      	movs	r2, #1
    57f0:	f006 fef6 	bl	c5e0 <i2c_read>
    57f4:	2800      	cmp	r0, #0
    57f6:	d14f      	bne.n	5898 <mpu_set_bypass+0x158>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
    57f8:	4b2c      	ldr	r3, [pc, #176]	; (58ac <mpu_set_bypass+0x16c>)
    57fa:	7a9b      	ldrb	r3, [r3, #10]
    57fc:	07db      	lsls	r3, r3, #31
    57fe:	d538      	bpl.n	5872 <mpu_set_bypass+0x132>
            tmp |= BIT_AUX_IF_EN;
    5800:	466b      	mov	r3, sp
    5802:	1dda      	adds	r2, r3, #7
    5804:	79db      	ldrb	r3, [r3, #7]
    5806:	2120      	movs	r1, #32
    5808:	430b      	orrs	r3, r1
    580a:	7013      	strb	r3, [r2, #0]
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
    580c:	4b27      	ldr	r3, [pc, #156]	; (58ac <mpu_set_bypass+0x16c>)
    580e:	681a      	ldr	r2, [r3, #0]
    5810:	7911      	ldrb	r1, [r2, #4]
    5812:	685b      	ldr	r3, [r3, #4]
    5814:	7818      	ldrb	r0, [r3, #0]
    5816:	466b      	mov	r3, sp
    5818:	3307      	adds	r3, #7
    581a:	2201      	movs	r2, #1
    581c:	f006 feb8 	bl	c590 <i2c_write>
    5820:	2800      	cmp	r0, #0
    5822:	d13c      	bne.n	589e <mpu_set_bypass+0x15e>
            return -1;
        delay_ms(3);
    5824:	3003      	adds	r0, #3
    5826:	f007 fc03 	bl	d030 <delay_ms>
        if (st.chip_cfg.active_low_int)
    582a:	2322      	movs	r3, #34	; 0x22
    582c:	4a1f      	ldr	r2, [pc, #124]	; (58ac <mpu_set_bypass+0x16c>)
    582e:	5cd3      	ldrb	r3, [r2, r3]
    5830:	2b00      	cmp	r3, #0
    5832:	d025      	beq.n	5880 <mpu_set_bypass+0x140>
            tmp = BIT_ACTL;
    5834:	2280      	movs	r2, #128	; 0x80
    5836:	466b      	mov	r3, sp
    5838:	71da      	strb	r2, [r3, #7]
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
    583a:	2323      	movs	r3, #35	; 0x23
    583c:	4a1b      	ldr	r2, [pc, #108]	; (58ac <mpu_set_bypass+0x16c>)
    583e:	5cd3      	ldrb	r3, [r2, r3]
    5840:	2b00      	cmp	r3, #0
    5842:	d005      	beq.n	5850 <mpu_set_bypass+0x110>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
    5844:	466b      	mov	r3, sp
    5846:	1dda      	adds	r2, r3, #7
    5848:	79db      	ldrb	r3, [r3, #7]
    584a:	2130      	movs	r1, #48	; 0x30
    584c:	430b      	orrs	r3, r1
    584e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
    5850:	4b16      	ldr	r3, [pc, #88]	; (58ac <mpu_set_bypass+0x16c>)
    5852:	681a      	ldr	r2, [r3, #0]
    5854:	7dd1      	ldrb	r1, [r2, #23]
    5856:	685b      	ldr	r3, [r3, #4]
    5858:	7818      	ldrb	r0, [r3, #0]
    585a:	466b      	mov	r3, sp
    585c:	3307      	adds	r3, #7
    585e:	2201      	movs	r2, #1
    5860:	f006 fe96 	bl	c590 <i2c_write>
    5864:	2800      	cmp	r0, #0
    5866:	d11d      	bne.n	58a4 <mpu_set_bypass+0x164>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    5868:	4b10      	ldr	r3, [pc, #64]	; (58ac <mpu_set_bypass+0x16c>)
    586a:	749c      	strb	r4, [r3, #18]
    return 0;
    586c:	2000      	movs	r0, #0
}
    586e:	b002      	add	sp, #8
    5870:	bd10      	pop	{r4, pc}
            tmp &= ~BIT_AUX_IF_EN;
    5872:	466b      	mov	r3, sp
    5874:	1dda      	adds	r2, r3, #7
    5876:	79db      	ldrb	r3, [r3, #7]
    5878:	2120      	movs	r1, #32
    587a:	438b      	bics	r3, r1
    587c:	7013      	strb	r3, [r2, #0]
    587e:	e7c5      	b.n	580c <mpu_set_bypass+0xcc>
            tmp = 0;
    5880:	2200      	movs	r2, #0
    5882:	466b      	mov	r3, sp
    5884:	71da      	strb	r2, [r3, #7]
    5886:	e7d8      	b.n	583a <mpu_set_bypass+0xfa>
        return 0;
    5888:	2000      	movs	r0, #0
    588a:	e7f0      	b.n	586e <mpu_set_bypass+0x12e>
            return -1;
    588c:	2001      	movs	r0, #1
    588e:	4240      	negs	r0, r0
    5890:	e7ed      	b.n	586e <mpu_set_bypass+0x12e>
            return -1;
    5892:	2001      	movs	r0, #1
    5894:	4240      	negs	r0, r0
    5896:	e7ea      	b.n	586e <mpu_set_bypass+0x12e>
            return -1;
    5898:	2001      	movs	r0, #1
    589a:	4240      	negs	r0, r0
    589c:	e7e7      	b.n	586e <mpu_set_bypass+0x12e>
            return -1;
    589e:	2001      	movs	r0, #1
    58a0:	4240      	negs	r0, r0
    58a2:	e7e4      	b.n	586e <mpu_set_bypass+0x12e>
            return -1;
    58a4:	2001      	movs	r0, #1
    58a6:	4240      	negs	r0, r0
    58a8:	e7e1      	b.n	586e <mpu_set_bypass+0x12e>
    58aa:	46c0      	nop			; (mov r8, r8)
    58ac:	20000810 	.word	0x20000810

000058b0 <mpu_set_int_level>:
 *  @param[in]  active_low  1 for active low, 0 for active high.
 *  @return     0 if successful.
 */
int mpu_set_int_level(unsigned char active_low)
{
    st.chip_cfg.active_low_int = active_low;
    58b0:	2322      	movs	r3, #34	; 0x22
    58b2:	4a02      	ldr	r2, [pc, #8]	; (58bc <mpu_set_int_level+0xc>)
    58b4:	54d0      	strb	r0, [r2, r3]
    return 0;
}
    58b6:	2000      	movs	r0, #0
    58b8:	4770      	bx	lr
    58ba:	46c0      	nop			; (mov r8, r8)
    58bc:	20000810 	.word	0x20000810

000058c0 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
    58c0:	b510      	push	{r4, lr}
    58c2:	b082      	sub	sp, #8
    58c4:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
    58c6:	2323      	movs	r3, #35	; 0x23
    58c8:	4a1c      	ldr	r2, [pc, #112]	; (593c <mpu_set_int_latched+0x7c>)
    58ca:	5cd3      	ldrb	r3, [r2, r3]
    58cc:	4283      	cmp	r3, r0
    58ce:	d02f      	beq.n	5930 <mpu_set_int_latched+0x70>
        return 0;

    if (enable)
    58d0:	2800      	cmp	r0, #0
    58d2:	d029      	beq.n	5928 <mpu_set_int_latched+0x68>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
    58d4:	2230      	movs	r2, #48	; 0x30
    58d6:	466b      	mov	r3, sp
    58d8:	71da      	strb	r2, [r3, #7]
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
    58da:	4b18      	ldr	r3, [pc, #96]	; (593c <mpu_set_int_latched+0x7c>)
    58dc:	7c9b      	ldrb	r3, [r3, #18]
    58de:	2b00      	cmp	r3, #0
    58e0:	d005      	beq.n	58ee <mpu_set_int_latched+0x2e>
        tmp |= BIT_BYPASS_EN;
    58e2:	466b      	mov	r3, sp
    58e4:	1dda      	adds	r2, r3, #7
    58e6:	79db      	ldrb	r3, [r3, #7]
    58e8:	2102      	movs	r1, #2
    58ea:	430b      	orrs	r3, r1
    58ec:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
    58ee:	2322      	movs	r3, #34	; 0x22
    58f0:	4a12      	ldr	r2, [pc, #72]	; (593c <mpu_set_int_latched+0x7c>)
    58f2:	5cd3      	ldrb	r3, [r2, r3]
    58f4:	2b00      	cmp	r3, #0
    58f6:	d006      	beq.n	5906 <mpu_set_int_latched+0x46>
        tmp |= BIT_ACTL;
    58f8:	466b      	mov	r3, sp
    58fa:	1dda      	adds	r2, r3, #7
    58fc:	79d9      	ldrb	r1, [r3, #7]
    58fe:	2380      	movs	r3, #128	; 0x80
    5900:	425b      	negs	r3, r3
    5902:	430b      	orrs	r3, r1
    5904:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
    5906:	4b0d      	ldr	r3, [pc, #52]	; (593c <mpu_set_int_latched+0x7c>)
    5908:	681a      	ldr	r2, [r3, #0]
    590a:	7dd1      	ldrb	r1, [r2, #23]
    590c:	685b      	ldr	r3, [r3, #4]
    590e:	7818      	ldrb	r0, [r3, #0]
    5910:	466b      	mov	r3, sp
    5912:	3307      	adds	r3, #7
    5914:	2201      	movs	r2, #1
    5916:	f006 fe3b 	bl	c590 <i2c_write>
    591a:	2800      	cmp	r0, #0
    591c:	d10a      	bne.n	5934 <mpu_set_int_latched+0x74>
        return -1;
    st.chip_cfg.latched_int = enable;
    591e:	2323      	movs	r3, #35	; 0x23
    5920:	4a06      	ldr	r2, [pc, #24]	; (593c <mpu_set_int_latched+0x7c>)
    5922:	54d4      	strb	r4, [r2, r3]
    return 0;
}
    5924:	b002      	add	sp, #8
    5926:	bd10      	pop	{r4, pc}
        tmp = 0;
    5928:	2200      	movs	r2, #0
    592a:	466b      	mov	r3, sp
    592c:	71da      	strb	r2, [r3, #7]
    592e:	e7d4      	b.n	58da <mpu_set_int_latched+0x1a>
        return 0;
    5930:	2000      	movs	r0, #0
    5932:	e7f7      	b.n	5924 <mpu_set_int_latched+0x64>
        return -1;
    5934:	2001      	movs	r0, #1
    5936:	4240      	negs	r0, r0
    5938:	e7f4      	b.n	5924 <mpu_set_int_latched+0x64>
    593a:	46c0      	nop			; (mov r8, r8)
    593c:	20000810 	.word	0x20000810

00005940 <mpu_lp_accel_mode>:
{
    5940:	b510      	push	{r4, lr}
    5942:	b082      	sub	sp, #8
    5944:	0004      	movs	r4, r0
    if (rate > 40)
    5946:	2828      	cmp	r0, #40	; 0x28
    5948:	d860      	bhi.n	5a0c <mpu_lp_accel_mode+0xcc>
    if (!rate) {
    594a:	2800      	cmp	r0, #0
    594c:	d117      	bne.n	597e <mpu_lp_accel_mode+0x3e>
        mpu_set_int_latched(0);
    594e:	2000      	movs	r0, #0
    5950:	f7ff ffb6 	bl	58c0 <mpu_set_int_latched>
        tmp[0] = 0;
    5954:	ab01      	add	r3, sp, #4
    5956:	2200      	movs	r2, #0
    5958:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
    595a:	3207      	adds	r2, #7
    595c:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
    595e:	4a31      	ldr	r2, [pc, #196]	; (5a24 <mpu_lp_accel_mode+0xe4>)
    5960:	6811      	ldr	r1, [r2, #0]
    5962:	7d49      	ldrb	r1, [r1, #21]
    5964:	6852      	ldr	r2, [r2, #4]
    5966:	7810      	ldrb	r0, [r2, #0]
    5968:	2202      	movs	r2, #2
    596a:	f006 fe11 	bl	c590 <i2c_write>
    596e:	1e04      	subs	r4, r0, #0
    5970:	d14f      	bne.n	5a12 <mpu_lp_accel_mode+0xd2>
        st.chip_cfg.lp_accel_mode = 0;
    5972:	2200      	movs	r2, #0
    5974:	4b2b      	ldr	r3, [pc, #172]	; (5a24 <mpu_lp_accel_mode+0xe4>)
    5976:	751a      	strb	r2, [r3, #20]
}
    5978:	0020      	movs	r0, r4
    597a:	b002      	add	sp, #8
    597c:	bd10      	pop	{r4, pc}
    mpu_set_int_latched(1);
    597e:	2001      	movs	r0, #1
    5980:	f7ff ff9e 	bl	58c0 <mpu_set_int_latched>
    if (rate == 1)
    5984:	2c01      	cmp	r4, #1
    5986:	d007      	beq.n	5998 <mpu_lp_accel_mode+0x58>
    else if (rate == 2)
    5988:	2c02      	cmp	r4, #2
    598a:	d02b      	beq.n	59e4 <mpu_lp_accel_mode+0xa4>
    else if (rate <= 5)
    598c:	2c05      	cmp	r4, #5
    598e:	d82d      	bhi.n	59ec <mpu_lp_accel_mode+0xac>
        tmp[0] = INV_LPA_5HZ;
    5990:	2204      	movs	r2, #4
    5992:	ab01      	add	r3, sp, #4
    5994:	701a      	strb	r2, [r3, #0]
    5996:	e002      	b.n	599e <mpu_lp_accel_mode+0x5e>
        tmp[0] = INV_LPA_1_25HZ;
    5998:	2202      	movs	r2, #2
    599a:	ab01      	add	r3, sp, #4
    599c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
    599e:	4b21      	ldr	r3, [pc, #132]	; (5a24 <mpu_lp_accel_mode+0xe4>)
    59a0:	681a      	ldr	r2, [r3, #0]
    59a2:	7a51      	ldrb	r1, [r2, #9]
    59a4:	685b      	ldr	r3, [r3, #4]
    59a6:	7818      	ldrb	r0, [r3, #0]
    59a8:	ab01      	add	r3, sp, #4
    59aa:	2201      	movs	r2, #1
    59ac:	f006 fdf0 	bl	c590 <i2c_write>
    59b0:	2800      	cmp	r0, #0
    59b2:	d131      	bne.n	5a18 <mpu_lp_accel_mode+0xd8>
    tmp[0] = BIT_LPA_CYCLE;
    59b4:	ab01      	add	r3, sp, #4
    59b6:	2220      	movs	r2, #32
    59b8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
    59ba:	4a1a      	ldr	r2, [pc, #104]	; (5a24 <mpu_lp_accel_mode+0xe4>)
    59bc:	6811      	ldr	r1, [r2, #0]
    59be:	7d49      	ldrb	r1, [r1, #21]
    59c0:	6852      	ldr	r2, [r2, #4]
    59c2:	7810      	ldrb	r0, [r2, #0]
    59c4:	2201      	movs	r2, #1
    59c6:	f006 fde3 	bl	c590 <i2c_write>
    59ca:	1e04      	subs	r4, r0, #0
    59cc:	d127      	bne.n	5a1e <mpu_lp_accel_mode+0xde>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
    59ce:	4b15      	ldr	r3, [pc, #84]	; (5a24 <mpu_lp_accel_mode+0xe4>)
    59d0:	2208      	movs	r2, #8
    59d2:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
    59d4:	2200      	movs	r2, #0
    59d6:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
    59d8:	3201      	adds	r2, #1
    59da:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
    59dc:	2000      	movs	r0, #0
    59de:	f7ff fde7 	bl	55b0 <mpu_configure_fifo>
    return 0;
    59e2:	e7c9      	b.n	5978 <mpu_lp_accel_mode+0x38>
        tmp[0] = INV_LPA_2_5HZ;
    59e4:	2203      	movs	r2, #3
    59e6:	ab01      	add	r3, sp, #4
    59e8:	701a      	strb	r2, [r3, #0]
    59ea:	e7d8      	b.n	599e <mpu_lp_accel_mode+0x5e>
    else if (rate <= 10)
    59ec:	2c0a      	cmp	r4, #10
    59ee:	d803      	bhi.n	59f8 <mpu_lp_accel_mode+0xb8>
        tmp[0] = INV_LPA_10HZ;
    59f0:	2205      	movs	r2, #5
    59f2:	ab01      	add	r3, sp, #4
    59f4:	701a      	strb	r2, [r3, #0]
    59f6:	e7d2      	b.n	599e <mpu_lp_accel_mode+0x5e>
    else if (rate <= 20)
    59f8:	2c14      	cmp	r4, #20
    59fa:	d803      	bhi.n	5a04 <mpu_lp_accel_mode+0xc4>
        tmp[0] = INV_LPA_20HZ;
    59fc:	2206      	movs	r2, #6
    59fe:	ab01      	add	r3, sp, #4
    5a00:	701a      	strb	r2, [r3, #0]
    5a02:	e7cc      	b.n	599e <mpu_lp_accel_mode+0x5e>
        tmp[0] = INV_LPA_40HZ;
    5a04:	2207      	movs	r2, #7
    5a06:	ab01      	add	r3, sp, #4
    5a08:	701a      	strb	r2, [r3, #0]
    5a0a:	e7c8      	b.n	599e <mpu_lp_accel_mode+0x5e>
        return -1;
    5a0c:	2401      	movs	r4, #1
    5a0e:	4264      	negs	r4, r4
    5a10:	e7b2      	b.n	5978 <mpu_lp_accel_mode+0x38>
            return -1;
    5a12:	2401      	movs	r4, #1
    5a14:	4264      	negs	r4, r4
    5a16:	e7af      	b.n	5978 <mpu_lp_accel_mode+0x38>
        return -1;
    5a18:	2401      	movs	r4, #1
    5a1a:	4264      	negs	r4, r4
    5a1c:	e7ac      	b.n	5978 <mpu_lp_accel_mode+0x38>
        return -1;
    5a1e:	2401      	movs	r4, #1
    5a20:	4264      	negs	r4, r4
    5a22:	e7a9      	b.n	5978 <mpu_lp_accel_mode+0x38>
    5a24:	20000810 	.word	0x20000810
	...

00005a30 <mpu_set_sample_rate>:
{
    5a30:	b530      	push	{r4, r5, lr}
    5a32:	b083      	sub	sp, #12
    5a34:	0004      	movs	r4, r0
    if (!(st.chip_cfg.sensors))
    5a36:	4b2d      	ldr	r3, [pc, #180]	; (5aec <mpu_set_sample_rate+0xbc>)
    5a38:	7a9b      	ldrb	r3, [r3, #10]
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	d04c      	beq.n	5ad8 <mpu_set_sample_rate+0xa8>
    if (st.chip_cfg.dmp_on)
    5a3e:	2324      	movs	r3, #36	; 0x24
    5a40:	4a2a      	ldr	r2, [pc, #168]	; (5aec <mpu_set_sample_rate+0xbc>)
    5a42:	5cd3      	ldrb	r3, [r2, r3]
    5a44:	2b00      	cmp	r3, #0
    5a46:	d14a      	bne.n	5ade <mpu_set_sample_rate+0xae>
        if (st.chip_cfg.lp_accel_mode) {
    5a48:	7d13      	ldrb	r3, [r2, #20]
    5a4a:	2b00      	cmp	r3, #0
    5a4c:	d006      	beq.n	5a5c <mpu_set_sample_rate+0x2c>
            if (rate && (rate <= 40)) {
    5a4e:	1e43      	subs	r3, r0, #1
    5a50:	b29b      	uxth	r3, r3
    5a52:	2b27      	cmp	r3, #39	; 0x27
    5a54:	d93c      	bls.n	5ad0 <mpu_set_sample_rate+0xa0>
            mpu_lp_accel_mode(0);
    5a56:	2000      	movs	r0, #0
    5a58:	f7ff ff72 	bl	5940 <mpu_lp_accel_mode>
    5a5c:	1c23      	adds	r3, r4, #0
    5a5e:	22fa      	movs	r2, #250	; 0xfa
    5a60:	0092      	lsls	r2, r2, #2
    5a62:	4294      	cmp	r4, r2
    5a64:	d901      	bls.n	5a6a <mpu_set_sample_rate+0x3a>
    5a66:	4b22      	ldr	r3, [pc, #136]	; (5af0 <mpu_set_sample_rate+0xc0>)
    5a68:	881b      	ldrh	r3, [r3, #0]
        data = 1000 / rate - 1;
    5a6a:	1c19      	adds	r1, r3, #0
    5a6c:	b29b      	uxth	r3, r3
    5a6e:	2b04      	cmp	r3, #4
    5a70:	d200      	bcs.n	5a74 <mpu_set_sample_rate+0x44>
    5a72:	2104      	movs	r1, #4
    5a74:	b289      	uxth	r1, r1
    5a76:	20fa      	movs	r0, #250	; 0xfa
    5a78:	0080      	lsls	r0, r0, #2
    5a7a:	f7fa fc35 	bl	2e8 <__divsi3>
    5a7e:	3801      	subs	r0, #1
    5a80:	466b      	mov	r3, sp
    5a82:	71d8      	strb	r0, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
    5a84:	4b19      	ldr	r3, [pc, #100]	; (5aec <mpu_set_sample_rate+0xbc>)
    5a86:	681a      	ldr	r2, [r3, #0]
    5a88:	7851      	ldrb	r1, [r2, #1]
    5a8a:	685b      	ldr	r3, [r3, #4]
    5a8c:	7818      	ldrb	r0, [r3, #0]
    5a8e:	466b      	mov	r3, sp
    5a90:	3307      	adds	r3, #7
    5a92:	2201      	movs	r2, #1
    5a94:	f006 fd7c 	bl	c590 <i2c_write>
    5a98:	1e04      	subs	r4, r0, #0
    5a9a:	d123      	bne.n	5ae4 <mpu_set_sample_rate+0xb4>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
    5a9c:	4d13      	ldr	r5, [pc, #76]	; (5aec <mpu_set_sample_rate+0xbc>)
    5a9e:	466b      	mov	r3, sp
    5aa0:	79d9      	ldrb	r1, [r3, #7]
    5aa2:	3101      	adds	r1, #1
    5aa4:	20fa      	movs	r0, #250	; 0xfa
    5aa6:	0080      	lsls	r0, r0, #2
    5aa8:	f7fa fc1e 	bl	2e8 <__divsi3>
    5aac:	81e8      	strh	r0, [r5, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
    5aae:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    5ab0:	1c18      	adds	r0, r3, #0
    5ab2:	b29b      	uxth	r3, r3
    5ab4:	2b64      	cmp	r3, #100	; 0x64
    5ab6:	d900      	bls.n	5aba <mpu_set_sample_rate+0x8a>
    5ab8:	2064      	movs	r0, #100	; 0x64
    5aba:	b280      	uxth	r0, r0
    5abc:	f7ff fce8 	bl	5490 <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
    5ac0:	4b0a      	ldr	r3, [pc, #40]	; (5aec <mpu_set_sample_rate+0xbc>)
    5ac2:	89d8      	ldrh	r0, [r3, #14]
    5ac4:	0840      	lsrs	r0, r0, #1
    5ac6:	f7ff fc8b 	bl	53e0 <mpu_set_lpf>
}
    5aca:	0020      	movs	r0, r4
    5acc:	b003      	add	sp, #12
    5ace:	bd30      	pop	{r4, r5, pc}
                mpu_lp_accel_mode(rate);
    5ad0:	f7ff ff36 	bl	5940 <mpu_lp_accel_mode>
                return 0;
    5ad4:	2400      	movs	r4, #0
    5ad6:	e7f8      	b.n	5aca <mpu_set_sample_rate+0x9a>
        return -1;
    5ad8:	2401      	movs	r4, #1
    5ada:	4264      	negs	r4, r4
    5adc:	e7f5      	b.n	5aca <mpu_set_sample_rate+0x9a>
        return -1;
    5ade:	2401      	movs	r4, #1
    5ae0:	4264      	negs	r4, r4
    5ae2:	e7f2      	b.n	5aca <mpu_set_sample_rate+0x9a>
            return -1;
    5ae4:	2401      	movs	r4, #1
    5ae6:	4264      	negs	r4, r4
    5ae8:	e7ef      	b.n	5aca <mpu_set_sample_rate+0x9a>
    5aea:	46c0      	nop			; (mov r8, r8)
    5aec:	20000810 	.word	0x20000810
    5af0:	0000e128 	.word	0x0000e128
	...

00005b00 <mpu_set_sensors>:
{
    5b00:	b530      	push	{r4, r5, lr}
    5b02:	b083      	sub	sp, #12
    5b04:	0004      	movs	r4, r0
    if (sensors & INV_XYZ_GYRO)
    5b06:	2370      	movs	r3, #112	; 0x70
    5b08:	4203      	tst	r3, r0
    5b0a:	d100      	bne.n	5b0e <mpu_set_sensors+0xe>
    5b0c:	e090      	b.n	5c30 <mpu_set_sensors+0x130>
        data = INV_CLK_PLL;
    5b0e:	2201      	movs	r2, #1
    5b10:	466b      	mov	r3, sp
    5b12:	71da      	strb	r2, [r3, #7]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
    5b14:	4b70      	ldr	r3, [pc, #448]	; (5cd8 <mpu_set_sensors+0x1d8>)
    5b16:	681a      	ldr	r2, [r3, #0]
    5b18:	7d51      	ldrb	r1, [r2, #21]
    5b1a:	685b      	ldr	r3, [r3, #4]
    5b1c:	7818      	ldrb	r0, [r3, #0]
    5b1e:	466b      	mov	r3, sp
    5b20:	3307      	adds	r3, #7
    5b22:	2201      	movs	r2, #1
    5b24:	f006 fd34 	bl	c590 <i2c_write>
    5b28:	2800      	cmp	r0, #0
    5b2a:	d000      	beq.n	5b2e <mpu_set_sensors+0x2e>
    5b2c:	e09f      	b.n	5c6e <mpu_set_sensors+0x16e>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
    5b2e:	466b      	mov	r3, sp
    5b30:	1dda      	adds	r2, r3, #7
    5b32:	79db      	ldrb	r3, [r3, #7]
    5b34:	2140      	movs	r1, #64	; 0x40
    5b36:	438b      	bics	r3, r1
    5b38:	4967      	ldr	r1, [pc, #412]	; (5cd8 <mpu_set_sensors+0x1d8>)
    5b3a:	730b      	strb	r3, [r1, #12]
    data = 0;
    5b3c:	2300      	movs	r3, #0
    5b3e:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
    5b40:	0663      	lsls	r3, r4, #25
    5b42:	d400      	bmi.n	5b46 <mpu_set_sensors+0x46>
    5b44:	e08f      	b.n	5c66 <mpu_set_sensors+0x166>
    if (!(sensors & INV_Y_GYRO))
    5b46:	06a3      	lsls	r3, r4, #26
    5b48:	d405      	bmi.n	5b56 <mpu_set_sensors+0x56>
        data |= BIT_STBY_YG;
    5b4a:	466b      	mov	r3, sp
    5b4c:	1dda      	adds	r2, r3, #7
    5b4e:	79db      	ldrb	r3, [r3, #7]
    5b50:	2102      	movs	r1, #2
    5b52:	430b      	orrs	r3, r1
    5b54:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
    5b56:	06e3      	lsls	r3, r4, #27
    5b58:	d405      	bmi.n	5b66 <mpu_set_sensors+0x66>
        data |= BIT_STBY_ZG;
    5b5a:	466b      	mov	r3, sp
    5b5c:	1dda      	adds	r2, r3, #7
    5b5e:	79db      	ldrb	r3, [r3, #7]
    5b60:	2101      	movs	r1, #1
    5b62:	430b      	orrs	r3, r1
    5b64:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
    5b66:	0723      	lsls	r3, r4, #28
    5b68:	d405      	bmi.n	5b76 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XYZA;
    5b6a:	466b      	mov	r3, sp
    5b6c:	1dda      	adds	r2, r3, #7
    5b6e:	79db      	ldrb	r3, [r3, #7]
    5b70:	2138      	movs	r1, #56	; 0x38
    5b72:	430b      	orrs	r3, r1
    5b74:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
    5b76:	4b58      	ldr	r3, [pc, #352]	; (5cd8 <mpu_set_sensors+0x1d8>)
    5b78:	681a      	ldr	r2, [r3, #0]
    5b7a:	7d91      	ldrb	r1, [r2, #22]
    5b7c:	685b      	ldr	r3, [r3, #4]
    5b7e:	7818      	ldrb	r0, [r3, #0]
    5b80:	466b      	mov	r3, sp
    5b82:	3307      	adds	r3, #7
    5b84:	2201      	movs	r2, #1
    5b86:	f006 fd03 	bl	c590 <i2c_write>
    5b8a:	2800      	cmp	r0, #0
    5b8c:	d000      	beq.n	5b90 <mpu_set_sensors+0x90>
    5b8e:	e074      	b.n	5c7a <mpu_set_sensors+0x17a>
    if (sensors && (sensors != INV_XYZ_ACCEL))
    5b90:	2308      	movs	r3, #8
    5b92:	0022      	movs	r2, r4
    5b94:	439a      	bics	r2, r3
    5b96:	d100      	bne.n	5b9a <mpu_set_sensors+0x9a>
    5b98:	e088      	b.n	5cac <mpu_set_sensors+0x1ac>
        mpu_set_int_latched(0);
    5b9a:	2000      	movs	r0, #0
    5b9c:	f7ff fe90 	bl	58c0 <mpu_set_int_latched>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
    5ba0:	4b4d      	ldr	r3, [pc, #308]	; (5cd8 <mpu_set_sensors+0x1d8>)
    5ba2:	681a      	ldr	r2, [r3, #0]
    5ba4:	7911      	ldrb	r1, [r2, #4]
    5ba6:	685b      	ldr	r3, [r3, #4]
    5ba8:	7818      	ldrb	r0, [r3, #0]
    5baa:	466b      	mov	r3, sp
    5bac:	3306      	adds	r3, #6
    5bae:	2201      	movs	r2, #1
    5bb0:	f006 fd16 	bl	c5e0 <i2c_read>
    5bb4:	2800      	cmp	r0, #0
    5bb6:	d000      	beq.n	5bba <mpu_set_sensors+0xba>
    5bb8:	e06c      	b.n	5c94 <mpu_set_sensors+0x194>
    if (sensors & INV_XYZ_COMPASS) {
    5bba:	07e3      	lsls	r3, r4, #31
    5bbc:	d400      	bmi.n	5bc0 <mpu_set_sensors+0xc0>
    5bbe:	e081      	b.n	5cc4 <mpu_set_sensors+0x1c4>
        data = AKM_SINGLE_MEASUREMENT;
    5bc0:	2211      	movs	r2, #17
    5bc2:	466b      	mov	r3, sp
    5bc4:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
    5bc6:	466b      	mov	r3, sp
    5bc8:	1d9a      	adds	r2, r3, #6
    5bca:	799b      	ldrb	r3, [r3, #6]
    5bcc:	2120      	movs	r1, #32
    5bce:	430b      	orrs	r3, r1
    5bd0:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.dmp_on)
    5bd2:	2324      	movs	r3, #36	; 0x24
    5bd4:	4a40      	ldr	r2, [pc, #256]	; (5cd8 <mpu_set_sensors+0x1d8>)
    5bd6:	5cd3      	ldrb	r3, [r2, r3]
    5bd8:	2b00      	cmp	r3, #0
    5bda:	d054      	beq.n	5c86 <mpu_set_sensors+0x186>
        user_ctrl |= BIT_DMP_EN;
    5bdc:	466b      	mov	r3, sp
    5bde:	1d9a      	adds	r2, r3, #6
    5be0:	7999      	ldrb	r1, [r3, #6]
    5be2:	2380      	movs	r3, #128	; 0x80
    5be4:	425b      	negs	r3, r3
    5be6:	430b      	orrs	r3, r1
    5be8:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
    5bea:	4b3b      	ldr	r3, [pc, #236]	; (5cd8 <mpu_set_sensors+0x1d8>)
    5bec:	2226      	movs	r2, #38	; 0x26
    5bee:	6819      	ldr	r1, [r3, #0]
    5bf0:	5c89      	ldrb	r1, [r1, r2]
    5bf2:	685b      	ldr	r3, [r3, #4]
    5bf4:	7818      	ldrb	r0, [r3, #0]
    5bf6:	466b      	mov	r3, sp
    5bf8:	3307      	adds	r3, #7
    5bfa:	3a25      	subs	r2, #37	; 0x25
    5bfc:	f006 fcc8 	bl	c590 <i2c_write>
    5c00:	2800      	cmp	r0, #0
    5c02:	d14a      	bne.n	5c9a <mpu_set_sensors+0x19a>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
    5c04:	4b34      	ldr	r3, [pc, #208]	; (5cd8 <mpu_set_sensors+0x1d8>)
    5c06:	681a      	ldr	r2, [r3, #0]
    5c08:	7911      	ldrb	r1, [r2, #4]
    5c0a:	685b      	ldr	r3, [r3, #4]
    5c0c:	7818      	ldrb	r0, [r3, #0]
    5c0e:	466b      	mov	r3, sp
    5c10:	3306      	adds	r3, #6
    5c12:	2201      	movs	r2, #1
    5c14:	f006 fcbc 	bl	c590 <i2c_write>
    5c18:	1e05      	subs	r5, r0, #0
    5c1a:	d141      	bne.n	5ca0 <mpu_set_sensors+0x1a0>
    st.chip_cfg.sensors = sensors;
    5c1c:	4b2e      	ldr	r3, [pc, #184]	; (5cd8 <mpu_set_sensors+0x1d8>)
    5c1e:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
    5c20:	2200      	movs	r2, #0
    5c22:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
    5c24:	2032      	movs	r0, #50	; 0x32
    5c26:	f007 fa03 	bl	d030 <delay_ms>
}
    5c2a:	0028      	movs	r0, r5
    5c2c:	b003      	add	sp, #12
    5c2e:	bd30      	pop	{r4, r5, pc}
    else if (sensors)
    5c30:	2800      	cmp	r0, #0
    5c32:	d003      	beq.n	5c3c <mpu_set_sensors+0x13c>
        data = 0;
    5c34:	2200      	movs	r2, #0
    5c36:	466b      	mov	r3, sp
    5c38:	71da      	strb	r2, [r3, #7]
    5c3a:	e76b      	b.n	5b14 <mpu_set_sensors+0x14>
        data = BIT_SLEEP;
    5c3c:	466b      	mov	r3, sp
    5c3e:	3307      	adds	r3, #7
    5c40:	2240      	movs	r2, #64	; 0x40
    5c42:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
    5c44:	4a24      	ldr	r2, [pc, #144]	; (5cd8 <mpu_set_sensors+0x1d8>)
    5c46:	6811      	ldr	r1, [r2, #0]
    5c48:	7d49      	ldrb	r1, [r1, #21]
    5c4a:	6852      	ldr	r2, [r2, #4]
    5c4c:	7810      	ldrb	r0, [r2, #0]
    5c4e:	2201      	movs	r2, #1
    5c50:	f006 fc9e 	bl	c590 <i2c_write>
    5c54:	2800      	cmp	r0, #0
    5c56:	d10a      	bne.n	5c6e <mpu_set_sensors+0x16e>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
    5c58:	466b      	mov	r3, sp
    5c5a:	3307      	adds	r3, #7
    5c5c:	781b      	ldrb	r3, [r3, #0]
    5c5e:	2240      	movs	r2, #64	; 0x40
    5c60:	4393      	bics	r3, r2
    5c62:	4a1d      	ldr	r2, [pc, #116]	; (5cd8 <mpu_set_sensors+0x1d8>)
    5c64:	7313      	strb	r3, [r2, #12]
        data |= BIT_STBY_XG;
    5c66:	2204      	movs	r2, #4
    5c68:	466b      	mov	r3, sp
    5c6a:	71da      	strb	r2, [r3, #7]
    5c6c:	e76b      	b.n	5b46 <mpu_set_sensors+0x46>
        st.chip_cfg.sensors = 0;
    5c6e:	2200      	movs	r2, #0
    5c70:	4b19      	ldr	r3, [pc, #100]	; (5cd8 <mpu_set_sensors+0x1d8>)
    5c72:	729a      	strb	r2, [r3, #10]
        return -1;
    5c74:	2501      	movs	r5, #1
    5c76:	426d      	negs	r5, r5
    5c78:	e7d7      	b.n	5c2a <mpu_set_sensors+0x12a>
        st.chip_cfg.sensors = 0;
    5c7a:	2200      	movs	r2, #0
    5c7c:	4b16      	ldr	r3, [pc, #88]	; (5cd8 <mpu_set_sensors+0x1d8>)
    5c7e:	729a      	strb	r2, [r3, #10]
        return -1;
    5c80:	2501      	movs	r5, #1
    5c82:	426d      	negs	r5, r5
    5c84:	e7d1      	b.n	5c2a <mpu_set_sensors+0x12a>
        user_ctrl &= ~BIT_DMP_EN;
    5c86:	466b      	mov	r3, sp
    5c88:	1d9a      	adds	r2, r3, #6
    5c8a:	7999      	ldrb	r1, [r3, #6]
    5c8c:	237f      	movs	r3, #127	; 0x7f
    5c8e:	400b      	ands	r3, r1
    5c90:	7013      	strb	r3, [r2, #0]
    5c92:	e7aa      	b.n	5bea <mpu_set_sensors+0xea>
        return -1;
    5c94:	2501      	movs	r5, #1
    5c96:	426d      	negs	r5, r5
    5c98:	e7c7      	b.n	5c2a <mpu_set_sensors+0x12a>
        return -1;
    5c9a:	2501      	movs	r5, #1
    5c9c:	426d      	negs	r5, r5
    5c9e:	e7c4      	b.n	5c2a <mpu_set_sensors+0x12a>
        return -1;
    5ca0:	2501      	movs	r5, #1
    5ca2:	426d      	negs	r5, r5
    5ca4:	e7c1      	b.n	5c2a <mpu_set_sensors+0x12a>
        return -1;
    5ca6:	2501      	movs	r5, #1
    5ca8:	426d      	negs	r5, r5
    5caa:	e7be      	b.n	5c2a <mpu_set_sensors+0x12a>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
    5cac:	4b0a      	ldr	r3, [pc, #40]	; (5cd8 <mpu_set_sensors+0x1d8>)
    5cae:	681a      	ldr	r2, [r3, #0]
    5cb0:	7911      	ldrb	r1, [r2, #4]
    5cb2:	685b      	ldr	r3, [r3, #4]
    5cb4:	7818      	ldrb	r0, [r3, #0]
    5cb6:	466b      	mov	r3, sp
    5cb8:	3306      	adds	r3, #6
    5cba:	2201      	movs	r2, #1
    5cbc:	f006 fc90 	bl	c5e0 <i2c_read>
    5cc0:	2800      	cmp	r0, #0
    5cc2:	d1f0      	bne.n	5ca6 <mpu_set_sensors+0x1a6>
        data = AKM_POWER_DOWN;
    5cc4:	2210      	movs	r2, #16
    5cc6:	466b      	mov	r3, sp
    5cc8:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
    5cca:	466b      	mov	r3, sp
    5ccc:	1d9a      	adds	r2, r3, #6
    5cce:	799b      	ldrb	r3, [r3, #6]
    5cd0:	2120      	movs	r1, #32
    5cd2:	438b      	bics	r3, r1
    5cd4:	7013      	strb	r3, [r2, #0]
    5cd6:	e77c      	b.n	5bd2 <mpu_set_sensors+0xd2>
    5cd8:	20000810 	.word	0x20000810
    5cdc:	00000000 	.word	0x00000000

00005ce0 <mpu_init>:
{
    5ce0:	b530      	push	{r4, r5, lr}
    5ce2:	b085      	sub	sp, #20
    data[0] = BIT_RESET;
    5ce4:	ab02      	add	r3, sp, #8
    5ce6:	2280      	movs	r2, #128	; 0x80
    5ce8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
    5cea:	4ab9      	ldr	r2, [pc, #740]	; (5fd0 <mpu_init+0x2f0>)
    5cec:	6811      	ldr	r1, [r2, #0]
    5cee:	7d49      	ldrb	r1, [r1, #21]
    5cf0:	6852      	ldr	r2, [r2, #4]
    5cf2:	7810      	ldrb	r0, [r2, #0]
    5cf4:	2201      	movs	r2, #1
    5cf6:	f006 fc4b 	bl	c590 <i2c_write>
    5cfa:	2800      	cmp	r0, #0
    5cfc:	d000      	beq.n	5d00 <mpu_init+0x20>
    5cfe:	e14b      	b.n	5f98 <mpu_init+0x2b8>
    delay_ms(100);
    5d00:	3064      	adds	r0, #100	; 0x64
    5d02:	f007 f995 	bl	d030 <delay_ms>
    data[0] = 0x00;
    5d06:	ab02      	add	r3, sp, #8
    5d08:	2200      	movs	r2, #0
    5d0a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
    5d0c:	4ab0      	ldr	r2, [pc, #704]	; (5fd0 <mpu_init+0x2f0>)
    5d0e:	6811      	ldr	r1, [r2, #0]
    5d10:	7d49      	ldrb	r1, [r1, #21]
    5d12:	6852      	ldr	r2, [r2, #4]
    5d14:	7810      	ldrb	r0, [r2, #0]
    5d16:	2201      	movs	r2, #1
    5d18:	f006 fc3a 	bl	c590 <i2c_write>
    5d1c:	2800      	cmp	r0, #0
    5d1e:	d000      	beq.n	5d22 <mpu_init+0x42>
    5d20:	e13d      	b.n	5f9e <mpu_init+0x2be>
   st.chip_cfg.accel_half = 0;
    5d22:	4aab      	ldr	r2, [pc, #684]	; (5fd0 <mpu_init+0x2f0>)
    5d24:	2300      	movs	r3, #0
    5d26:	74d3      	strb	r3, [r2, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
    5d28:	ab02      	add	r3, sp, #8
    5d2a:	2148      	movs	r1, #72	; 0x48
    5d2c:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
    5d2e:	6811      	ldr	r1, [r2, #0]
    5d30:	7a09      	ldrb	r1, [r1, #8]
    5d32:	6852      	ldr	r2, [r2, #4]
    5d34:	7810      	ldrb	r0, [r2, #0]
    5d36:	2201      	movs	r2, #1
    5d38:	f006 fc2a 	bl	c590 <i2c_write>
    5d3c:	2800      	cmp	r0, #0
    5d3e:	d000      	beq.n	5d42 <mpu_init+0x62>
    5d40:	e130      	b.n	5fa4 <mpu_init+0x2c4>
    st.chip_cfg.sensors = 0xFF;
    5d42:	4ca3      	ldr	r4, [pc, #652]	; (5fd0 <mpu_init+0x2f0>)
    5d44:	23ff      	movs	r3, #255	; 0xff
    5d46:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
    5d48:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
    5d4a:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
    5d4c:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
    5d4e:	2201      	movs	r2, #1
    5d50:	4252      	negs	r2, r2
    5d52:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
    5d54:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
    5d56:	74a3      	strb	r3, [r4, #18]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
    5d58:	8522      	strh	r2, [r4, #40]	; 0x28
    st.chip_cfg.clk_src = INV_CLK_PLL;
    5d5a:	3bfe      	subs	r3, #254	; 0xfe
    5d5c:	7323      	strb	r3, [r4, #12]
    st.chip_cfg.active_low_int = 1;
    5d5e:	3223      	adds	r2, #35	; 0x23
    5d60:	54a3      	strb	r3, [r4, r2]
    st.chip_cfg.latched_int = 0;
    5d62:	2500      	movs	r5, #0
    5d64:	3322      	adds	r3, #34	; 0x22
    5d66:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
    5d68:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
    5d6a:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    5d6c:	0020      	movs	r0, r4
    5d6e:	3016      	adds	r0, #22
    5d70:	3a16      	subs	r2, #22
    5d72:	2100      	movs	r1, #0
    5d74:	f007 fecc 	bl	db10 <memset>
    st.chip_cfg.dmp_on = 0;
    5d78:	2324      	movs	r3, #36	; 0x24
    5d7a:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
    5d7c:	3301      	adds	r3, #1
    5d7e:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
    5d80:	84e5      	strh	r5, [r4, #38]	; 0x26
    if (mpu_set_gyro_fsr(2000))
    5d82:	20fa      	movs	r0, #250	; 0xfa
    5d84:	00c0      	lsls	r0, r0, #3
    5d86:	f7ff fa6b 	bl	5260 <mpu_set_gyro_fsr>
    5d8a:	2800      	cmp	r0, #0
    5d8c:	d000      	beq.n	5d90 <mpu_init+0xb0>
    5d8e:	e10c      	b.n	5faa <mpu_init+0x2ca>
    if (mpu_set_accel_fsr(2))
    5d90:	3002      	adds	r0, #2
    5d92:	f7ff fadd 	bl	5350 <mpu_set_accel_fsr>
    5d96:	2800      	cmp	r0, #0
    5d98:	d000      	beq.n	5d9c <mpu_init+0xbc>
    5d9a:	e109      	b.n	5fb0 <mpu_init+0x2d0>
    if (mpu_set_lpf(42))
    5d9c:	302a      	adds	r0, #42	; 0x2a
    5d9e:	f7ff fb1f 	bl	53e0 <mpu_set_lpf>
    5da2:	2800      	cmp	r0, #0
    5da4:	d000      	beq.n	5da8 <mpu_init+0xc8>
    5da6:	e106      	b.n	5fb6 <mpu_init+0x2d6>
    if (mpu_set_sample_rate(50))
    5da8:	3032      	adds	r0, #50	; 0x32
    5daa:	f7ff fe41 	bl	5a30 <mpu_set_sample_rate>
    5dae:	2800      	cmp	r0, #0
    5db0:	d000      	beq.n	5db4 <mpu_init+0xd4>
    5db2:	e103      	b.n	5fbc <mpu_init+0x2dc>
    if (mpu_configure_fifo(0))
    5db4:	f7ff fbfc 	bl	55b0 <mpu_configure_fifo>
    5db8:	2800      	cmp	r0, #0
    5dba:	d000      	beq.n	5dbe <mpu_init+0xde>
    5dbc:	e101      	b.n	5fc2 <mpu_init+0x2e2>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
    5dbe:	3001      	adds	r0, #1
    5dc0:	f7ff fcbe 	bl	5740 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
    5dc4:	240c      	movs	r4, #12
    5dc6:	e004      	b.n	5dd2 <mpu_init+0xf2>
    5dc8:	3401      	adds	r4, #1
    5dca:	b2e4      	uxtb	r4, r4
    5dcc:	2c10      	cmp	r4, #16
    5dce:	d100      	bne.n	5dd2 <mpu_init+0xf2>
    5dd0:	e0de      	b.n	5f90 <mpu_init+0x2b0>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
    5dd2:	ab01      	add	r3, sp, #4
    5dd4:	2201      	movs	r2, #1
    5dd6:	2100      	movs	r1, #0
    5dd8:	0020      	movs	r0, r4
    5dda:	f006 fc01 	bl	c5e0 <i2c_read>
        if (!result && (data[0] == AKM_WHOAMI))
    5dde:	2800      	cmp	r0, #0
    5de0:	d1f2      	bne.n	5dc8 <mpu_init+0xe8>
    5de2:	466b      	mov	r3, sp
    5de4:	791b      	ldrb	r3, [r3, #4]
    5de6:	2b48      	cmp	r3, #72	; 0x48
    5de8:	d1ee      	bne.n	5dc8 <mpu_init+0xe8>
            break;
    }

    if (akm_addr > 0x0F) {
    5dea:	2c0f      	cmp	r4, #15
    5dec:	d900      	bls.n	5df0 <mpu_init+0x110>
    5dee:	e0cf      	b.n	5f90 <mpu_init+0x2b0>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
    5df0:	232a      	movs	r3, #42	; 0x2a
    5df2:	4a77      	ldr	r2, [pc, #476]	; (5fd0 <mpu_init+0x2f0>)
    5df4:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
    5df6:	ab01      	add	r3, sp, #4
    5df8:	2210      	movs	r2, #16
    5dfa:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
    5dfc:	3a0f      	subs	r2, #15
    5dfe:	210a      	movs	r1, #10
    5e00:	0020      	movs	r0, r4
    5e02:	f006 fbc5 	bl	c590 <i2c_write>
    5e06:	2800      	cmp	r0, #0
    5e08:	d000      	beq.n	5e0c <mpu_init+0x12c>
    5e0a:	e0b6      	b.n	5f7a <mpu_init+0x29a>
        return -1;
    delay_ms(1);
    5e0c:	3001      	adds	r0, #1
    5e0e:	f007 f90f 	bl	d030 <delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
    5e12:	ab01      	add	r3, sp, #4
    5e14:	221f      	movs	r2, #31
    5e16:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
    5e18:	320b      	adds	r2, #11
    5e1a:	496d      	ldr	r1, [pc, #436]	; (5fd0 <mpu_init+0x2f0>)
    5e1c:	5c88      	ldrb	r0, [r1, r2]
    5e1e:	3a29      	subs	r2, #41	; 0x29
    5e20:	210a      	movs	r1, #10
    5e22:	f006 fbb5 	bl	c590 <i2c_write>
    5e26:	2800      	cmp	r0, #0
    5e28:	d000      	beq.n	5e2c <mpu_init+0x14c>
    5e2a:	e0a6      	b.n	5f7a <mpu_init+0x29a>
        return -1;
    delay_ms(1);
    5e2c:	3001      	adds	r0, #1
    5e2e:	f007 f8ff 	bl	d030 <delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
    5e32:	232a      	movs	r3, #42	; 0x2a
    5e34:	4a66      	ldr	r2, [pc, #408]	; (5fd0 <mpu_init+0x2f0>)
    5e36:	5cd0      	ldrb	r0, [r2, r3]
    5e38:	ab01      	add	r3, sp, #4
    5e3a:	2203      	movs	r2, #3
    5e3c:	2110      	movs	r1, #16
    5e3e:	f006 fbcf 	bl	c5e0 <i2c_read>
    5e42:	2800      	cmp	r0, #0
    5e44:	d000      	beq.n	5e48 <mpu_init+0x168>
    5e46:	e098      	b.n	5f7a <mpu_init+0x29a>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
    5e48:	4a61      	ldr	r2, [pc, #388]	; (5fd0 <mpu_init+0x2f0>)
    5e4a:	ab01      	add	r3, sp, #4
    5e4c:	7819      	ldrb	r1, [r3, #0]
    5e4e:	3180      	adds	r1, #128	; 0x80
    5e50:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    5e52:	7859      	ldrb	r1, [r3, #1]
    5e54:	3180      	adds	r1, #128	; 0x80
    5e56:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
    5e58:	7899      	ldrb	r1, [r3, #2]
    5e5a:	3180      	adds	r1, #128	; 0x80
    5e5c:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
    5e5e:	2110      	movs	r1, #16
    5e60:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
    5e62:	311a      	adds	r1, #26
    5e64:	5c50      	ldrb	r0, [r2, r1]
    5e66:	2201      	movs	r2, #1
    5e68:	3920      	subs	r1, #32
    5e6a:	f006 fb91 	bl	c590 <i2c_write>
    5e6e:	2800      	cmp	r0, #0
    5e70:	d000      	beq.n	5e74 <mpu_init+0x194>
    5e72:	e082      	b.n	5f7a <mpu_init+0x29a>
        return -1;
    delay_ms(1);
    5e74:	3001      	adds	r0, #1
    5e76:	f007 f8db 	bl	d030 <delay_ms>

    mpu_set_bypass(0);
    5e7a:	2000      	movs	r0, #0
    5e7c:	f7ff fc60 	bl	5740 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
    5e80:	ab01      	add	r3, sp, #4
    5e82:	2240      	movs	r2, #64	; 0x40
    5e84:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
    5e86:	4a52      	ldr	r2, [pc, #328]	; (5fd0 <mpu_init+0x2f0>)
    5e88:	6811      	ldr	r1, [r2, #0]
    5e8a:	7e89      	ldrb	r1, [r1, #26]
    5e8c:	6852      	ldr	r2, [r2, #4]
    5e8e:	7810      	ldrb	r0, [r2, #0]
    5e90:	2201      	movs	r2, #1
    5e92:	f006 fb7d 	bl	c590 <i2c_write>
    5e96:	2800      	cmp	r0, #0
    5e98:	d16f      	bne.n	5f7a <mpu_init+0x29a>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
    5e9a:	ab01      	add	r3, sp, #4
    5e9c:	4a4c      	ldr	r2, [pc, #304]	; (5fd0 <mpu_init+0x2f0>)
    5e9e:	212a      	movs	r1, #42	; 0x2a
    5ea0:	5c50      	ldrb	r0, [r2, r1]
    5ea2:	39aa      	subs	r1, #170	; 0xaa
    5ea4:	4301      	orrs	r1, r0
    5ea6:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
    5ea8:	6811      	ldr	r1, [r2, #0]
    5eaa:	7f89      	ldrb	r1, [r1, #30]
    5eac:	6852      	ldr	r2, [r2, #4]
    5eae:	7810      	ldrb	r0, [r2, #0]
    5eb0:	2201      	movs	r2, #1
    5eb2:	f006 fb6d 	bl	c590 <i2c_write>
    5eb6:	2800      	cmp	r0, #0
    5eb8:	d15f      	bne.n	5f7a <mpu_init+0x29a>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
    5eba:	ab01      	add	r3, sp, #4
    5ebc:	2202      	movs	r2, #2
    5ebe:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
    5ec0:	4a43      	ldr	r2, [pc, #268]	; (5fd0 <mpu_init+0x2f0>)
    5ec2:	6811      	ldr	r1, [r2, #0]
    5ec4:	7fc9      	ldrb	r1, [r1, #31]
    5ec6:	6852      	ldr	r2, [r2, #4]
    5ec8:	7810      	ldrb	r0, [r2, #0]
    5eca:	2201      	movs	r2, #1
    5ecc:	f006 fb60 	bl	c590 <i2c_write>
    5ed0:	2800      	cmp	r0, #0
    5ed2:	d152      	bne.n	5f7a <mpu_init+0x29a>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
    5ed4:	ab01      	add	r3, sp, #4
    5ed6:	2288      	movs	r2, #136	; 0x88
    5ed8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
    5eda:	4a3d      	ldr	r2, [pc, #244]	; (5fd0 <mpu_init+0x2f0>)
    5edc:	2120      	movs	r1, #32
    5ede:	6810      	ldr	r0, [r2, #0]
    5ee0:	5c41      	ldrb	r1, [r0, r1]
    5ee2:	6852      	ldr	r2, [r2, #4]
    5ee4:	7810      	ldrb	r0, [r2, #0]
    5ee6:	2201      	movs	r2, #1
    5ee8:	f006 fb52 	bl	c590 <i2c_write>
    5eec:	2800      	cmp	r0, #0
    5eee:	d144      	bne.n	5f7a <mpu_init+0x29a>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
    5ef0:	ab01      	add	r3, sp, #4
    5ef2:	4a37      	ldr	r2, [pc, #220]	; (5fd0 <mpu_init+0x2f0>)
    5ef4:	212a      	movs	r1, #42	; 0x2a
    5ef6:	5c51      	ldrb	r1, [r2, r1]
    5ef8:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
    5efa:	2121      	movs	r1, #33	; 0x21
    5efc:	6810      	ldr	r0, [r2, #0]
    5efe:	5c41      	ldrb	r1, [r0, r1]
    5f00:	6852      	ldr	r2, [r2, #4]
    5f02:	7810      	ldrb	r0, [r2, #0]
    5f04:	2201      	movs	r2, #1
    5f06:	f006 fb43 	bl	c590 <i2c_write>
    5f0a:	2800      	cmp	r0, #0
    5f0c:	d135      	bne.n	5f7a <mpu_init+0x29a>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
    5f0e:	ab01      	add	r3, sp, #4
    5f10:	220a      	movs	r2, #10
    5f12:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
    5f14:	4a2e      	ldr	r2, [pc, #184]	; (5fd0 <mpu_init+0x2f0>)
    5f16:	2122      	movs	r1, #34	; 0x22
    5f18:	6810      	ldr	r0, [r2, #0]
    5f1a:	5c41      	ldrb	r1, [r0, r1]
    5f1c:	6852      	ldr	r2, [r2, #4]
    5f1e:	7810      	ldrb	r0, [r2, #0]
    5f20:	2201      	movs	r2, #1
    5f22:	f006 fb35 	bl	c590 <i2c_write>
    5f26:	2800      	cmp	r0, #0
    5f28:	d127      	bne.n	5f7a <mpu_init+0x29a>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
    5f2a:	ab01      	add	r3, sp, #4
    5f2c:	2281      	movs	r2, #129	; 0x81
    5f2e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
    5f30:	4a27      	ldr	r2, [pc, #156]	; (5fd0 <mpu_init+0x2f0>)
    5f32:	2123      	movs	r1, #35	; 0x23
    5f34:	6810      	ldr	r0, [r2, #0]
    5f36:	5c41      	ldrb	r1, [r0, r1]
    5f38:	6852      	ldr	r2, [r2, #4]
    5f3a:	7810      	ldrb	r0, [r2, #0]
    5f3c:	2201      	movs	r2, #1
    5f3e:	f006 fb27 	bl	c590 <i2c_write>
    5f42:	2800      	cmp	r0, #0
    5f44:	d119      	bne.n	5f7a <mpu_init+0x29a>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
    5f46:	ab01      	add	r3, sp, #4
    5f48:	2211      	movs	r2, #17
    5f4a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
    5f4c:	4a20      	ldr	r2, [pc, #128]	; (5fd0 <mpu_init+0x2f0>)
    5f4e:	2126      	movs	r1, #38	; 0x26
    5f50:	6810      	ldr	r0, [r2, #0]
    5f52:	5c41      	ldrb	r1, [r0, r1]
    5f54:	6852      	ldr	r2, [r2, #4]
    5f56:	7810      	ldrb	r0, [r2, #0]
    5f58:	2201      	movs	r2, #1
    5f5a:	f006 fb19 	bl	c590 <i2c_write>
    5f5e:	2800      	cmp	r0, #0
    5f60:	d10b      	bne.n	5f7a <mpu_init+0x29a>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
    5f62:	ab01      	add	r3, sp, #4
    5f64:	2203      	movs	r2, #3
    5f66:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
    5f68:	4a19      	ldr	r2, [pc, #100]	; (5fd0 <mpu_init+0x2f0>)
    5f6a:	2127      	movs	r1, #39	; 0x27
    5f6c:	6810      	ldr	r0, [r2, #0]
    5f6e:	5c41      	ldrb	r1, [r0, r1]
    5f70:	6852      	ldr	r2, [r2, #4]
    5f72:	7810      	ldrb	r0, [r2, #0]
    5f74:	2201      	movs	r2, #1
    5f76:	f006 fb0b 	bl	c590 <i2c_write>
    if (mpu_set_compass_sample_rate(10))
    5f7a:	200a      	movs	r0, #10
    5f7c:	f7ff fa88 	bl	5490 <mpu_set_compass_sample_rate>
    5f80:	1e04      	subs	r4, r0, #0
    5f82:	d121      	bne.n	5fc8 <mpu_init+0x2e8>
    mpu_set_sensors(0);
    5f84:	2000      	movs	r0, #0
    5f86:	f7ff fdbb 	bl	5b00 <mpu_set_sensors>
}
    5f8a:	0020      	movs	r0, r4
    5f8c:	b005      	add	sp, #20
    5f8e:	bd30      	pop	{r4, r5, pc}
        log_e("Compass not found.\n");
    5f90:	4810      	ldr	r0, [pc, #64]	; (5fd4 <mpu_init+0x2f4>)
    5f92:	f7fe ffbd 	bl	4f10 <xprintf>
    5f96:	e7f0      	b.n	5f7a <mpu_init+0x29a>
        return -1;
    5f98:	2401      	movs	r4, #1
    5f9a:	4264      	negs	r4, r4
    5f9c:	e7f5      	b.n	5f8a <mpu_init+0x2aa>
        return -1;
    5f9e:	2401      	movs	r4, #1
    5fa0:	4264      	negs	r4, r4
    5fa2:	e7f2      	b.n	5f8a <mpu_init+0x2aa>
        return -1;
    5fa4:	2401      	movs	r4, #1
    5fa6:	4264      	negs	r4, r4
    5fa8:	e7ef      	b.n	5f8a <mpu_init+0x2aa>
        return -1;
    5faa:	2401      	movs	r4, #1
    5fac:	4264      	negs	r4, r4
    5fae:	e7ec      	b.n	5f8a <mpu_init+0x2aa>
        return -1;
    5fb0:	2401      	movs	r4, #1
    5fb2:	4264      	negs	r4, r4
    5fb4:	e7e9      	b.n	5f8a <mpu_init+0x2aa>
        return -1;
    5fb6:	2401      	movs	r4, #1
    5fb8:	4264      	negs	r4, r4
    5fba:	e7e6      	b.n	5f8a <mpu_init+0x2aa>
        return -1;
    5fbc:	2401      	movs	r4, #1
    5fbe:	4264      	negs	r4, r4
    5fc0:	e7e3      	b.n	5f8a <mpu_init+0x2aa>
        return -1;
    5fc2:	2401      	movs	r4, #1
    5fc4:	4264      	negs	r4, r4
    5fc6:	e7e0      	b.n	5f8a <mpu_init+0x2aa>
        return -1;
    5fc8:	2401      	movs	r4, #1
    5fca:	4264      	negs	r4, r4
    5fcc:	e7dd      	b.n	5f8a <mpu_init+0x2aa>
    5fce:	46c0      	nop			; (mov r8, r8)
    5fd0:	20000810 	.word	0x20000810
    5fd4:	0000e13c 	.word	0x0000e13c
	...

00005fe0 <mpu_write_mem>:
{
    5fe0:	b530      	push	{r4, r5, lr}
    5fe2:	b083      	sub	sp, #12
    5fe4:	000c      	movs	r4, r1
    5fe6:	1e15      	subs	r5, r2, #0
    if (!data)
    5fe8:	d026      	beq.n	6038 <mpu_write_mem+0x58>
    if (!st.chip_cfg.sensors)
    5fea:	4b19      	ldr	r3, [pc, #100]	; (6050 <mpu_write_mem+0x70>)
    5fec:	7a9b      	ldrb	r3, [r3, #10]
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d025      	beq.n	603e <mpu_write_mem+0x5e>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    5ff2:	ab01      	add	r3, sp, #4
    5ff4:	0a02      	lsrs	r2, r0, #8
    5ff6:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
    5ff8:	b2c0      	uxtb	r0, r0
    5ffa:	7058      	strb	r0, [r3, #1]
    if (tmp[1] + length > st.hw->bank_size)
    5ffc:	4b14      	ldr	r3, [pc, #80]	; (6050 <mpu_write_mem+0x70>)
    5ffe:	685b      	ldr	r3, [r3, #4]
    6000:	1840      	adds	r0, r0, r1
    6002:	895a      	ldrh	r2, [r3, #10]
    6004:	4290      	cmp	r0, r2
    6006:	dc1d      	bgt.n	6044 <mpu_write_mem+0x64>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
    6008:	4a11      	ldr	r2, [pc, #68]	; (6050 <mpu_write_mem+0x70>)
    600a:	6812      	ldr	r2, [r2, #0]
    600c:	7ed1      	ldrb	r1, [r2, #27]
    600e:	7818      	ldrb	r0, [r3, #0]
    6010:	ab01      	add	r3, sp, #4
    6012:	2202      	movs	r2, #2
    6014:	f006 fabc 	bl	c590 <i2c_write>
    6018:	2800      	cmp	r0, #0
    601a:	d116      	bne.n	604a <mpu_write_mem+0x6a>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
    601c:	b2e2      	uxtb	r2, r4
    601e:	4b0c      	ldr	r3, [pc, #48]	; (6050 <mpu_write_mem+0x70>)
    6020:	6819      	ldr	r1, [r3, #0]
    6022:	7e09      	ldrb	r1, [r1, #24]
    6024:	685b      	ldr	r3, [r3, #4]
    6026:	7818      	ldrb	r0, [r3, #0]
    6028:	002b      	movs	r3, r5
    602a:	f006 fab1 	bl	c590 <i2c_write>
    602e:	1e43      	subs	r3, r0, #1
    6030:	4198      	sbcs	r0, r3
    6032:	4240      	negs	r0, r0
}
    6034:	b003      	add	sp, #12
    6036:	bd30      	pop	{r4, r5, pc}
        return -1;
    6038:	2001      	movs	r0, #1
    603a:	4240      	negs	r0, r0
    603c:	e7fa      	b.n	6034 <mpu_write_mem+0x54>
        return -1;
    603e:	2001      	movs	r0, #1
    6040:	4240      	negs	r0, r0
    6042:	e7f7      	b.n	6034 <mpu_write_mem+0x54>
        return -1;
    6044:	2001      	movs	r0, #1
    6046:	4240      	negs	r0, r0
    6048:	e7f4      	b.n	6034 <mpu_write_mem+0x54>
        return -1;
    604a:	2001      	movs	r0, #1
    604c:	4240      	negs	r0, r0
    604e:	e7f1      	b.n	6034 <mpu_write_mem+0x54>
    6050:	20000810 	.word	0x20000810
	...

00006060 <mpu_read_mem>:
{
    6060:	b530      	push	{r4, r5, lr}
    6062:	b083      	sub	sp, #12
    6064:	000c      	movs	r4, r1
    6066:	1e15      	subs	r5, r2, #0
    if (!data)
    6068:	d026      	beq.n	60b8 <mpu_read_mem+0x58>
    if (!st.chip_cfg.sensors)
    606a:	4b19      	ldr	r3, [pc, #100]	; (60d0 <mpu_read_mem+0x70>)
    606c:	7a9b      	ldrb	r3, [r3, #10]
    606e:	2b00      	cmp	r3, #0
    6070:	d025      	beq.n	60be <mpu_read_mem+0x5e>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    6072:	ab01      	add	r3, sp, #4
    6074:	0a02      	lsrs	r2, r0, #8
    6076:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
    6078:	b2c0      	uxtb	r0, r0
    607a:	7058      	strb	r0, [r3, #1]
    if (tmp[1] + length > st.hw->bank_size)
    607c:	4b14      	ldr	r3, [pc, #80]	; (60d0 <mpu_read_mem+0x70>)
    607e:	685b      	ldr	r3, [r3, #4]
    6080:	1840      	adds	r0, r0, r1
    6082:	895a      	ldrh	r2, [r3, #10]
    6084:	4290      	cmp	r0, r2
    6086:	dc1d      	bgt.n	60c4 <mpu_read_mem+0x64>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
    6088:	4a11      	ldr	r2, [pc, #68]	; (60d0 <mpu_read_mem+0x70>)
    608a:	6812      	ldr	r2, [r2, #0]
    608c:	7ed1      	ldrb	r1, [r2, #27]
    608e:	7818      	ldrb	r0, [r3, #0]
    6090:	ab01      	add	r3, sp, #4
    6092:	2202      	movs	r2, #2
    6094:	f006 fa7c 	bl	c590 <i2c_write>
    6098:	2800      	cmp	r0, #0
    609a:	d116      	bne.n	60ca <mpu_read_mem+0x6a>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
    609c:	b2e2      	uxtb	r2, r4
    609e:	4b0c      	ldr	r3, [pc, #48]	; (60d0 <mpu_read_mem+0x70>)
    60a0:	6819      	ldr	r1, [r3, #0]
    60a2:	7e09      	ldrb	r1, [r1, #24]
    60a4:	685b      	ldr	r3, [r3, #4]
    60a6:	7818      	ldrb	r0, [r3, #0]
    60a8:	002b      	movs	r3, r5
    60aa:	f006 fa99 	bl	c5e0 <i2c_read>
    60ae:	1e43      	subs	r3, r0, #1
    60b0:	4198      	sbcs	r0, r3
    60b2:	4240      	negs	r0, r0
}
    60b4:	b003      	add	sp, #12
    60b6:	bd30      	pop	{r4, r5, pc}
        return -1;
    60b8:	2001      	movs	r0, #1
    60ba:	4240      	negs	r0, r0
    60bc:	e7fa      	b.n	60b4 <mpu_read_mem+0x54>
        return -1;
    60be:	2001      	movs	r0, #1
    60c0:	4240      	negs	r0, r0
    60c2:	e7f7      	b.n	60b4 <mpu_read_mem+0x54>
        return -1;
    60c4:	2001      	movs	r0, #1
    60c6:	4240      	negs	r0, r0
    60c8:	e7f4      	b.n	60b4 <mpu_read_mem+0x54>
        return -1;
    60ca:	2001      	movs	r0, #1
    60cc:	4240      	negs	r0, r0
    60ce:	e7f1      	b.n	60b4 <mpu_read_mem+0x54>
    60d0:	20000810 	.word	0x20000810
	...

000060e0 <mpu_load_firmware>:
{
    60e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    60e2:	46de      	mov	lr, fp
    60e4:	b500      	push	{lr}
    60e6:	b08a      	sub	sp, #40	; 0x28
    60e8:	0006      	movs	r6, r0
    60ea:	468b      	mov	fp, r1
    60ec:	9202      	str	r2, [sp, #8]
    60ee:	9303      	str	r3, [sp, #12]
    if (st.chip_cfg.dmp_loaded)
    60f0:	2325      	movs	r3, #37	; 0x25
    60f2:	4a2c      	ldr	r2, [pc, #176]	; (61a4 <mpu_load_firmware+0xc4>)
    60f4:	5cd3      	ldrb	r3, [r2, r3]
    60f6:	2b00      	cmp	r3, #0
    60f8:	d13f      	bne.n	617a <mpu_load_firmware+0x9a>
    if (!firmware)
    60fa:	2900      	cmp	r1, #0
    60fc:	d040      	beq.n	6180 <mpu_load_firmware+0xa0>
    for (ii = 0; ii < length; ii += this_write) {
    60fe:	2800      	cmp	r0, #0
    6100:	d024      	beq.n	614c <mpu_load_firmware+0x6c>
    6102:	2700      	movs	r7, #0
    6104:	e01d      	b.n	6142 <mpu_load_firmware+0x62>
        this_write = min(LOAD_CHUNK, length - ii);
    6106:	b2a5      	uxth	r5, r4
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
    6108:	003b      	movs	r3, r7
    610a:	445b      	add	r3, fp
    610c:	9301      	str	r3, [sp, #4]
    610e:	001a      	movs	r2, r3
    6110:	0029      	movs	r1, r5
    6112:	0038      	movs	r0, r7
    6114:	f7ff ff64 	bl	5fe0 <mpu_write_mem>
    6118:	2800      	cmp	r0, #0
    611a:	d134      	bne.n	6186 <mpu_load_firmware+0xa6>
        if (mpu_read_mem(ii, this_write, cur))
    611c:	aa06      	add	r2, sp, #24
    611e:	0029      	movs	r1, r5
    6120:	0038      	movs	r0, r7
    6122:	f7ff ff9d 	bl	6060 <mpu_read_mem>
    6126:	2800      	cmp	r0, #0
    6128:	d133      	bne.n	6192 <mpu_load_firmware+0xb2>
        if (memcmp(firmware+ii, cur, this_write))
    612a:	0422      	lsls	r2, r4, #16
    612c:	0c12      	lsrs	r2, r2, #16
    612e:	a906      	add	r1, sp, #24
    6130:	9801      	ldr	r0, [sp, #4]
    6132:	f007 fcd5 	bl	dae0 <memcmp>
    6136:	2800      	cmp	r0, #0
    6138:	d12e      	bne.n	6198 <mpu_load_firmware+0xb8>
    for (ii = 0; ii < length; ii += this_write) {
    613a:	19ef      	adds	r7, r5, r7
    613c:	b2bf      	uxth	r7, r7
    613e:	42be      	cmp	r6, r7
    6140:	d904      	bls.n	614c <mpu_load_firmware+0x6c>
        this_write = min(LOAD_CHUNK, length - ii);
    6142:	1bf4      	subs	r4, r6, r7
    6144:	2c10      	cmp	r4, #16
    6146:	ddde      	ble.n	6106 <mpu_load_firmware+0x26>
    6148:	2410      	movs	r4, #16
    614a:	e7dc      	b.n	6106 <mpu_load_firmware+0x26>
    tmp[0] = start_addr >> 8;
    614c:	ab05      	add	r3, sp, #20
    614e:	9902      	ldr	r1, [sp, #8]
    6150:	0a0a      	lsrs	r2, r1, #8
    6152:	701a      	strb	r2, [r3, #0]
    tmp[1] = start_addr & 0xFF;
    6154:	7059      	strb	r1, [r3, #1]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
    6156:	4a13      	ldr	r2, [pc, #76]	; (61a4 <mpu_load_firmware+0xc4>)
    6158:	6811      	ldr	r1, [r2, #0]
    615a:	7f49      	ldrb	r1, [r1, #29]
    615c:	6852      	ldr	r2, [r2, #4]
    615e:	7810      	ldrb	r0, [r2, #0]
    6160:	2202      	movs	r2, #2
    6162:	f006 fa15 	bl	c590 <i2c_write>
    6166:	2800      	cmp	r0, #0
    6168:	d119      	bne.n	619e <mpu_load_firmware+0xbe>
    st.chip_cfg.dmp_loaded = 1;
    616a:	4b0e      	ldr	r3, [pc, #56]	; (61a4 <mpu_load_firmware+0xc4>)
    616c:	2101      	movs	r1, #1
    616e:	2225      	movs	r2, #37	; 0x25
    6170:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.dmp_sample_rate = sample_rate;
    6172:	466a      	mov	r2, sp
    6174:	8992      	ldrh	r2, [r2, #12]
    6176:	84da      	strh	r2, [r3, #38]	; 0x26
    return 0;
    6178:	e007      	b.n	618a <mpu_load_firmware+0xaa>
        return -1;
    617a:	2001      	movs	r0, #1
    617c:	4240      	negs	r0, r0
    617e:	e004      	b.n	618a <mpu_load_firmware+0xaa>
        return -1;
    6180:	2001      	movs	r0, #1
    6182:	4240      	negs	r0, r0
    6184:	e001      	b.n	618a <mpu_load_firmware+0xaa>
            return -1;
    6186:	2001      	movs	r0, #1
    6188:	4240      	negs	r0, r0
}
    618a:	b00a      	add	sp, #40	; 0x28
    618c:	bc04      	pop	{r2}
    618e:	4693      	mov	fp, r2
    6190:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1;
    6192:	2001      	movs	r0, #1
    6194:	4240      	negs	r0, r0
    6196:	e7f8      	b.n	618a <mpu_load_firmware+0xaa>
            return -2;
    6198:	2002      	movs	r0, #2
    619a:	4240      	negs	r0, r0
    619c:	e7f5      	b.n	618a <mpu_load_firmware+0xaa>
        return -1;
    619e:	2001      	movs	r0, #1
    61a0:	4240      	negs	r0, r0
    61a2:	e7f2      	b.n	618a <mpu_load_firmware+0xaa>
    61a4:	20000810 	.word	0x20000810
	...

000061b0 <mpu_set_dmp_state>:
{
    61b0:	b510      	push	{r4, lr}
    61b2:	b082      	sub	sp, #8
    if (st.chip_cfg.dmp_on == enable)
    61b4:	2324      	movs	r3, #36	; 0x24
    61b6:	4a21      	ldr	r2, [pc, #132]	; (623c <mpu_set_dmp_state+0x8c>)
    61b8:	5cd3      	ldrb	r3, [r2, r3]
    61ba:	4283      	cmp	r3, r0
    61bc:	d039      	beq.n	6232 <mpu_set_dmp_state+0x82>
    if (enable) {
    61be:	2800      	cmp	r0, #0
    61c0:	d022      	beq.n	6208 <mpu_set_dmp_state+0x58>
        if (!st.chip_cfg.dmp_loaded)
    61c2:	2325      	movs	r3, #37	; 0x25
    61c4:	5cd3      	ldrb	r3, [r2, r3]
    61c6:	2b00      	cmp	r3, #0
    61c8:	d035      	beq.n	6236 <mpu_set_dmp_state+0x86>
        set_int_enable(0);
    61ca:	2000      	movs	r0, #0
    61cc:	f7fe fec8 	bl	4f60 <set_int_enable>
        mpu_set_bypass(0);
    61d0:	2000      	movs	r0, #0
    61d2:	f7ff fab5 	bl	5740 <mpu_set_bypass>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
    61d6:	4c19      	ldr	r4, [pc, #100]	; (623c <mpu_set_dmp_state+0x8c>)
    61d8:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
    61da:	f7ff fc29 	bl	5a30 <mpu_set_sample_rate>
        tmp = 0;
    61de:	466b      	mov	r3, sp
    61e0:	3307      	adds	r3, #7
    61e2:	2200      	movs	r2, #0
    61e4:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
    61e6:	6862      	ldr	r2, [r4, #4]
    61e8:	7810      	ldrb	r0, [r2, #0]
    61ea:	2201      	movs	r2, #1
    61ec:	2123      	movs	r1, #35	; 0x23
    61ee:	f006 f9cf 	bl	c590 <i2c_write>
        st.chip_cfg.dmp_on = 1;
    61f2:	2201      	movs	r2, #1
    61f4:	2324      	movs	r3, #36	; 0x24
    61f6:	54e2      	strb	r2, [r4, r3]
        set_int_enable(0x02); // TODO: PJ was 1
    61f8:	2002      	movs	r0, #2
    61fa:	f7fe feb1 	bl	4f60 <set_int_enable>
        mpu_reset_fifo();
    61fe:	f7fe ff47 	bl	5090 <mpu_reset_fifo>
    return 0;
    6202:	2000      	movs	r0, #0
}
    6204:	b002      	add	sp, #8
    6206:	bd10      	pop	{r4, pc}
        set_int_enable(0);
    6208:	2000      	movs	r0, #0
    620a:	f7fe fea9 	bl	4f60 <set_int_enable>
        tmp = st.chip_cfg.fifo_enable;
    620e:	466b      	mov	r3, sp
    6210:	3307      	adds	r3, #7
    6212:	4c0a      	ldr	r4, [pc, #40]	; (623c <mpu_set_dmp_state+0x8c>)
    6214:	7c22      	ldrb	r2, [r4, #16]
    6216:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
    6218:	6862      	ldr	r2, [r4, #4]
    621a:	7810      	ldrb	r0, [r2, #0]
    621c:	2201      	movs	r2, #1
    621e:	2123      	movs	r1, #35	; 0x23
    6220:	f006 f9b6 	bl	c590 <i2c_write>
        st.chip_cfg.dmp_on = 0;
    6224:	2200      	movs	r2, #0
    6226:	2324      	movs	r3, #36	; 0x24
    6228:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
    622a:	f7fe ff31 	bl	5090 <mpu_reset_fifo>
    return 0;
    622e:	2000      	movs	r0, #0
    6230:	e7e8      	b.n	6204 <mpu_set_dmp_state+0x54>
        return 0;
    6232:	2000      	movs	r0, #0
    6234:	e7e6      	b.n	6204 <mpu_set_dmp_state+0x54>
            return -1;
    6236:	2001      	movs	r0, #1
    6238:	4240      	negs	r0, r0
    623a:	e7e3      	b.n	6204 <mpu_set_dmp_state+0x54>
    623c:	20000810 	.word	0x20000810

00006240 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
    6240:	b5f0      	push	{r4, r5, r6, r7, lr}
    6242:	b085      	sub	sp, #20
    6244:	0004      	movs	r4, r0
    6246:	000d      	movs	r5, r1
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
    6248:	4b28      	ldr	r3, [pc, #160]	; (62ec <mpu_get_compass_reg+0xac>)
    624a:	7a9b      	ldrb	r3, [r3, #10]
    624c:	07db      	lsls	r3, r3, #31
    624e:	d540      	bpl.n	62d2 <mpu_get_compass_reg+0x92>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
    6250:	4b26      	ldr	r3, [pc, #152]	; (62ec <mpu_get_compass_reg+0xac>)
    6252:	2228      	movs	r2, #40	; 0x28
    6254:	6819      	ldr	r1, [r3, #0]
    6256:	5c89      	ldrb	r1, [r1, r2]
    6258:	685b      	ldr	r3, [r3, #4]
    625a:	7818      	ldrb	r0, [r3, #0]
    625c:	ab01      	add	r3, sp, #4
    625e:	3a20      	subs	r2, #32
    6260:	f006 f9be 	bl	c5e0 <i2c_read>
    6264:	2800      	cmp	r0, #0
    6266:	d137      	bne.n	62d8 <mpu_get_compass_reg+0x98>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
    6268:	ab01      	add	r3, sp, #4
    626a:	781a      	ldrb	r2, [r3, #0]
    626c:	2303      	movs	r3, #3
    626e:	4013      	ands	r3, r2
    6270:	2b01      	cmp	r3, #1
    6272:	d134      	bne.n	62de <mpu_get_compass_reg+0x9e>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
    6274:	ab01      	add	r3, sp, #4
    6276:	79db      	ldrb	r3, [r3, #7]
    6278:	2b7f      	cmp	r3, #127	; 0x7f
    627a:	d833      	bhi.n	62e4 <mpu_get_compass_reg+0xa4>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
    627c:	ae01      	add	r6, sp, #4
    627e:	78b3      	ldrb	r3, [r6, #2]
    6280:	021b      	lsls	r3, r3, #8
    6282:	7871      	ldrb	r1, [r6, #1]
    6284:	4319      	orrs	r1, r3
    6286:	b209      	sxth	r1, r1
    6288:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
    628a:	7933      	ldrb	r3, [r6, #4]
    628c:	021b      	lsls	r3, r3, #8
    628e:	78f2      	ldrb	r2, [r6, #3]
    6290:	431a      	orrs	r2, r3
    6292:	b212      	sxth	r2, r2
    6294:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
    6296:	79b7      	ldrb	r7, [r6, #6]
    6298:	023f      	lsls	r7, r7, #8
    629a:	7973      	ldrb	r3, [r6, #5]
    629c:	433b      	orrs	r3, r7
    629e:	b21b      	sxth	r3, r3
    62a0:	469c      	mov	ip, r3
    62a2:	80a3      	strh	r3, [r4, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
    62a4:	4e11      	ldr	r6, [pc, #68]	; (62ec <mpu_get_compass_reg+0xac>)
    62a6:	232c      	movs	r3, #44	; 0x2c
    62a8:	5ef7      	ldrsh	r7, [r6, r3]
    62aa:	4379      	muls	r1, r7
    62ac:	1209      	asrs	r1, r1, #8
    62ae:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
    62b0:	232e      	movs	r3, #46	; 0x2e
    62b2:	5ef1      	ldrsh	r1, [r6, r3]
    62b4:	434a      	muls	r2, r1
    62b6:	1212      	asrs	r2, r2, #8
    62b8:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
    62ba:	2330      	movs	r3, #48	; 0x30
    62bc:	5ef2      	ldrsh	r2, [r6, r3]
    62be:	4663      	mov	r3, ip
    62c0:	4353      	muls	r3, r2
    62c2:	121b      	asrs	r3, r3, #8
    62c4:	80a3      	strh	r3, [r4, #4]

    if (timestamp)
    62c6:	2d00      	cmp	r5, #0
    62c8:	d001      	beq.n	62ce <mpu_get_compass_reg+0x8e>
	*count = 0;
    62ca:	2300      	movs	r3, #0
    62cc:	602b      	str	r3, [r5, #0]
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
    62ce:	b005      	add	sp, #20
    62d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    62d2:	2001      	movs	r0, #1
    62d4:	4240      	negs	r0, r0
    62d6:	e7fa      	b.n	62ce <mpu_get_compass_reg+0x8e>
        return -1;
    62d8:	2001      	movs	r0, #1
    62da:	4240      	negs	r0, r0
    62dc:	e7f7      	b.n	62ce <mpu_get_compass_reg+0x8e>
        return -2;
    62de:	2002      	movs	r0, #2
    62e0:	4240      	negs	r0, r0
    62e2:	e7f4      	b.n	62ce <mpu_get_compass_reg+0x8e>
        return -3;
    62e4:	2003      	movs	r0, #3
    62e6:	4240      	negs	r0, r0
    62e8:	e7f1      	b.n	62ce <mpu_get_compass_reg+0x8e>
    62ea:	46c0      	nop			; (mov r8, r8)
    62ec:	20000810 	.word	0x20000810

000062f0 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
    62f0:	b510      	push	{r4, lr}
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
    62f2:	23c8      	movs	r3, #200	; 0xc8
    62f4:	2280      	movs	r2, #128	; 0x80
    62f6:	00d2      	lsls	r2, r2, #3
    62f8:	4902      	ldr	r1, [pc, #8]	; (6304 <dmp_load_motion_driver_firmware+0x14>)
    62fa:	4803      	ldr	r0, [pc, #12]	; (6308 <dmp_load_motion_driver_firmware+0x18>)
    62fc:	f7ff fef0 	bl	60e0 <mpu_load_firmware>
        DMP_SAMPLE_RATE);
}
    6300:	bd10      	pop	{r4, pc}
    6302:	46c0      	nop			; (mov r8, r8)
    6304:	0000e1ac 	.word	0x0000e1ac
    6308:	00000bf6 	.word	0x00000bf6
    630c:	00000000 	.word	0x00000000

00006310 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
    6310:	b530      	push	{r4, r5, lr}
    6312:	b087      	sub	sp, #28
    6314:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
    6316:	aa03      	add	r2, sp, #12
    6318:	4b14      	ldr	r3, [pc, #80]	; (636c <dmp_set_fifo_rate+0x5c>)
    631a:	cb23      	ldmia	r3!, {r0, r1, r5}
    631c:	c223      	stmia	r2!, {r0, r1, r5}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
    631e:	2cc8      	cmp	r4, #200	; 0xc8
    6320:	d81a      	bhi.n	6358 <dmp_set_fifo_rate+0x48>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
    6322:	0021      	movs	r1, r4
    6324:	20c8      	movs	r0, #200	; 0xc8
    6326:	f7f9 ffdf 	bl	2e8 <__divsi3>
    632a:	3801      	subs	r0, #1
    632c:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    632e:	aa01      	add	r2, sp, #4
    6330:	0a03      	lsrs	r3, r0, #8
    6332:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
    6334:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
    6336:	2102      	movs	r1, #2
    6338:	480d      	ldr	r0, [pc, #52]	; (6370 <dmp_set_fifo_rate+0x60>)
    633a:	f7ff fe51 	bl	5fe0 <mpu_write_mem>
    633e:	2800      	cmp	r0, #0
    6340:	d10d      	bne.n	635e <dmp_set_fifo_rate+0x4e>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
    6342:	aa03      	add	r2, sp, #12
    6344:	210c      	movs	r1, #12
    6346:	480b      	ldr	r0, [pc, #44]	; (6374 <dmp_set_fifo_rate+0x64>)
    6348:	f7ff fe4a 	bl	5fe0 <mpu_write_mem>
    634c:	2800      	cmp	r0, #0
    634e:	d109      	bne.n	6364 <dmp_set_fifo_rate+0x54>
        return -1;

    dmp.fifo_rate = rate;
    6350:	4b09      	ldr	r3, [pc, #36]	; (6378 <dmp_set_fifo_rate+0x68>)
    6352:	819c      	strh	r4, [r3, #12]
    return 0;
}
    6354:	b007      	add	sp, #28
    6356:	bd30      	pop	{r4, r5, pc}
        return -1;
    6358:	2001      	movs	r0, #1
    635a:	4240      	negs	r0, r0
    635c:	e7fa      	b.n	6354 <dmp_set_fifo_rate+0x44>
        return -1;
    635e:	2001      	movs	r0, #1
    6360:	4240      	negs	r0, r0
    6362:	e7f7      	b.n	6354 <dmp_set_fifo_rate+0x44>
        return -1;
    6364:	2001      	movs	r0, #1
    6366:	4240      	negs	r0, r0
    6368:	e7f4      	b.n	6354 <dmp_set_fifo_rate+0x44>
    636a:	46c0      	nop			; (mov r8, r8)
    636c:	0000dda0 	.word	0x0000dda0
    6370:	00000216 	.word	0x00000216
    6374:	00000ac1 	.word	0x00000ac1
    6378:	20000be0 	.word	0x20000be0
    637c:	00000000 	.word	0x00000000

00006380 <dmp_get_fifo_rate>:
 *  @param[out] rate    Current fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_get_fifo_rate(unsigned short *rate)
{
    rate[0] = dmp.fifo_rate;
    6380:	4b02      	ldr	r3, [pc, #8]	; (638c <dmp_get_fifo_rate+0xc>)
    6382:	899b      	ldrh	r3, [r3, #12]
    6384:	8003      	strh	r3, [r0, #0]
    return 0;
}
    6386:	2000      	movs	r0, #0
    6388:	4770      	bx	lr
    638a:	46c0      	nop			; (mov r8, r8)
    638c:	20000be0 	.word	0x20000be0

00006390 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
    6390:	b570      	push	{r4, r5, r6, lr}
    6392:	b082      	sub	sp, #8
    6394:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
    6396:	0743      	lsls	r3, r0, #29
    6398:	d100      	bne.n	639c <dmp_set_tap_thresh+0xc>
    639a:	e0a8      	b.n	64ee <dmp_set_tap_thresh+0x15e>
    639c:	23c8      	movs	r3, #200	; 0xc8
    639e:	00db      	lsls	r3, r3, #3
    63a0:	4299      	cmp	r1, r3
    63a2:	d900      	bls.n	63a6 <dmp_set_tap_thresh+0x16>
    63a4:	e0a6      	b.n	64f4 <dmp_set_tap_thresh+0x164>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
    63a6:	0008      	movs	r0, r1
    63a8:	f7fa ffcc 	bl	1344 <__aeabi_ui2f>
    63ac:	4959      	ldr	r1, [pc, #356]	; (6514 <dmp_set_tap_thresh+0x184>)
    63ae:	f7fa fa95 	bl	8dc <__aeabi_fdiv>
    63b2:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
    63b4:	466b      	mov	r3, sp
    63b6:	1cdd      	adds	r5, r3, #3
    63b8:	0028      	movs	r0, r5
    63ba:	f7fe ffa1 	bl	5300 <mpu_get_accel_fsr>
    switch (accel_fsr) {
    63be:	782b      	ldrb	r3, [r5, #0]
    63c0:	2b04      	cmp	r3, #4
    63c2:	d039      	beq.n	6438 <dmp_set_tap_thresh+0xa8>
    63c4:	b2da      	uxtb	r2, r3
    63c6:	2a04      	cmp	r2, #4
    63c8:	d914      	bls.n	63f4 <dmp_set_tap_thresh+0x64>
    63ca:	2b08      	cmp	r3, #8
    63cc:	d044      	beq.n	6458 <dmp_set_tap_thresh+0xc8>
    63ce:	2b10      	cmp	r3, #16
    63d0:	d000      	beq.n	63d4 <dmp_set_tap_thresh+0x44>
    63d2:	e092      	b.n	64fa <dmp_set_tap_thresh+0x16a>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        break;
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
    63d4:	218a      	movs	r1, #138	; 0x8a
    63d6:	05c9      	lsls	r1, r1, #23
    63d8:	1c30      	adds	r0, r6, #0
    63da:	f7fa fc6f 	bl	cbc <__aeabi_fmul>
    63de:	f7fa f8d3 	bl	588 <__aeabi_f2uiz>
    63e2:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
    63e4:	494c      	ldr	r1, [pc, #304]	; (6518 <dmp_set_tap_thresh+0x188>)
    63e6:	1c30      	adds	r0, r6, #0
    63e8:	f7fa fc68 	bl	cbc <__aeabi_fmul>
    63ec:	f7fa f8cc 	bl	588 <__aeabi_f2uiz>
    63f0:	b280      	uxth	r0, r0
        break;
    63f2:	e011      	b.n	6418 <dmp_set_tap_thresh+0x88>
    switch (accel_fsr) {
    63f4:	2b02      	cmp	r3, #2
    63f6:	d000      	beq.n	63fa <dmp_set_tap_thresh+0x6a>
    63f8:	e07f      	b.n	64fa <dmp_set_tap_thresh+0x16a>
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
    63fa:	218d      	movs	r1, #141	; 0x8d
    63fc:	05c9      	lsls	r1, r1, #23
    63fe:	1c30      	adds	r0, r6, #0
    6400:	f7fa fc5c 	bl	cbc <__aeabi_fmul>
    6404:	f7fa f8c0 	bl	588 <__aeabi_f2uiz>
    6408:	b285      	uxth	r5, r0
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
    640a:	4944      	ldr	r1, [pc, #272]	; (651c <dmp_set_tap_thresh+0x18c>)
    640c:	1c30      	adds	r0, r6, #0
    640e:	f7fa fc55 	bl	cbc <__aeabi_fmul>
    6412:	f7fa f8b9 	bl	588 <__aeabi_f2uiz>
    6416:	b280      	uxth	r0, r0
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
    6418:	ab01      	add	r3, sp, #4
    641a:	0a2a      	lsrs	r2, r5, #8
    641c:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    641e:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    6420:	0a02      	lsrs	r2, r0, #8
    6422:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
    6424:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
    6426:	07e3      	lsls	r3, r4, #31
    6428:	d426      	bmi.n	6478 <dmp_set_tap_thresh+0xe8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Y) {
    642a:	07a3      	lsls	r3, r4, #30
    642c:	d438      	bmi.n	64a0 <dmp_set_tap_thresh+0x110>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
    642e:	2000      	movs	r0, #0
    if (axis & TAP_Z) {
    6430:	0763      	lsls	r3, r4, #29
    6432:	d449      	bmi.n	64c8 <dmp_set_tap_thresh+0x138>
}
    6434:	b002      	add	sp, #8
    6436:	bd70      	pop	{r4, r5, r6, pc}
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
    6438:	218c      	movs	r1, #140	; 0x8c
    643a:	05c9      	lsls	r1, r1, #23
    643c:	1c30      	adds	r0, r6, #0
    643e:	f7fa fc3d 	bl	cbc <__aeabi_fmul>
    6442:	f7fa f8a1 	bl	588 <__aeabi_f2uiz>
    6446:	b285      	uxth	r5, r0
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
    6448:	4935      	ldr	r1, [pc, #212]	; (6520 <dmp_set_tap_thresh+0x190>)
    644a:	1c30      	adds	r0, r6, #0
    644c:	f7fa fc36 	bl	cbc <__aeabi_fmul>
    6450:	f7fa f89a 	bl	588 <__aeabi_f2uiz>
    6454:	b280      	uxth	r0, r0
        break;
    6456:	e7df      	b.n	6418 <dmp_set_tap_thresh+0x88>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
    6458:	218b      	movs	r1, #139	; 0x8b
    645a:	05c9      	lsls	r1, r1, #23
    645c:	1c30      	adds	r0, r6, #0
    645e:	f7fa fc2d 	bl	cbc <__aeabi_fmul>
    6462:	f7fa f891 	bl	588 <__aeabi_f2uiz>
    6466:	b285      	uxth	r5, r0
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
    6468:	492e      	ldr	r1, [pc, #184]	; (6524 <dmp_set_tap_thresh+0x194>)
    646a:	1c30      	adds	r0, r6, #0
    646c:	f7fa fc26 	bl	cbc <__aeabi_fmul>
    6470:	f7fa f88a 	bl	588 <__aeabi_f2uiz>
    6474:	b280      	uxth	r0, r0
        break;
    6476:	e7cf      	b.n	6418 <dmp_set_tap_thresh+0x88>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
    6478:	aa01      	add	r2, sp, #4
    647a:	2102      	movs	r1, #2
    647c:	20ea      	movs	r0, #234	; 0xea
    647e:	0040      	lsls	r0, r0, #1
    6480:	f7ff fdae 	bl	5fe0 <mpu_write_mem>
    6484:	2800      	cmp	r0, #0
    6486:	d13b      	bne.n	6500 <dmp_set_tap_thresh+0x170>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
    6488:	466b      	mov	r3, sp
    648a:	1d9a      	adds	r2, r3, #6
    648c:	2102      	movs	r1, #2
    648e:	3025      	adds	r0, #37	; 0x25
    6490:	30ff      	adds	r0, #255	; 0xff
    6492:	f7ff fda5 	bl	5fe0 <mpu_write_mem>
    6496:	2800      	cmp	r0, #0
    6498:	d0c7      	beq.n	642a <dmp_set_tap_thresh+0x9a>
            return -1;
    649a:	2001      	movs	r0, #1
    649c:	4240      	negs	r0, r0
    649e:	e7c9      	b.n	6434 <dmp_set_tap_thresh+0xa4>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
    64a0:	aa01      	add	r2, sp, #4
    64a2:	2102      	movs	r1, #2
    64a4:	20ec      	movs	r0, #236	; 0xec
    64a6:	0040      	lsls	r0, r0, #1
    64a8:	f7ff fd9a 	bl	5fe0 <mpu_write_mem>
    64ac:	2800      	cmp	r0, #0
    64ae:	d12a      	bne.n	6506 <dmp_set_tap_thresh+0x176>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
    64b0:	466b      	mov	r3, sp
    64b2:	1d9a      	adds	r2, r3, #6
    64b4:	2102      	movs	r1, #2
    64b6:	3029      	adds	r0, #41	; 0x29
    64b8:	30ff      	adds	r0, #255	; 0xff
    64ba:	f7ff fd91 	bl	5fe0 <mpu_write_mem>
    64be:	2800      	cmp	r0, #0
    64c0:	d0b5      	beq.n	642e <dmp_set_tap_thresh+0x9e>
            return -1;
    64c2:	2001      	movs	r0, #1
    64c4:	4240      	negs	r0, r0
    64c6:	e7b5      	b.n	6434 <dmp_set_tap_thresh+0xa4>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
    64c8:	aa01      	add	r2, sp, #4
    64ca:	2102      	movs	r1, #2
    64cc:	30dd      	adds	r0, #221	; 0xdd
    64ce:	30ff      	adds	r0, #255	; 0xff
    64d0:	f7ff fd86 	bl	5fe0 <mpu_write_mem>
    64d4:	2800      	cmp	r0, #0
    64d6:	d119      	bne.n	650c <dmp_set_tap_thresh+0x17c>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
    64d8:	466b      	mov	r3, sp
    64da:	1d9a      	adds	r2, r3, #6
    64dc:	2102      	movs	r1, #2
    64de:	302d      	adds	r0, #45	; 0x2d
    64e0:	30ff      	adds	r0, #255	; 0xff
    64e2:	f7ff fd7d 	bl	5fe0 <mpu_write_mem>
    64e6:	1e43      	subs	r3, r0, #1
    64e8:	4198      	sbcs	r0, r3
    64ea:	4240      	negs	r0, r0
    64ec:	e7a2      	b.n	6434 <dmp_set_tap_thresh+0xa4>
        return -1;
    64ee:	2001      	movs	r0, #1
    64f0:	4240      	negs	r0, r0
    64f2:	e79f      	b.n	6434 <dmp_set_tap_thresh+0xa4>
    64f4:	2001      	movs	r0, #1
    64f6:	4240      	negs	r0, r0
    64f8:	e79c      	b.n	6434 <dmp_set_tap_thresh+0xa4>
        return -1;
    64fa:	2001      	movs	r0, #1
    64fc:	4240      	negs	r0, r0
    64fe:	e799      	b.n	6434 <dmp_set_tap_thresh+0xa4>
            return -1;
    6500:	2001      	movs	r0, #1
    6502:	4240      	negs	r0, r0
    6504:	e796      	b.n	6434 <dmp_set_tap_thresh+0xa4>
            return -1;
    6506:	2001      	movs	r0, #1
    6508:	4240      	negs	r0, r0
    650a:	e793      	b.n	6434 <dmp_set_tap_thresh+0xa4>
            return -1;
    650c:	2001      	movs	r0, #1
    650e:	4240      	negs	r0, r0
    6510:	e790      	b.n	6434 <dmp_set_tap_thresh+0xa4>
    6512:	46c0      	nop			; (mov r8, r8)
    6514:	43480000 	.word	0x43480000
    6518:	44c00000 	.word	0x44c00000
    651c:	46400000 	.word	0x46400000
    6520:	45c00000 	.word	0x45c00000
    6524:	45400000 	.word	0x45400000
	...

00006530 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    6530:	b500      	push	{lr}
    6532:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
    6534:	07c3      	lsls	r3, r0, #31
    6536:	d41b      	bmi.n	6570 <dmp_set_tap_axes+0x40>
    unsigned char tmp = 0;
    6538:	2200      	movs	r2, #0
    653a:	466b      	mov	r3, sp
    653c:	71da      	strb	r2, [r3, #7]
        tmp |= 0x30;
    if (axis & TAP_Y)
    653e:	0783      	lsls	r3, r0, #30
    6540:	d505      	bpl.n	654e <dmp_set_tap_axes+0x1e>
        tmp |= 0x0C;
    6542:	466b      	mov	r3, sp
    6544:	1dda      	adds	r2, r3, #7
    6546:	79db      	ldrb	r3, [r3, #7]
    6548:	210c      	movs	r1, #12
    654a:	430b      	orrs	r3, r1
    654c:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
    654e:	0743      	lsls	r3, r0, #29
    6550:	d505      	bpl.n	655e <dmp_set_tap_axes+0x2e>
        tmp |= 0x03;
    6552:	466b      	mov	r3, sp
    6554:	1dda      	adds	r2, r3, #7
    6556:	79db      	ldrb	r3, [r3, #7]
    6558:	2103      	movs	r1, #3
    655a:	430b      	orrs	r3, r1
    655c:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
    655e:	466b      	mov	r3, sp
    6560:	1dda      	adds	r2, r3, #7
    6562:	2101      	movs	r1, #1
    6564:	20a4      	movs	r0, #164	; 0xa4
    6566:	0040      	lsls	r0, r0, #1
    6568:	f7ff fd3a 	bl	5fe0 <mpu_write_mem>
}
    656c:	b003      	add	sp, #12
    656e:	bd00      	pop	{pc}
        tmp |= 0x30;
    6570:	2230      	movs	r2, #48	; 0x30
    6572:	466b      	mov	r3, sp
    6574:	71da      	strb	r2, [r3, #7]
    6576:	e7e2      	b.n	653e <dmp_set_tap_axes+0xe>
	...

00006580 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    6580:	b500      	push	{lr}
    6582:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
    6584:	2301      	movs	r3, #1
    if (min_taps < 1)
    6586:	2800      	cmp	r0, #0
    6588:	d004      	beq.n	6594 <dmp_set_tap_count+0x14>
    658a:	1c03      	adds	r3, r0, #0
    658c:	2804      	cmp	r0, #4
    658e:	d900      	bls.n	6592 <dmp_set_tap_count+0x12>
    6590:	2304      	movs	r3, #4
    6592:	b2db      	uxtb	r3, r3
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
    6594:	466a      	mov	r2, sp
    6596:	3207      	adds	r2, #7
    6598:	3b01      	subs	r3, #1
    659a:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
    659c:	2101      	movs	r1, #1
    659e:	2050      	movs	r0, #80	; 0x50
    65a0:	30ff      	adds	r0, #255	; 0xff
    65a2:	f7ff fd1d 	bl	5fe0 <mpu_write_mem>
}
    65a6:	b003      	add	sp, #12
    65a8:	bd00      	pop	{pc}
    65aa:	46c0      	nop			; (mov r8, r8)
    65ac:	0000      	movs	r0, r0
	...

000065b0 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
    65b0:	b500      	push	{lr}
    65b2:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    65b4:	2105      	movs	r1, #5
    65b6:	f7f9 fe0d 	bl	1d4 <__udivsi3>
    65ba:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
    65bc:	aa01      	add	r2, sp, #4
    65be:	0a03      	lsrs	r3, r0, #8
    65c0:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    65c2:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
    65c4:	2102      	movs	r1, #2
    65c6:	20ef      	movs	r0, #239	; 0xef
    65c8:	0040      	lsls	r0, r0, #1
    65ca:	f7ff fd09 	bl	5fe0 <mpu_write_mem>
}
    65ce:	b003      	add	sp, #12
    65d0:	bd00      	pop	{pc}
    65d2:	46c0      	nop			; (mov r8, r8)
	...

000065e0 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
    65e0:	b500      	push	{lr}
    65e2:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    65e4:	2105      	movs	r1, #5
    65e6:	f7f9 fdf5 	bl	1d4 <__udivsi3>
    65ea:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
    65ec:	aa01      	add	r2, sp, #4
    65ee:	0a03      	lsrs	r3, r0, #8
    65f0:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    65f2:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
    65f4:	2102      	movs	r1, #2
    65f6:	20ed      	movs	r0, #237	; 0xed
    65f8:	0040      	lsls	r0, r0, #1
    65fa:	f7ff fcf1 	bl	5fe0 <mpu_write_mem>
}
    65fe:	b003      	add	sp, #12
    6600:	bd00      	pop	{pc}
    6602:	46c0      	nop			; (mov r8, r8)
	...

00006610 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
    6610:	b510      	push	{r4, lr}
    6612:	b082      	sub	sp, #8
    6614:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    6616:	21fa      	movs	r1, #250	; 0xfa
    6618:	0089      	lsls	r1, r1, #2
    661a:	f7f9 fe65 	bl	2e8 <__divsi3>
    661e:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    6620:	aa01      	add	r2, sp, #4
    6622:	1603      	asrs	r3, r0, #24
    6624:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    6626:	1403      	asrs	r3, r0, #16
    6628:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    662a:	1203      	asrs	r3, r0, #8
    662c:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    662e:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
    6630:	2104      	movs	r1, #4
    6632:	20ae      	movs	r0, #174	; 0xae
    6634:	0040      	lsls	r0, r0, #1
    6636:	f7ff fcd3 	bl	5fe0 <mpu_write_mem>
}
    663a:	b002      	add	sp, #8
    663c:	bd10      	pop	{r4, pc}
    663e:	46c0      	nop			; (mov r8, r8)

00006640 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
    6640:	b500      	push	{lr}
    6642:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    6644:	2105      	movs	r1, #5
    6646:	f7f9 fdc5 	bl	1d4 <__udivsi3>
    664a:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
    664c:	aa01      	add	r2, sp, #4
    664e:	0a03      	lsrs	r3, r0, #8
    6650:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
    6652:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
    6654:	2102      	movs	r1, #2
    6656:	20ad      	movs	r0, #173	; 0xad
    6658:	0040      	lsls	r0, r0, #1
    665a:	f7ff fcc1 	bl	5fe0 <mpu_write_mem>
}
    665e:	b003      	add	sp, #12
    6660:	bd00      	pop	{pc}
    6662:	46c0      	nop			; (mov r8, r8)
	...

00006670 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
    6670:	b500      	push	{lr}
    6672:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    6674:	2105      	movs	r1, #5
    6676:	f7f9 fdad 	bl	1d4 <__udivsi3>
    667a:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
    667c:	aa01      	add	r2, sp, #4
    667e:	0a03      	lsrs	r3, r0, #8
    6680:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
    6682:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
    6684:	2102      	movs	r1, #2
    6686:	20ac      	movs	r0, #172	; 0xac
    6688:	0040      	lsls	r0, r0, #1
    668a:	f7ff fca9 	bl	5fe0 <mpu_write_mem>
}
    668e:	b003      	add	sp, #12
    6690:	bd00      	pop	{pc}
    6692:	46c0      	nop			; (mov r8, r8)
	...

000066a0 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
    66a0:	b510      	push	{r4, lr}
    66a2:	b084      	sub	sp, #16
    if (enable) {
    66a4:	2800      	cmp	r0, #0
    66a6:	d10e      	bne.n	66c6 <dmp_enable_gyro_cal+0x26>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
    66a8:	aa01      	add	r2, sp, #4
    66aa:	4b0e      	ldr	r3, [pc, #56]	; (66e4 <dmp_enable_gyro_cal+0x44>)
    66ac:	3318      	adds	r3, #24
    66ae:	0011      	movs	r1, r2
    66b0:	cb11      	ldmia	r3!, {r0, r4}
    66b2:	c111      	stmia	r1!, {r0, r4}
    66b4:	781b      	ldrb	r3, [r3, #0]
    66b6:	700b      	strb	r3, [r1, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    66b8:	2109      	movs	r1, #9
    66ba:	2097      	movs	r0, #151	; 0x97
    66bc:	00c0      	lsls	r0, r0, #3
    66be:	f7ff fc8f 	bl	5fe0 <mpu_write_mem>
    }
}
    66c2:	b004      	add	sp, #16
    66c4:	bd10      	pop	{r4, pc}
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
    66c6:	aa01      	add	r2, sp, #4
    66c8:	4b06      	ldr	r3, [pc, #24]	; (66e4 <dmp_enable_gyro_cal+0x44>)
    66ca:	330c      	adds	r3, #12
    66cc:	0011      	movs	r1, r2
    66ce:	cb11      	ldmia	r3!, {r0, r4}
    66d0:	c111      	stmia	r1!, {r0, r4}
    66d2:	781b      	ldrb	r3, [r3, #0]
    66d4:	700b      	strb	r3, [r1, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    66d6:	2109      	movs	r1, #9
    66d8:	2097      	movs	r0, #151	; 0x97
    66da:	00c0      	lsls	r0, r0, #3
    66dc:	f7ff fc80 	bl	5fe0 <mpu_write_mem>
    66e0:	e7ef      	b.n	66c2 <dmp_enable_gyro_cal+0x22>
    66e2:	46c0      	nop			; (mov r8, r8)
    66e4:	0000dda0 	.word	0x0000dda0
	...

000066f0 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
    66f0:	b500      	push	{lr}
    66f2:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
    66f4:	2800      	cmp	r0, #0
    66f6:	d011      	beq.n	671c <dmp_enable_lp_quat+0x2c>
        regs[0] = DINBC0;
    66f8:	ab01      	add	r3, sp, #4
    66fa:	22c0      	movs	r2, #192	; 0xc0
    66fc:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
    66fe:	3202      	adds	r2, #2
    6700:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
    6702:	3202      	adds	r2, #2
    6704:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
    6706:	3202      	adds	r2, #2
    6708:	70da      	strb	r2, [r3, #3]
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
    670a:	aa01      	add	r2, sp, #4
    670c:	2104      	movs	r1, #4
    670e:	4805      	ldr	r0, [pc, #20]	; (6724 <dmp_enable_lp_quat+0x34>)
    6710:	f7ff fc66 	bl	5fe0 <mpu_write_mem>

    return mpu_reset_fifo();
    6714:	f7fe fcbc 	bl	5090 <mpu_reset_fifo>
}
    6718:	b003      	add	sp, #12
    671a:	bd00      	pop	{pc}
        memset(regs, 0x8B, 4);
    671c:	4b02      	ldr	r3, [pc, #8]	; (6728 <dmp_enable_lp_quat+0x38>)
    671e:	9301      	str	r3, [sp, #4]
    6720:	e7f3      	b.n	670a <dmp_enable_lp_quat+0x1a>
    6722:	46c0      	nop			; (mov r8, r8)
    6724:	00000a98 	.word	0x00000a98
    6728:	8b8b8b8b 	.word	0x8b8b8b8b
    672c:	00000000 	.word	0x00000000

00006730 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
    6730:	b500      	push	{lr}
    6732:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
    6734:	2800      	cmp	r0, #0
    6736:	d011      	beq.n	675c <dmp_enable_6x_lp_quat+0x2c>
        regs[0] = DINA20;
    6738:	ab01      	add	r3, sp, #4
    673a:	2220      	movs	r2, #32
    673c:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
    673e:	3208      	adds	r2, #8
    6740:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
    6742:	3208      	adds	r2, #8
    6744:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
    6746:	3208      	adds	r2, #8
    6748:	70da      	strb	r2, [r3, #3]
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
    674a:	aa01      	add	r2, sp, #4
    674c:	2104      	movs	r1, #4
    674e:	4805      	ldr	r0, [pc, #20]	; (6764 <dmp_enable_6x_lp_quat+0x34>)
    6750:	f7ff fc46 	bl	5fe0 <mpu_write_mem>

    return mpu_reset_fifo();
    6754:	f7fe fc9c 	bl	5090 <mpu_reset_fifo>
}
    6758:	b003      	add	sp, #12
    675a:	bd00      	pop	{pc}
        memset(regs, 0xA3, 4);
    675c:	4b02      	ldr	r3, [pc, #8]	; (6768 <dmp_enable_6x_lp_quat+0x38>)
    675e:	9301      	str	r3, [sp, #4]
    6760:	e7f3      	b.n	674a <dmp_enable_6x_lp_quat+0x1a>
    6762:	46c0      	nop			; (mov r8, r8)
    6764:	00000a9e 	.word	0x00000a9e
    6768:	a3a3a3a3 	.word	0xa3a3a3a3
    676c:	00000000 	.word	0x00000000

00006770 <dmp_enable_feature>:
{
    6770:	b5f0      	push	{r4, r5, r6, r7, lr}
    6772:	b085      	sub	sp, #20
    6774:	0004      	movs	r4, r0
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    6776:	ad01      	add	r5, sp, #4
    6778:	2302      	movs	r3, #2
    677a:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    677c:	33c8      	adds	r3, #200	; 0xc8
    677e:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    6780:	3319      	adds	r3, #25
    6782:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
    6784:	3bda      	subs	r3, #218	; 0xda
    6786:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
    6788:	002a      	movs	r2, r5
    678a:	2104      	movs	r1, #4
    678c:	2068      	movs	r0, #104	; 0x68
    678e:	f7ff fc27 	bl	5fe0 <mpu_write_mem>
    tmp[0] = 0xA3;
    6792:	23a3      	movs	r3, #163	; 0xa3
    6794:	702b      	strb	r3, [r5, #0]
    6796:	2740      	movs	r7, #64	; 0x40
    6798:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
    679a:	d100      	bne.n	679e <dmp_enable_feature+0x2e>
    679c:	e09b      	b.n	68d6 <dmp_enable_feature+0x166>
        tmp[1] = 0xC0;
    679e:	ab01      	add	r3, sp, #4
    67a0:	22c0      	movs	r2, #192	; 0xc0
    67a2:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
    67a4:	3208      	adds	r2, #8
    67a6:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
    67a8:	3a06      	subs	r2, #6
    67aa:	70da      	strb	r2, [r3, #3]
    67ac:	25c0      	movs	r5, #192	; 0xc0
    67ae:	006d      	lsls	r5, r5, #1
    67b0:	4025      	ands	r5, r4
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
    67b2:	d100      	bne.n	67b6 <dmp_enable_feature+0x46>
    67b4:	e095      	b.n	68e2 <dmp_enable_feature+0x172>
        tmp[4] = 0xC4;
    67b6:	ab01      	add	r3, sp, #4
    67b8:	22c4      	movs	r2, #196	; 0xc4
    67ba:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
    67bc:	3208      	adds	r2, #8
    67be:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
    67c0:	3a06      	subs	r2, #6
    67c2:	719a      	strb	r2, [r3, #6]
    tmp[7] = 0xA3;
    67c4:	aa01      	add	r2, sp, #4
    67c6:	23a3      	movs	r3, #163	; 0xa3
    67c8:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
    67ca:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
    67cc:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
    67ce:	210a      	movs	r1, #10
    67d0:	485c      	ldr	r0, [pc, #368]	; (6944 <dmp_enable_feature+0x1d4>)
    67d2:	f7ff fc05 	bl	5fe0 <mpu_write_mem>
    67d6:	2603      	movs	r6, #3
    67d8:	4026      	ands	r6, r4
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
    67da:	d100      	bne.n	67de <dmp_enable_feature+0x6e>
    67dc:	e087      	b.n	68ee <dmp_enable_feature+0x17e>
        tmp[0] = DINA20;
    67de:	2220      	movs	r2, #32
    67e0:	ab01      	add	r3, sp, #4
    67e2:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
    67e4:	aa01      	add	r2, sp, #4
    67e6:	2101      	movs	r1, #1
    67e8:	4857      	ldr	r0, [pc, #348]	; (6948 <dmp_enable_feature+0x1d8>)
    67ea:	f7ff fbf9 	bl	5fe0 <mpu_write_mem>
    if (mask & DMP_FEATURE_GYRO_CAL)
    67ee:	06a3      	lsls	r3, r4, #26
    67f0:	d400      	bmi.n	67f4 <dmp_enable_feature+0x84>
    67f2:	e080      	b.n	68f6 <dmp_enable_feature+0x186>
        dmp_enable_gyro_cal(1);
    67f4:	2001      	movs	r0, #1
    67f6:	f7ff ff53 	bl	66a0 <dmp_enable_gyro_cal>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
    67fa:	2d00      	cmp	r5, #0
    67fc:	d010      	beq.n	6820 <dmp_enable_feature+0xb0>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
    67fe:	05e3      	lsls	r3, r4, #23
    6800:	d400      	bmi.n	6804 <dmp_enable_feature+0x94>
    6802:	e07c      	b.n	68fe <dmp_enable_feature+0x18e>
            tmp[0] = 0xB2;
    6804:	ab01      	add	r3, sp, #4
    6806:	22b2      	movs	r2, #178	; 0xb2
    6808:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
    680a:	3a27      	subs	r2, #39	; 0x27
    680c:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
    680e:	322b      	adds	r2, #43	; 0x2b
    6810:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
    6812:	3a1b      	subs	r2, #27
    6814:	70da      	strb	r2, [r3, #3]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    6816:	aa01      	add	r2, sp, #4
    6818:	2104      	movs	r1, #4
    681a:	484c      	ldr	r0, [pc, #304]	; (694c <dmp_enable_feature+0x1dc>)
    681c:	f7ff fbe0 	bl	5fe0 <mpu_write_mem>
    if (mask & DMP_FEATURE_TAP) {
    6820:	07e3      	lsls	r3, r4, #31
    6822:	d400      	bmi.n	6826 <dmp_enable_feature+0xb6>
    6824:	e075      	b.n	6912 <dmp_enable_feature+0x1a2>
        tmp[0] = 0xF8;
    6826:	aa01      	add	r2, sp, #4
    6828:	23f8      	movs	r3, #248	; 0xf8
    682a:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
    682c:	2101      	movs	r1, #1
    682e:	208b      	movs	r0, #139	; 0x8b
    6830:	0100      	lsls	r0, r0, #4
    6832:	f7ff fbd5 	bl	5fe0 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
    6836:	21fa      	movs	r1, #250	; 0xfa
    6838:	2007      	movs	r0, #7
    683a:	f7ff fda9 	bl	6390 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
    683e:	2007      	movs	r0, #7
    6840:	f7ff fe76 	bl	6530 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
    6844:	2001      	movs	r0, #1
    6846:	f7ff fe9b 	bl	6580 <dmp_set_tap_count>
        dmp_set_tap_time(100);
    684a:	2064      	movs	r0, #100	; 0x64
    684c:	f7ff feb0 	bl	65b0 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
    6850:	20fa      	movs	r0, #250	; 0xfa
    6852:	0040      	lsls	r0, r0, #1
    6854:	f7ff fec4 	bl	65e0 <dmp_set_tap_time_multi>
        dmp_set_shake_reject_thresh(GYRO_SF, 200);
    6858:	21c8      	movs	r1, #200	; 0xc8
    685a:	483d      	ldr	r0, [pc, #244]	; (6950 <dmp_enable_feature+0x1e0>)
    685c:	f7ff fed8 	bl	6610 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
    6860:	2028      	movs	r0, #40	; 0x28
    6862:	f7ff feed 	bl	6640 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
    6866:	200a      	movs	r0, #10
    6868:	f7ff ff02 	bl	6670 <dmp_set_shake_reject_timeout>
    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
    686c:	07a3      	lsls	r3, r4, #30
    686e:	d559      	bpl.n	6924 <dmp_enable_feature+0x1b4>
        tmp[0] = 0xD9;
    6870:	22d9      	movs	r2, #217	; 0xd9
    6872:	ab01      	add	r3, sp, #4
    6874:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
    6876:	aa01      	add	r2, sp, #4
    6878:	2101      	movs	r1, #1
    687a:	4836      	ldr	r0, [pc, #216]	; (6954 <dmp_enable_feature+0x1e4>)
    687c:	f7ff fbb0 	bl	5fe0 <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
    6880:	0763      	lsls	r3, r4, #29
    6882:	d553      	bpl.n	692c <dmp_enable_feature+0x1bc>
        dmp_enable_lp_quat(1);
    6884:	2001      	movs	r0, #1
    6886:	f7ff ff33 	bl	66f0 <dmp_enable_lp_quat>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
    688a:	06e3      	lsls	r3, r4, #27
    688c:	d552      	bpl.n	6934 <dmp_enable_feature+0x1c4>
        dmp_enable_6x_lp_quat(1);
    688e:	2001      	movs	r0, #1
    6890:	f7ff ff4e 	bl	6730 <dmp_enable_6x_lp_quat>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    6894:	2308      	movs	r3, #8
    6896:	4323      	orrs	r3, r4
    6898:	4a2f      	ldr	r2, [pc, #188]	; (6958 <dmp_enable_feature+0x1e8>)
    689a:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
    689c:	f7fe fbf8 	bl	5090 <mpu_reset_fifo>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
    68a0:	2f00      	cmp	r7, #0
    68a2:	d14b      	bne.n	693c <dmp_enable_feature+0x1cc>
    dmp.packet_length = 0;
    68a4:	2200      	movs	r2, #0
    68a6:	4b2c      	ldr	r3, [pc, #176]	; (6958 <dmp_enable_feature+0x1e8>)
    68a8:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
    68aa:	2d00      	cmp	r5, #0
    68ac:	d003      	beq.n	68b6 <dmp_enable_feature+0x146>
        dmp.packet_length += 6;
    68ae:	4a2a      	ldr	r2, [pc, #168]	; (6958 <dmp_enable_feature+0x1e8>)
    68b0:	7b93      	ldrb	r3, [r2, #14]
    68b2:	3306      	adds	r3, #6
    68b4:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
    68b6:	2314      	movs	r3, #20
    68b8:	4223      	tst	r3, r4
    68ba:	d003      	beq.n	68c4 <dmp_enable_feature+0x154>
        dmp.packet_length += 16;
    68bc:	4a26      	ldr	r2, [pc, #152]	; (6958 <dmp_enable_feature+0x1e8>)
    68be:	7b93      	ldrb	r3, [r2, #14]
    68c0:	3310      	adds	r3, #16
    68c2:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
    68c4:	2e00      	cmp	r6, #0
    68c6:	d003      	beq.n	68d0 <dmp_enable_feature+0x160>
        dmp.packet_length += 4;
    68c8:	4a23      	ldr	r2, [pc, #140]	; (6958 <dmp_enable_feature+0x1e8>)
    68ca:	7b93      	ldrb	r3, [r2, #14]
    68cc:	3304      	adds	r3, #4
    68ce:	7393      	strb	r3, [r2, #14]
}
    68d0:	2000      	movs	r0, #0
    68d2:	b005      	add	sp, #20
    68d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp[1] = 0xA3;
    68d6:	ab01      	add	r3, sp, #4
    68d8:	22a3      	movs	r2, #163	; 0xa3
    68da:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
    68dc:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
    68de:	70da      	strb	r2, [r3, #3]
    68e0:	e764      	b.n	67ac <dmp_enable_feature+0x3c>
        tmp[4] = 0xA3;
    68e2:	ab01      	add	r3, sp, #4
    68e4:	22a3      	movs	r2, #163	; 0xa3
    68e6:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
    68e8:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
    68ea:	719a      	strb	r2, [r3, #6]
    68ec:	e76a      	b.n	67c4 <dmp_enable_feature+0x54>
        tmp[0] = 0xD8;
    68ee:	22d8      	movs	r2, #216	; 0xd8
    68f0:	ab01      	add	r3, sp, #4
    68f2:	701a      	strb	r2, [r3, #0]
    68f4:	e776      	b.n	67e4 <dmp_enable_feature+0x74>
        dmp_enable_gyro_cal(0);
    68f6:	2000      	movs	r0, #0
    68f8:	f7ff fed2 	bl	66a0 <dmp_enable_gyro_cal>
    68fc:	e77d      	b.n	67fa <dmp_enable_feature+0x8a>
            tmp[0] = DINAC0;
    68fe:	ab01      	add	r3, sp, #4
    6900:	22b0      	movs	r2, #176	; 0xb0
    6902:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
    6904:	3a30      	subs	r2, #48	; 0x30
    6906:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
    6908:	3234      	adds	r2, #52	; 0x34
    690a:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
    690c:	3a24      	subs	r2, #36	; 0x24
    690e:	70da      	strb	r2, [r3, #3]
    6910:	e781      	b.n	6816 <dmp_enable_feature+0xa6>
        tmp[0] = 0xD8;
    6912:	aa01      	add	r2, sp, #4
    6914:	23d8      	movs	r3, #216	; 0xd8
    6916:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
    6918:	2101      	movs	r1, #1
    691a:	208b      	movs	r0, #139	; 0x8b
    691c:	0100      	lsls	r0, r0, #4
    691e:	f7ff fb5f 	bl	5fe0 <mpu_write_mem>
    6922:	e7a3      	b.n	686c <dmp_enable_feature+0xfc>
        tmp[0] = 0xD8;
    6924:	22d8      	movs	r2, #216	; 0xd8
    6926:	ab01      	add	r3, sp, #4
    6928:	701a      	strb	r2, [r3, #0]
    692a:	e7a4      	b.n	6876 <dmp_enable_feature+0x106>
        dmp_enable_lp_quat(0);
    692c:	2000      	movs	r0, #0
    692e:	f7ff fedf 	bl	66f0 <dmp_enable_lp_quat>
    6932:	e7aa      	b.n	688a <dmp_enable_feature+0x11a>
        dmp_enable_6x_lp_quat(0);
    6934:	2000      	movs	r0, #0
    6936:	f7ff fefb 	bl	6730 <dmp_enable_6x_lp_quat>
    693a:	e7ab      	b.n	6894 <dmp_enable_feature+0x124>
        dmp.packet_length += 6;
    693c:	2206      	movs	r2, #6
    693e:	4b06      	ldr	r3, [pc, #24]	; (6958 <dmp_enable_feature+0x1e8>)
    6940:	739a      	strb	r2, [r3, #14]
    6942:	e7b2      	b.n	68aa <dmp_enable_feature+0x13a>
    6944:	00000aa7 	.word	0x00000aa7
    6948:	00000ab6 	.word	0x00000ab6
    694c:	00000aa2 	.word	0x00000aa2
    6950:	02cae309 	.word	0x02cae309
    6954:	0000073d 	.word	0x0000073d
    6958:	20000be0 	.word	0x20000be0
    695c:	00000000 	.word	0x00000000

00006960 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
    6960:	b5f0      	push	{r4, r5, r6, r7, lr}
    6962:	46d6      	mov	lr, sl
    6964:	464f      	mov	r7, r9
    6966:	4646      	mov	r6, r8
    6968:	b5c0      	push	{r6, r7, lr}
    696a:	b08a      	sub	sp, #40	; 0x28
    696c:	0007      	movs	r7, r0
    696e:	4688      	mov	r8, r1
    6970:	0015      	movs	r5, r2
    6972:	001e      	movs	r6, r3
    6974:	9c12      	ldr	r4, [sp, #72]	; 0x48
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
    6976:	2300      	movs	r3, #0
    6978:	8023      	strh	r3, [r4, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
    697a:	4b71      	ldr	r3, [pc, #452]	; (6b40 <dmp_read_fifo+0x1e0>)
    697c:	7b98      	ldrb	r0, [r3, #14]
    697e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6980:	a902      	add	r1, sp, #8
    6982:	f7fe fe75 	bl	5670 <mpu_read_fifo_stream>
    6986:	9001      	str	r0, [sp, #4]
    6988:	2800      	cmp	r0, #0
    698a:	d000      	beq.n	698e <dmp_read_fifo+0x2e>
    698c:	e0d3      	b.n	6b36 <dmp_read_fifo+0x1d6>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
    698e:	4b6c      	ldr	r3, [pc, #432]	; (6b40 <dmp_read_fifo+0x1e0>)
    6990:	8959      	ldrh	r1, [r3, #10]
    6992:	2314      	movs	r3, #20
    6994:	420b      	tst	r3, r1
    6996:	d05f      	beq.n	6a58 <dmp_read_fifo+0xf8>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
    6998:	ab02      	add	r3, sp, #8
    699a:	781b      	ldrb	r3, [r3, #0]
    699c:	061b      	lsls	r3, r3, #24
    699e:	aa02      	add	r2, sp, #8
    69a0:	7852      	ldrb	r2, [r2, #1]
    69a2:	0412      	lsls	r2, r2, #16
    69a4:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
    69a6:	aa02      	add	r2, sp, #8
    69a8:	78d2      	ldrb	r2, [r2, #3]
    69aa:	4313      	orrs	r3, r2
    69ac:	aa02      	add	r2, sp, #8
    69ae:	7892      	ldrb	r2, [r2, #2]
    69b0:	0212      	lsls	r2, r2, #8
    69b2:	4313      	orrs	r3, r2
    69b4:	469a      	mov	sl, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
    69b6:	602b      	str	r3, [r5, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
    69b8:	ab02      	add	r3, sp, #8
    69ba:	791a      	ldrb	r2, [r3, #4]
    69bc:	0612      	lsls	r2, r2, #24
    69be:	7958      	ldrb	r0, [r3, #5]
    69c0:	0400      	lsls	r0, r0, #16
    69c2:	4302      	orrs	r2, r0
            ((long)fifo_data[6] << 8) | fifo_data[7];
    69c4:	79d8      	ldrb	r0, [r3, #7]
    69c6:	4302      	orrs	r2, r0
    69c8:	7998      	ldrb	r0, [r3, #6]
    69ca:	0200      	lsls	r0, r0, #8
    69cc:	4302      	orrs	r2, r0
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
    69ce:	606a      	str	r2, [r5, #4]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
    69d0:	7a18      	ldrb	r0, [r3, #8]
    69d2:	0600      	lsls	r0, r0, #24
    69d4:	7a5b      	ldrb	r3, [r3, #9]
    69d6:	041b      	lsls	r3, r3, #16
    69d8:	4318      	orrs	r0, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
    69da:	ab02      	add	r3, sp, #8
    69dc:	7adb      	ldrb	r3, [r3, #11]
    69de:	4318      	orrs	r0, r3
    69e0:	ab02      	add	r3, sp, #8
    69e2:	7a9b      	ldrb	r3, [r3, #10]
    69e4:	021b      	lsls	r3, r3, #8
    69e6:	4303      	orrs	r3, r0
    69e8:	469c      	mov	ip, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
    69ea:	60ab      	str	r3, [r5, #8]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
    69ec:	ab02      	add	r3, sp, #8
    69ee:	7b18      	ldrb	r0, [r3, #12]
    69f0:	0600      	lsls	r0, r0, #24
    69f2:	7b5b      	ldrb	r3, [r3, #13]
    69f4:	041b      	lsls	r3, r3, #16
    69f6:	4318      	orrs	r0, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
    69f8:	ab02      	add	r3, sp, #8
    69fa:	7bdb      	ldrb	r3, [r3, #15]
    69fc:	4318      	orrs	r0, r3
    69fe:	ab02      	add	r3, sp, #8
    6a00:	7b9b      	ldrb	r3, [r3, #14]
    6a02:	021b      	lsls	r3, r3, #8
    6a04:	4318      	orrs	r0, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
    6a06:	60e8      	str	r0, [r5, #12]
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid int64_t
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
    6a08:	4653      	mov	r3, sl
    6a0a:	141b      	asrs	r3, r3, #16
        quat_q14[1] = quat[1] >> 16;
    6a0c:	1412      	asrs	r2, r2, #16
    6a0e:	4691      	mov	r9, r2
        quat_q14[2] = quat[2] >> 16;
    6a10:	4662      	mov	r2, ip
    6a12:	1412      	asrs	r2, r2, #16
    6a14:	4694      	mov	ip, r2
        quat_q14[3] = quat[3] >> 16;
    6a16:	1400      	asrs	r0, r0, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
    6a18:	435b      	muls	r3, r3
    6a1a:	001a      	movs	r2, r3
    6a1c:	464b      	mov	r3, r9
    6a1e:	435b      	muls	r3, r3
    6a20:	18d2      	adds	r2, r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
    6a22:	4663      	mov	r3, ip
    6a24:	435b      	muls	r3, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
    6a26:	18d3      	adds	r3, r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
    6a28:	4340      	muls	r0, r0
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
    6a2a:	181b      	adds	r3, r3, r0
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
    6a2c:	22f1      	movs	r2, #241	; 0xf1
    6a2e:	0612      	lsls	r2, r2, #24
    6a30:	4694      	mov	ip, r2
    6a32:	4463      	add	r3, ip
    6a34:	2280      	movs	r2, #128	; 0x80
    6a36:	0492      	lsls	r2, r2, #18
    6a38:	4293      	cmp	r3, r2
    6a3a:	d806      	bhi.n	6a4a <dmp_read_fifo+0xea>
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
            sensors[0] = 0;
            return -1;
        }
        sensors[0] |= INV_WXYZ_QUAT;
    6a3c:	8822      	ldrh	r2, [r4, #0]
    6a3e:	2380      	movs	r3, #128	; 0x80
    6a40:	005b      	lsls	r3, r3, #1
    6a42:	4313      	orrs	r3, r2
    6a44:	8023      	strh	r3, [r4, #0]
        ii += 16;
    6a46:	2310      	movs	r3, #16
    6a48:	e007      	b.n	6a5a <dmp_read_fifo+0xfa>
            mpu_reset_fifo();
    6a4a:	f7fe fb21 	bl	5090 <mpu_reset_fifo>
            sensors[0] = 0;
    6a4e:	2300      	movs	r3, #0
    6a50:	8023      	strh	r3, [r4, #0]
            return -1;
    6a52:	3b01      	subs	r3, #1
    6a54:	9301      	str	r3, [sp, #4]
    6a56:	e04a      	b.n	6aee <dmp_read_fifo+0x18e>
    unsigned char ii = 0;
    6a58:	2300      	movs	r3, #0
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
    6a5a:	064a      	lsls	r2, r1, #25
    6a5c:	d51f      	bpl.n	6a9e <dmp_read_fifo+0x13e>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
    6a5e:	aa02      	add	r2, sp, #8
    6a60:	5cd0      	ldrb	r0, [r2, r3]
    6a62:	0202      	lsls	r2, r0, #8
    6a64:	4694      	mov	ip, r2
    6a66:	001a      	movs	r2, r3
    6a68:	a802      	add	r0, sp, #8
    6a6a:	4681      	mov	r9, r0
    6a6c:	444a      	add	r2, r9
    6a6e:	7850      	ldrb	r0, [r2, #1]
    6a70:	4665      	mov	r5, ip
    6a72:	4328      	orrs	r0, r5
    6a74:	4645      	mov	r5, r8
    6a76:	8028      	strh	r0, [r5, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
    6a78:	7890      	ldrb	r0, [r2, #2]
    6a7a:	0200      	lsls	r0, r0, #8
    6a7c:	4684      	mov	ip, r0
    6a7e:	78d0      	ldrb	r0, [r2, #3]
    6a80:	4665      	mov	r5, ip
    6a82:	4328      	orrs	r0, r5
    6a84:	4645      	mov	r5, r8
    6a86:	8068      	strh	r0, [r5, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
    6a88:	7910      	ldrb	r0, [r2, #4]
    6a8a:	0200      	lsls	r0, r0, #8
    6a8c:	7952      	ldrb	r2, [r2, #5]
    6a8e:	4302      	orrs	r2, r0
    6a90:	80aa      	strh	r2, [r5, #4]
        ii += 6;
    6a92:	3306      	adds	r3, #6
    6a94:	b2db      	uxtb	r3, r3
        sensors[0] |= INV_XYZ_ACCEL;
    6a96:	8822      	ldrh	r2, [r4, #0]
    6a98:	2008      	movs	r0, #8
    6a9a:	4302      	orrs	r2, r0
    6a9c:	8022      	strh	r2, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
    6a9e:	22c0      	movs	r2, #192	; 0xc0
    6aa0:	0052      	lsls	r2, r2, #1
    6aa2:	4211      	tst	r1, r2
    6aa4:	d01d      	beq.n	6ae2 <dmp_read_fifo+0x182>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
    6aa6:	aa02      	add	r2, sp, #8
    6aa8:	5cd0      	ldrb	r0, [r2, r3]
    6aaa:	0202      	lsls	r2, r0, #8
    6aac:	4694      	mov	ip, r2
    6aae:	001a      	movs	r2, r3
    6ab0:	a802      	add	r0, sp, #8
    6ab2:	4680      	mov	r8, r0
    6ab4:	4442      	add	r2, r8
    6ab6:	7850      	ldrb	r0, [r2, #1]
    6ab8:	4665      	mov	r5, ip
    6aba:	4328      	orrs	r0, r5
    6abc:	8038      	strh	r0, [r7, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
    6abe:	7890      	ldrb	r0, [r2, #2]
    6ac0:	0200      	lsls	r0, r0, #8
    6ac2:	4684      	mov	ip, r0
    6ac4:	78d0      	ldrb	r0, [r2, #3]
    6ac6:	4665      	mov	r5, ip
    6ac8:	4328      	orrs	r0, r5
    6aca:	8078      	strh	r0, [r7, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
    6acc:	7910      	ldrb	r0, [r2, #4]
    6ace:	0200      	lsls	r0, r0, #8
    6ad0:	7952      	ldrb	r2, [r2, #5]
    6ad2:	4302      	orrs	r2, r0
    6ad4:	80ba      	strh	r2, [r7, #4]
        ii += 6;
    6ad6:	3306      	adds	r3, #6
    6ad8:	b2db      	uxtb	r3, r3
        sensors[0] |= INV_XYZ_GYRO;
    6ada:	8822      	ldrh	r2, [r4, #0]
    6adc:	2070      	movs	r0, #112	; 0x70
    6ade:	4302      	orrs	r2, r0
    6ae0:	8022      	strh	r2, [r4, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
    6ae2:	078a      	lsls	r2, r1, #30
    6ae4:	d10a      	bne.n	6afc <dmp_read_fifo+0x19c>
        decode_gesture(fifo_data + ii);

    if (timestamp != NULL)
    6ae6:	2e00      	cmp	r6, #0
    6ae8:	d001      	beq.n	6aee <dmp_read_fifo+0x18e>
	*count = 0;
    6aea:	2300      	movs	r3, #0
    6aec:	6033      	str	r3, [r6, #0]
    	get_ms(timestamp);

    return 0;
}
    6aee:	9801      	ldr	r0, [sp, #4]
    6af0:	b00a      	add	sp, #40	; 0x28
    6af2:	bc1c      	pop	{r2, r3, r4}
    6af4:	4690      	mov	r8, r2
    6af6:	4699      	mov	r9, r3
    6af8:	46a2      	mov	sl, r4
    6afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        decode_gesture(fifo_data + ii);
    6afc:	aa02      	add	r2, sp, #8
    6afe:	4694      	mov	ip, r2
    6b00:	4463      	add	r3, ip
    6b02:	001c      	movs	r4, r3
    android_orient = gesture[3] & 0xC0;
    6b04:	78df      	ldrb	r7, [r3, #3]
    if (gesture[1] & INT_SRC_TAP) {
    6b06:	785b      	ldrb	r3, [r3, #1]
    6b08:	07db      	lsls	r3, r3, #31
    6b0a:	d50a      	bpl.n	6b22 <dmp_read_fifo+0x1c2>
        if (dmp.tap_cb)
    6b0c:	4b0c      	ldr	r3, [pc, #48]	; (6b40 <dmp_read_fifo+0x1e0>)
    6b0e:	681b      	ldr	r3, [r3, #0]
    6b10:	2b00      	cmp	r3, #0
    6b12:	d006      	beq.n	6b22 <dmp_read_fifo+0x1c2>
        count = (tap % 8) + 1;
    6b14:	2007      	movs	r0, #7
    6b16:	0001      	movs	r1, r0
    6b18:	4039      	ands	r1, r7
            dmp.tap_cb(direction, count);
    6b1a:	3101      	adds	r1, #1
        direction = tap >> 3;
    6b1c:	08fa      	lsrs	r2, r7, #3
            dmp.tap_cb(direction, count);
    6b1e:	4010      	ands	r0, r2
    6b20:	4798      	blx	r3
    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
    6b22:	7863      	ldrb	r3, [r4, #1]
    6b24:	071b      	lsls	r3, r3, #28
    6b26:	d5de      	bpl.n	6ae6 <dmp_read_fifo+0x186>
        if (dmp.android_orient_cb)
    6b28:	4b05      	ldr	r3, [pc, #20]	; (6b40 <dmp_read_fifo+0x1e0>)
    6b2a:	685b      	ldr	r3, [r3, #4]
    6b2c:	2b00      	cmp	r3, #0
    6b2e:	d0da      	beq.n	6ae6 <dmp_read_fifo+0x186>
            dmp.android_orient_cb(android_orient >> 6);
    6b30:	09b8      	lsrs	r0, r7, #6
    6b32:	4798      	blx	r3
    6b34:	e7d7      	b.n	6ae6 <dmp_read_fifo+0x186>
        return -1;
    6b36:	2301      	movs	r3, #1
    6b38:	425b      	negs	r3, r3
    6b3a:	9301      	str	r3, [sp, #4]
    6b3c:	e7d7      	b.n	6aee <dmp_read_fifo+0x18e>
    6b3e:	46c0      	nop			; (mov r8, r8)
    6b40:	20000be0 	.word	0x20000be0
	...

00006b50 <dmp_register_tap_cb>:
 *  @param[in]  func    Callback function.
 *  @return     0 if successful.
 */
int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
{
    dmp.tap_cb = func;
    6b50:	4b01      	ldr	r3, [pc, #4]	; (6b58 <dmp_register_tap_cb+0x8>)
    6b52:	6018      	str	r0, [r3, #0]
    return 0;
}
    6b54:	2000      	movs	r0, #0
    6b56:	4770      	bx	lr
    6b58:	20000be0 	.word	0x20000be0
    6b5c:	00000000 	.word	0x00000000

00006b60 <xchange_sd_data>:

/*-----------------------------------------------------------------------*/
/* Exchange data with SD via SPI										 */
/*-----------------------------------------------------------------------*/
static void xchange_sd_data ( const BYTE* send_buff, UINT bc, BYTE* receive_buff)
{
    6b60:	b5f0      	push	{r4, r5, r6, r7, lr}

	//system_interrupt_enter_critical_section();
	//chSysLock();

	do {
		while(!(spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE));	//wait SPI module ready to write data
    6b62:	4b10      	ldr	r3, [pc, #64]	; (6ba4 <xchange_sd_data+0x44>)
    6b64:	2401      	movs	r4, #1

		if (send_buff == NULL)
		{
			spi_module->DATA.reg = 0xFF;								//send dummy clock
    6b66:	27ff      	movs	r7, #255	; 0xff
			spi_module->DATA.reg = d;								//write data
		}

		while(!(spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE));	//wait until data register empty, do we need this?

		while(!(spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC));	//wait SPI module ready to read
    6b68:	2604      	movs	r6, #4
    6b6a:	e004      	b.n	6b76 <xchange_sd_data+0x16>
			spi_module->DATA.reg = 0xFF;								//send dummy clock
    6b6c:	629f      	str	r7, [r3, #40]	; 0x28
    6b6e:	e00a      	b.n	6b86 <xchange_sd_data+0x26>
		if (receive_buff != NULL)
		{
			*receive_buff++ = r;												//save data
		}

	} while (--bc);
    6b70:	3901      	subs	r1, #1
    6b72:	2900      	cmp	r1, #0
    6b74:	d014      	beq.n	6ba0 <xchange_sd_data+0x40>
		while(!(spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE));	//wait SPI module ready to write data
    6b76:	7e1d      	ldrb	r5, [r3, #24]
    6b78:	4225      	tst	r5, r4
    6b7a:	d0fc      	beq.n	6b76 <xchange_sd_data+0x16>
		if (send_buff == NULL)
    6b7c:	2800      	cmp	r0, #0
    6b7e:	d0f5      	beq.n	6b6c <xchange_sd_data+0xc>
			spi_module->DATA.reg = d;								//write data
    6b80:	7805      	ldrb	r5, [r0, #0]
    6b82:	629d      	str	r5, [r3, #40]	; 0x28
			d = *send_buff++;
    6b84:	3001      	adds	r0, #1
		while(!(spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE));	//wait until data register empty, do we need this?
    6b86:	7e1d      	ldrb	r5, [r3, #24]
    6b88:	4225      	tst	r5, r4
    6b8a:	d0fc      	beq.n	6b86 <xchange_sd_data+0x26>
		while(!(spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC));	//wait SPI module ready to read
    6b8c:	7e1d      	ldrb	r5, [r3, #24]
    6b8e:	4235      	tst	r5, r6
    6b90:	d0fc      	beq.n	6b8c <xchange_sd_data+0x2c>
		r = spi_module->DATA.reg;									//read data
    6b92:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    6b94:	b2ed      	uxtb	r5, r5
		if (receive_buff != NULL)
    6b96:	2a00      	cmp	r2, #0
    6b98:	d0ea      	beq.n	6b70 <xchange_sd_data+0x10>
			*receive_buff++ = r;												//save data
    6b9a:	7015      	strb	r5, [r2, #0]
    6b9c:	3201      	adds	r2, #1
    6b9e:	e7e7      	b.n	6b70 <xchange_sd_data+0x10>

	//chSysUnlock();
	//system_interrupt_leave_critical_section();
}
    6ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ba2:	46c0      	nop			; (mov r8, r8)
    6ba4:	42001800 	.word	0x42001800
	...

00006bb0 <xchg_spi>:
}
#endif

/* Exchange a byte */
static BYTE xchg_spi (	BYTE dat	/* Data to send */)
{
    6bb0:	b510      	push	{r4, lr}
    6bb2:	b084      	sub	sp, #16
    6bb4:	466b      	mov	r3, sp
    6bb6:	71d8      	strb	r0, [r3, #7]
    6bb8:	3307      	adds	r3, #7
	BYTE datin;

	//chSysLock();

	//spi_transceive_wait(&spi_master_instance, &dat, &datin);
	xchange_sd_data(&dat, 1, &datin);
    6bba:	240f      	movs	r4, #15
    6bbc:	446c      	add	r4, sp
    6bbe:	0022      	movs	r2, r4
    6bc0:	2101      	movs	r1, #1
    6bc2:	0018      	movs	r0, r3
    6bc4:	f7ff ffcc 	bl	6b60 <xchange_sd_data>

	//chSysUnlock()

	return (BYTE)datin;
    6bc8:	7820      	ldrb	r0, [r4, #0]
}
    6bca:	b004      	add	sp, #16
    6bcc:	bd10      	pop	{r4, pc}
    6bce:	46c0      	nop			; (mov r8, r8)

00006bd0 <cardDeselect>:
/* DecardSelect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void cardDeselect (void)
{
    6bd0:	b510      	push	{r4, lr}
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    6bd2:	2280      	movs	r2, #128	; 0x80
    6bd4:	0192      	lsls	r2, r2, #6
    6bd6:	4b03      	ldr	r3, [pc, #12]	; (6be4 <cardDeselect+0x14>)
    6bd8:	619a      	str	r2, [r3, #24]
	CS_HIGH();		/* Set CS# high */
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    6bda:	20ff      	movs	r0, #255	; 0xff
    6bdc:	f7ff ffe8 	bl	6bb0 <xchg_spi>
}
    6be0:	bd10      	pop	{r4, pc}
    6be2:	46c0      	nop			; (mov r8, r8)
    6be4:	41004400 	.word	0x41004400
	...

00006bf0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
    6bf0:	b570      	push	{r4, r5, r6, lr}
    6bf2:	0005      	movs	r5, r0
    6bf4:	000c      	movs	r4, r1
	BYTE token;


	Timer1 = 200;
    6bf6:	22c8      	movs	r2, #200	; 0xc8
    6bf8:	4b0e      	ldr	r3, [pc, #56]	; (6c34 <rcvr_datablock+0x44>)
    6bfa:	601a      	str	r2, [r3, #0]
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && Timer1);
    6bfc:	001e      	movs	r6, r3
		token = xchg_spi(0xFF);
    6bfe:	20ff      	movs	r0, #255	; 0xff
    6c00:	f7ff ffd6 	bl	6bb0 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    6c04:	28ff      	cmp	r0, #255	; 0xff
    6c06:	d104      	bne.n	6c12 <rcvr_datablock+0x22>
    6c08:	6833      	ldr	r3, [r6, #0]
    6c0a:	2b00      	cmp	r3, #0
    6c0c:	d1f7      	bne.n	6bfe <rcvr_datablock+0xe>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */

	return 1;						/* Function succeeded */
}
    6c0e:	0018      	movs	r0, r3
    6c10:	bd70      	pop	{r4, r5, r6, pc}
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
    6c12:	2300      	movs	r3, #0
    6c14:	28fe      	cmp	r0, #254	; 0xfe
    6c16:	d1fa      	bne.n	6c0e <rcvr_datablock+0x1e>
	xchange_sd_data(NULL, btr, buff);
    6c18:	002a      	movs	r2, r5
    6c1a:	0021      	movs	r1, r4
    6c1c:	2000      	movs	r0, #0
    6c1e:	f7ff ff9f 	bl	6b60 <xchange_sd_data>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
    6c22:	20ff      	movs	r0, #255	; 0xff
    6c24:	f7ff ffc4 	bl	6bb0 <xchg_spi>
    6c28:	20ff      	movs	r0, #255	; 0xff
    6c2a:	f7ff ffc1 	bl	6bb0 <xchg_spi>
	return 1;						/* Function succeeded */
    6c2e:	2301      	movs	r3, #1
    6c30:	e7ed      	b.n	6c0e <rcvr_datablock+0x1e>
    6c32:	46c0      	nop			; (mov r8, r8)
    6c34:	20000bf4 	.word	0x20000bf4
	...

00006c40 <wait_ready>:
{
    6c40:	b570      	push	{r4, r5, r6, lr}
	Timer2 = wt;
    6c42:	4b0e      	ldr	r3, [pc, #56]	; (6c7c <wait_ready+0x3c>)
    6c44:	6018      	str	r0, [r3, #0]
		d = xchg_spi(0xFF);
    6c46:	20ff      	movs	r0, #255	; 0xff
    6c48:	f7ff ffb2 	bl	6bb0 <xchg_spi>
    6c4c:	0004      	movs	r4, r0
		i++;
    6c4e:	2501      	movs	r5, #1
	} while (d != 0xFF && Timer2);	/* Wait for card goes ready or timeout */
    6c50:	4e0a      	ldr	r6, [pc, #40]	; (6c7c <wait_ready+0x3c>)
    6c52:	e006      	b.n	6c62 <wait_ready+0x22>
		d = xchg_spi(0xFF);
    6c54:	20ff      	movs	r0, #255	; 0xff
    6c56:	f7ff ffab 	bl	6bb0 <xchg_spi>
    6c5a:	0004      	movs	r4, r0
		i++;
    6c5c:	3501      	adds	r5, #1
		if (i > 16)
    6c5e:	2d10      	cmp	r5, #16
    6c60:	dc08      	bgt.n	6c74 <wait_ready+0x34>
	} while (d != 0xFF && Timer2);	/* Wait for card goes ready or timeout */
    6c62:	2cff      	cmp	r4, #255	; 0xff
    6c64:	d002      	beq.n	6c6c <wait_ready+0x2c>
    6c66:	6833      	ldr	r3, [r6, #0]
    6c68:	2b00      	cmp	r3, #0
    6c6a:	d1f3      	bne.n	6c54 <wait_ready+0x14>
	return (d == 0xFF) ? 1 : 0;
    6c6c:	3cff      	subs	r4, #255	; 0xff
    6c6e:	4260      	negs	r0, r4
    6c70:	4160      	adcs	r0, r4
}
    6c72:	bd70      	pop	{r4, r5, r6, pc}
			chThdSleepMilliseconds(2);
    6c74:	2002      	movs	r0, #2
    6c76:	f7fc f913 	bl	2ea0 <chThdSleep>
    6c7a:	e7f2      	b.n	6c62 <wait_ready+0x22>
    6c7c:	20000bf8 	.word	0x20000bf8

00006c80 <cardSelect>:
{
    6c80:	b510      	push	{r4, lr}
	} else {
		port_base->OUTCLR.reg = pin_mask;
    6c82:	2280      	movs	r2, #128	; 0x80
    6c84:	0192      	lsls	r2, r2, #6
    6c86:	4b08      	ldr	r3, [pc, #32]	; (6ca8 <cardSelect+0x28>)
    6c88:	615a      	str	r2, [r3, #20]
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    6c8a:	20ff      	movs	r0, #255	; 0xff
    6c8c:	f7ff ff90 	bl	6bb0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    6c90:	20fa      	movs	r0, #250	; 0xfa
    6c92:	0040      	lsls	r0, r0, #1
    6c94:	f7ff ffd4 	bl	6c40 <wait_ready>
    6c98:	1e04      	subs	r4, r0, #0
    6c9a:	d002      	beq.n	6ca2 <cardSelect+0x22>
    6c9c:	2401      	movs	r4, #1
}
    6c9e:	0020      	movs	r0, r4
    6ca0:	bd10      	pop	{r4, pc}
	cardDeselect();
    6ca2:	f7ff ff95 	bl	6bd0 <cardDeselect>
	return 0;	/* Timeout */
    6ca6:	e7fa      	b.n	6c9e <cardSelect+0x1e>
    6ca8:	41004400 	.word	0x41004400
    6cac:	00000000 	.word	0x00000000

00006cb0 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    6cb0:	b570      	push	{r4, r5, r6, lr}
    6cb2:	0005      	movs	r5, r0
    6cb4:	000c      	movs	r4, r1
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
    6cb6:	b243      	sxtb	r3, r0
    6cb8:	2b00      	cmp	r3, #0
    6cba:	db0a      	blt.n	6cd2 <send_cmd+0x22>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    6cbc:	2d0c      	cmp	r5, #12
    6cbe:	d035      	beq.n	6d2c <send_cmd+0x7c>
		cardDeselect();
    6cc0:	f7ff ff86 	bl	6bd0 <cardDeselect>
		if (!cardSelect()) return 0xFF;
    6cc4:	f7ff ffdc 	bl	6c80 <cardSelect>
    6cc8:	23ff      	movs	r3, #255	; 0xff
    6cca:	2800      	cmp	r0, #0
    6ccc:	d10b      	bne.n	6ce6 <send_cmd+0x36>
	do {
		res = xchg_spi(0xFF);
	} while ((res & 0x80) && --n);

	return res;							/* Return received response */
}
    6cce:	0018      	movs	r0, r3
    6cd0:	bd70      	pop	{r4, r5, r6, pc}
		res = send_cmd(CMD55, 0);
    6cd2:	2100      	movs	r1, #0
    6cd4:	2037      	movs	r0, #55	; 0x37
    6cd6:	f7ff ffeb 	bl	6cb0 <send_cmd>
    6cda:	0003      	movs	r3, r0
		if (res > 1) return res;
    6cdc:	2801      	cmp	r0, #1
    6cde:	d8f6      	bhi.n	6cce <send_cmd+0x1e>
		cmd &= 0x7F;
    6ce0:	237f      	movs	r3, #127	; 0x7f
    6ce2:	401d      	ands	r5, r3
    6ce4:	e7ea      	b.n	6cbc <send_cmd+0xc>
	xchg_spi(0x40 | cmd);				/* Start + command index */
    6ce6:	2040      	movs	r0, #64	; 0x40
    6ce8:	4328      	orrs	r0, r5
    6cea:	f7ff ff61 	bl	6bb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    6cee:	0e20      	lsrs	r0, r4, #24
    6cf0:	f7ff ff5e 	bl	6bb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    6cf4:	0c20      	lsrs	r0, r4, #16
    6cf6:	b2c0      	uxtb	r0, r0
    6cf8:	f7ff ff5a 	bl	6bb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    6cfc:	0a20      	lsrs	r0, r4, #8
    6cfe:	b2c0      	uxtb	r0, r0
    6d00:	f7ff ff56 	bl	6bb0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    6d04:	b2e0      	uxtb	r0, r4
    6d06:	f7ff ff53 	bl	6bb0 <xchg_spi>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    6d0a:	2d00      	cmp	r5, #0
    6d0c:	d12c      	bne.n	6d68 <send_cmd+0xb8>
	xchg_spi(n);
    6d0e:	2095      	movs	r0, #149	; 0x95
    6d10:	f7ff ff4e 	bl	6bb0 <xchg_spi>
{
    6d14:	240a      	movs	r4, #10
		res = xchg_spi(0xFF);
    6d16:	20ff      	movs	r0, #255	; 0xff
    6d18:	f7ff ff4a 	bl	6bb0 <xchg_spi>
    6d1c:	0003      	movs	r3, r0
	} while ((res & 0x80) && --n);
    6d1e:	0602      	lsls	r2, r0, #24
    6d20:	d5d5      	bpl.n	6cce <send_cmd+0x1e>
    6d22:	3c01      	subs	r4, #1
    6d24:	b2e4      	uxtb	r4, r4
    6d26:	2c00      	cmp	r4, #0
    6d28:	d1f5      	bne.n	6d16 <send_cmd+0x66>
    6d2a:	e7d0      	b.n	6cce <send_cmd+0x1e>
	xchg_spi(0x40 | cmd);				/* Start + command index */
    6d2c:	204c      	movs	r0, #76	; 0x4c
    6d2e:	f7ff ff3f 	bl	6bb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    6d32:	0e20      	lsrs	r0, r4, #24
    6d34:	f7ff ff3c 	bl	6bb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    6d38:	0c20      	lsrs	r0, r4, #16
    6d3a:	b2c0      	uxtb	r0, r0
    6d3c:	f7ff ff38 	bl	6bb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    6d40:	0a20      	lsrs	r0, r4, #8
    6d42:	b2c0      	uxtb	r0, r0
    6d44:	f7ff ff34 	bl	6bb0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    6d48:	b2e0      	uxtb	r0, r4
    6d4a:	f7ff ff31 	bl	6bb0 <xchg_spi>
	xchg_spi(n);
    6d4e:	2001      	movs	r0, #1
    6d50:	f7ff ff2e 	bl	6bb0 <xchg_spi>
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
    6d54:	2d0c      	cmp	r5, #12
    6d56:	d1dd      	bne.n	6d14 <send_cmd+0x64>
    6d58:	20ff      	movs	r0, #255	; 0xff
    6d5a:	f7ff ff29 	bl	6bb0 <xchg_spi>
    6d5e:	e7d9      	b.n	6d14 <send_cmd+0x64>
	xchg_spi(n);
    6d60:	2087      	movs	r0, #135	; 0x87
    6d62:	f7ff ff25 	bl	6bb0 <xchg_spi>
    6d66:	e7d5      	b.n	6d14 <send_cmd+0x64>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    6d68:	2d08      	cmp	r5, #8
    6d6a:	d0f9      	beq.n	6d60 <send_cmd+0xb0>
	xchg_spi(n);
    6d6c:	2001      	movs	r0, #1
    6d6e:	f7ff ff1f 	bl	6bb0 <xchg_spi>
    6d72:	e7cf      	b.n	6d14 <send_cmd+0x64>
	...

00006d80 <xmit_datablock>:
{
    6d80:	b570      	push	{r4, r5, r6, lr}
    6d82:	0005      	movs	r5, r0
    6d84:	000c      	movs	r4, r1
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
    6d86:	20fa      	movs	r0, #250	; 0xfa
    6d88:	0040      	lsls	r0, r0, #1
    6d8a:	f7ff ff59 	bl	6c40 <wait_ready>
    6d8e:	2800      	cmp	r0, #0
    6d90:	d100      	bne.n	6d94 <xmit_datablock+0x14>
}
    6d92:	bd70      	pop	{r4, r5, r6, pc}
	xchg_spi(token);					/* Send token */
    6d94:	0020      	movs	r0, r4
    6d96:	f7ff ff0b 	bl	6bb0 <xchg_spi>
	return 1;
    6d9a:	2001      	movs	r0, #1
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
    6d9c:	2cfd      	cmp	r4, #253	; 0xfd
    6d9e:	d0f8      	beq.n	6d92 <xmit_datablock+0x12>
	xchange_sd_data(buff, btx, NULL);
    6da0:	2200      	movs	r2, #0
    6da2:	2180      	movs	r1, #128	; 0x80
    6da4:	0089      	lsls	r1, r1, #2
    6da6:	0028      	movs	r0, r5
    6da8:	f7ff feda 	bl	6b60 <xchange_sd_data>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
    6dac:	20ff      	movs	r0, #255	; 0xff
    6dae:	f7ff feff 	bl	6bb0 <xchg_spi>
    6db2:	20ff      	movs	r0, #255	; 0xff
    6db4:	f7ff fefc 	bl	6bb0 <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
    6db8:	20ff      	movs	r0, #255	; 0xff
    6dba:	f7ff fef9 	bl	6bb0 <xchg_spi>
    6dbe:	0003      	movs	r3, r0
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
    6dc0:	201f      	movs	r0, #31
    6dc2:	4018      	ands	r0, r3
    6dc4:	3805      	subs	r0, #5
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
    6dc6:	4243      	negs	r3, r0
    6dc8:	4158      	adcs	r0, r3
    6dca:	e7e2      	b.n	6d92 <xmit_datablock+0x12>
    6dcc:	0000      	movs	r0, r0
	...

00006dd0 <configure_spi_master>:
{
    6dd0:	b530      	push	{r4, r5, lr}
    6dd2:	b08f      	sub	sp, #60	; 0x3c
	config->mode             = SPI_MODE_MASTER;
    6dd4:	2201      	movs	r2, #1
    6dd6:	466b      	mov	r3, sp
    6dd8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    6dda:	2300      	movs	r3, #0
    6ddc:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    6dde:	9302      	str	r3, [sp, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    6de0:	4669      	mov	r1, sp
    6de2:	740b      	strb	r3, [r1, #16]
	config->run_in_standby   = false;
    6de4:	744b      	strb	r3, [r1, #17]
	config->receiver_enable  = true;
    6de6:	748a      	strb	r2, [r1, #18]
	config->select_slave_low_detect_enable= true;
    6de8:	74ca      	strb	r2, [r1, #19]
	config->master_slave_select_enable= false;
    6dea:	750b      	strb	r3, [r1, #20]
	config->generator_source = GCLK_GENERATOR_0;
    6dec:	2224      	movs	r2, #36	; 0x24
    6dee:	548b      	strb	r3, [r1, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    6df0:	3a18      	subs	r2, #24
    6df2:	2100      	movs	r1, #0
    6df4:	a806      	add	r0, sp, #24
    6df6:	f006 fe8b 	bl	db10 <memset>
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
    6dfa:	2580      	movs	r5, #128	; 0x80
    6dfc:	026d      	lsls	r5, r5, #9
    6dfe:	9503      	str	r5, [sp, #12]
	config_spi_master.pinmux_pad0 = PINMUX_PA12D_SERCOM4_PAD0;
    6e00:	4b20      	ldr	r3, [pc, #128]	; (6e84 <configure_spi_master+0xb4>)
    6e02:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    6e04:	2301      	movs	r3, #1
    6e06:	425b      	negs	r3, r3
    6e08:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
    6e0a:	4b1f      	ldr	r3, [pc, #124]	; (6e88 <configure_spi_master+0xb8>)
    6e0c:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
    6e0e:	4b1f      	ldr	r3, [pc, #124]	; (6e8c <configure_spi_master+0xbc>)
    6e10:	930d      	str	r3, [sp, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = 250000;
    6e12:	4b1f      	ldr	r3, [pc, #124]	; (6e90 <configure_spi_master+0xc0>)
    6e14:	9306      	str	r3, [sp, #24]
	spi_init(&spi_master_instance, SERCOM4, &config_spi_master);
    6e16:	4c1f      	ldr	r4, [pc, #124]	; (6e94 <configure_spi_master+0xc4>)
    6e18:	466a      	mov	r2, sp
    6e1a:	491f      	ldr	r1, [pc, #124]	; (6e98 <configure_spi_master+0xc8>)
    6e1c:	0020      	movs	r0, r4
    6e1e:	f7fc fc1f 	bl	3660 <spi_init>
	spi_master_instance.hw->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_DIPO(0x0);
    6e22:	6823      	ldr	r3, [r4, #0]
    6e24:	681a      	ldr	r2, [r3, #0]
    6e26:	601a      	str	r2, [r3, #0]
	spi_master_instance.hw->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(0x1);
    6e28:	6823      	ldr	r3, [r4, #0]
    6e2a:	681a      	ldr	r2, [r3, #0]
    6e2c:	4315      	orrs	r5, r2
    6e2e:	601d      	str	r5, [r3, #0]
	while(spi_master_instance.hw->SPI.SYNCBUSY.reg);
    6e30:	6823      	ldr	r3, [r4, #0]
    6e32:	69da      	ldr	r2, [r3, #28]
    6e34:	2a00      	cmp	r2, #0
    6e36:	d1fc      	bne.n	6e32 <configure_spi_master+0x62>
	spi_master_instance.hw->SPI.CTRLB.bit.RXEN = 1;
    6e38:	6859      	ldr	r1, [r3, #4]
    6e3a:	2280      	movs	r2, #128	; 0x80
    6e3c:	0292      	lsls	r2, r2, #10
    6e3e:	430a      	orrs	r2, r1
    6e40:	605a      	str	r2, [r3, #4]
	return (spi_module->SYNCBUSY.reg);
    6e42:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    6e44:	2a00      	cmp	r2, #0
    6e46:	d1fc      	bne.n	6e42 <configure_spi_master+0x72>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6e48:	681a      	ldr	r2, [r3, #0]
    6e4a:	2102      	movs	r1, #2
    6e4c:	430a      	orrs	r2, r1
    6e4e:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PMUX[11 / 2].reg |= 0x30;
    6e50:	4b12      	ldr	r3, [pc, #72]	; (6e9c <configure_spi_master+0xcc>)
    6e52:	20b5      	movs	r0, #181	; 0xb5
    6e54:	5c1a      	ldrb	r2, [r3, r0]
    6e56:	312e      	adds	r1, #46	; 0x2e
    6e58:	430a      	orrs	r2, r1
    6e5a:	541a      	strb	r2, [r3, r0]
	PORT->Group[1].PMUX[10 / 2].reg |= 0x03;
    6e5c:	5c19      	ldrb	r1, [r3, r0]
    6e5e:	2403      	movs	r4, #3
    6e60:	4321      	orrs	r1, r4
    6e62:	b2c9      	uxtb	r1, r1
    6e64:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PMUX[12 / 2].reg |= 0x03;
    6e66:	2136      	movs	r1, #54	; 0x36
    6e68:	5c5a      	ldrb	r2, [r3, r1]
    6e6a:	4322      	orrs	r2, r4
    6e6c:	b2d2      	uxtb	r2, r2
    6e6e:	545a      	strb	r2, [r3, r1]
	PORT->Group[1].PINCFG[10].reg = 0x41;
    6e70:	2241      	movs	r2, #65	; 0x41
    6e72:	3194      	adds	r1, #148	; 0x94
    6e74:	545a      	strb	r2, [r3, r1]
	PORT->Group[1].PINCFG[11].reg = 0x41;
    6e76:	3101      	adds	r1, #1
    6e78:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[12].reg = 0x41;
    6e7a:	397f      	subs	r1, #127	; 0x7f
    6e7c:	545a      	strb	r2, [r3, r1]
}
    6e7e:	b00f      	add	sp, #60	; 0x3c
    6e80:	bd30      	pop	{r4, r5, pc}
    6e82:	46c0      	nop			; (mov r8, r8)
    6e84:	000c0003 	.word	0x000c0003
    6e88:	002a0003 	.word	0x002a0003
    6e8c:	002b0003 	.word	0x002b0003
    6e90:	0003d090 	.word	0x0003d090
    6e94:	20000bfc 	.word	0x20000bfc
    6e98:	42001800 	.word	0x42001800
    6e9c:	41004400 	.word	0x41004400

00006ea0 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive number to identify the drive */
)
{
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
    6ea0:	2301      	movs	r3, #1
    6ea2:	2800      	cmp	r0, #0
    6ea4:	d102      	bne.n	6eac <disk_status+0xc>

	return Stat;	/* Return disk status */
    6ea6:	4b02      	ldr	r3, [pc, #8]	; (6eb0 <disk_status+0x10>)
    6ea8:	781b      	ldrb	r3, [r3, #0]
    6eaa:	b2db      	uxtb	r3, r3
}
    6eac:	0018      	movs	r0, r3
    6eae:	4770      	bx	lr
    6eb0:	20000848 	.word	0x20000848
	...

00006ec0 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv				/* Physical drive number to identify the drive */
)
{
    6ec0:	b570      	push	{r4, r5, r6, lr}
    6ec2:	b082      	sub	sp, #8
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
    6ec4:	2301      	movs	r3, #1
    6ec6:	2800      	cmp	r0, #0
    6ec8:	d002      	beq.n	6ed0 <disk_initialize+0x10>
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
}
    6eca:	0018      	movs	r0, r3
    6ecc:	b002      	add	sp, #8
    6ece:	bd70      	pop	{r4, r5, r6, pc}
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    6ed0:	2601      	movs	r6, #1
    6ed2:	466b      	mov	r3, sp
    6ed4:	701e      	strb	r6, [r3, #0]
	port_pin_set_config(SDCARD_CS_PIN, &pin_conf);
    6ed6:	4669      	mov	r1, sp
    6ed8:	300d      	adds	r0, #13
    6eda:	f7fd fc21 	bl	4720 <port_pin_set_config>
		port_base->OUTSET.reg = pin_mask;
    6ede:	4c59      	ldr	r4, [pc, #356]	; (7044 <disk_initialize+0x184>)
    6ee0:	2580      	movs	r5, #128	; 0x80
    6ee2:	01ad      	lsls	r5, r5, #6
    6ee4:	61a5      	str	r5, [r4, #24]
	pin_conf.direction = PORT_PIN_DIR_INPUT;
    6ee6:	2300      	movs	r3, #0
    6ee8:	466a      	mov	r2, sp
    6eea:	7013      	strb	r3, [r2, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    6eec:	7056      	strb	r6, [r2, #1]
	port_pin_set_config(SDCARD_CD_PIN, &pin_conf);
    6eee:	4669      	mov	r1, sp
    6ef0:	200e      	movs	r0, #14
    6ef2:	f7fd fc15 	bl	4720 <port_pin_set_config>
	configure_spi_master();
    6ef6:	f7ff ff6b 	bl	6dd0 <configure_spi_master>
    6efa:	61a5      	str	r5, [r4, #24]
	for (Timer1 = 10; Timer1; ) ;	/* 10ms */
    6efc:	220a      	movs	r2, #10
    6efe:	4b52      	ldr	r3, [pc, #328]	; (7048 <disk_initialize+0x188>)
    6f00:	601a      	str	r2, [r3, #0]
    6f02:	001a      	movs	r2, r3
    6f04:	6813      	ldr	r3, [r2, #0]
    6f06:	2b00      	cmp	r3, #0
    6f08:	d1fc      	bne.n	6f04 <disk_initialize+0x44>
	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the socket? */
    6f0a:	4b50      	ldr	r3, [pc, #320]	; (704c <disk_initialize+0x18c>)
    6f0c:	781b      	ldrb	r3, [r3, #0]
    6f0e:	079b      	lsls	r3, r3, #30
    6f10:	d503      	bpl.n	6f1a <disk_initialize+0x5a>
    6f12:	4b4e      	ldr	r3, [pc, #312]	; (704c <disk_initialize+0x18c>)
    6f14:	781b      	ldrb	r3, [r3, #0]
    6f16:	b2db      	uxtb	r3, r3
    6f18:	e7d7      	b.n	6eca <disk_initialize+0xa>
	FCLK_SLOW();
    6f1a:	494d      	ldr	r1, [pc, #308]	; (7050 <disk_initialize+0x190>)
    6f1c:	484d      	ldr	r0, [pc, #308]	; (7054 <disk_initialize+0x194>)
    6f1e:	f7fc fb5f 	bl	35e0 <spi_set_baudrate>
    6f22:	240a      	movs	r4, #10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
    6f24:	20ff      	movs	r0, #255	; 0xff
    6f26:	f7ff fe43 	bl	6bb0 <xchg_spi>
    6f2a:	3c01      	subs	r4, #1
    6f2c:	b2e4      	uxtb	r4, r4
    6f2e:	2c00      	cmp	r4, #0
    6f30:	d1f8      	bne.n	6f24 <disk_initialize+0x64>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
    6f32:	2100      	movs	r1, #0
    6f34:	2000      	movs	r0, #0
    6f36:	f7ff febb 	bl	6cb0 <send_cmd>
    6f3a:	0005      	movs	r5, r0
    6f3c:	0004      	movs	r4, r0
    6f3e:	2801      	cmp	r0, #1
    6f40:	d00b      	beq.n	6f5a <disk_initialize+0x9a>
	CardType = ty;	/* Card type */
    6f42:	2200      	movs	r2, #0
    6f44:	4b44      	ldr	r3, [pc, #272]	; (7058 <disk_initialize+0x198>)
    6f46:	701a      	strb	r2, [r3, #0]
	cardDeselect();
    6f48:	f7ff fe42 	bl	6bd0 <cardDeselect>
		Stat = STA_NOINIT;
    6f4c:	2201      	movs	r2, #1
    6f4e:	4b3f      	ldr	r3, [pc, #252]	; (704c <disk_initialize+0x18c>)
    6f50:	701a      	strb	r2, [r3, #0]
	return Stat;
    6f52:	4b3e      	ldr	r3, [pc, #248]	; (704c <disk_initialize+0x18c>)
    6f54:	781b      	ldrb	r3, [r3, #0]
    6f56:	b2db      	uxtb	r3, r3
    6f58:	e7b7      	b.n	6eca <disk_initialize+0xa>
		Timer1 = 1000;						/* Initialization timeout = 1 sec */
    6f5a:	22fa      	movs	r2, #250	; 0xfa
    6f5c:	0092      	lsls	r2, r2, #2
    6f5e:	4b3a      	ldr	r3, [pc, #232]	; (7048 <disk_initialize+0x188>)
    6f60:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    6f62:	21d5      	movs	r1, #213	; 0xd5
    6f64:	0049      	lsls	r1, r1, #1
    6f66:	2008      	movs	r0, #8
    6f68:	f7ff fea2 	bl	6cb0 <send_cmd>
    6f6c:	2801      	cmp	r0, #1
    6f6e:	d02a      	beq.n	6fc6 <disk_initialize+0x106>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
    6f70:	2100      	movs	r1, #0
    6f72:	20a9      	movs	r0, #169	; 0xa9
    6f74:	f7ff fe9c 	bl	6cb0 <send_cmd>
    6f78:	2801      	cmp	r0, #1
    6f7a:	d960      	bls.n	703e <disk_initialize+0x17e>
			while (Timer1 && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
    6f7c:	4e32      	ldr	r6, [pc, #200]	; (7048 <disk_initialize+0x188>)
    6f7e:	6833      	ldr	r3, [r6, #0]
    6f80:	2b00      	cmp	r3, #0
    6f82:	d005      	beq.n	6f90 <disk_initialize+0xd0>
    6f84:	2100      	movs	r1, #0
    6f86:	0020      	movs	r0, r4
    6f88:	f7ff fe92 	bl	6cb0 <send_cmd>
    6f8c:	2800      	cmp	r0, #0
    6f8e:	d1f6      	bne.n	6f7e <disk_initialize+0xbe>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
    6f90:	4b2d      	ldr	r3, [pc, #180]	; (7048 <disk_initialize+0x188>)
    6f92:	681b      	ldr	r3, [r3, #0]
    6f94:	2b00      	cmp	r3, #0
    6f96:	d0d4      	beq.n	6f42 <disk_initialize+0x82>
    6f98:	2180      	movs	r1, #128	; 0x80
    6f9a:	0089      	lsls	r1, r1, #2
    6f9c:	2010      	movs	r0, #16
    6f9e:	f7ff fe87 	bl	6cb0 <send_cmd>
    6fa2:	2800      	cmp	r0, #0
    6fa4:	d1cd      	bne.n	6f42 <disk_initialize+0x82>
	CardType = ty;	/* Card type */
    6fa6:	4b2c      	ldr	r3, [pc, #176]	; (7058 <disk_initialize+0x198>)
    6fa8:	701d      	strb	r5, [r3, #0]
	cardDeselect();
    6faa:	f7ff fe11 	bl	6bd0 <cardDeselect>
	if (ty) {			/* OK */
    6fae:	2d00      	cmp	r5, #0
    6fb0:	d0cc      	beq.n	6f4c <disk_initialize+0x8c>
		FCLK_FAST();			/* Set fast clock */
    6fb2:	492a      	ldr	r1, [pc, #168]	; (705c <disk_initialize+0x19c>)
    6fb4:	4827      	ldr	r0, [pc, #156]	; (7054 <disk_initialize+0x194>)
    6fb6:	f7fc fb13 	bl	35e0 <spi_set_baudrate>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
    6fba:	4a24      	ldr	r2, [pc, #144]	; (704c <disk_initialize+0x18c>)
    6fbc:	7813      	ldrb	r3, [r2, #0]
    6fbe:	2101      	movs	r1, #1
    6fc0:	438b      	bics	r3, r1
    6fc2:	7013      	strb	r3, [r2, #0]
    6fc4:	e7c5      	b.n	6f52 <disk_initialize+0x92>
    6fc6:	2400      	movs	r4, #0
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
    6fc8:	ad01      	add	r5, sp, #4
    6fca:	20ff      	movs	r0, #255	; 0xff
    6fcc:	f7ff fdf0 	bl	6bb0 <xchg_spi>
    6fd0:	5560      	strb	r0, [r4, r5]
    6fd2:	3401      	adds	r4, #1
    6fd4:	2c04      	cmp	r4, #4
    6fd6:	d1f8      	bne.n	6fca <disk_initialize+0x10a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
    6fd8:	ab01      	add	r3, sp, #4
    6fda:	789b      	ldrb	r3, [r3, #2]
    6fdc:	2b01      	cmp	r3, #1
    6fde:	d1b0      	bne.n	6f42 <disk_initialize+0x82>
    6fe0:	ab01      	add	r3, sp, #4
    6fe2:	78db      	ldrb	r3, [r3, #3]
    6fe4:	2baa      	cmp	r3, #170	; 0xaa
    6fe6:	d1ac      	bne.n	6f42 <disk_initialize+0x82>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
    6fe8:	4d17      	ldr	r5, [pc, #92]	; (7048 <disk_initialize+0x188>)
    6fea:	2480      	movs	r4, #128	; 0x80
    6fec:	05e4      	lsls	r4, r4, #23
    6fee:	682b      	ldr	r3, [r5, #0]
    6ff0:	2b00      	cmp	r3, #0
    6ff2:	d005      	beq.n	7000 <disk_initialize+0x140>
    6ff4:	0021      	movs	r1, r4
    6ff6:	20a9      	movs	r0, #169	; 0xa9
    6ff8:	f7ff fe5a 	bl	6cb0 <send_cmd>
    6ffc:	2800      	cmp	r0, #0
    6ffe:	d1f6      	bne.n	6fee <disk_initialize+0x12e>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    7000:	4b11      	ldr	r3, [pc, #68]	; (7048 <disk_initialize+0x188>)
    7002:	681b      	ldr	r3, [r3, #0]
    7004:	2b00      	cmp	r3, #0
    7006:	d09c      	beq.n	6f42 <disk_initialize+0x82>
    7008:	2100      	movs	r1, #0
    700a:	203a      	movs	r0, #58	; 0x3a
    700c:	f7ff fe50 	bl	6cb0 <send_cmd>
    7010:	2800      	cmp	r0, #0
    7012:	d196      	bne.n	6f42 <disk_initialize+0x82>
    7014:	2400      	movs	r4, #0
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    7016:	26ff      	movs	r6, #255	; 0xff
    7018:	ad01      	add	r5, sp, #4
    701a:	0030      	movs	r0, r6
    701c:	f7ff fdc8 	bl	6bb0 <xchg_spi>
    7020:	5560      	strb	r0, [r4, r5]
    7022:	3401      	adds	r4, #1
    7024:	2c04      	cmp	r4, #4
    7026:	d1f8      	bne.n	701a <disk_initialize+0x15a>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
    7028:	ab01      	add	r3, sp, #4
    702a:	781a      	ldrb	r2, [r3, #0]
    702c:	230c      	movs	r3, #12
    702e:	0652      	lsls	r2, r2, #25
    7030:	d400      	bmi.n	7034 <disk_initialize+0x174>
    7032:	3b08      	subs	r3, #8
	CardType = ty;	/* Card type */
    7034:	4a08      	ldr	r2, [pc, #32]	; (7058 <disk_initialize+0x198>)
    7036:	7013      	strb	r3, [r2, #0]
	cardDeselect();
    7038:	f7ff fdca 	bl	6bd0 <cardDeselect>
    703c:	e7b9      	b.n	6fb2 <disk_initialize+0xf2>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
    703e:	2502      	movs	r5, #2
    7040:	24a9      	movs	r4, #169	; 0xa9
    7042:	e79b      	b.n	6f7c <disk_initialize+0xbc>
    7044:	41004400 	.word	0x41004400
    7048:	20000bf4 	.word	0x20000bf4
    704c:	20000848 	.word	0x20000848
    7050:	0003d090 	.word	0x0003d090
    7054:	20000bfc 	.word	0x20000bfc
    7058:	20000bf0 	.word	0x20000bf0
    705c:	003d0900 	.word	0x003d0900

00007060 <disk_read>:
	BYTE drv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
    7060:	b570      	push	{r4, r5, r6, lr}
    7062:	000d      	movs	r5, r1
    7064:	001c      	movs	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
    7066:	2304      	movs	r3, #4
    7068:	2800      	cmp	r0, #0
    706a:	d001      	beq.n	7070 <disk_read+0x10>
		}
	}
	cardDeselect();

	return count ? RES_ERROR : RES_OK;	/* Return result */
}
    706c:	0018      	movs	r0, r3
    706e:	bd70      	pop	{r4, r5, r6, pc}
	if (drv || !count) return RES_PARERR;		/* Check parameter */
    7070:	2c00      	cmp	r4, #0
    7072:	d0fb      	beq.n	706c <disk_read+0xc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
    7074:	4b1c      	ldr	r3, [pc, #112]	; (70e8 <disk_read+0x88>)
    7076:	7819      	ldrb	r1, [r3, #0]
    7078:	2303      	movs	r3, #3
    707a:	07c9      	lsls	r1, r1, #31
    707c:	d4f6      	bmi.n	706c <disk_read+0xc>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
    707e:	4b1b      	ldr	r3, [pc, #108]	; (70ec <disk_read+0x8c>)
    7080:	781b      	ldrb	r3, [r3, #0]
    7082:	071b      	lsls	r3, r3, #28
    7084:	d400      	bmi.n	7088 <disk_read+0x28>
    7086:	0252      	lsls	r2, r2, #9
	if (count == 1) {	/* Single sector read */
    7088:	2c01      	cmp	r4, #1
    708a:	d01e      	beq.n	70ca <disk_read+0x6a>
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    708c:	0011      	movs	r1, r2
    708e:	2012      	movs	r0, #18
    7090:	f7ff fe0e 	bl	6cb0 <send_cmd>
    7094:	2800      	cmp	r0, #0
    7096:	d112      	bne.n	70be <disk_read+0x5e>
				if (!rcvr_datablock(buff, 512)) break;
    7098:	2680      	movs	r6, #128	; 0x80
    709a:	00b6      	lsls	r6, r6, #2
    709c:	0031      	movs	r1, r6
    709e:	0028      	movs	r0, r5
    70a0:	f7ff fda6 	bl	6bf0 <rcvr_datablock>
    70a4:	2800      	cmp	r0, #0
    70a6:	d006      	beq.n	70b6 <disk_read+0x56>
				buff += 512;
    70a8:	2380      	movs	r3, #128	; 0x80
    70aa:	009b      	lsls	r3, r3, #2
    70ac:	469c      	mov	ip, r3
    70ae:	4465      	add	r5, ip
			} while (--count);
    70b0:	3c01      	subs	r4, #1
    70b2:	2c00      	cmp	r4, #0
    70b4:	d1f2      	bne.n	709c <disk_read+0x3c>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    70b6:	2100      	movs	r1, #0
    70b8:	200c      	movs	r0, #12
    70ba:	f7ff fdf9 	bl	6cb0 <send_cmd>
	cardDeselect();
    70be:	f7ff fd87 	bl	6bd0 <cardDeselect>
	return count ? RES_ERROR : RES_OK;	/* Return result */
    70c2:	1e60      	subs	r0, r4, #1
    70c4:	4184      	sbcs	r4, r0
    70c6:	b2e3      	uxtb	r3, r4
    70c8:	e7d0      	b.n	706c <disk_read+0xc>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    70ca:	0011      	movs	r1, r2
    70cc:	2011      	movs	r0, #17
    70ce:	f7ff fdef 	bl	6cb0 <send_cmd>
    70d2:	2800      	cmp	r0, #0
    70d4:	d1f3      	bne.n	70be <disk_read+0x5e>
			&& rcvr_datablock(buff, 512)) {
    70d6:	2180      	movs	r1, #128	; 0x80
    70d8:	0089      	lsls	r1, r1, #2
    70da:	0028      	movs	r0, r5
    70dc:	f7ff fd88 	bl	6bf0 <rcvr_datablock>
    70e0:	4244      	negs	r4, r0
    70e2:	4144      	adcs	r4, r0
    70e4:	e7eb      	b.n	70be <disk_read+0x5e>
    70e6:	46c0      	nop			; (mov r8, r8)
    70e8:	20000848 	.word	0x20000848
    70ec:	20000bf0 	.word	0x20000bf0

000070f0 <disk_write>:
	BYTE drv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
    70f0:	b570      	push	{r4, r5, r6, lr}
    70f2:	000d      	movs	r5, r1
    70f4:	0016      	movs	r6, r2
    70f6:	001c      	movs	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
    70f8:	2304      	movs	r3, #4
    70fa:	2800      	cmp	r0, #0
    70fc:	d001      	beq.n	7102 <disk_write+0x12>
		}
	}
	cardDeselect();

	return count ? RES_ERROR : RES_OK;	/* Return result */
}
    70fe:	0018      	movs	r0, r3
    7100:	bd70      	pop	{r4, r5, r6, pc}
	if (drv || !count) return RES_PARERR;		/* Check parameter */
    7102:	2c00      	cmp	r4, #0
    7104:	d0fb      	beq.n	70fe <disk_write+0xe>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
    7106:	4b23      	ldr	r3, [pc, #140]	; (7194 <disk_write+0xa4>)
    7108:	781a      	ldrb	r2, [r3, #0]
    710a:	2303      	movs	r3, #3
    710c:	07d2      	lsls	r2, r2, #31
    710e:	d4f6      	bmi.n	70fe <disk_write+0xe>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
    7110:	4b20      	ldr	r3, [pc, #128]	; (7194 <disk_write+0xa4>)
    7112:	781a      	ldrb	r2, [r3, #0]
    7114:	2302      	movs	r3, #2
    7116:	0752      	lsls	r2, r2, #29
    7118:	d4f1      	bmi.n	70fe <disk_write+0xe>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
    711a:	4b1f      	ldr	r3, [pc, #124]	; (7198 <disk_write+0xa8>)
    711c:	781b      	ldrb	r3, [r3, #0]
    711e:	071a      	lsls	r2, r3, #28
    7120:	d400      	bmi.n	7124 <disk_write+0x34>
    7122:	0276      	lsls	r6, r6, #9
	if (count == 1) {	/* Single sector write */
    7124:	2c01      	cmp	r4, #1
    7126:	d022      	beq.n	716e <disk_write+0x7e>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
    7128:	2206      	movs	r2, #6
    712a:	421a      	tst	r2, r3
    712c:	d12c      	bne.n	7188 <disk_write+0x98>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    712e:	0031      	movs	r1, r6
    7130:	2019      	movs	r0, #25
    7132:	f7ff fdbd 	bl	6cb0 <send_cmd>
    7136:	2800      	cmp	r0, #0
    7138:	d113      	bne.n	7162 <disk_write+0x72>
				if (!xmit_datablock(buff, 0xFC)) break;
    713a:	21fc      	movs	r1, #252	; 0xfc
    713c:	0028      	movs	r0, r5
    713e:	f7ff fe1f 	bl	6d80 <xmit_datablock>
    7142:	2800      	cmp	r0, #0
    7144:	d006      	beq.n	7154 <disk_write+0x64>
				buff += 512;
    7146:	2380      	movs	r3, #128	; 0x80
    7148:	009b      	lsls	r3, r3, #2
    714a:	469c      	mov	ip, r3
    714c:	4465      	add	r5, ip
			} while (--count);
    714e:	3c01      	subs	r4, #1
    7150:	2c00      	cmp	r4, #0
    7152:	d1f2      	bne.n	713a <disk_write+0x4a>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
    7154:	21fd      	movs	r1, #253	; 0xfd
    7156:	2000      	movs	r0, #0
    7158:	f7ff fe12 	bl	6d80 <xmit_datablock>
    715c:	2800      	cmp	r0, #0
    715e:	d100      	bne.n	7162 <disk_write+0x72>
    7160:	2401      	movs	r4, #1
	cardDeselect();
    7162:	f7ff fd35 	bl	6bd0 <cardDeselect>
	return count ? RES_ERROR : RES_OK;	/* Return result */
    7166:	1e63      	subs	r3, r4, #1
    7168:	419c      	sbcs	r4, r3
    716a:	b2e3      	uxtb	r3, r4
    716c:	e7c7      	b.n	70fe <disk_write+0xe>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    716e:	0031      	movs	r1, r6
    7170:	2018      	movs	r0, #24
    7172:	f7ff fd9d 	bl	6cb0 <send_cmd>
    7176:	2800      	cmp	r0, #0
    7178:	d1f3      	bne.n	7162 <disk_write+0x72>
			&& xmit_datablock(buff, 0xFE)) {
    717a:	21fe      	movs	r1, #254	; 0xfe
    717c:	0028      	movs	r0, r5
    717e:	f7ff fdff 	bl	6d80 <xmit_datablock>
    7182:	4244      	negs	r4, r0
    7184:	4144      	adcs	r4, r0
    7186:	e7ec      	b.n	7162 <disk_write+0x72>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
    7188:	0021      	movs	r1, r4
    718a:	2097      	movs	r0, #151	; 0x97
    718c:	f7ff fd90 	bl	6cb0 <send_cmd>
    7190:	e7cd      	b.n	712e <disk_write+0x3e>
    7192:	46c0      	nop			; (mov r8, r8)
    7194:	20000848 	.word	0x20000848
    7198:	20000bf0 	.word	0x20000bf0
    719c:	00000000 	.word	0x00000000

000071a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    71a0:	b530      	push	{r4, r5, lr}
    71a2:	b085      	sub	sp, #20
    71a4:	0015      	movs	r5, r2
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (drv) return RES_PARERR;					/* Check parameter */
    71a6:	2404      	movs	r4, #4
    71a8:	2800      	cmp	r0, #0
    71aa:	d002      	beq.n	71b2 <disk_ioctl+0x12>
	}

	cardDeselect();

	return res;
}
    71ac:	0020      	movs	r0, r4
    71ae:	b005      	add	sp, #20
    71b0:	bd30      	pop	{r4, r5, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
    71b2:	4b79      	ldr	r3, [pc, #484]	; (7398 <disk_ioctl+0x1f8>)
    71b4:	781b      	ldrb	r3, [r3, #0]
    71b6:	3c01      	subs	r4, #1
    71b8:	07db      	lsls	r3, r3, #31
    71ba:	d4f7      	bmi.n	71ac <disk_ioctl+0xc>
	switch (cmd) {
    71bc:	2901      	cmp	r1, #1
    71be:	d010      	beq.n	71e2 <disk_ioctl+0x42>
    71c0:	2900      	cmp	r1, #0
    71c2:	d006      	beq.n	71d2 <disk_ioctl+0x32>
    71c4:	2903      	cmp	r1, #3
    71c6:	d054      	beq.n	7272 <disk_ioctl+0xd2>
    71c8:	2904      	cmp	r1, #4
    71ca:	d100      	bne.n	71ce <disk_ioctl+0x2e>
    71cc:	e0a8      	b.n	7320 <disk_ioctl+0x180>
		res = RES_PARERR;
    71ce:	2404      	movs	r4, #4
    71d0:	e004      	b.n	71dc <disk_ioctl+0x3c>
		if (cardSelect()) res = RES_OK;
    71d2:	f7ff fd55 	bl	6c80 <cardSelect>
    71d6:	4244      	negs	r4, r0
    71d8:	4144      	adcs	r4, r0
    71da:	b2e4      	uxtb	r4, r4
	cardDeselect();
    71dc:	f7ff fcf8 	bl	6bd0 <cardDeselect>
	return res;
    71e0:	e7e4      	b.n	71ac <disk_ioctl+0xc>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    71e2:	2100      	movs	r1, #0
    71e4:	2009      	movs	r0, #9
    71e6:	f7ff fd63 	bl	6cb0 <send_cmd>
	res = RES_ERROR;
    71ea:	2401      	movs	r4, #1
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    71ec:	2800      	cmp	r0, #0
    71ee:	d1f5      	bne.n	71dc <disk_ioctl+0x3c>
    71f0:	2110      	movs	r1, #16
    71f2:	4668      	mov	r0, sp
    71f4:	f7ff fcfc 	bl	6bf0 <rcvr_datablock>
    71f8:	2800      	cmp	r0, #0
    71fa:	d0ef      	beq.n	71dc <disk_ioctl+0x3c>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    71fc:	466b      	mov	r3, sp
    71fe:	781b      	ldrb	r3, [r3, #0]
    7200:	099b      	lsrs	r3, r3, #6
    7202:	2b01      	cmp	r3, #1
    7204:	d023      	beq.n	724e <disk_ioctl+0xae>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    7206:	466b      	mov	r3, sp
    7208:	7a1b      	ldrb	r3, [r3, #8]
    720a:	099b      	lsrs	r3, r3, #6
    720c:	466a      	mov	r2, sp
    720e:	79d2      	ldrb	r2, [r2, #7]
    7210:	0092      	lsls	r2, r2, #2
    7212:	189b      	adds	r3, r3, r2
    7214:	466a      	mov	r2, sp
    7216:	7992      	ldrb	r2, [r2, #6]
    7218:	0292      	lsls	r2, r2, #10
    721a:	21c0      	movs	r1, #192	; 0xc0
    721c:	0109      	lsls	r1, r1, #4
    721e:	400a      	ands	r2, r1
    7220:	189a      	adds	r2, r3, r2
    7222:	3201      	adds	r2, #1
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    7224:	466b      	mov	r3, sp
    7226:	7959      	ldrb	r1, [r3, #5]
    7228:	230f      	movs	r3, #15
    722a:	400b      	ands	r3, r1
    722c:	4669      	mov	r1, sp
    722e:	7a89      	ldrb	r1, [r1, #10]
    7230:	09c9      	lsrs	r1, r1, #7
    7232:	185b      	adds	r3, r3, r1
    7234:	3302      	adds	r3, #2
    7236:	4669      	mov	r1, sp
    7238:	7a48      	ldrb	r0, [r1, #9]
    723a:	0040      	lsls	r0, r0, #1
    723c:	2106      	movs	r1, #6
    723e:	4001      	ands	r1, r0
    7240:	185b      	adds	r3, r3, r1
				*(DWORD*)buff = csize << (n - 9);
    7242:	b2db      	uxtb	r3, r3
    7244:	3b09      	subs	r3, #9
    7246:	409a      	lsls	r2, r3
    7248:	602a      	str	r2, [r5, #0]
			res = RES_OK;
    724a:	2400      	movs	r4, #0
    724c:	e7c6      	b.n	71dc <disk_ioctl+0x3c>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    724e:	466b      	mov	r3, sp
    7250:	7a1b      	ldrb	r3, [r3, #8]
    7252:	021b      	lsls	r3, r3, #8
    7254:	466a      	mov	r2, sp
    7256:	7a52      	ldrb	r2, [r2, #9]
    7258:	189b      	adds	r3, r3, r2
    725a:	466a      	mov	r2, sp
    725c:	79d2      	ldrb	r2, [r2, #7]
    725e:	0412      	lsls	r2, r2, #16
    7260:	21fc      	movs	r1, #252	; 0xfc
    7262:	0389      	lsls	r1, r1, #14
    7264:	400a      	ands	r2, r1
    7266:	1912      	adds	r2, r2, r4
    7268:	189b      	adds	r3, r3, r2
				*(DWORD*)buff = csize << 10;
    726a:	029b      	lsls	r3, r3, #10
    726c:	602b      	str	r3, [r5, #0]
			res = RES_OK;
    726e:	2400      	movs	r4, #0
    7270:	e7b4      	b.n	71dc <disk_ioctl+0x3c>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    7272:	4b4a      	ldr	r3, [pc, #296]	; (739c <disk_ioctl+0x1fc>)
    7274:	781b      	ldrb	r3, [r3, #0]
    7276:	075b      	lsls	r3, r3, #29
    7278:	d51e      	bpl.n	72b8 <disk_ioctl+0x118>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    727a:	2100      	movs	r1, #0
    727c:	208d      	movs	r0, #141	; 0x8d
    727e:	f7ff fd17 	bl	6cb0 <send_cmd>
	res = RES_ERROR;
    7282:	2401      	movs	r4, #1
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    7284:	2800      	cmp	r0, #0
    7286:	d1a9      	bne.n	71dc <disk_ioctl+0x3c>
				xchg_spi(0xFF);
    7288:	30ff      	adds	r0, #255	; 0xff
    728a:	f7ff fc91 	bl	6bb0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    728e:	2110      	movs	r1, #16
    7290:	4668      	mov	r0, sp
    7292:	f7ff fcad 	bl	6bf0 <rcvr_datablock>
    7296:	2800      	cmp	r0, #0
    7298:	d0a0      	beq.n	71dc <disk_ioctl+0x3c>
    729a:	342f      	adds	r4, #47	; 0x2f
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    729c:	20ff      	movs	r0, #255	; 0xff
    729e:	f7ff fc87 	bl	6bb0 <xchg_spi>
    72a2:	3c01      	subs	r4, #1
    72a4:	b2e4      	uxtb	r4, r4
    72a6:	2c00      	cmp	r4, #0
    72a8:	d1f8      	bne.n	729c <disk_ioctl+0xfc>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    72aa:	466b      	mov	r3, sp
    72ac:	7a9a      	ldrb	r2, [r3, #10]
    72ae:	0912      	lsrs	r2, r2, #4
    72b0:	2310      	movs	r3, #16
    72b2:	4093      	lsls	r3, r2
    72b4:	602b      	str	r3, [r5, #0]
    72b6:	e791      	b.n	71dc <disk_ioctl+0x3c>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    72b8:	2100      	movs	r1, #0
    72ba:	2009      	movs	r0, #9
    72bc:	f7ff fcf8 	bl	6cb0 <send_cmd>
	res = RES_ERROR;
    72c0:	2401      	movs	r4, #1
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    72c2:	2800      	cmp	r0, #0
    72c4:	d18a      	bne.n	71dc <disk_ioctl+0x3c>
    72c6:	2110      	movs	r1, #16
    72c8:	4668      	mov	r0, sp
    72ca:	f7ff fc91 	bl	6bf0 <rcvr_datablock>
    72ce:	2800      	cmp	r0, #0
    72d0:	d084      	beq.n	71dc <disk_ioctl+0x3c>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    72d2:	4b32      	ldr	r3, [pc, #200]	; (739c <disk_ioctl+0x1fc>)
    72d4:	781b      	ldrb	r3, [r3, #0]
    72d6:	079b      	lsls	r3, r3, #30
    72d8:	d511      	bpl.n	72fe <disk_ioctl+0x15e>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    72da:	466b      	mov	r3, sp
    72dc:	7a9b      	ldrb	r3, [r3, #10]
    72de:	40a3      	lsls	r3, r4
    72e0:	227e      	movs	r2, #126	; 0x7e
    72e2:	4013      	ands	r3, r2
    72e4:	466a      	mov	r2, sp
    72e6:	7ad2      	ldrb	r2, [r2, #11]
    72e8:	09d2      	lsrs	r2, r2, #7
    72ea:	189b      	adds	r3, r3, r2
    72ec:	191b      	adds	r3, r3, r4
    72ee:	466a      	mov	r2, sp
    72f0:	7b52      	ldrb	r2, [r2, #13]
    72f2:	0992      	lsrs	r2, r2, #6
    72f4:	3a01      	subs	r2, #1
    72f6:	4093      	lsls	r3, r2
    72f8:	602b      	str	r3, [r5, #0]
				res = RES_OK;
    72fa:	2400      	movs	r4, #0
    72fc:	e76e      	b.n	71dc <disk_ioctl+0x3c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    72fe:	466b      	mov	r3, sp
    7300:	7ada      	ldrb	r2, [r3, #11]
    7302:	00d3      	lsls	r3, r2, #3
    7304:	2118      	movs	r1, #24
    7306:	400b      	ands	r3, r1
    7308:	0952      	lsrs	r2, r2, #5
    730a:	189a      	adds	r2, r3, r2
    730c:	3201      	adds	r2, #1
    730e:	466b      	mov	r3, sp
    7310:	7a9b      	ldrb	r3, [r3, #10]
    7312:	065b      	lsls	r3, r3, #25
    7314:	0edb      	lsrs	r3, r3, #27
    7316:	3301      	adds	r3, #1
    7318:	4353      	muls	r3, r2
    731a:	602b      	str	r3, [r5, #0]
				res = RES_OK;
    731c:	2400      	movs	r4, #0
    731e:	e75d      	b.n	71dc <disk_ioctl+0x3c>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
    7320:	4b1e      	ldr	r3, [pc, #120]	; (739c <disk_ioctl+0x1fc>)
    7322:	781b      	ldrb	r3, [r3, #0]
    7324:	2206      	movs	r2, #6
	res = RES_ERROR;
    7326:	2401      	movs	r4, #1
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
    7328:	421a      	tst	r2, r3
    732a:	d100      	bne.n	732e <disk_ioctl+0x18e>
    732c:	e756      	b.n	71dc <disk_ioctl+0x3c>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
    732e:	466a      	mov	r2, sp
    7330:	210b      	movs	r1, #11
    7332:	2000      	movs	r0, #0
    7334:	f7ff ff34 	bl	71a0 <disk_ioctl>
    7338:	2800      	cmp	r0, #0
    733a:	d000      	beq.n	733e <disk_ioctl+0x19e>
    733c:	e74e      	b.n	71dc <disk_ioctl+0x3c>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
    733e:	466b      	mov	r3, sp
    7340:	781b      	ldrb	r3, [r3, #0]
    7342:	099b      	lsrs	r3, r3, #6
    7344:	d104      	bne.n	7350 <disk_ioctl+0x1b0>
    7346:	466b      	mov	r3, sp
    7348:	7a9b      	ldrb	r3, [r3, #10]
    734a:	065b      	lsls	r3, r3, #25
    734c:	d400      	bmi.n	7350 <disk_ioctl+0x1b0>
    734e:	e745      	b.n	71dc <disk_ioctl+0x3c>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
    7350:	6829      	ldr	r1, [r5, #0]
    7352:	686d      	ldr	r5, [r5, #4]
		if (!(CardType & CT_BLOCK)) {
    7354:	4b11      	ldr	r3, [pc, #68]	; (739c <disk_ioctl+0x1fc>)
    7356:	781b      	ldrb	r3, [r3, #0]
    7358:	071b      	lsls	r3, r3, #28
    735a:	d401      	bmi.n	7360 <disk_ioctl+0x1c0>
			st *= 512; ed *= 512;
    735c:	0249      	lsls	r1, r1, #9
    735e:	026d      	lsls	r5, r5, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
    7360:	2020      	movs	r0, #32
    7362:	f7ff fca5 	bl	6cb0 <send_cmd>
	res = RES_ERROR;
    7366:	2401      	movs	r4, #1
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
    7368:	2800      	cmp	r0, #0
    736a:	d000      	beq.n	736e <disk_ioctl+0x1ce>
    736c:	e736      	b.n	71dc <disk_ioctl+0x3c>
    736e:	0029      	movs	r1, r5
    7370:	3021      	adds	r0, #33	; 0x21
    7372:	f7ff fc9d 	bl	6cb0 <send_cmd>
    7376:	2800      	cmp	r0, #0
    7378:	d000      	beq.n	737c <disk_ioctl+0x1dc>
    737a:	e72f      	b.n	71dc <disk_ioctl+0x3c>
    737c:	2100      	movs	r1, #0
    737e:	3026      	adds	r0, #38	; 0x26
    7380:	f7ff fc96 	bl	6cb0 <send_cmd>
    7384:	2800      	cmp	r0, #0
    7386:	d000      	beq.n	738a <disk_ioctl+0x1ea>
    7388:	e728      	b.n	71dc <disk_ioctl+0x3c>
    738a:	4805      	ldr	r0, [pc, #20]	; (73a0 <disk_ioctl+0x200>)
    738c:	f7ff fc58 	bl	6c40 <wait_ready>
    7390:	4244      	negs	r4, r0
    7392:	4144      	adcs	r4, r0
		if (cardSelect()) res = RES_OK;
    7394:	b2e4      	uxtb	r4, r4
    7396:	e721      	b.n	71dc <disk_ioctl+0x3c>
    7398:	20000848 	.word	0x20000848
    739c:	20000bf0 	.word	0x20000bf0
    73a0:	00007530 	.word	0x00007530
	...

000073b0 <disk_timerproc>:
void disk_timerproc (void)
{
	WORD n;
	BYTE s;

	n = Timer1;						/* 1kHz decrement timer stopped at 0 */
    73b0:	4b11      	ldr	r3, [pc, #68]	; (73f8 <disk_timerproc+0x48>)
    73b2:	681b      	ldr	r3, [r3, #0]
    73b4:	b29b      	uxth	r3, r3
	if (n) Timer1 = --n;
    73b6:	2b00      	cmp	r3, #0
    73b8:	d003      	beq.n	73c2 <disk_timerproc+0x12>
    73ba:	3b01      	subs	r3, #1
    73bc:	b29b      	uxth	r3, r3
    73be:	4a0e      	ldr	r2, [pc, #56]	; (73f8 <disk_timerproc+0x48>)
    73c0:	6013      	str	r3, [r2, #0]
	n = Timer2;
    73c2:	4b0e      	ldr	r3, [pc, #56]	; (73fc <disk_timerproc+0x4c>)
    73c4:	681b      	ldr	r3, [r3, #0]
    73c6:	b29b      	uxth	r3, r3
	if (n) Timer2 = --n;
    73c8:	2b00      	cmp	r3, #0
    73ca:	d003      	beq.n	73d4 <disk_timerproc+0x24>
    73cc:	3b01      	subs	r3, #1
    73ce:	b29b      	uxth	r3, r3
    73d0:	4a0a      	ldr	r2, [pc, #40]	; (73fc <disk_timerproc+0x4c>)
    73d2:	6013      	str	r3, [r2, #0]

	s = Stat;
    73d4:	4b0a      	ldr	r3, [pc, #40]	; (7400 <disk_timerproc+0x50>)
    73d6:	781b      	ldrb	r3, [r3, #0]
    73d8:	b2db      	uxtb	r3, r3
	return (port_base->IN.reg & pin_mask);
    73da:	4a0a      	ldr	r2, [pc, #40]	; (7404 <disk_timerproc+0x54>)
    73dc:	6a12      	ldr	r2, [r2, #32]
	if (MMC_WP) {	/* Write protected */
		s |= STA_PROTECT;
	} else {		/* Write enabled */
		s &= ~STA_PROTECT;
	}
	if (MMC_CD) {	/* Card is in socket */
    73de:	0452      	lsls	r2, r2, #17
    73e0:	d406      	bmi.n	73f0 <disk_timerproc+0x40>
		s &= ~STA_PROTECT;
    73e2:	2204      	movs	r2, #4
    73e4:	4393      	bics	r3, r2
		s &= ~STA_NODISK;
	} else {		/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
    73e6:	3a01      	subs	r2, #1
    73e8:	4313      	orrs	r3, r2
	}
	Stat = s;
    73ea:	4a05      	ldr	r2, [pc, #20]	; (7400 <disk_timerproc+0x50>)
    73ec:	7013      	strb	r3, [r2, #0]
}
    73ee:	4770      	bx	lr
		s &= ~STA_NODISK;
    73f0:	2206      	movs	r2, #6
    73f2:	4393      	bics	r3, r2
    73f4:	e7f9      	b.n	73ea <disk_timerproc+0x3a>
    73f6:	46c0      	nop			; (mov r8, r8)
    73f8:	20000bf4 	.word	0x20000bf4
    73fc:	20000bf8 	.word	0x20000bf8
    7400:	20000848 	.word	0x20000848
    7404:	41004400 	.word	0x41004400
	...

00007410 <cdc_putc>:
};

#define pCdc (&sam_ba_cdc)

int cdc_putc(/*P_USB_CDC pCdc,*/ int value)
{
    7410:	b500      	push	{lr}
    7412:	b083      	sub	sp, #12
    7414:	9001      	str	r0, [sp, #4]
  /* Send single byte on USB CDC */
  USB_Write(pCdc->pUsb, (const char *)&value, 1, USB_EP_IN);
    7416:	4b05      	ldr	r3, [pc, #20]	; (742c <cdc_putc+0x1c>)
    7418:	6818      	ldr	r0, [r3, #0]
    741a:	2301      	movs	r3, #1
    741c:	2201      	movs	r2, #1
    741e:	a901      	add	r1, sp, #4
    7420:	f000 fba6 	bl	7b70 <USB_Write>

  return 1;
}
    7424:	2001      	movs	r0, #1
    7426:	b003      	add	sp, #12
    7428:	bd00      	pop	{pc}
    742a:	46c0      	nop			; (mov r8, r8)
    742c:	20000c0c 	.word	0x20000c0c

00007430 <cdc_getc>:

int cdc_getc(/*P_USB_CDC pCdc*/void)
{
    7430:	b510      	push	{r4, lr}
    7432:	b082      	sub	sp, #8
  uint8_t rx_char;

  /* Read singly byte on USB CDC */
  USB_Read(pCdc->pUsb, (char *)&rx_char, 1);
    7434:	466b      	mov	r3, sp
    7436:	1ddc      	adds	r4, r3, #7
    7438:	4b04      	ldr	r3, [pc, #16]	; (744c <cdc_getc+0x1c>)
    743a:	6818      	ldr	r0, [r3, #0]
    743c:	2201      	movs	r2, #1
    743e:	0021      	movs	r1, r4
    7440:	f000 fbee 	bl	7c20 <USB_Read>

  return (int)rx_char;
    7444:	7820      	ldrb	r0, [r4, #0]
}
    7446:	b002      	add	sp, #8
    7448:	bd10      	pop	{r4, pc}
    744a:	46c0      	nop			; (mov r8, r8)
    744c:	20000c0c 	.word	0x20000c0c

00007450 <cdc_is_rx_ready>:

bool cdc_is_rx_ready(/*P_USB_CDC pCdc*/void)
{
    7450:	b510      	push	{r4, lr}
  /* Check whether the device is configured */
  if ( !USB_IsConfigured(pCdc) )
    7452:	4807      	ldr	r0, [pc, #28]	; (7470 <cdc_is_rx_ready+0x20>)
    7454:	f000 faac 	bl	79b0 <USB_IsConfigured>
    7458:	0003      	movs	r3, r0
    return 0;
    745a:	2000      	movs	r0, #0
  if ( !USB_IsConfigured(pCdc) )
    745c:	2b00      	cmp	r3, #0
    745e:	d006      	beq.n	746e <cdc_is_rx_ready+0x1e>

  /* Return transfer complete 0 flag status */
  return (pCdc->pUsb->DEVICE.DeviceEndpoint[USB_EP_OUT].EPINTFLAG.bit.TRCPT0);
    7460:	4b03      	ldr	r3, [pc, #12]	; (7470 <cdc_is_rx_ready+0x20>)
    7462:	681a      	ldr	r2, [r3, #0]
    7464:	2348      	movs	r3, #72	; 0x48
    7466:	33ff      	adds	r3, #255	; 0xff
    7468:	5cd0      	ldrb	r0, [r2, r3]
    746a:	07c0      	lsls	r0, r0, #31
    746c:	0fc0      	lsrs	r0, r0, #31
}
    746e:	bd10      	pop	{r4, pc}
    7470:	20000c0c 	.word	0x20000c0c
	...

00007480 <cdc_write_buf>:

uint32_t cdc_write_buf(/*P_USB_CDC pCdc,*/ void const* data, uint32_t length)
{
    7480:	b570      	push	{r4, r5, r6, lr}
    7482:	0005      	movs	r5, r0
    7484:	000c      	movs	r4, r1
  /* Send the specified number of bytes on USB CDC */
  USB_Write(pCdc->pUsb, (const char *)data, length, USB_EP_IN);
    7486:	4b04      	ldr	r3, [pc, #16]	; (7498 <cdc_write_buf+0x18>)
    7488:	6818      	ldr	r0, [r3, #0]
    748a:	2301      	movs	r3, #1
    748c:	000a      	movs	r2, r1
    748e:	0029      	movs	r1, r5
    7490:	f000 fb6e 	bl	7b70 <USB_Write>
  return length;
}
    7494:	0020      	movs	r0, r4
    7496:	bd70      	pop	{r4, r5, r6, pc}
    7498:	20000c0c 	.word	0x20000c0c
    749c:	00000000 	.word	0x00000000

000074a0 <software_reset_mcu>:
  __ASM volatile ("cpsid i" : : : "memory");
    74a0:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
    74a2:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    74a6:	4a03      	ldr	r2, [pc, #12]	; (74b4 <software_reset_mcu+0x14>)
    74a8:	4b03      	ldr	r3, [pc, #12]	; (74b8 <software_reset_mcu+0x18>)
    74aa:	60da      	str	r2, [r3, #12]
    74ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    74b0:	46c0      	nop			; (mov r8, r8)
    74b2:	e7fd      	b.n	74b0 <software_reset_mcu+0x10>
    74b4:	05fa0004 	.word	0x05fa0004
    74b8:	e000ed00 	.word	0xe000ed00
    74bc:	00000000 	.word	0x00000000

000074c0 <usb_init>:

/*----------------------------------------------------------------------------
 * \brief
 */
P_USB_CDC usb_init(void)
{
    74c0:	b510      	push	{r4, lr}
  sam_ba_cdc.pUsb = USB;
    74c2:	4c05      	ldr	r4, [pc, #20]	; (74d8 <usb_init+0x18>)
    74c4:	4b05      	ldr	r3, [pc, #20]	; (74dc <usb_init+0x1c>)
    74c6:	6023      	str	r3, [r4, #0]

  /* Initialize USB */
  USB_Init();
    74c8:	f000 faca 	bl	7a60 <USB_Init>
  /* Get the default CDC structure settings */
  USB_Open(&sam_ba_cdc, sam_ba_cdc.pUsb);
    74cc:	6821      	ldr	r1, [r4, #0]
    74ce:	0020      	movs	r0, r4
    74d0:	f000 fab6 	bl	7a40 <USB_Open>

  return &sam_ba_cdc;
}
    74d4:	0020      	movs	r0, r4
    74d6:	bd10      	pop	{r4, pc}
    74d8:	20000c0c 	.word	0x20000c0c
    74dc:	41005000 	.word	0x41005000

000074e0 <USB_SendString>:
 * \brief Send a USB descriptor string.
 *
 * The input string is plain ASCII but is sent out as UTF-16 with the correct 2-byte prefix.
 */
uint32_t USB_SendString(Usb *pUsb, const char* ascii_string, uint8_t maxLength)
{
    74e0:	b570      	push	{r4, r5, r6, lr}
    74e2:	b0c0      	sub	sp, #256	; 0x100
    74e4:	0005      	movs	r5, r0
    74e6:	000c      	movs	r4, r1
    74e8:	0016      	movs	r6, r2
  uint8_t string_descriptor[255]; // Max USB-allowed string length
  uint16_t* unicode_string=(uint16_t*)(string_descriptor+2); // point on 3 bytes of descriptor
  int resulting_length;

  string_descriptor[0] = (strlen(ascii_string)<<1) + 2;
    74ea:	0008      	movs	r0, r1
    74ec:	f7fb fb3a 	bl	2b64 <strlen>
    74f0:	0040      	lsls	r0, r0, #1
    74f2:	3002      	adds	r0, #2
    74f4:	466b      	mov	r3, sp
    74f6:	7018      	strb	r0, [r3, #0]
  string_descriptor[1] = STD_GET_DESCRIPTOR_STRING;
    74f8:	2303      	movs	r3, #3
    74fa:	466a      	mov	r2, sp
    74fc:	7053      	strb	r3, [r2, #1]

  for ( resulting_length = 1 ; *ascii_string && (resulting_length<maxLength>>1) ; resulting_length++ )
    74fe:	7823      	ldrb	r3, [r4, #0]
    7500:	2b00      	cmp	r3, #0
    7502:	d017      	beq.n	7534 <USB_SendString+0x54>
    7504:	0876      	lsrs	r6, r6, #1
    7506:	2e01      	cmp	r6, #1
    7508:	dd16      	ble.n	7538 <USB_SendString+0x58>
    750a:	2201      	movs	r2, #1
    750c:	4669      	mov	r1, sp
    750e:	3102      	adds	r1, #2
  {
    *unicode_string++ = (uint16_t)(*ascii_string++);
    7510:	1c88      	adds	r0, r1, #2
    7512:	3401      	adds	r4, #1
    7514:	800b      	strh	r3, [r1, #0]
  for ( resulting_length = 1 ; *ascii_string && (resulting_length<maxLength>>1) ; resulting_length++ )
    7516:	3201      	adds	r2, #1
    7518:	7823      	ldrb	r3, [r4, #0]
    751a:	2b00      	cmp	r3, #0
    751c:	d002      	beq.n	7524 <USB_SendString+0x44>
    *unicode_string++ = (uint16_t)(*ascii_string++);
    751e:	0001      	movs	r1, r0
  for ( resulting_length = 1 ; *ascii_string && (resulting_length<maxLength>>1) ; resulting_length++ )
    7520:	42b2      	cmp	r2, r6
    7522:	dbf5      	blt.n	7510 <USB_SendString+0x30>
  }

  return USB_Write(pUsb, (const char*)string_descriptor, resulting_length<<1, USB_EP_CTRL);
    7524:	0052      	lsls	r2, r2, #1
    7526:	2300      	movs	r3, #0
    7528:	4669      	mov	r1, sp
    752a:	0028      	movs	r0, r5
    752c:	f000 fb20 	bl	7b70 <USB_Write>
}
    7530:	b040      	add	sp, #256	; 0x100
    7532:	bd70      	pop	{r4, r5, r6, pc}
  for ( resulting_length = 1 ; *ascii_string && (resulting_length<maxLength>>1) ; resulting_length++ )
    7534:	2201      	movs	r2, #1
    7536:	e7f5      	b.n	7524 <USB_SendString+0x44>
    7538:	2201      	movs	r2, #1
    753a:	e7f3      	b.n	7524 <USB_SendString+0x44>
    753c:	0000      	movs	r0, r0
	...

00007540 <sam_ba_usb_CDC_Enumerate>:
{
    7540:	b5f0      	push	{r4, r5, r6, r7, lr}
    7542:	b083      	sub	sp, #12
    7544:	0005      	movs	r5, r0
  Usb *pUsb = pCdc->pUsb;
    7546:	6804      	ldr	r4, [r0, #0]
  pUsb->DEVICE.DeviceEndpoint[0].EPINTFLAG.bit.RXSTP = true;
    7548:	2208      	movs	r2, #8
    754a:	32ff      	adds	r2, #255	; 0xff
    754c:	5ca3      	ldrb	r3, [r4, r2]
    754e:	2110      	movs	r1, #16
    7550:	430b      	orrs	r3, r1
    7552:	54a3      	strb	r3, [r4, r2]
  bmRequestType = udd_ep_out_cache_buffer[0][0];
    7554:	4ba9      	ldr	r3, [pc, #676]	; (77fc <sam_ba_usb_CDC_Enumerate+0x2bc>)
    7556:	781a      	ldrb	r2, [r3, #0]
    7558:	48a9      	ldr	r0, [pc, #676]	; (7800 <sam_ba_usb_CDC_Enumerate+0x2c0>)
    755a:	7002      	strb	r2, [r0, #0]
  bRequest      = udd_ep_out_cache_buffer[0][1];
    755c:	785a      	ldrb	r2, [r3, #1]
    755e:	4ea9      	ldr	r6, [pc, #676]	; (7804 <sam_ba_usb_CDC_Enumerate+0x2c4>)
    7560:	7032      	strb	r2, [r6, #0]
  wValue        = (udd_ep_out_cache_buffer[0][2] & 0xFF);
    7562:	7899      	ldrb	r1, [r3, #2]
    7564:	4aa8      	ldr	r2, [pc, #672]	; (7808 <sam_ba_usb_CDC_Enumerate+0x2c8>)
    7566:	8011      	strh	r1, [r2, #0]
  wValue       |= (udd_ep_out_cache_buffer[0][3] << 8);
    7568:	8811      	ldrh	r1, [r2, #0]
    756a:	78df      	ldrb	r7, [r3, #3]
    756c:	023f      	lsls	r7, r7, #8
    756e:	4339      	orrs	r1, r7
    7570:	8011      	strh	r1, [r2, #0]
  wIndex        = (udd_ep_out_cache_buffer[0][4] & 0xFF);
    7572:	7919      	ldrb	r1, [r3, #4]
    7574:	4aa5      	ldr	r2, [pc, #660]	; (780c <sam_ba_usb_CDC_Enumerate+0x2cc>)
    7576:	8011      	strh	r1, [r2, #0]
  wIndex       |= (udd_ep_out_cache_buffer[0][5] << 8);
    7578:	8811      	ldrh	r1, [r2, #0]
    757a:	795f      	ldrb	r7, [r3, #5]
    757c:	023f      	lsls	r7, r7, #8
    757e:	4339      	orrs	r1, r7
    7580:	8011      	strh	r1, [r2, #0]
  wLength       = (udd_ep_out_cache_buffer[0][6] & 0xFF);
    7582:	7999      	ldrb	r1, [r3, #6]
    7584:	4aa2      	ldr	r2, [pc, #648]	; (7810 <sam_ba_usb_CDC_Enumerate+0x2d0>)
    7586:	8011      	strh	r1, [r2, #0]
  wLength      |= (udd_ep_out_cache_buffer[0][7] << 8);
    7588:	8811      	ldrh	r1, [r2, #0]
    758a:	79db      	ldrb	r3, [r3, #7]
    758c:	021b      	lsls	r3, r3, #8
    758e:	430b      	orrs	r3, r1
    7590:	8013      	strh	r3, [r2, #0]
  pUsb->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    7592:	2240      	movs	r2, #64	; 0x40
    7594:	2382      	movs	r3, #130	; 0x82
    7596:	005b      	lsls	r3, r3, #1
    7598:	54e2      	strb	r2, [r4, r3]
  switch ((bRequest << 8) | bmRequestType)
    759a:	7833      	ldrb	r3, [r6, #0]
    759c:	7802      	ldrb	r2, [r0, #0]
    759e:	021b      	lsls	r3, r3, #8
    75a0:	4313      	orrs	r3, r2
    75a2:	4a9c      	ldr	r2, [pc, #624]	; (7814 <sam_ba_usb_CDC_Enumerate+0x2d4>)
    75a4:	4293      	cmp	r3, r2
    75a6:	d100      	bne.n	75aa <sam_ba_usb_CDC_Enumerate+0x6a>
    75a8:	e150      	b.n	784c <sam_ba_usb_CDC_Enumerate+0x30c>
    75aa:	dc25      	bgt.n	75f8 <sam_ba_usb_CDC_Enumerate+0xb8>
    75ac:	2280      	movs	r2, #128	; 0x80
    75ae:	0052      	lsls	r2, r2, #1
    75b0:	4293      	cmp	r3, r2
    75b2:	d060      	beq.n	7676 <sam_ba_usb_CDC_Enumerate+0x136>
    75b4:	dd12      	ble.n	75dc <sam_ba_usb_CDC_Enumerate+0x9c>
    75b6:	2281      	movs	r2, #129	; 0x81
    75b8:	0052      	lsls	r2, r2, #1
    75ba:	4293      	cmp	r3, r2
    75bc:	d100      	bne.n	75c0 <sam_ba_usb_CDC_Enumerate+0x80>
    75be:	e180      	b.n	78c2 <sam_ba_usb_CDC_Enumerate+0x382>
    75c0:	da00      	bge.n	75c4 <sam_ba_usb_CDC_Enumerate+0x84>
    75c2:	e17a      	b.n	78ba <sam_ba_usb_CDC_Enumerate+0x37a>
    75c4:	32ff      	adds	r2, #255	; 0xff
    75c6:	32ff      	adds	r2, #255	; 0xff
    75c8:	4293      	cmp	r3, r2
    75ca:	d100      	bne.n	75ce <sam_ba_usb_CDC_Enumerate+0x8e>
    75cc:	e111      	b.n	77f2 <sam_ba_usb_CDC_Enumerate+0x2b2>
    75ce:	4a92      	ldr	r2, [pc, #584]	; (7818 <sam_ba_usb_CDC_Enumerate+0x2d8>)
    75d0:	4293      	cmp	r3, r2
    75d2:	d10c      	bne.n	75ee <sam_ba_usb_CDC_Enumerate+0xae>
      USB_SendZlp(pUsb);
    75d4:	0020      	movs	r0, r4
    75d6:	f000 fb7b 	bl	7cd0 <USB_SendZlp>
    break;
    75da:	e047      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
  switch ((bRequest << 8) | bmRequestType)
    75dc:	2b81      	cmp	r3, #129	; 0x81
    75de:	d100      	bne.n	75e2 <sam_ba_usb_CDC_Enumerate+0xa2>
    75e0:	e0ca      	b.n	7778 <sam_ba_usb_CDC_Enumerate+0x238>
    75e2:	2b82      	cmp	r3, #130	; 0x82
    75e4:	d100      	bne.n	75e8 <sam_ba_usb_CDC_Enumerate+0xa8>
    75e6:	e0cf      	b.n	7788 <sam_ba_usb_CDC_Enumerate+0x248>
    75e8:	2b80      	cmp	r3, #128	; 0x80
    75ea:	d100      	bne.n	75ee <sam_ba_usb_CDC_Enumerate+0xae>
    75ec:	e0bc      	b.n	7768 <sam_ba_usb_CDC_Enumerate+0x228>
      USB_SendStall(pUsb, true);
    75ee:	2101      	movs	r1, #1
    75f0:	0020      	movs	r0, r4
    75f2:	f000 fb5d 	bl	7cb0 <USB_SendStall>
}
    75f6:	e039      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
  switch ((bRequest << 8) | bmRequestType)
    75f8:	2290      	movs	r2, #144	; 0x90
    75fa:	0112      	lsls	r2, r2, #4
    75fc:	4293      	cmp	r3, r2
    75fe:	d100      	bne.n	7602 <sam_ba_usb_CDC_Enumerate+0xc2>
    7600:	e0a1      	b.n	7746 <sam_ba_usb_CDC_Enumerate+0x206>
    7602:	dd1d      	ble.n	7640 <sam_ba_usb_CDC_Enumerate+0x100>
    7604:	4a85      	ldr	r2, [pc, #532]	; (781c <sam_ba_usb_CDC_Enumerate+0x2dc>)
    7606:	4293      	cmp	r3, r2
    7608:	d100      	bne.n	760c <sam_ba_usb_CDC_Enumerate+0xcc>
    760a:	e1ab      	b.n	7964 <sam_ba_usb_CDC_Enumerate+0x424>
    760c:	dd30      	ble.n	7670 <sam_ba_usb_CDC_Enumerate+0x130>
    760e:	4a84      	ldr	r2, [pc, #528]	; (7820 <sam_ba_usb_CDC_Enumerate+0x2e0>)
    7610:	4293      	cmp	r3, r2
    7612:	d100      	bne.n	7616 <sam_ba_usb_CDC_Enumerate+0xd6>
    7614:	e1aa      	b.n	796c <sam_ba_usb_CDC_Enumerate+0x42c>
    7616:	4a83      	ldr	r2, [pc, #524]	; (7824 <sam_ba_usb_CDC_Enumerate+0x2e4>)
    7618:	4293      	cmp	r3, r2
    761a:	d1e8      	bne.n	75ee <sam_ba_usb_CDC_Enumerate+0xae>
      pCdc->currentConnection = wValue;
    761c:	4b7a      	ldr	r3, [pc, #488]	; (7808 <sam_ba_usb_CDC_Enumerate+0x2c8>)
    761e:	881b      	ldrh	r3, [r3, #0]
    7620:	716b      	strb	r3, [r5, #5]
      if (line_coding.dwDTERate == 1200 && ((wValue & 0x01) == 0))
    7622:	2396      	movs	r3, #150	; 0x96
    7624:	00db      	lsls	r3, r3, #3
    7626:	4a80      	ldr	r2, [pc, #512]	; (7828 <sam_ba_usb_CDC_Enumerate+0x2e8>)
    7628:	6812      	ldr	r2, [r2, #0]
    762a:	429a      	cmp	r2, r3
    762c:	d104      	bne.n	7638 <sam_ba_usb_CDC_Enumerate+0xf8>
    762e:	4b76      	ldr	r3, [pc, #472]	; (7808 <sam_ba_usb_CDC_Enumerate+0x2c8>)
    7630:	881b      	ldrh	r3, [r3, #0]
    7632:	07db      	lsls	r3, r3, #31
    7634:	d400      	bmi.n	7638 <sam_ba_usb_CDC_Enumerate+0xf8>
    7636:	e1a8      	b.n	798a <sam_ba_usb_CDC_Enumerate+0x44a>
      USB_SendZlp(pUsb);
    7638:	0020      	movs	r0, r4
    763a:	f000 fb49 	bl	7cd0 <USB_SendZlp>
    break;
    763e:	e015      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
  switch ((bRequest << 8) | bmRequestType)
    7640:	22d0      	movs	r2, #208	; 0xd0
    7642:	00d2      	lsls	r2, r2, #3
    7644:	4293      	cmp	r3, r2
    7646:	d01b      	beq.n	7680 <sam_ba_usb_CDC_Enumerate+0x140>
    7648:	2288      	movs	r2, #136	; 0x88
    764a:	0112      	lsls	r2, r2, #4
    764c:	4293      	cmp	r3, r2
    764e:	d100      	bne.n	7652 <sam_ba_usb_CDC_Enumerate+0x112>
    7650:	e083      	b.n	775a <sam_ba_usb_CDC_Enumerate+0x21a>
    7652:	22a0      	movs	r2, #160	; 0xa0
    7654:	00d2      	lsls	r2, r2, #3
    7656:	4293      	cmp	r3, r2
    7658:	d1c9      	bne.n	75ee <sam_ba_usb_CDC_Enumerate+0xae>
      USB_SendZlp(pUsb);
    765a:	0020      	movs	r0, r4
    765c:	f000 fb38 	bl	7cd0 <USB_SendZlp>
      USB_SetAddress(pCdc->pUsb, wValue);
    7660:	4b69      	ldr	r3, [pc, #420]	; (7808 <sam_ba_usb_CDC_Enumerate+0x2c8>)
    7662:	8819      	ldrh	r1, [r3, #0]
    7664:	b289      	uxth	r1, r1
    7666:	6828      	ldr	r0, [r5, #0]
    7668:	f000 fb4a 	bl	7d00 <USB_SetAddress>
}
    766c:	b003      	add	sp, #12
    766e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch ((bRequest << 8) | bmRequestType)
    7670:	4a6e      	ldr	r2, [pc, #440]	; (782c <sam_ba_usb_CDC_Enumerate+0x2ec>)
    7672:	4293      	cmp	r3, r2
    7674:	d1bb      	bne.n	75ee <sam_ba_usb_CDC_Enumerate+0xae>
      USB_SendStall(pUsb, true);
    7676:	2101      	movs	r1, #1
    7678:	0020      	movs	r0, r4
    767a:	f000 fb19 	bl	7cb0 <USB_SendStall>
    break;
    767e:	e7f5      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
      if (wValue>>8 == STD_GET_DESCRIPTOR_DEVICE)
    7680:	4b61      	ldr	r3, [pc, #388]	; (7808 <sam_ba_usb_CDC_Enumerate+0x2c8>)
    7682:	881b      	ldrh	r3, [r3, #0]
    7684:	0a1b      	lsrs	r3, r3, #8
    7686:	2b01      	cmp	r3, #1
    7688:	d018      	beq.n	76bc <sam_ba_usb_CDC_Enumerate+0x17c>
      else if (wValue>>8 == STD_GET_DESCRIPTOR_CONFIGURATION)
    768a:	4b5f      	ldr	r3, [pc, #380]	; (7808 <sam_ba_usb_CDC_Enumerate+0x2c8>)
    768c:	881b      	ldrh	r3, [r3, #0]
    768e:	0a1b      	lsrs	r3, r3, #8
    7690:	2b02      	cmp	r3, #2
    7692:	d022      	beq.n	76da <sam_ba_usb_CDC_Enumerate+0x19a>
      else if (wValue>>8 == STD_GET_DESCRIPTOR_STRING)
    7694:	4b5c      	ldr	r3, [pc, #368]	; (7808 <sam_ba_usb_CDC_Enumerate+0x2c8>)
    7696:	881b      	ldrh	r3, [r3, #0]
    7698:	0a1b      	lsrs	r3, r3, #8
    769a:	2b03      	cmp	r3, #3
    769c:	d14e      	bne.n	773c <sam_ba_usb_CDC_Enumerate+0x1fc>
        switch ( wValue & 0xff )
    769e:	4b5a      	ldr	r3, [pc, #360]	; (7808 <sam_ba_usb_CDC_Enumerate+0x2c8>)
    76a0:	881b      	ldrh	r3, [r3, #0]
    76a2:	22ff      	movs	r2, #255	; 0xff
    76a4:	4013      	ands	r3, r2
    76a6:	2b01      	cmp	r3, #1
    76a8:	d038      	beq.n	771c <sam_ba_usb_CDC_Enumerate+0x1dc>
    76aa:	2b00      	cmp	r3, #0
    76ac:	d024      	beq.n	76f8 <sam_ba_usb_CDC_Enumerate+0x1b8>
    76ae:	2b02      	cmp	r3, #2
    76b0:	d03c      	beq.n	772c <sam_ba_usb_CDC_Enumerate+0x1ec>
            USB_SendStall(pUsb, true);
    76b2:	2101      	movs	r1, #1
    76b4:	0020      	movs	r0, r4
    76b6:	f000 fafb 	bl	7cb0 <USB_SendStall>
          break;
    76ba:	e7d7      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
        USB_Write(pCdc->pUsb, devDescriptor, SAM_BA_MIN(sizeof(devDescriptor), wLength), USB_EP_CTRL);
    76bc:	6828      	ldr	r0, [r5, #0]
    76be:	4b54      	ldr	r3, [pc, #336]	; (7810 <sam_ba_usb_CDC_Enumerate+0x2d0>)
    76c0:	881b      	ldrh	r3, [r3, #0]
    76c2:	b29b      	uxth	r3, r3
    76c4:	2212      	movs	r2, #18
    76c6:	2b12      	cmp	r3, #18
    76c8:	d802      	bhi.n	76d0 <sam_ba_usb_CDC_Enumerate+0x190>
    76ca:	4b51      	ldr	r3, [pc, #324]	; (7810 <sam_ba_usb_CDC_Enumerate+0x2d0>)
    76cc:	881a      	ldrh	r2, [r3, #0]
    76ce:	b292      	uxth	r2, r2
    76d0:	2300      	movs	r3, #0
    76d2:	4957      	ldr	r1, [pc, #348]	; (7830 <sam_ba_usb_CDC_Enumerate+0x2f0>)
    76d4:	f000 fa4c 	bl	7b70 <USB_Write>
    76d8:	e7c8      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
        USB_Write(pCdc->pUsb, cfgDescriptor, SAM_BA_MIN(sizeof(cfgDescriptor), wLength), USB_EP_CTRL);
    76da:	6828      	ldr	r0, [r5, #0]
    76dc:	4b4c      	ldr	r3, [pc, #304]	; (7810 <sam_ba_usb_CDC_Enumerate+0x2d0>)
    76de:	881b      	ldrh	r3, [r3, #0]
    76e0:	b29b      	uxth	r3, r3
    76e2:	2243      	movs	r2, #67	; 0x43
    76e4:	2b43      	cmp	r3, #67	; 0x43
    76e6:	d802      	bhi.n	76ee <sam_ba_usb_CDC_Enumerate+0x1ae>
    76e8:	4b49      	ldr	r3, [pc, #292]	; (7810 <sam_ba_usb_CDC_Enumerate+0x2d0>)
    76ea:	881a      	ldrh	r2, [r3, #0]
    76ec:	b292      	uxth	r2, r2
    76ee:	2300      	movs	r3, #0
    76f0:	4950      	ldr	r1, [pc, #320]	; (7834 <sam_ba_usb_CDC_Enumerate+0x2f4>)
    76f2:	f000 fa3d 	bl	7b70 <USB_Write>
    76f6:	e7b9      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
            uint16_t STRING_LANGUAGE[2] = { (STD_GET_DESCRIPTOR_STRING<<8) | 4, 0x0409 };
    76f8:	4b4f      	ldr	r3, [pc, #316]	; (7838 <sam_ba_usb_CDC_Enumerate+0x2f8>)
    76fa:	681b      	ldr	r3, [r3, #0]
    76fc:	9301      	str	r3, [sp, #4]
            USB_Write(pCdc->pUsb, (const char*)STRING_LANGUAGE, SAM_BA_MIN(sizeof(STRING_LANGUAGE), wLength), USB_EP_CTRL);
    76fe:	6828      	ldr	r0, [r5, #0]
    7700:	4b43      	ldr	r3, [pc, #268]	; (7810 <sam_ba_usb_CDC_Enumerate+0x2d0>)
    7702:	881b      	ldrh	r3, [r3, #0]
    7704:	b29b      	uxth	r3, r3
    7706:	2204      	movs	r2, #4
    7708:	2b04      	cmp	r3, #4
    770a:	d802      	bhi.n	7712 <sam_ba_usb_CDC_Enumerate+0x1d2>
    770c:	4b40      	ldr	r3, [pc, #256]	; (7810 <sam_ba_usb_CDC_Enumerate+0x2d0>)
    770e:	881a      	ldrh	r2, [r3, #0]
    7710:	b292      	uxth	r2, r2
    7712:	2300      	movs	r3, #0
    7714:	a901      	add	r1, sp, #4
    7716:	f000 fa2b 	bl	7b70 <USB_Write>
          break;
    771a:	e7a7      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
            USB_SendString(pCdc->pUsb, STRING_MANUFACTURER, wLength );
    771c:	4b3c      	ldr	r3, [pc, #240]	; (7810 <sam_ba_usb_CDC_Enumerate+0x2d0>)
    771e:	881a      	ldrh	r2, [r3, #0]
    7720:	b2d2      	uxtb	r2, r2
    7722:	6828      	ldr	r0, [r5, #0]
    7724:	4945      	ldr	r1, [pc, #276]	; (783c <sam_ba_usb_CDC_Enumerate+0x2fc>)
    7726:	f7ff fedb 	bl	74e0 <USB_SendString>
          break;
    772a:	e79f      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
            USB_SendString(pCdc->pUsb, STRING_PRODUCT, wLength );
    772c:	4b38      	ldr	r3, [pc, #224]	; (7810 <sam_ba_usb_CDC_Enumerate+0x2d0>)
    772e:	881a      	ldrh	r2, [r3, #0]
    7730:	b2d2      	uxtb	r2, r2
    7732:	6828      	ldr	r0, [r5, #0]
    7734:	4942      	ldr	r1, [pc, #264]	; (7840 <sam_ba_usb_CDC_Enumerate+0x300>)
    7736:	f7ff fed3 	bl	74e0 <USB_SendString>
          break;
    773a:	e797      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
        USB_SendStall(pUsb, true);
    773c:	2101      	movs	r1, #1
    773e:	0020      	movs	r0, r4
    7740:	f000 fab6 	bl	7cb0 <USB_SendStall>
    7744:	e792      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
      pCdc->currentConfiguration = (uint8_t)wValue;
    7746:	4b30      	ldr	r3, [pc, #192]	; (7808 <sam_ba_usb_CDC_Enumerate+0x2c8>)
    7748:	881b      	ldrh	r3, [r3, #0]
    774a:	712b      	strb	r3, [r5, #4]
      USB_SendZlp(pUsb);
    774c:	0020      	movs	r0, r4
    774e:	f000 fabf 	bl	7cd0 <USB_SendZlp>
      USB_Configure(pUsb);
    7752:	0020      	movs	r0, r4
    7754:	f000 fadc 	bl	7d10 <USB_Configure>
    break;
    7758:	e788      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
      USB_Write(pCdc->pUsb, (char *) &(pCdc->currentConfiguration), sizeof(pCdc->currentConfiguration), USB_EP_CTRL);
    775a:	1d29      	adds	r1, r5, #4
    775c:	6828      	ldr	r0, [r5, #0]
    775e:	2300      	movs	r3, #0
    7760:	2201      	movs	r2, #1
    7762:	f000 fa05 	bl	7b70 <USB_Write>
    break;
    7766:	e781      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
      wStatus = 0;
    7768:	4936      	ldr	r1, [pc, #216]	; (7844 <sam_ba_usb_CDC_Enumerate+0x304>)
    776a:	2300      	movs	r3, #0
    776c:	800b      	strh	r3, [r1, #0]
      USB_Write(pCdc->pUsb, (char *) &wStatus, sizeof(wStatus), USB_EP_CTRL);
    776e:	6828      	ldr	r0, [r5, #0]
    7770:	2202      	movs	r2, #2
    7772:	f000 f9fd 	bl	7b70 <USB_Write>
    break;
    7776:	e779      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
      wStatus = 0;
    7778:	4932      	ldr	r1, [pc, #200]	; (7844 <sam_ba_usb_CDC_Enumerate+0x304>)
    777a:	2300      	movs	r3, #0
    777c:	800b      	strh	r3, [r1, #0]
      USB_Write(pCdc->pUsb, (char *) &wStatus, sizeof(wStatus), USB_EP_CTRL);
    777e:	6828      	ldr	r0, [r5, #0]
    7780:	2202      	movs	r2, #2
    7782:	f000 f9f5 	bl	7b70 <USB_Write>
    break;
    7786:	e771      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
      wStatus = 0;
    7788:	2200      	movs	r2, #0
    778a:	4b2e      	ldr	r3, [pc, #184]	; (7844 <sam_ba_usb_CDC_Enumerate+0x304>)
    778c:	801a      	strh	r2, [r3, #0]
      dir = wIndex & 80;
    778e:	4b1f      	ldr	r3, [pc, #124]	; (780c <sam_ba_usb_CDC_Enumerate+0x2cc>)
    7790:	881a      	ldrh	r2, [r3, #0]
    7792:	2150      	movs	r1, #80	; 0x50
    7794:	400a      	ands	r2, r1
    7796:	492c      	ldr	r1, [pc, #176]	; (7848 <sam_ba_usb_CDC_Enumerate+0x308>)
    7798:	700a      	strb	r2, [r1, #0]
      wIndex &= 0x0F;
    779a:	881a      	ldrh	r2, [r3, #0]
    779c:	210f      	movs	r1, #15
    779e:	400a      	ands	r2, r1
    77a0:	801a      	strh	r2, [r3, #0]
      if (wIndex <= 3)
    77a2:	881b      	ldrh	r3, [r3, #0]
    77a4:	b29b      	uxth	r3, r3
    77a6:	2b03      	cmp	r3, #3
    77a8:	d81e      	bhi.n	77e8 <sam_ba_usb_CDC_Enumerate+0x2a8>
        if (dir)
    77aa:	4b27      	ldr	r3, [pc, #156]	; (7848 <sam_ba_usb_CDC_Enumerate+0x308>)
    77ac:	781b      	ldrb	r3, [r3, #0]
    77ae:	2b00      	cmp	r3, #0
    77b0:	d00f      	beq.n	77d2 <sam_ba_usb_CDC_Enumerate+0x292>
          wStatus = (pUsb->DEVICE.DeviceEndpoint[wIndex].EPSTATUS.bit.STALLRQ0 & (1<<1)) ? 1 : 0;
    77b2:	4b16      	ldr	r3, [pc, #88]	; (780c <sam_ba_usb_CDC_Enumerate+0x2cc>)
    77b4:	881b      	ldrh	r3, [r3, #0]
    77b6:	3308      	adds	r3, #8
    77b8:	015b      	lsls	r3, r3, #5
    77ba:	18e4      	adds	r4, r4, r3
    77bc:	79a3      	ldrb	r3, [r4, #6]
    77be:	2200      	movs	r2, #0
    77c0:	4b20      	ldr	r3, [pc, #128]	; (7844 <sam_ba_usb_CDC_Enumerate+0x304>)
    77c2:	801a      	strh	r2, [r3, #0]
        USB_Write(pCdc->pUsb, (char *) &wStatus, sizeof(wStatus), USB_EP_CTRL);
    77c4:	6828      	ldr	r0, [r5, #0]
    77c6:	2300      	movs	r3, #0
    77c8:	2202      	movs	r2, #2
    77ca:	491e      	ldr	r1, [pc, #120]	; (7844 <sam_ba_usb_CDC_Enumerate+0x304>)
    77cc:	f000 f9d0 	bl	7b70 <USB_Write>
    77d0:	e74c      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
          wStatus = (pUsb->DEVICE.DeviceEndpoint[wIndex].EPSTATUS.bit.STALLRQ0 & (1<<0)) ? 1 : 0;
    77d2:	4b0e      	ldr	r3, [pc, #56]	; (780c <sam_ba_usb_CDC_Enumerate+0x2cc>)
    77d4:	881b      	ldrh	r3, [r3, #0]
    77d6:	3308      	adds	r3, #8
    77d8:	015b      	lsls	r3, r3, #5
    77da:	18e4      	adds	r4, r4, r3
    77dc:	79a3      	ldrb	r3, [r4, #6]
    77de:	06db      	lsls	r3, r3, #27
    77e0:	0fdb      	lsrs	r3, r3, #31
    77e2:	4a18      	ldr	r2, [pc, #96]	; (7844 <sam_ba_usb_CDC_Enumerate+0x304>)
    77e4:	8013      	strh	r3, [r2, #0]
    77e6:	e7ed      	b.n	77c4 <sam_ba_usb_CDC_Enumerate+0x284>
        USB_SendStall(pUsb, true);
    77e8:	2101      	movs	r1, #1
    77ea:	0020      	movs	r0, r4
    77ec:	f000 fa60 	bl	7cb0 <USB_SendStall>
    77f0:	e73c      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
      USB_SendStall(pUsb, true);
    77f2:	2101      	movs	r1, #1
    77f4:	0020      	movs	r0, r4
    77f6:	f000 fa5b 	bl	7cb0 <USB_SendStall>
    break;
    77fa:	e737      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
    77fc:	20000ca4 	.word	0x20000ca4
    7800:	20000c09 	.word	0x20000c09
    7804:	20000c08 	.word	0x20000c08
    7808:	20000c1e 	.word	0x20000c1e
    780c:	20000c18 	.word	0x20000c18
    7810:	20000c1a 	.word	0x20000c1a
    7814:	00000302 	.word	0x00000302
    7818:	00000301 	.word	0x00000301
    781c:	00002021 	.word	0x00002021
    7820:	000021a1 	.word	0x000021a1
    7824:	00002221 	.word	0x00002221
    7828:	2000084c 	.word	0x2000084c
    782c:	00000b01 	.word	0x00000b01
    7830:	0000eda4 	.word	0x0000eda4
    7834:	20000854 	.word	0x20000854
    7838:	0000dddc 	.word	0x0000dddc
    783c:	0000edb8 	.word	0x0000edb8
    7840:	0000edc4 	.word	0x0000edc4
    7844:	20000c1c 	.word	0x20000c1c
    7848:	20000c0a 	.word	0x20000c0a
      dir = wIndex & 0x80;
    784c:	4a50      	ldr	r2, [pc, #320]	; (7990 <sam_ba_usb_CDC_Enumerate+0x450>)
    784e:	8813      	ldrh	r3, [r2, #0]
    7850:	217f      	movs	r1, #127	; 0x7f
    7852:	438b      	bics	r3, r1
    7854:	b2db      	uxtb	r3, r3
    7856:	494f      	ldr	r1, [pc, #316]	; (7994 <sam_ba_usb_CDC_Enumerate+0x454>)
    7858:	700b      	strb	r3, [r1, #0]
      wIndex &= 0x0F;
    785a:	8813      	ldrh	r3, [r2, #0]
    785c:	210f      	movs	r1, #15
    785e:	400b      	ands	r3, r1
    7860:	8013      	strh	r3, [r2, #0]
      if ((wValue == 0) && wIndex && (wIndex <= 3))
    7862:	4b4d      	ldr	r3, [pc, #308]	; (7998 <sam_ba_usb_CDC_Enumerate+0x458>)
    7864:	881b      	ldrh	r3, [r3, #0]
    7866:	b29b      	uxth	r3, r3
    7868:	2b00      	cmp	r3, #0
    786a:	d121      	bne.n	78b0 <sam_ba_usb_CDC_Enumerate+0x370>
    786c:	8813      	ldrh	r3, [r2, #0]
    786e:	b29b      	uxth	r3, r3
    7870:	2b00      	cmp	r3, #0
    7872:	d01d      	beq.n	78b0 <sam_ba_usb_CDC_Enumerate+0x370>
    7874:	8813      	ldrh	r3, [r2, #0]
    7876:	b29b      	uxth	r3, r3
    7878:	2b03      	cmp	r3, #3
    787a:	d819      	bhi.n	78b0 <sam_ba_usb_CDC_Enumerate+0x370>
        if (dir)
    787c:	4b45      	ldr	r3, [pc, #276]	; (7994 <sam_ba_usb_CDC_Enumerate+0x454>)
    787e:	781b      	ldrb	r3, [r3, #0]
    7880:	2b00      	cmp	r3, #0
    7882:	d00b      	beq.n	789c <sam_ba_usb_CDC_Enumerate+0x35c>
          pUsb->DEVICE.DeviceEndpoint[wIndex].EPSTATUSSET.bit.STALLRQ0 = (1<<1);
    7884:	8813      	ldrh	r3, [r2, #0]
    7886:	3308      	adds	r3, #8
    7888:	015b      	lsls	r3, r3, #5
    788a:	18e3      	adds	r3, r4, r3
    788c:	795a      	ldrb	r2, [r3, #5]
    788e:	3101      	adds	r1, #1
    7890:	438a      	bics	r2, r1
    7892:	715a      	strb	r2, [r3, #5]
        USB_SendZlp(pUsb);
    7894:	0020      	movs	r0, r4
    7896:	f000 fa1b 	bl	7cd0 <USB_SendZlp>
    789a:	e6e7      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
          pUsb->DEVICE.DeviceEndpoint[wIndex].EPSTATUSSET.bit.STALLRQ0 = (1<<0);
    789c:	4b3c      	ldr	r3, [pc, #240]	; (7990 <sam_ba_usb_CDC_Enumerate+0x450>)
    789e:	881b      	ldrh	r3, [r3, #0]
    78a0:	3308      	adds	r3, #8
    78a2:	015b      	lsls	r3, r3, #5
    78a4:	18e3      	adds	r3, r4, r3
    78a6:	795a      	ldrb	r2, [r3, #5]
    78a8:	2110      	movs	r1, #16
    78aa:	430a      	orrs	r2, r1
    78ac:	715a      	strb	r2, [r3, #5]
    78ae:	e7f1      	b.n	7894 <sam_ba_usb_CDC_Enumerate+0x354>
        USB_SendStall(pUsb, true);
    78b0:	2101      	movs	r1, #1
    78b2:	0020      	movs	r0, r4
    78b4:	f000 f9fc 	bl	7cb0 <USB_SendStall>
    78b8:	e6d8      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
      USB_SendZlp(pUsb);
    78ba:	0020      	movs	r0, r4
    78bc:	f000 fa08 	bl	7cd0 <USB_SendZlp>
    break;
    78c0:	e6d4      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
      dir = wIndex & 0x80;
    78c2:	4a33      	ldr	r2, [pc, #204]	; (7990 <sam_ba_usb_CDC_Enumerate+0x450>)
    78c4:	8813      	ldrh	r3, [r2, #0]
    78c6:	217f      	movs	r1, #127	; 0x7f
    78c8:	438b      	bics	r3, r1
    78ca:	b2db      	uxtb	r3, r3
    78cc:	4931      	ldr	r1, [pc, #196]	; (7994 <sam_ba_usb_CDC_Enumerate+0x454>)
    78ce:	700b      	strb	r3, [r1, #0]
      wIndex &= 0x0F;
    78d0:	8813      	ldrh	r3, [r2, #0]
    78d2:	210f      	movs	r1, #15
    78d4:	400b      	ands	r3, r1
    78d6:	8013      	strh	r3, [r2, #0]
      if ((wValue == 0) && wIndex && (wIndex <= 3))
    78d8:	4b2f      	ldr	r3, [pc, #188]	; (7998 <sam_ba_usb_CDC_Enumerate+0x458>)
    78da:	881b      	ldrh	r3, [r3, #0]
    78dc:	b29b      	uxth	r3, r3
    78de:	2b00      	cmp	r3, #0
    78e0:	d13b      	bne.n	795a <sam_ba_usb_CDC_Enumerate+0x41a>
    78e2:	8813      	ldrh	r3, [r2, #0]
    78e4:	b29b      	uxth	r3, r3
    78e6:	2b00      	cmp	r3, #0
    78e8:	d037      	beq.n	795a <sam_ba_usb_CDC_Enumerate+0x41a>
    78ea:	8813      	ldrh	r3, [r2, #0]
    78ec:	b29b      	uxth	r3, r3
    78ee:	2b03      	cmp	r3, #3
    78f0:	d833      	bhi.n	795a <sam_ba_usb_CDC_Enumerate+0x41a>
        if (dir)
    78f2:	4b28      	ldr	r3, [pc, #160]	; (7994 <sam_ba_usb_CDC_Enumerate+0x454>)
    78f4:	781b      	ldrb	r3, [r3, #0]
    78f6:	2b00      	cmp	r3, #0
    78f8:	d008      	beq.n	790c <sam_ba_usb_CDC_Enumerate+0x3cc>
          if (pUsb->DEVICE.DeviceEndpoint[wIndex].EPSTATUS.bit.STALLRQ0 & (1<<1))
    78fa:	8813      	ldrh	r3, [r2, #0]
    78fc:	3308      	adds	r3, #8
    78fe:	015b      	lsls	r3, r3, #5
    7900:	18e3      	adds	r3, r4, r3
    7902:	799b      	ldrb	r3, [r3, #6]
        USB_SendZlp(pUsb);
    7904:	0020      	movs	r0, r4
    7906:	f000 f9e3 	bl	7cd0 <USB_SendZlp>
    790a:	e6af      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
          if (pUsb->DEVICE.DeviceEndpoint[wIndex].EPSTATUS.bit.STALLRQ0 & (1<<0))
    790c:	4b20      	ldr	r3, [pc, #128]	; (7990 <sam_ba_usb_CDC_Enumerate+0x450>)
    790e:	881b      	ldrh	r3, [r3, #0]
    7910:	3308      	adds	r3, #8
    7912:	015b      	lsls	r3, r3, #5
    7914:	18e3      	adds	r3, r4, r3
    7916:	799b      	ldrb	r3, [r3, #6]
    7918:	06db      	lsls	r3, r3, #27
    791a:	d5f3      	bpl.n	7904 <sam_ba_usb_CDC_Enumerate+0x3c4>
            pUsb->DEVICE.DeviceEndpoint[wIndex].EPSTATUSCLR.bit.STALLRQ0 = (1<<0);
    791c:	491c      	ldr	r1, [pc, #112]	; (7990 <sam_ba_usb_CDC_Enumerate+0x450>)
    791e:	880b      	ldrh	r3, [r1, #0]
    7920:	3308      	adds	r3, #8
    7922:	015b      	lsls	r3, r3, #5
    7924:	18e3      	adds	r3, r4, r3
    7926:	791a      	ldrb	r2, [r3, #4]
    7928:	2010      	movs	r0, #16
    792a:	4302      	orrs	r2, r0
    792c:	711a      	strb	r2, [r3, #4]
            if (pUsb->DEVICE.DeviceEndpoint[wIndex].EPINTFLAG.bit.STALL0 & (1<<0))
    792e:	880b      	ldrh	r3, [r1, #0]
    7930:	3308      	adds	r3, #8
    7932:	015b      	lsls	r3, r3, #5
    7934:	18e3      	adds	r3, r4, r3
    7936:	79db      	ldrb	r3, [r3, #7]
    7938:	069b      	lsls	r3, r3, #26
    793a:	d5e3      	bpl.n	7904 <sam_ba_usb_CDC_Enumerate+0x3c4>
              pUsb->DEVICE.DeviceEndpoint[wIndex].EPINTFLAG.bit.STALL0 = (1<<0);
    793c:	880b      	ldrh	r3, [r1, #0]
    793e:	3308      	adds	r3, #8
    7940:	015b      	lsls	r3, r3, #5
    7942:	18e3      	adds	r3, r4, r3
    7944:	79da      	ldrb	r2, [r3, #7]
    7946:	2020      	movs	r0, #32
    7948:	4302      	orrs	r2, r0
    794a:	71da      	strb	r2, [r3, #7]
              pUsb->DEVICE.DeviceEndpoint[wIndex].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    794c:	880b      	ldrh	r3, [r1, #0]
    794e:	3308      	adds	r3, #8
    7950:	015b      	lsls	r3, r3, #5
    7952:	18e3      	adds	r3, r4, r3
    7954:	2201      	movs	r2, #1
    7956:	711a      	strb	r2, [r3, #4]
    7958:	e7d4      	b.n	7904 <sam_ba_usb_CDC_Enumerate+0x3c4>
        USB_SendStall(pUsb, true);
    795a:	2101      	movs	r1, #1
    795c:	0020      	movs	r0, r4
    795e:	f000 f9a7 	bl	7cb0 <USB_SendStall>
    7962:	e683      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
      USB_SendZlp(pUsb);
    7964:	0020      	movs	r0, r4
    7966:	f000 f9b3 	bl	7cd0 <USB_SendZlp>
    break;
    796a:	e67f      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
      USB_Write(pCdc->pUsb, (char *) &line_coding, SAM_BA_MIN(sizeof(usb_cdc_line_coding_t), wLength), USB_EP_CTRL);
    796c:	6828      	ldr	r0, [r5, #0]
    796e:	4b0b      	ldr	r3, [pc, #44]	; (799c <sam_ba_usb_CDC_Enumerate+0x45c>)
    7970:	881b      	ldrh	r3, [r3, #0]
    7972:	b29b      	uxth	r3, r3
    7974:	2208      	movs	r2, #8
    7976:	2b08      	cmp	r3, #8
    7978:	d802      	bhi.n	7980 <sam_ba_usb_CDC_Enumerate+0x440>
    797a:	4b08      	ldr	r3, [pc, #32]	; (799c <sam_ba_usb_CDC_Enumerate+0x45c>)
    797c:	881a      	ldrh	r2, [r3, #0]
    797e:	b292      	uxth	r2, r2
    7980:	2300      	movs	r3, #0
    7982:	4907      	ldr	r1, [pc, #28]	; (79a0 <sam_ba_usb_CDC_Enumerate+0x460>)
    7984:	f000 f8f4 	bl	7b70 <USB_Write>
    break;
    7988:	e670      	b.n	766c <sam_ba_usb_CDC_Enumerate+0x12c>
    	  	  software_reset_mcu();
    798a:	f7ff fd89 	bl	74a0 <software_reset_mcu>
    798e:	46c0      	nop			; (mov r8, r8)
    7990:	20000c18 	.word	0x20000c18
    7994:	20000c0a 	.word	0x20000c0a
    7998:	20000c1e 	.word	0x20000c1e
    799c:	20000c1a 	.word	0x20000c1a
    79a0:	2000084c 	.word	0x2000084c
	...

000079b0 <USB_IsConfigured>:

/*----------------------------------------------------------------------------
 * \brief Test if the device is configured and handle enumeration
 */
uint8_t USB_IsConfigured(P_USB_CDC pCdc)
{
    79b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79b2:	0004      	movs	r4, r0
  Usb *pUsb = pCdc->pUsb;
    79b4:	6803      	ldr	r3, [r0, #0]

  /* Check for End of Reset flag */
  if (pUsb->DEVICE.INTFLAG.reg & USB_DEVICE_INTFLAG_EORST)
    79b6:	8b9a      	ldrh	r2, [r3, #28]
    79b8:	0712      	lsls	r2, r2, #28
    79ba:	d407      	bmi.n	79cc <USB_IsConfigured+0x1c>
    // Reset current configuration value to 0
    pCdc->currentConfiguration = 0;
  }
  else
  {
    if (pUsb->DEVICE.DeviceEndpoint[0].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_RXSTP)
    79bc:	2208      	movs	r2, #8
    79be:	32ff      	adds	r2, #255	; 0xff
    79c0:	5c9b      	ldrb	r3, [r3, r2]
    79c2:	06db      	lsls	r3, r3, #27
    79c4:	d52f      	bpl.n	7a26 <USB_IsConfigured+0x76>
    {
      sam_ba_usb_CDC_Enumerate(pCdc);
    79c6:	f7ff fdbb 	bl	7540 <sam_ba_usb_CDC_Enumerate>
    79ca:	e02c      	b.n	7a26 <USB_IsConfigured+0x76>
    pUsb->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST;
    79cc:	2208      	movs	r2, #8
    79ce:	839a      	strh	r2, [r3, #28]
    pUsb->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | 0;
    79d0:	3278      	adds	r2, #120	; 0x78
    79d2:	729a      	strb	r2, [r3, #10]
    pUsb->DEVICE.DeviceEndpoint[0].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    79d4:	2011      	movs	r0, #17
    79d6:	2180      	movs	r1, #128	; 0x80
    79d8:	0049      	lsls	r1, r1, #1
    79da:	5458      	strb	r0, [r3, r1]
    pUsb->DEVICE.DeviceEndpoint[0].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    79dc:	2640      	movs	r6, #64	; 0x40
    79de:	2106      	movs	r1, #6
    79e0:	31ff      	adds	r1, #255	; 0xff
    79e2:	545e      	strb	r6, [r3, r1]
    pUsb->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    79e4:	2582      	movs	r5, #130	; 0x82
    79e6:	006d      	lsls	r5, r5, #1
    79e8:	555a      	strb	r2, [r3, r5]
    usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.SIZE = 3;
    79ea:	4a10      	ldr	r2, [pc, #64]	; (7a2c <USB_IsConfigured+0x7c>)
    79ec:	6851      	ldr	r1, [r2, #4]
    79ee:	4f10      	ldr	r7, [pc, #64]	; (7a30 <USB_IsConfigured+0x80>)
    79f0:	4039      	ands	r1, r7
    79f2:	20c0      	movs	r0, #192	; 0xc0
    79f4:	0580      	lsls	r0, r0, #22
    79f6:	4301      	orrs	r1, r0
    79f8:	6051      	str	r1, [r2, #4]
    usb_endpoint_table[0].DeviceDescBank[1].PCKSIZE.bit.SIZE = 3;
    79fa:	6951      	ldr	r1, [r2, #20]
    79fc:	4039      	ands	r1, r7
    79fe:	4308      	orrs	r0, r1
    7a00:	6150      	str	r0, [r2, #20]
    usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)&udd_ep_out_cache_buffer[0];
    7a02:	490c      	ldr	r1, [pc, #48]	; (7a34 <USB_IsConfigured+0x84>)
    7a04:	6011      	str	r1, [r2, #0]
    usb_endpoint_table[0].DeviceDescBank[1].ADDR.reg = (uint32_t)&udd_ep_in_cache_buffer[0];
    7a06:	490c      	ldr	r1, [pc, #48]	; (7a38 <USB_IsConfigured+0x88>)
    7a08:	6111      	str	r1, [r2, #16]
    usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    7a0a:	6851      	ldr	r1, [r2, #4]
    7a0c:	480b      	ldr	r0, [pc, #44]	; (7a3c <USB_IsConfigured+0x8c>)
    7a0e:	4008      	ands	r0, r1
    7a10:	2180      	movs	r1, #128	; 0x80
    7a12:	0289      	lsls	r1, r1, #10
    7a14:	4301      	orrs	r1, r0
    7a16:	6051      	str	r1, [r2, #4]
    usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    7a18:	6851      	ldr	r1, [r2, #4]
    7a1a:	0b89      	lsrs	r1, r1, #14
    7a1c:	0389      	lsls	r1, r1, #14
    7a1e:	6051      	str	r1, [r2, #4]
    pUsb->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    7a20:	555e      	strb	r6, [r3, r5]
    pCdc->currentConfiguration = 0;
    7a22:	2300      	movs	r3, #0
    7a24:	7123      	strb	r3, [r4, #4]
    }
  }

  return pCdc->currentConfiguration;
    7a26:	7920      	ldrb	r0, [r4, #4]
}
    7a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a2a:	46c0      	nop			; (mov r8, r8)
    7a2c:	20000d24 	.word	0x20000d24
    7a30:	8fffffff 	.word	0x8fffffff
    7a34:	20000ca4 	.word	0x20000ca4
    7a38:	20000c24 	.word	0x20000c24
    7a3c:	f0003fff 	.word	0xf0003fff

00007a40 <USB_Open>:
  pCdc->pUsb = pUsb;
    7a40:	6001      	str	r1, [r0, #0]
  pCdc->currentConfiguration = 0;
    7a42:	2300      	movs	r3, #0
    7a44:	7103      	strb	r3, [r0, #4]
  pCdc->currentConnection    = 0;
    7a46:	7143      	strb	r3, [r0, #5]
  pCdc->IsConfigured = USB_IsConfigured;
    7a48:	4b03      	ldr	r3, [pc, #12]	; (7a58 <USB_Open+0x18>)
    7a4a:	6083      	str	r3, [r0, #8]
  pCdc->pUsb->HOST.CTRLA.bit.ENABLE = true;
    7a4c:	780b      	ldrb	r3, [r1, #0]
    7a4e:	2202      	movs	r2, #2
    7a50:	4313      	orrs	r3, r2
    7a52:	700b      	strb	r3, [r1, #0]
}
    7a54:	4770      	bx	lr
    7a56:	46c0      	nop			; (mov r8, r8)
    7a58:	000079b1 	.word	0x000079b1
    7a5c:	00000000 	.word	0x00000000

00007a60 <USB_Init>:
{
    7a60:	b510      	push	{r4, lr}
  PM->APBBMASK.reg |= PM_APBBMASK_USB;
    7a62:	4a39      	ldr	r2, [pc, #228]	; (7b48 <USB_Init+0xe8>)
    7a64:	69d3      	ldr	r3, [r2, #28]
    7a66:	2120      	movs	r1, #32
    7a68:	430b      	orrs	r3, r1
    7a6a:	61d3      	str	r3, [r2, #28]
  PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    7a6c:	4b37      	ldr	r3, [pc, #220]	; (7b4c <USB_Init+0xec>)
    7a6e:	3138      	adds	r1, #56	; 0x38
    7a70:	5c5a      	ldrb	r2, [r3, r1]
    7a72:	2401      	movs	r4, #1
    7a74:	4322      	orrs	r2, r4
    7a76:	545a      	strb	r2, [r3, r1]
  PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    7a78:	223c      	movs	r2, #60	; 0x3c
    7a7a:	5c98      	ldrb	r0, [r3, r2]
    7a7c:	3949      	subs	r1, #73	; 0x49
    7a7e:	4388      	bics	r0, r1
    7a80:	5498      	strb	r0, [r3, r2]
  PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    7a82:	5c98      	ldrb	r0, [r3, r2]
    7a84:	3909      	subs	r1, #9
    7a86:	4308      	orrs	r0, r1
    7a88:	5498      	strb	r0, [r3, r2]
  PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    7a8a:	2059      	movs	r0, #89	; 0x59
    7a8c:	5c19      	ldrb	r1, [r3, r0]
    7a8e:	4321      	orrs	r1, r4
    7a90:	5419      	strb	r1, [r3, r0]
  PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    7a92:	5c99      	ldrb	r1, [r3, r2]
    7a94:	384a      	subs	r0, #74	; 0x4a
    7a96:	4001      	ands	r1, r0
    7a98:	5499      	strb	r1, [r3, r2]
  PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    7a9a:	5c99      	ldrb	r1, [r3, r2]
    7a9c:	3051      	adds	r0, #81	; 0x51
    7a9e:	4301      	orrs	r1, r0
    7aa0:	5499      	strb	r1, [r3, r2]
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( 6 ) | // Generic Clock Multiplexer 6
    7aa2:	4a2b      	ldr	r2, [pc, #172]	; (7b50 <USB_Init+0xf0>)
    7aa4:	4b2b      	ldr	r3, [pc, #172]	; (7b54 <USB_Init+0xf4>)
    7aa6:	805a      	strh	r2, [r3, #2]
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    7aa8:	001a      	movs	r2, r3
    7aaa:	7853      	ldrb	r3, [r2, #1]
    7aac:	b25b      	sxtb	r3, r3
    7aae:	2b00      	cmp	r3, #0
    7ab0:	dbfb      	blt.n	7aaa <USB_Init+0x4a>
  USB->DEVICE.CTRLA.bit.SWRST = 1;
    7ab2:	4a29      	ldr	r2, [pc, #164]	; (7b58 <USB_Init+0xf8>)
    7ab4:	7813      	ldrb	r3, [r2, #0]
    7ab6:	2101      	movs	r1, #1
    7ab8:	430b      	orrs	r3, r1
    7aba:	7013      	strb	r3, [r2, #0]
  while (USB->DEVICE.SYNCBUSY.bit.SWRST)
    7abc:	7893      	ldrb	r3, [r2, #2]
    7abe:	07db      	lsls	r3, r3, #31
    7ac0:	d4fc      	bmi.n	7abc <USB_Init+0x5c>
  pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    7ac2:	4b26      	ldr	r3, [pc, #152]	; (7b5c <USB_Init+0xfc>)
    >> (NVM_USB_PAD_TRANSN_POS % 32))
    7ac4:	681b      	ldr	r3, [r3, #0]
  pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    7ac6:	039b      	lsls	r3, r3, #14
    7ac8:	0edb      	lsrs	r3, r3, #27
  if (pad_transn == 0x1F)
    7aca:	2b1f      	cmp	r3, #31
    7acc:	d036      	beq.n	7b3c <USB_Init+0xdc>
  USB->HOST.PADCAL.bit.TRANSN = pad_transn;
    7ace:	4922      	ldr	r1, [pc, #136]	; (7b58 <USB_Init+0xf8>)
    7ad0:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    7ad2:	019b      	lsls	r3, r3, #6
    7ad4:	4822      	ldr	r0, [pc, #136]	; (7b60 <USB_Init+0x100>)
    7ad6:	4002      	ands	r2, r0
    7ad8:	4313      	orrs	r3, r2
    7ada:	850b      	strh	r3, [r1, #40]	; 0x28
  pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    7adc:	4b1f      	ldr	r3, [pc, #124]	; (7b5c <USB_Init+0xfc>)
      >> (NVM_USB_PAD_TRANSP_POS % 32))
    7ade:	681b      	ldr	r3, [r3, #0]
    7ae0:	025b      	lsls	r3, r3, #9
  pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    7ae2:	0edb      	lsrs	r3, r3, #27
  if (pad_transp == 0x1F)
    7ae4:	2b1f      	cmp	r3, #31
    7ae6:	d02b      	beq.n	7b40 <USB_Init+0xe0>
  USB->HOST.PADCAL.bit.TRANSP = pad_transp;
    7ae8:	491b      	ldr	r1, [pc, #108]	; (7b58 <USB_Init+0xf8>)
    7aea:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    7aec:	201f      	movs	r0, #31
    7aee:	4382      	bics	r2, r0
    7af0:	4313      	orrs	r3, r2
    7af2:	850b      	strh	r3, [r1, #40]	; 0x28
  pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    7af4:	4b19      	ldr	r3, [pc, #100]	; (7b5c <USB_Init+0xfc>)
      >> (NVM_USB_PAD_TRIM_POS % 32))
    7af6:	681a      	ldr	r2, [r3, #0]
  pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    7af8:	0192      	lsls	r2, r2, #6
    7afa:	0f52      	lsrs	r2, r2, #29
  if (pad_trim == 0x7)
    7afc:	2a07      	cmp	r2, #7
    7afe:	d021      	beq.n	7b44 <USB_Init+0xe4>
  USB->HOST.PADCAL.bit.TRIM = pad_trim;
    7b00:	4b15      	ldr	r3, [pc, #84]	; (7b58 <USB_Init+0xf8>)
    7b02:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    7b04:	0312      	lsls	r2, r2, #12
    7b06:	4817      	ldr	r0, [pc, #92]	; (7b64 <USB_Init+0x104>)
    7b08:	4001      	ands	r1, r0
    7b0a:	430a      	orrs	r2, r1
    7b0c:	851a      	strh	r2, [r3, #40]	; 0x28
  USB->HOST.CTRLA.bit.MODE = 0;
    7b0e:	7819      	ldrb	r1, [r3, #0]
    7b10:	227f      	movs	r2, #127	; 0x7f
    7b12:	400a      	ands	r2, r1
    7b14:	701a      	strb	r2, [r3, #0]
  USB->HOST.CTRLA.bit.RUNSTDBY = true;
    7b16:	781a      	ldrb	r2, [r3, #0]
    7b18:	2104      	movs	r1, #4
    7b1a:	430a      	orrs	r2, r1
    7b1c:	701a      	strb	r2, [r3, #0]
  USB->HOST.DESCADD.reg = (uint32_t)(&usb_endpoint_table[0]);
    7b1e:	4812      	ldr	r0, [pc, #72]	; (7b68 <USB_Init+0x108>)
    7b20:	6258      	str	r0, [r3, #36]	; 0x24
  USB->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    7b22:	891a      	ldrh	r2, [r3, #8]
    7b24:	210c      	movs	r1, #12
    7b26:	438a      	bics	r2, r1
    7b28:	811a      	strh	r2, [r3, #8]
  USB->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    7b2a:	891a      	ldrh	r2, [r3, #8]
    7b2c:	390b      	subs	r1, #11
    7b2e:	438a      	bics	r2, r1
    7b30:	811a      	strh	r2, [r3, #8]
  memset((uint8_t *)(&usb_endpoint_table[0]), 0, sizeof(usb_endpoint_table));
    7b32:	2280      	movs	r2, #128	; 0x80
    7b34:	2100      	movs	r1, #0
    7b36:	f005 ffeb 	bl	db10 <memset>
}
    7b3a:	bd10      	pop	{r4, pc}
    pad_transn = 5;
    7b3c:	3b1a      	subs	r3, #26
    7b3e:	e7c6      	b.n	7ace <USB_Init+0x6e>
    pad_transp = 29;
    7b40:	3b02      	subs	r3, #2
    7b42:	e7d1      	b.n	7ae8 <USB_Init+0x88>
    pad_trim = 3;
    7b44:	3a04      	subs	r2, #4
    7b46:	e7db      	b.n	7b00 <USB_Init+0xa0>
    7b48:	40000400 	.word	0x40000400
    7b4c:	41004400 	.word	0x41004400
    7b50:	00004006 	.word	0x00004006
    7b54:	40000c00 	.word	0x40000c00
    7b58:	41005000 	.word	0x41005000
    7b5c:	00806024 	.word	0x00806024
    7b60:	fffff83f 	.word	0xfffff83f
    7b64:	ffff8fff 	.word	0xffff8fff
    7b68:	20000d24 	.word	0x20000d24
    7b6c:	00000000 	.word	0x00000000

00007b70 <USB_Write>:
{
    7b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b72:	46c6      	mov	lr, r8
    7b74:	b500      	push	{lr}
    7b76:	0004      	movs	r4, r0
    7b78:	0016      	movs	r6, r2
    7b7a:	001d      	movs	r5, r3
  if (length >= (1 << (usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE + 3)))
    7b7c:	4698      	mov	r8, r3
    7b7e:	015a      	lsls	r2, r3, #5
    7b80:	4b21      	ldr	r3, [pc, #132]	; (7c08 <USB_Write+0x98>)
    7b82:	189b      	adds	r3, r3, r2
    7b84:	3310      	adds	r3, #16
    7b86:	685b      	ldr	r3, [r3, #4]
    7b88:	005b      	lsls	r3, r3, #1
    7b8a:	0f5b      	lsrs	r3, r3, #29
    7b8c:	3303      	adds	r3, #3
    7b8e:	2201      	movs	r2, #1
    7b90:	409a      	lsls	r2, r3
    7b92:	42b2      	cmp	r2, r6
    7b94:	d82b      	bhi.n	7bee <USB_Write+0x7e>
    usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = true;
    7b96:	016a      	lsls	r2, r5, #5
    7b98:	4b1b      	ldr	r3, [pc, #108]	; (7c08 <USB_Write+0x98>)
    7b9a:	189b      	adds	r3, r3, r2
    7b9c:	6958      	ldr	r0, [r3, #20]
    7b9e:	2280      	movs	r2, #128	; 0x80
    7ba0:	0612      	lsls	r2, r2, #24
    7ba2:	4302      	orrs	r2, r0
    7ba4:	615a      	str	r2, [r3, #20]
  usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = data_address;
    7ba6:	016a      	lsls	r2, r5, #5
    7ba8:	4b17      	ldr	r3, [pc, #92]	; (7c08 <USB_Write+0x98>)
    7baa:	189b      	adds	r3, r3, r2
    7bac:	001a      	movs	r2, r3
    7bae:	6119      	str	r1, [r3, #16]
  usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = length;
    7bb0:	695b      	ldr	r3, [r3, #20]
    7bb2:	04b1      	lsls	r1, r6, #18
    7bb4:	0c89      	lsrs	r1, r1, #18
    7bb6:	0b9b      	lsrs	r3, r3, #14
    7bb8:	039b      	lsls	r3, r3, #14
    7bba:	430b      	orrs	r3, r1
    7bbc:	6153      	str	r3, [r2, #20]
  usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    7bbe:	6953      	ldr	r3, [r2, #20]
    7bc0:	4912      	ldr	r1, [pc, #72]	; (7c0c <USB_Write+0x9c>)
    7bc2:	400b      	ands	r3, r1
    7bc4:	6153      	str	r3, [r2, #20]
  pUsb->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    7bc6:	3508      	adds	r5, #8
    7bc8:	016d      	lsls	r5, r5, #5
    7bca:	1965      	adds	r5, r4, r5
    7bcc:	2302      	movs	r3, #2
    7bce:	71eb      	strb	r3, [r5, #7]
  pUsb->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.bit.BK1RDY = true;
    7bd0:	796a      	ldrb	r2, [r5, #5]
    7bd2:	3b82      	subs	r3, #130	; 0x82
    7bd4:	4313      	orrs	r3, r2
    7bd6:	716b      	strb	r3, [r5, #5]
  while ( (pUsb->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.bit.TRCPT1) == 0 );
    7bd8:	4640      	mov	r0, r8
    7bda:	3008      	adds	r0, #8
    7bdc:	0140      	lsls	r0, r0, #5
    7bde:	1820      	adds	r0, r4, r0
    7be0:	79c3      	ldrb	r3, [r0, #7]
    7be2:	079b      	lsls	r3, r3, #30
    7be4:	d5fc      	bpl.n	7be0 <USB_Write+0x70>
}
    7be6:	0030      	movs	r0, r6
    7be8:	bc04      	pop	{r2}
    7bea:	4690      	mov	r8, r2
    7bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  buf_index = (ep_num == 0) ? 0 : 1;
    7bee:	002f      	movs	r7, r5
    7bf0:	1e7b      	subs	r3, r7, #1
    7bf2:	419f      	sbcs	r7, r3
    memcpy(udd_ep_in_cache_buffer[buf_index], pData, length);
    7bf4:	01bf      	lsls	r7, r7, #6
    7bf6:	4b06      	ldr	r3, [pc, #24]	; (7c10 <USB_Write+0xa0>)
    7bf8:	19df      	adds	r7, r3, r7
    7bfa:	0032      	movs	r2, r6
    7bfc:	0038      	movs	r0, r7
    7bfe:	f005 ff7e 	bl	dafe <memcpy>
    data_address = (uint32_t) &udd_ep_in_cache_buffer[buf_index];
    7c02:	0039      	movs	r1, r7
    7c04:	e7cf      	b.n	7ba6 <USB_Write+0x36>
    7c06:	46c0      	nop			; (mov r8, r8)
    7c08:	20000d24 	.word	0x20000d24
    7c0c:	f0003fff 	.word	0xf0003fff
    7c10:	20000c24 	.word	0x20000c24
	...

00007c20 <USB_Read>:
{
    7c20:	b570      	push	{r4, r5, r6, lr}
    7c22:	0005      	movs	r5, r0
    7c24:	000e      	movs	r6, r1
    7c26:	0014      	movs	r4, r2
  if (!read_job)
    7c28:	4b1c      	ldr	r3, [pc, #112]	; (7c9c <USB_Read+0x7c>)
    7c2a:	781b      	ldrb	r3, [r3, #0]
    7c2c:	2b00      	cmp	r3, #0
    7c2e:	d115      	bne.n	7c5c <USB_Read+0x3c>
    usb_endpoint_table[USB_EP_OUT].DeviceDescBank[0].ADDR.reg = (uint32_t)&udd_ep_out_cache_buffer[USB_EP_OUT-1];
    7c30:	4b1b      	ldr	r3, [pc, #108]	; (7ca0 <USB_Read+0x80>)
    7c32:	4a1c      	ldr	r2, [pc, #112]	; (7ca4 <USB_Read+0x84>)
    7c34:	3240      	adds	r2, #64	; 0x40
    7c36:	641a      	str	r2, [r3, #64]	; 0x40
    usb_endpoint_table[USB_EP_OUT].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    7c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    7c3a:	0b92      	lsrs	r2, r2, #14
    7c3c:	0392      	lsls	r2, r2, #14
    7c3e:	645a      	str	r2, [r3, #68]	; 0x44
    usb_endpoint_table[USB_EP_OUT].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    7c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    7c42:	4919      	ldr	r1, [pc, #100]	; (7ca8 <USB_Read+0x88>)
    7c44:	400a      	ands	r2, r1
    7c46:	645a      	str	r2, [r3, #68]	; 0x44
    pUsb->DEVICE.DeviceEndpoint[USB_EP_OUT].EPSTATUSCLR.bit.BK0RDY = true;
    7c48:	22a2      	movs	r2, #162	; 0xa2
    7c4a:	0052      	lsls	r2, r2, #1
    7c4c:	5c83      	ldrb	r3, [r0, r2]
    7c4e:	2140      	movs	r1, #64	; 0x40
    7c50:	430b      	orrs	r3, r1
    7c52:	5483      	strb	r3, [r0, r2]
    read_job = true;
    7c54:	3a44      	subs	r2, #68	; 0x44
    7c56:	3aff      	subs	r2, #255	; 0xff
    7c58:	4b10      	ldr	r3, [pc, #64]	; (7c9c <USB_Read+0x7c>)
    7c5a:	701a      	strb	r2, [r3, #0]
  if ( pUsb->DEVICE.DeviceEndpoint[USB_EP_OUT].EPINTFLAG.bit.TRCPT0 )
    7c5c:	2348      	movs	r3, #72	; 0x48
    7c5e:	33ff      	adds	r3, #255	; 0xff
    7c60:	5ceb      	ldrb	r3, [r5, r3]
  uint32_t packetSize = 0;
    7c62:	2000      	movs	r0, #0
  if ( pUsb->DEVICE.DeviceEndpoint[USB_EP_OUT].EPINTFLAG.bit.TRCPT0 )
    7c64:	07db      	lsls	r3, r3, #31
    7c66:	d517      	bpl.n	7c98 <USB_Read+0x78>
    packetSize = SAM_BA_MIN(usb_endpoint_table[USB_EP_OUT].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT, length);
    7c68:	4b0d      	ldr	r3, [pc, #52]	; (7ca0 <USB_Read+0x80>)
    7c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7c6c:	049b      	lsls	r3, r3, #18
    7c6e:	0c9b      	lsrs	r3, r3, #18
    7c70:	42a3      	cmp	r3, r4
    7c72:	d203      	bcs.n	7c7c <USB_Read+0x5c>
    7c74:	4b0a      	ldr	r3, [pc, #40]	; (7ca0 <USB_Read+0x80>)
    7c76:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    7c78:	04a4      	lsls	r4, r4, #18
    7c7a:	0ca4      	lsrs	r4, r4, #18
    memcpy(pData, udd_ep_out_cache_buffer[USB_EP_OUT-1], packetSize);
    7c7c:	0022      	movs	r2, r4
    7c7e:	4909      	ldr	r1, [pc, #36]	; (7ca4 <USB_Read+0x84>)
    7c80:	3140      	adds	r1, #64	; 0x40
    7c82:	0030      	movs	r0, r6
    7c84:	f005 ff3b 	bl	dafe <memcpy>
    pUsb->DEVICE.DeviceEndpoint[USB_EP_OUT].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    7c88:	2201      	movs	r2, #1
    7c8a:	2348      	movs	r3, #72	; 0x48
    7c8c:	33ff      	adds	r3, #255	; 0xff
    7c8e:	54ea      	strb	r2, [r5, r3]
    read_job = false;
    7c90:	2200      	movs	r2, #0
    7c92:	4b02      	ldr	r3, [pc, #8]	; (7c9c <USB_Read+0x7c>)
    7c94:	701a      	strb	r2, [r3, #0]
    packetSize = SAM_BA_MIN(usb_endpoint_table[USB_EP_OUT].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT, length);
    7c96:	0020      	movs	r0, r4
}
    7c98:	bd70      	pop	{r4, r5, r6, pc}
    7c9a:	46c0      	nop			; (mov r8, r8)
    7c9c:	20000c20 	.word	0x20000c20
    7ca0:	20000d24 	.word	0x20000d24
    7ca4:	20000ca4 	.word	0x20000ca4
    7ca8:	f0003fff 	.word	0xf0003fff
    7cac:	00000000 	.word	0x00000000

00007cb0 <USB_SendStall>:
 * \brief Stall the control endpoint
 */
void USB_SendStall(Usb *pUsb, bool direction_in)
{
  /* Check the direction */
  if (direction_in)
    7cb0:	2900      	cmp	r1, #0
    7cb2:	d106      	bne.n	7cc2 <USB_SendStall+0x12>
    pUsb->DEVICE.DeviceEndpoint[0].EPSTATUSSET.bit.STALLRQ1 = 1;
  }
  else
  {
    /* Set STALL request on OUT direction */
    pUsb->DEVICE.DeviceEndpoint[0].EPSTATUSSET.bit.STALLRQ0 = 1;
    7cb4:	2206      	movs	r2, #6
    7cb6:	32ff      	adds	r2, #255	; 0xff
    7cb8:	5c83      	ldrb	r3, [r0, r2]
    7cba:	2110      	movs	r1, #16
    7cbc:	430b      	orrs	r3, r1
    7cbe:	5483      	strb	r3, [r0, r2]
  }
}
    7cc0:	4770      	bx	lr
    pUsb->DEVICE.DeviceEndpoint[0].EPSTATUSSET.bit.STALLRQ1 = 1;
    7cc2:	2206      	movs	r2, #6
    7cc4:	32ff      	adds	r2, #255	; 0xff
    7cc6:	5c83      	ldrb	r3, [r0, r2]
    7cc8:	2120      	movs	r1, #32
    7cca:	430b      	orrs	r3, r1
    7ccc:	5483      	strb	r3, [r0, r2]
    7cce:	e7f7      	b.n	7cc0 <USB_SendStall+0x10>

00007cd0 <USB_SendZlp>:
 * \brief Send zero length packet through the control endpoint
 */
void USB_SendZlp(Usb *pUsb)
{
  /* Set the byte count as zero */
  usb_endpoint_table[0].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = 0;
    7cd0:	4a0a      	ldr	r2, [pc, #40]	; (7cfc <USB_SendZlp+0x2c>)
    7cd2:	6953      	ldr	r3, [r2, #20]
    7cd4:	0b9b      	lsrs	r3, r3, #14
    7cd6:	039b      	lsls	r3, r3, #14
    7cd8:	6153      	str	r3, [r2, #20]
  /* Clear the transfer complete flag  */
  pUsb->DEVICE.DeviceEndpoint[0].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    7cda:	2202      	movs	r2, #2
    7cdc:	2308      	movs	r3, #8
    7cde:	33ff      	adds	r3, #255	; 0xff
    7ce0:	54c2      	strb	r2, [r0, r3]
  /* Set the bank as ready */
  pUsb->DEVICE.DeviceEndpoint[0].EPSTATUSSET.bit.BK1RDY = true;
    7ce2:	2206      	movs	r2, #6
    7ce4:	32ff      	adds	r2, #255	; 0xff
    7ce6:	5c81      	ldrb	r1, [r0, r2]
    7ce8:	3b88      	subs	r3, #136	; 0x88
    7cea:	3bff      	subs	r3, #255	; 0xff
    7cec:	430b      	orrs	r3, r1
    7cee:	5483      	strb	r3, [r0, r2]
  /* Wait for transfer to complete */
  while (!( pUsb->DEVICE.DeviceEndpoint[0].EPINTFLAG.bit.TRCPT1 ));
    7cf0:	2208      	movs	r2, #8
    7cf2:	32ff      	adds	r2, #255	; 0xff
    7cf4:	5c83      	ldrb	r3, [r0, r2]
    7cf6:	079b      	lsls	r3, r3, #30
    7cf8:	d5fc      	bpl.n	7cf4 <USB_SendZlp+0x24>
}
    7cfa:	4770      	bx	lr
    7cfc:	20000d24 	.word	0x20000d24

00007d00 <USB_SetAddress>:
/*----------------------------------------------------------------------------
 * \brief Set USB device address obtained from host
 */
void USB_SetAddress(Usb *pUsb, uint16_t wValue)
{
  pUsb->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | wValue;
    7d00:	2380      	movs	r3, #128	; 0x80
    7d02:	425b      	negs	r3, r3
    7d04:	4319      	orrs	r1, r3
    7d06:	b2c9      	uxtb	r1, r1
    7d08:	7281      	strb	r1, [r0, #10]
}
    7d0a:	4770      	bx	lr
    7d0c:	0000      	movs	r0, r0
	...

00007d10 <USB_Configure>:

/*----------------------------------------------------------------------------
 * \brief Configure USB device
 */
void USB_Configure(Usb *pUsb)
{
    7d10:	b570      	push	{r4, r5, r6, lr}
  /* Configure BULK OUT endpoint for CDC Data interface*/
  pUsb->DEVICE.DeviceEndpoint[USB_EP_OUT].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(3);
    7d12:	2203      	movs	r2, #3
    7d14:	23a0      	movs	r3, #160	; 0xa0
    7d16:	005b      	lsls	r3, r3, #1
    7d18:	54c2      	strb	r2, [r0, r3]
  /* Set maximum packet size as 64 bytes */
  usb_endpoint_table[USB_EP_OUT].DeviceDescBank[0].PCKSIZE.bit.SIZE = 3;
    7d1a:	4b14      	ldr	r3, [pc, #80]	; (7d6c <USB_Configure+0x5c>)
    7d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    7d1e:	4c14      	ldr	r4, [pc, #80]	; (7d70 <USB_Configure+0x60>)
    7d20:	4022      	ands	r2, r4
    7d22:	21c0      	movs	r1, #192	; 0xc0
    7d24:	0589      	lsls	r1, r1, #22
    7d26:	430a      	orrs	r2, r1
    7d28:	645a      	str	r2, [r3, #68]	; 0x44
  pUsb->DEVICE.DeviceEndpoint[USB_EP_OUT].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    7d2a:	2540      	movs	r5, #64	; 0x40
    7d2c:	2246      	movs	r2, #70	; 0x46
    7d2e:	32ff      	adds	r2, #255	; 0xff
    7d30:	5485      	strb	r5, [r0, r2]
  /* Configure the data buffer */
  usb_endpoint_table[USB_EP_OUT].DeviceDescBank[0].ADDR.reg = (uint32_t)&udd_ep_out_cache_buffer[1];
    7d32:	4a10      	ldr	r2, [pc, #64]	; (7d74 <USB_Configure+0x64>)
    7d34:	3240      	adds	r2, #64	; 0x40
    7d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure BULK IN endpoint for CDC Data interface */
  pUsb->DEVICE.DeviceEndpoint[USB_EP_IN].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE1(3);
    7d38:	2630      	movs	r6, #48	; 0x30
    7d3a:	2290      	movs	r2, #144	; 0x90
    7d3c:	0052      	lsls	r2, r2, #1
    7d3e:	5486      	strb	r6, [r0, r2]
  /* Set maximum packet size as 64 bytes */
  usb_endpoint_table[USB_EP_IN].DeviceDescBank[1].PCKSIZE.bit.SIZE = 3;
    7d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    7d42:	4022      	ands	r2, r4
    7d44:	4311      	orrs	r1, r2
    7d46:	6359      	str	r1, [r3, #52]	; 0x34
  pUsb->DEVICE.DeviceEndpoint[USB_EP_IN].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    7d48:	2180      	movs	r1, #128	; 0x80
    7d4a:	2292      	movs	r2, #146	; 0x92
    7d4c:	0052      	lsls	r2, r2, #1
    7d4e:	5481      	strb	r1, [r0, r2]
  /* Configure the data buffer */
  usb_endpoint_table[USB_EP_IN].DeviceDescBank[1].ADDR.reg = (uint32_t)&udd_ep_in_cache_buffer[1];
    7d50:	4a09      	ldr	r2, [pc, #36]	; (7d78 <USB_Configure+0x68>)
    7d52:	3240      	adds	r2, #64	; 0x40
    7d54:	631a      	str	r2, [r3, #48]	; 0x30

  /* Configure INTERRUPT IN endpoint for CDC COMM interface*/
  pUsb->DEVICE.DeviceEndpoint[USB_EP_COMM].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE1(4);
    7d56:	22b0      	movs	r2, #176	; 0xb0
    7d58:	0052      	lsls	r2, r2, #1
    7d5a:	5485      	strb	r5, [r0, r2]
  /* Set maximum packet size as 64 bytes */
  usb_endpoint_table[USB_EP_COMM].DeviceDescBank[1].PCKSIZE.bit.SIZE = 0;
    7d5c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    7d5e:	4022      	ands	r2, r4
    7d60:	675a      	str	r2, [r3, #116]	; 0x74
  pUsb->DEVICE.DeviceEndpoint[USB_EP_COMM].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    7d62:	23b2      	movs	r3, #178	; 0xb2
    7d64:	005b      	lsls	r3, r3, #1
    7d66:	54c1      	strb	r1, [r0, r3]
}
    7d68:	bd70      	pop	{r4, r5, r6, pc}
    7d6a:	46c0      	nop			; (mov r8, r8)
    7d6c:	20000d24 	.word	0x20000d24
    7d70:	8fffffff 	.word	0x8fffffff
    7d74:	20000ca4 	.word	0x20000ca4
    7d78:	20000c24 	.word	0x20000c24
    7d7c:	00000000 	.word	0x00000000

00007d80 <extint_detection_callback>:
extern struct port_config pin_conf;

volatile uint8_t eic = 0;
volatile int32_t data;
void extint_detection_callback(void)
{
    7d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d82:	b085      	sub	sp, #20
	CH_IRQ_PROLOGUE();
    7d84:	4674      	mov	r4, lr
		port_base->OUTSET.reg = pin_mask;
    7d86:	2280      	movs	r2, #128	; 0x80
    7d88:	0292      	lsls	r2, r2, #10
    7d8a:	4b24      	ldr	r3, [pc, #144]	; (7e1c <extint_detection_callback+0x9c>)
    7d8c:	619a      	str	r2, [r3, #24]

	uint8_t d;

	port_pin_set_output_level(LED_0_PIN, 1);
	eic = 1;
    7d8e:	2701      	movs	r7, #1
    7d90:	4b23      	ldr	r3, [pc, #140]	; (7e20 <extint_detection_callback+0xa0>)
    7d92:	701f      	strb	r7, [r3, #0]
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    7d94:	ad01      	add	r5, sp, #4
    7d96:	0028      	movs	r0, r5
    7d98:	f7fc fec2 	bl	4b20 <extint_chan_get_config_defaults>

	config_extint_chan.gpio_pin           = PIN_PA04;
    7d9c:	2304      	movs	r3, #4
    7d9e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA04A_EIC_EXTINT4;
    7da0:	2600      	movs	r6, #0
    7da2:	606e      	str	r6, [r5, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    7da4:	722f      	strb	r7, [r5, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_NONE;
    7da6:	72ee      	strb	r6, [r5, #11]

	extint_chan_set_config(4, &config_extint_chan);
    7da8:	0029      	movs	r1, r5
    7daa:	2004      	movs	r0, #4
    7dac:	f7fc fec8 	bl	4b40 <extint_chan_set_config>

	extint_chan_disable_callback(4, EXTINT_CALLBACK_TYPE_DETECT);
    7db0:	2100      	movs	r1, #0
    7db2:	2004      	movs	r0, #4
    7db4:	f7fc fe34 	bl	4a20 <extint_chan_disable_callback>
	data = 0;
    7db8:	4b1a      	ldr	r3, [pc, #104]	; (7e24 <extint_detection_callback+0xa4>)
    7dba:	601e      	str	r6, [r3, #0]
	for (int i=0;i<25;i++)
    7dbc:	2200      	movs	r2, #0
    7dbe:	4817      	ldr	r0, [pc, #92]	; (7e1c <extint_detection_callback+0x9c>)
    7dc0:	2520      	movs	r5, #32
			}
			else
			{
				d = 0;
			}
			data = (data << 1) + d;
    7dc2:	001e      	movs	r6, r3
    7dc4:	e003      	b.n	7dce <extint_detection_callback+0x4e>
		port_base->OUTCLR.reg = pin_mask;
    7dc6:	6145      	str	r5, [r0, #20]
	for (int i=0;i<25;i++)
    7dc8:	3201      	adds	r2, #1
    7dca:	2a19      	cmp	r2, #25
    7dcc:	d00a      	beq.n	7de4 <extint_detection_callback+0x64>
		port_base->OUTSET.reg = pin_mask;
    7dce:	6185      	str	r5, [r0, #24]
		if (i < 24)
    7dd0:	2a17      	cmp	r2, #23
    7dd2:	dcf8      	bgt.n	7dc6 <extint_detection_callback+0x46>
	return (port_base->IN.reg & pin_mask);
    7dd4:	6a03      	ldr	r3, [r0, #32]
			data = (data << 1) + d;
    7dd6:	6831      	ldr	r1, [r6, #0]
			if (port_pin_get_input_level(PIN_PA04))
    7dd8:	091b      	lsrs	r3, r3, #4
    7dda:	403b      	ands	r3, r7
			data = (data << 1) + d;
    7ddc:	0049      	lsls	r1, r1, #1
    7dde:	185b      	adds	r3, r3, r1
    7de0:	6033      	str	r3, [r6, #0]
    7de2:	e7f0      	b.n	7dc6 <extint_detection_callback+0x46>
		}
		port_pin_set_output_level(PIN_PA05, 0);
	}
	config_extint_chan.gpio_pin           = PIN_PA04;
    7de4:	a901      	add	r1, sp, #4
    7de6:	2304      	movs	r3, #4
    7de8:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA04A_EIC_EXTINT4;
    7dea:	2300      	movs	r3, #0
    7dec:	604b      	str	r3, [r1, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    7dee:	3301      	adds	r3, #1
    7df0:	720b      	strb	r3, [r1, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    7df2:	3301      	adds	r3, #1
    7df4:	72cb      	strb	r3, [r1, #11]

	extint_chan_set_config(4, &config_extint_chan);
    7df6:	2004      	movs	r0, #4
    7df8:	f7fc fea2 	bl	4b40 <extint_chan_set_config>

	extint_chan_enable_callback(4, EXTINT_CALLBACK_TYPE_DETECT);
    7dfc:	2100      	movs	r1, #0
    7dfe:	2004      	movs	r0, #4
    7e00:	f7fc fdfe 	bl	4a00 <extint_chan_enable_callback>
  __ASM volatile ("cpsid i" : : : "memory");
    7e04:	b672      	cpsid	i

	chSysLockFromISR();
	chEvtSignalI(&nil.threads[2], 1);
    7e06:	2101      	movs	r1, #1
    7e08:	4807      	ldr	r0, [pc, #28]	; (7e28 <extint_detection_callback+0xa8>)
    7e0a:	f7fb f851 	bl	2eb0 <chEvtSignalI>
  __ASM volatile ("cpsie i" : : : "memory");
    7e0e:	b662      	cpsie	i
	chSysUnlockFromISR();

	CH_IRQ_EPILOGUE();
    7e10:	0020      	movs	r0, r4
    7e12:	f7fb f88d 	bl	2f30 <_port_irq_epilogue>
}
    7e16:	b005      	add	sp, #20
    7e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e1a:	46c0      	nop			; (mov r8, r8)
    7e1c:	41004400 	.word	0x41004400
    7e20:	20000dac 	.word	0x20000dac
    7e24:	20000da8 	.word	0x20000da8
    7e28:	20000ab0 	.word	0x20000ab0
    7e2c:	00000000 	.word	0x00000000

00007e30 <ThreadADC>:

unsigned int adcCount = 0;

THD_FUNCTION(ThreadADC, arg)
{
    7e30:	b570      	push	{r4, r5, r6, lr}
    7e32:	b084      	sub	sp, #16
	(void) arg;

	chThdSleepMilliseconds(400);
    7e34:	20c8      	movs	r0, #200	; 0xc8
    7e36:	0040      	lsls	r0, r0, #1
    7e38:	f7fb f832 	bl	2ea0 <chThdSleep>
	xprintf("ADCThread\n");
    7e3c:	482b      	ldr	r0, [pc, #172]	; (7eec <ThreadADC+0xbc>)
    7e3e:	f7fd f867 	bl	4f10 <xprintf>
	chThdSleepMilliseconds(100);
    7e42:	2064      	movs	r0, #100	; 0x64
    7e44:	f7fb f82c 	bl	2ea0 <chThdSleep>

	pin_conf.direction = PORT_PIN_DIR_INPUT;
    7e48:	4c29      	ldr	r4, [pc, #164]	; (7ef0 <ThreadADC+0xc0>)
    7e4a:	2600      	movs	r6, #0
    7e4c:	7026      	strb	r6, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    7e4e:	2501      	movs	r5, #1
    7e50:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(PIN_PA04, &pin_conf);
    7e52:	0021      	movs	r1, r4
    7e54:	2004      	movs	r0, #4
    7e56:	f7fc fc63 	bl	4720 <port_pin_set_config>

	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    7e5a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(PIN_PA05, &pin_conf);
    7e5c:	0021      	movs	r1, r4
    7e5e:	2005      	movs	r0, #5
    7e60:	f7fc fc5e 	bl	4720 <port_pin_set_config>
		port_base->OUTCLR.reg = pin_mask;
    7e64:	2220      	movs	r2, #32
    7e66:	4b23      	ldr	r3, [pc, #140]	; (7ef4 <ThreadADC+0xc4>)
    7e68:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA05, 0);

	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    7e6a:	ac01      	add	r4, sp, #4
    7e6c:	0020      	movs	r0, r4
    7e6e:	f7fc fe57 	bl	4b20 <extint_chan_get_config_defaults>

	config_extint_chan.gpio_pin           = PIN_PA04;
    7e72:	2304      	movs	r3, #4
    7e74:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA04A_EIC_EXTINT4;
    7e76:	6066      	str	r6, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    7e78:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    7e7a:	3b02      	subs	r3, #2
    7e7c:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(4, &config_extint_chan);
    7e7e:	0021      	movs	r1, r4
    7e80:	2004      	movs	r0, #4
    7e82:	f7fc fe5d 	bl	4b40 <extint_chan_set_config>

	extint_register_callback(extint_detection_callback, 4, EXTINT_CALLBACK_TYPE_DETECT);
    7e86:	2200      	movs	r2, #0
    7e88:	2104      	movs	r1, #4
    7e8a:	481b      	ldr	r0, [pc, #108]	; (7ef8 <ThreadADC+0xc8>)
    7e8c:	f7fc fda0 	bl	49d0 <extint_register_callback>
	extint_chan_enable_callback(4, EXTINT_CALLBACK_TYPE_DETECT);
    7e90:	2100      	movs	r1, #0
    7e92:	2004      	movs	r0, #4
    7e94:	f7fc fdb4 	bl	4a00 <extint_chan_enable_callback>
	int32_t dat;
	while (true)
	{
		chEvtWaitAnyTimeout(ALL_EVENTS, TIME_INFINITE);

		dat = (data & 0x7FFFFFL); // * (1 - ((data & 0x800000L) >> 22));
    7e98:	4d18      	ldr	r5, [pc, #96]	; (7efc <ThreadADC+0xcc>)
		if (data & 0x800000L)
		{
			dat = 0xFF800000L | dat;
		}
		writeFile(0x05, 4, &dat);
		if (adcCount > 0)
    7e9a:	4e19      	ldr	r6, [pc, #100]	; (7f00 <ThreadADC+0xd0>)
		{
			xprintf("ADC %ld\n", dat);
    7e9c:	4c19      	ldr	r4, [pc, #100]	; (7f04 <ThreadADC+0xd4>)
    7e9e:	e00b      	b.n	7eb8 <ThreadADC+0x88>
		writeFile(0x05, 4, &dat);
    7ea0:	466a      	mov	r2, sp
    7ea2:	2104      	movs	r1, #4
    7ea4:	2005      	movs	r0, #5
    7ea6:	f004 fee3 	bl	cc70 <writeFile>
		if (adcCount > 0)
    7eaa:	6833      	ldr	r3, [r6, #0]
    7eac:	2b00      	cmp	r3, #0
    7eae:	d113      	bne.n	7ed8 <ThreadADC+0xa8>
    7eb0:	2280      	movs	r2, #128	; 0x80
    7eb2:	0292      	lsls	r2, r2, #10
    7eb4:	4b0f      	ldr	r3, [pc, #60]	; (7ef4 <ThreadADC+0xc4>)
    7eb6:	615a      	str	r2, [r3, #20]
		chEvtWaitAnyTimeout(ALL_EVENTS, TIME_INFINITE);
    7eb8:	2100      	movs	r1, #0
    7eba:	2001      	movs	r0, #1
    7ebc:	4240      	negs	r0, r0
    7ebe:	f7fb f807 	bl	2ed0 <chEvtWaitAnyTimeout>
		dat = (data & 0x7FFFFFL); // * (1 - ((data & 0x800000L) >> 22));
    7ec2:	682b      	ldr	r3, [r5, #0]
    7ec4:	025b      	lsls	r3, r3, #9
    7ec6:	0a5b      	lsrs	r3, r3, #9
    7ec8:	9300      	str	r3, [sp, #0]
		if (data & 0x800000L)
    7eca:	682a      	ldr	r2, [r5, #0]
    7ecc:	0212      	lsls	r2, r2, #8
    7ece:	d5e7      	bpl.n	7ea0 <ThreadADC+0x70>
			dat = 0xFF800000L | dat;
    7ed0:	4a0d      	ldr	r2, [pc, #52]	; (7f08 <ThreadADC+0xd8>)
    7ed2:	4313      	orrs	r3, r2
    7ed4:	9300      	str	r3, [sp, #0]
    7ed6:	e7e3      	b.n	7ea0 <ThreadADC+0x70>
			xprintf("ADC %ld\n", dat);
    7ed8:	9900      	ldr	r1, [sp, #0]
    7eda:	0020      	movs	r0, r4
    7edc:	f7fd f818 	bl	4f10 <xprintf>
			adcCount--;
    7ee0:	4a07      	ldr	r2, [pc, #28]	; (7f00 <ThreadADC+0xd0>)
    7ee2:	6813      	ldr	r3, [r2, #0]
    7ee4:	3b01      	subs	r3, #1
    7ee6:	6013      	str	r3, [r2, #0]
    7ee8:	e7e2      	b.n	7eb0 <ThreadADC+0x80>
    7eea:	46c0      	nop			; (mov r8, r8)
    7eec:	0000edd4 	.word	0x0000edd4
    7ef0:	20006444 	.word	0x20006444
    7ef4:	41004400 	.word	0x41004400
    7ef8:	00007d81 	.word	0x00007d81
    7efc:	20000da8 	.word	0x20000da8
    7f00:	20000da4 	.word	0x20000da4
    7f04:	0000ede0 	.word	0x0000ede0
    7f08:	ff800000 	.word	0xff800000
    7f0c:	00000000 	.word	0x00000000

00007f10 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    7f10:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
    7f12:	0212      	lsls	r2, r2, #8
    7f14:	7883      	ldrb	r3, [r0, #2]
    7f16:	431a      	orrs	r2, r3
	rv = rv << 8 | ptr[1];
    7f18:	0212      	lsls	r2, r2, #8
    7f1a:	7843      	ldrb	r3, [r0, #1]
    7f1c:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    7f1e:	021b      	lsls	r3, r3, #8
    7f20:	7800      	ldrb	r0, [r0, #0]
    7f22:	4318      	orrs	r0, r3
	return rv;
}
    7f24:	4770      	bx	lr
    7f26:	46c0      	nop			; (mov r8, r8)
	...

00007f30 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    7f30:	7001      	strb	r1, [r0, #0]
    7f32:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
    7f34:	7043      	strb	r3, [r0, #1]
    7f36:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
    7f38:	7083      	strb	r3, [r0, #2]
    7f3a:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val;
    7f3c:	70c1      	strb	r1, [r0, #3]
}
    7f3e:	4770      	bx	lr

00007f40 <mem_cpy>:
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt)
{
    7f40:	b510      	push	{r4, lr}
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
    7f42:	2a00      	cmp	r2, #0
    7f44:	d005      	beq.n	7f52 <mem_cpy+0x12>
    7f46:	2300      	movs	r3, #0
		do {
			*d++ = *s++;
    7f48:	5ccc      	ldrb	r4, [r1, r3]
    7f4a:	54c4      	strb	r4, [r0, r3]
    7f4c:	3301      	adds	r3, #1
		} while (--cnt);
    7f4e:	4293      	cmp	r3, r2
    7f50:	d1fa      	bne.n	7f48 <mem_cpy+0x8>
	}
}
    7f52:	bd10      	pop	{r4, pc}
	...

00007f60 <mem_cmp>:


/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
    7f60:	b550      	push	{r4, r6, lr}
    7f62:	0006      	movs	r6, r0
    7f64:	3a01      	subs	r2, #1
    7f66:	2300      	movs	r3, #0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    7f68:	5cf4      	ldrb	r4, [r6, r3]
    7f6a:	5cc8      	ldrb	r0, [r1, r3]
    7f6c:	1a20      	subs	r0, r4, r0
	} while (--cnt && r == 0);
    7f6e:	4293      	cmp	r3, r2
    7f70:	d002      	beq.n	7f78 <mem_cmp+0x18>
    7f72:	3301      	adds	r3, #1
    7f74:	2800      	cmp	r0, #0
    7f76:	d0f7      	beq.n	7f68 <mem_cmp+0x8>

	return r;
}
    7f78:	bd50      	pop	{r4, r6, pc}
    7f7a:	46c0      	nop			; (mov r8, r8)
    7f7c:	0000      	movs	r0, r0
	...

00007f80 <clst2sect>:
static
DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
    7f80:	0002      	movs	r2, r0
	clst -= 2;		/* Cluster number is origin from 2 */
    7f82:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    7f84:	6983      	ldr	r3, [r0, #24]
    7f86:	3b02      	subs	r3, #2
    7f88:	2000      	movs	r0, #0
    7f8a:	4299      	cmp	r1, r3
    7f8c:	d203      	bcs.n	7f96 <clst2sect+0x16>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
    7f8e:	8950      	ldrh	r0, [r2, #10]
    7f90:	4341      	muls	r1, r0
    7f92:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    7f94:	1808      	adds	r0, r1, r0
}
    7f96:	4770      	bx	lr
	...

00007fa0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
    7fa0:	0002      	movs	r2, r0
    7fa2:	0001      	movs	r1, r0
    7fa4:	310b      	adds	r1, #11
	BYTE sum = 0;
    7fa6:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
    7fa8:	0843      	lsrs	r3, r0, #1
    7faa:	01c0      	lsls	r0, r0, #7
    7fac:	4303      	orrs	r3, r0
    7fae:	7810      	ldrb	r0, [r2, #0]
    7fb0:	1818      	adds	r0, r3, r0
    7fb2:	b2c0      	uxtb	r0, r0
    7fb4:	3201      	adds	r2, #1
	} while (--n);
    7fb6:	428a      	cmp	r2, r1
    7fb8:	d1f6      	bne.n	7fa8 <sum_sfn+0x8>
	return sum;
}
    7fba:	4770      	bx	lr
    7fbc:	0000      	movs	r0, r0
	...

00007fc0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
    7fc0:	b530      	push	{r4, r5, lr}
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
    7fc2:	6801      	ldr	r1, [r0, #0]
    7fc4:	2900      	cmp	r1, #0
    7fc6:	d01b      	beq.n	8000 <__ram0_size__>
		for (tt = *path; (UINT)*tt >= (FF_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find a colon in the path */
    7fc8:	780c      	ldrb	r4, [r1, #0]
    7fca:	2c1f      	cmp	r4, #31
    7fcc:	d911      	bls.n	7ff2 <get_ldnumber+0x32>
    7fce:	2c3a      	cmp	r4, #58	; 0x3a
    7fd0:	d01f      	beq.n	8012 <__ram0_size__+0x12>
    7fd2:	000b      	movs	r3, r1
    7fd4:	3301      	adds	r3, #1
    7fd6:	781a      	ldrb	r2, [r3, #0]
    7fd8:	2a1f      	cmp	r2, #31
    7fda:	d90c      	bls.n	7ff6 <get_ldnumber+0x36>
    7fdc:	2a3a      	cmp	r2, #58	; 0x3a
    7fde:	d1f9      	bne.n	7fd4 <get_ldnumber+0x14>
		if (*tt == ':') {	/* If a colon is exist in the path name */
			tp = *path;
			i = *tp++;
    7fe0:	1c4a      	adds	r2, r1, #1
			if (IsDigit(i) && tp == tt) {	/* Is there a numeric drive id + colon? */
    7fe2:	4293      	cmp	r3, r2
    7fe4:	d10f      	bne.n	8006 <__ram0_size__+0x6>
				if ((i -= '0') < FF_VOLUMES) {	/* If drive id is found, get the value and strip it */
    7fe6:	2c30      	cmp	r4, #48	; 0x30
    7fe8:	d110      	bne.n	800c <__ram0_size__+0xc>
					vol = (int)i;
					*path = ++tt;
    7fea:	3102      	adds	r1, #2
    7fec:	6001      	str	r1, [r0, #0]
					vol = (int)i;
    7fee:	2500      	movs	r5, #0
    7ff0:	e004      	b.n	7ffc <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (FF_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find a colon in the path */
    7ff2:	0022      	movs	r2, r4
    7ff4:	000b      	movs	r3, r1
#endif
		} else {	/* No volume id and use default drive */
#if FF_FS_RPATH != 0 && FF_VOLUMES >= 2
			vol = CurrVol;	/* Current drive */
#else
			vol = 0;		/* Drive 0 */
    7ff6:	2500      	movs	r5, #0
		if (*tt == ':') {	/* If a colon is exist in the path name */
    7ff8:	2a3a      	cmp	r2, #58	; 0x3a
    7ffa:	d0f1      	beq.n	7fe0 <get_ldnumber+0x20>
#endif
		}
	}
	return vol;
}
    7ffc:	0028      	movs	r0, r5
    7ffe:	bd30      	pop	{r4, r5, pc}
	int vol = -1;
    8000:	2501      	movs	r5, #1
    8002:	426d      	negs	r5, r5
    8004:	e7fa      	b.n	7ffc <get_ldnumber+0x3c>
    8006:	2501      	movs	r5, #1
    8008:	426d      	negs	r5, r5
    800a:	e7f7      	b.n	7ffc <get_ldnumber+0x3c>
    800c:	2501      	movs	r5, #1
    800e:	426d      	negs	r5, r5
	return vol;
    8010:	e7f4      	b.n	7ffc <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (FF_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find a colon in the path */
    8012:	000b      	movs	r3, r1
    8014:	e7e4      	b.n	7fe0 <get_ldnumber+0x20>
    8016:	46c0      	nop			; (mov r8, r8)
	...

00008020 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,	/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs		/* Pointer to pointer to the owner filesystem object to return */
)
{
    8020:	b570      	push	{r4, r5, r6, lr}
    8022:	0004      	movs	r4, r0
    8024:	000d      	movs	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    8026:	2800      	cmp	r0, #0
    8028:	d005      	beq.n	8036 <validate+0x16>
    802a:	6803      	ldr	r3, [r0, #0]
    802c:	2b00      	cmp	r3, #0
    802e:	d002      	beq.n	8036 <validate+0x16>
    8030:	781a      	ldrb	r2, [r3, #0]
    8032:	2a00      	cmp	r2, #0
    8034:	d103      	bne.n	803e <validate+0x1e>
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
    8036:	2009      	movs	r0, #9
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
    8038:	2300      	movs	r3, #0
    803a:	602b      	str	r3, [r5, #0]
	return res;
}
    803c:	bd70      	pop	{r4, r5, r6, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    803e:	8881      	ldrh	r1, [r0, #4]
    8040:	88da      	ldrh	r2, [r3, #6]
    8042:	4291      	cmp	r1, r2
    8044:	d1f7      	bne.n	8036 <validate+0x16>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
    8046:	7858      	ldrb	r0, [r3, #1]
    8048:	f7fe ff2a 	bl	6ea0 <disk_status>
    804c:	07c3      	lsls	r3, r0, #31
    804e:	d4f2      	bmi.n	8036 <validate+0x16>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
    8050:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
    8052:	2000      	movs	r0, #0
    8054:	e7f1      	b.n	803a <validate+0x1a>
    8056:	46c0      	nop			; (mov r8, r8)
	...

00008060 <sync_window>:
{
    8060:	b570      	push	{r4, r5, r6, lr}
    8062:	0004      	movs	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty */
    8064:	78c3      	ldrb	r3, [r0, #3]
	FRESULT res = FR_OK;
    8066:	2000      	movs	r0, #0
	if (fs->wflag) {	/* Is the disk access window dirty */
    8068:	2b00      	cmp	r3, #0
    806a:	d100      	bne.n	806e <sync_window+0xe>
}
    806c:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
    806e:	0025      	movs	r5, r4
    8070:	3534      	adds	r5, #52	; 0x34
    8072:	7860      	ldrb	r0, [r4, #1]
    8074:	2301      	movs	r3, #1
    8076:	6b22      	ldr	r2, [r4, #48]	; 0x30
    8078:	0029      	movs	r1, r5
    807a:	f7ff f839 	bl	70f0 <disk_write>
    807e:	0003      	movs	r3, r0
			res = FR_DISK_ERR;
    8080:	2001      	movs	r0, #1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
    8082:	2b00      	cmp	r3, #0
    8084:	d1f2      	bne.n	806c <sync_window+0xc>
			fs->wflag = 0;	/* Clear window dirty flag */
    8086:	70e3      	strb	r3, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    8088:	6b22      	ldr	r2, [r4, #48]	; 0x30
    808a:	69e1      	ldr	r1, [r4, #28]
    808c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    808e:	1ad3      	subs	r3, r2, r3
	FRESULT res = FR_OK;
    8090:	2000      	movs	r0, #0
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    8092:	428b      	cmp	r3, r1
    8094:	d2ea      	bcs.n	806c <sync_window+0xc>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    8096:	78a3      	ldrb	r3, [r4, #2]
    8098:	2b02      	cmp	r3, #2
    809a:	d1e7      	bne.n	806c <sync_window+0xc>
    809c:	1852      	adds	r2, r2, r1
    809e:	7860      	ldrb	r0, [r4, #1]
    80a0:	3b01      	subs	r3, #1
    80a2:	0029      	movs	r1, r5
    80a4:	f7ff f824 	bl	70f0 <disk_write>
	FRESULT res = FR_OK;
    80a8:	2000      	movs	r0, #0
    80aa:	e7df      	b.n	806c <sync_window+0xc>
    80ac:	0000      	movs	r0, r0
	...

000080b0 <move_window>:
{
    80b0:	b570      	push	{r4, r5, r6, lr}
    80b2:	0005      	movs	r5, r0
    80b4:	000e      	movs	r6, r1
	FRESULT res = FR_OK;
    80b6:	2400      	movs	r4, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
    80b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    80ba:	428b      	cmp	r3, r1
    80bc:	d003      	beq.n	80c6 <move_window+0x16>
		res = sync_window(fs);		/* Write-back changes */
    80be:	f7ff ffcf 	bl	8060 <sync_window>
    80c2:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {			/* Fill sector window with new data */
    80c4:	d001      	beq.n	80ca <move_window+0x1a>
}
    80c6:	0020      	movs	r0, r4
    80c8:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
    80ca:	0029      	movs	r1, r5
    80cc:	3134      	adds	r1, #52	; 0x34
    80ce:	7868      	ldrb	r0, [r5, #1]
    80d0:	2301      	movs	r3, #1
    80d2:	0032      	movs	r2, r6
    80d4:	f7fe ffc4 	bl	7060 <disk_read>
    80d8:	2800      	cmp	r0, #0
    80da:	d002      	beq.n	80e2 <move_window+0x32>
				res = FR_DISK_ERR;
    80dc:	3401      	adds	r4, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
    80de:	2601      	movs	r6, #1
    80e0:	4276      	negs	r6, r6
			fs->winsect = sector;
    80e2:	632e      	str	r6, [r5, #48]	; 0x30
    80e4:	e7ef      	b.n	80c6 <move_window+0x16>
    80e6:	46c0      	nop			; (mov r8, r8)
	...

000080f0 <dir_clear>:
{
    80f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80f2:	0006      	movs	r6, r0
    80f4:	000d      	movs	r5, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
    80f6:	f7ff ffb3 	bl	8060 <sync_window>
    80fa:	2401      	movs	r4, #1
    80fc:	2800      	cmp	r0, #0
    80fe:	d001      	beq.n	8104 <dir_clear+0x14>
}
    8100:	0020      	movs	r0, r4
    8102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
    8104:	0029      	movs	r1, r5
    8106:	0030      	movs	r0, r6
    8108:	f7ff ff3a 	bl	7f80 <clst2sect>
    810c:	0007      	movs	r7, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
    810e:	6330      	str	r0, [r6, #48]	; 0x30
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
    8110:	0035      	movs	r5, r6
    8112:	3534      	adds	r5, #52	; 0x34
    8114:	002b      	movs	r3, r5
    8116:	228d      	movs	r2, #141	; 0x8d
    8118:	0092      	lsls	r2, r2, #2
    811a:	18b1      	adds	r1, r6, r2
		*d++ = (BYTE)val;
    811c:	2200      	movs	r2, #0
    811e:	701a      	strb	r2, [r3, #0]
    8120:	3301      	adds	r3, #1
	} while (--cnt);
    8122:	428b      	cmp	r3, r1
    8124:	d1fb      	bne.n	811e <dir_clear+0x2e>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
    8126:	8973      	ldrh	r3, [r6, #10]
    8128:	2400      	movs	r4, #0
    812a:	2b00      	cmp	r3, #0
    812c:	d00b      	beq.n	8146 <dir_clear+0x56>
    812e:	193a      	adds	r2, r7, r4
    8130:	7870      	ldrb	r0, [r6, #1]
    8132:	2301      	movs	r3, #1
    8134:	0029      	movs	r1, r5
    8136:	f7fe ffdb 	bl	70f0 <disk_write>
    813a:	2800      	cmp	r0, #0
    813c:	d103      	bne.n	8146 <dir_clear+0x56>
    813e:	3401      	adds	r4, #1
    8140:	8973      	ldrh	r3, [r6, #10]
    8142:	42a3      	cmp	r3, r4
    8144:	d8f3      	bhi.n	812e <dir_clear+0x3e>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
    8146:	8970      	ldrh	r0, [r6, #10]
    8148:	1b04      	subs	r4, r0, r4
    814a:	1e60      	subs	r0, r4, #1
    814c:	4184      	sbcs	r4, r0
    814e:	b2e4      	uxtb	r4, r4
    8150:	e7d6      	b.n	8100 <dir_clear+0x10>
    8152:	46c0      	nop			; (mov r8, r8)
	...

00008160 <get_fileinfo>:
{
    8160:	b5f0      	push	{r4, r5, r6, r7, lr}
    8162:	46ce      	mov	lr, r9
    8164:	b500      	push	{lr}
    8166:	0007      	movs	r7, r0
    8168:	000e      	movs	r6, r1
	FATFS *fs = dp->obj.fs;
    816a:	6803      	ldr	r3, [r0, #0]
    816c:	4699      	mov	r9, r3
	fno->fname[0] = 0;			/* Invaidate file info */
    816e:	2300      	movs	r3, #0
    8170:	758b      	strb	r3, [r1, #22]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
    8172:	6983      	ldr	r3, [r0, #24]
    8174:	2b00      	cmp	r3, #0
    8176:	d07d      	beq.n	8274 <get_fileinfo+0x114>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
    8178:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    817a:	3301      	adds	r3, #1
    817c:	d026      	beq.n	81cc <get_fileinfo+0x6c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
    817e:	464b      	mov	r3, r9
    8180:	68db      	ldr	r3, [r3, #12]
    8182:	8818      	ldrh	r0, [r3, #0]
    8184:	2800      	cmp	r0, #0
    8186:	d01b      	beq.n	81c0 <get_fileinfo+0x60>
    8188:	2502      	movs	r5, #2
    818a:	2400      	movs	r4, #0
    818c:	e00a      	b.n	81a4 <get_fileinfo+0x44>
				if (i >= FF_MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
    818e:	2bfe      	cmp	r3, #254	; 0xfe
    8190:	d822      	bhi.n	81d8 <get_fileinfo+0x78>
				fno->fname[i++] = (TCHAR)w;
    8192:	1c5c      	adds	r4, r3, #1
    8194:	18f3      	adds	r3, r6, r3
    8196:	7598      	strb	r0, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
    8198:	464b      	mov	r3, r9
    819a:	68db      	ldr	r3, [r3, #12]
    819c:	5b58      	ldrh	r0, [r3, r5]
    819e:	3502      	adds	r5, #2
    81a0:	2800      	cmp	r0, #0
    81a2:	d010      	beq.n	81c6 <get_fileinfo+0x66>
				w = ff_uni2oem(w, CODEPAGE);	/* Unicode -> OEM */
    81a4:	21b6      	movs	r1, #182	; 0xb6
    81a6:	31ff      	adds	r1, #255	; 0xff
    81a8:	f001 fe9a 	bl	9ee0 <ff_uni2oem>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
    81ac:	2800      	cmp	r0, #0
    81ae:	d009      	beq.n	81c4 <get_fileinfo+0x64>
    81b0:	0023      	movs	r3, r4
				if (w >= 0x100) {				/* Put 1st byte if it is a DBC */
    81b2:	28ff      	cmp	r0, #255	; 0xff
    81b4:	d9eb      	bls.n	818e <get_fileinfo+0x2e>
					fno->fname[i++] = (char)(w >> 8);
    81b6:	1c63      	adds	r3, r4, #1
    81b8:	1934      	adds	r4, r6, r4
    81ba:	0a02      	lsrs	r2, r0, #8
    81bc:	75a2      	strb	r2, [r4, #22]
    81be:	e7e6      	b.n	818e <get_fileinfo+0x2e>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
    81c0:	2400      	movs	r4, #0
    81c2:	e000      	b.n	81c6 <get_fileinfo+0x66>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
    81c4:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
    81c6:	1934      	adds	r4, r6, r4
    81c8:	2300      	movs	r3, #0
    81ca:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
    81cc:	7db4      	ldrb	r4, [r6, #22]
	i = j = 0;
    81ce:	2200      	movs	r2, #0
    81d0:	2300      	movs	r3, #0
			fno->altname[j++] = '.';
    81d2:	212e      	movs	r1, #46	; 0x2e
    81d4:	4689      	mov	r9, r1
    81d6:	e015      	b.n	8204 <get_fileinfo+0xa4>
				if (i >= FF_MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
    81d8:	2400      	movs	r4, #0
    81da:	e7f4      	b.n	81c6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
    81dc:	33e0      	adds	r3, #224	; 0xe0
    81de:	e018      	b.n	8212 <get_fileinfo+0xb2>
			if (!lfv) fno->fname[j] = '.';
    81e0:	2c00      	cmp	r4, #0
    81e2:	d102      	bne.n	81ea <get_fileinfo+0x8a>
    81e4:	18b1      	adds	r1, r6, r2
    81e6:	4648      	mov	r0, r9
    81e8:	7588      	strb	r0, [r1, #22]
			fno->altname[j++] = '.';
    81ea:	18b1      	adds	r1, r6, r2
    81ec:	4648      	mov	r0, r9
    81ee:	7248      	strb	r0, [r1, #9]
    81f0:	3201      	adds	r2, #1
    81f2:	e010      	b.n	8216 <get_fileinfo+0xb6>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
    81f4:	2010      	movs	r0, #16
    81f6:	e01b      	b.n	8230 <get_fileinfo+0xd0>
			fno->fname[j] = c;
    81f8:	18b0      	adds	r0, r6, r2
    81fa:	7583      	strb	r3, [r0, #22]
		j++;
    81fc:	3201      	adds	r2, #1
    81fe:	002b      	movs	r3, r5
	while (i < 11) {		/* Copy name body and extension */
    8200:	2d0b      	cmp	r5, #11
    8202:	d01a      	beq.n	823a <get_fileinfo+0xda>
		c = (TCHAR)dp->dir[i++];
    8204:	1c5d      	adds	r5, r3, #1
    8206:	69f9      	ldr	r1, [r7, #28]
    8208:	5ccb      	ldrb	r3, [r1, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
    820a:	2b20      	cmp	r3, #32
    820c:	d0f7      	beq.n	81fe <get_fileinfo+0x9e>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
    820e:	2b05      	cmp	r3, #5
    8210:	d0e4      	beq.n	81dc <get_fileinfo+0x7c>
		if (i == 9) {						/* Insert a . if extension is exist */
    8212:	2d09      	cmp	r5, #9
    8214:	d0e4      	beq.n	81e0 <get_fileinfo+0x80>
		fno->altname[j] = c;
    8216:	18b1      	adds	r1, r6, r2
    8218:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
    821a:	2c00      	cmp	r4, #0
    821c:	d1ee      	bne.n	81fc <get_fileinfo+0x9c>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
    821e:	0019      	movs	r1, r3
    8220:	3941      	subs	r1, #65	; 0x41
    8222:	2919      	cmp	r1, #25
    8224:	d8e8      	bhi.n	81f8 <get_fileinfo+0x98>
    8226:	69f9      	ldr	r1, [r7, #28]
    8228:	7b09      	ldrb	r1, [r1, #12]
    822a:	2d08      	cmp	r5, #8
    822c:	d8e2      	bhi.n	81f4 <get_fileinfo+0x94>
    822e:	2008      	movs	r0, #8
    8230:	4201      	tst	r1, r0
    8232:	d0e1      	beq.n	81f8 <get_fileinfo+0x98>
				c += 0x20;			/* To lower */
    8234:	3320      	adds	r3, #32
    8236:	b2db      	uxtb	r3, r3
    8238:	e7de      	b.n	81f8 <get_fileinfo+0x98>
	if (!lfv) {
    823a:	2c00      	cmp	r4, #0
    823c:	d108      	bne.n	8250 <get_fileinfo+0xf0>
		fno->fname[j] = 0;
    823e:	18b3      	adds	r3, r6, r2
    8240:	2100      	movs	r1, #0
    8242:	7599      	strb	r1, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
    8244:	69fb      	ldr	r3, [r7, #28]
    8246:	7b1b      	ldrb	r3, [r3, #12]
    8248:	1e59      	subs	r1, r3, #1
    824a:	418b      	sbcs	r3, r1
    824c:	425b      	negs	r3, r3
    824e:	401a      	ands	r2, r3
	fno->altname[j] = 0;	/* Terminate the SFN */
    8250:	18b2      	adds	r2, r6, r2
    8252:	2300      	movs	r3, #0
    8254:	7253      	strb	r3, [r2, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
    8256:	69fb      	ldr	r3, [r7, #28]
    8258:	7adb      	ldrb	r3, [r3, #11]
    825a:	7233      	strb	r3, [r6, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
    825c:	69f8      	ldr	r0, [r7, #28]
    825e:	301c      	adds	r0, #28
    8260:	f7ff fe56 	bl	7f10 <ld_dword>
    8264:	6030      	str	r0, [r6, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
    8266:	69f8      	ldr	r0, [r7, #28]
    8268:	3016      	adds	r0, #22
    826a:	f7ff fe51 	bl	7f10 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
    826e:	80f0      	strh	r0, [r6, #6]
    8270:	0c00      	lsrs	r0, r0, #16
    8272:	80b0      	strh	r0, [r6, #4]
}
    8274:	bc04      	pop	{r2}
    8276:	4691      	mov	r9, r2
    8278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    827a:	46c0      	nop			; (mov r8, r8)
    827c:	0000      	movs	r0, r0
	...

00008280 <sync_fs>:
{
    8280:	b570      	push	{r4, r5, r6, lr}
    8282:	0004      	movs	r4, r0
	res = sync_window(fs);
    8284:	f7ff feec 	bl	8060 <sync_window>
	if (res == FR_OK) {
    8288:	2800      	cmp	r0, #0
    828a:	d10a      	bne.n	82a2 <sync_fs+0x22>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    828c:	7823      	ldrb	r3, [r4, #0]
    828e:	2b03      	cmp	r3, #3
    8290:	d008      	beq.n	82a4 <sync_fs+0x24>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    8292:	7860      	ldrb	r0, [r4, #1]
    8294:	2200      	movs	r2, #0
    8296:	2100      	movs	r1, #0
    8298:	f7fe ff82 	bl	71a0 <disk_ioctl>
    829c:	1e43      	subs	r3, r0, #1
    829e:	4198      	sbcs	r0, r3
	res = sync_window(fs);
    82a0:	b2c0      	uxtb	r0, r0
}
    82a2:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    82a4:	7923      	ldrb	r3, [r4, #4]
    82a6:	2b01      	cmp	r3, #1
    82a8:	d1f3      	bne.n	8292 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
    82aa:	0025      	movs	r5, r4
    82ac:	3534      	adds	r5, #52	; 0x34
    82ae:	002b      	movs	r3, r5
    82b0:	228d      	movs	r2, #141	; 0x8d
    82b2:	0092      	lsls	r2, r2, #2
    82b4:	18a1      	adds	r1, r4, r2
		*d++ = (BYTE)val;
    82b6:	2200      	movs	r2, #0
    82b8:	701a      	strb	r2, [r3, #0]
    82ba:	3301      	adds	r3, #1
	} while (--cnt);
    82bc:	428b      	cmp	r3, r1
    82be:	d1fb      	bne.n	82b8 <sync_fs+0x38>
	*ptr++ = (BYTE)val; val >>= 8;
    82c0:	2255      	movs	r2, #85	; 0x55
    82c2:	4b13      	ldr	r3, [pc, #76]	; (8310 <sync_fs+0x90>)
    82c4:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
    82c6:	3255      	adds	r2, #85	; 0x55
    82c8:	4b12      	ldr	r3, [pc, #72]	; (8314 <sync_fs+0x94>)
    82ca:	54e2      	strb	r2, [r4, r3]
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
    82cc:	4912      	ldr	r1, [pc, #72]	; (8318 <sync_fs+0x98>)
    82ce:	0028      	movs	r0, r5
    82d0:	f7ff fe2e 	bl	7f30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
    82d4:	2386      	movs	r3, #134	; 0x86
    82d6:	009b      	lsls	r3, r3, #2
    82d8:	18e0      	adds	r0, r4, r3
    82da:	4910      	ldr	r1, [pc, #64]	; (831c <sync_fs+0x9c>)
    82dc:	f7ff fe28 	bl	7f30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
    82e0:	2387      	movs	r3, #135	; 0x87
    82e2:	009b      	lsls	r3, r3, #2
    82e4:	18e0      	adds	r0, r4, r3
    82e6:	6961      	ldr	r1, [r4, #20]
    82e8:	f7ff fe22 	bl	7f30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
    82ec:	2388      	movs	r3, #136	; 0x88
    82ee:	009b      	lsls	r3, r3, #2
    82f0:	18e0      	adds	r0, r4, r3
    82f2:	6921      	ldr	r1, [r4, #16]
    82f4:	f7ff fe1c 	bl	7f30 <st_dword>
			fs->winsect = fs->volbase + 1;
    82f8:	6a23      	ldr	r3, [r4, #32]
    82fa:	1c5a      	adds	r2, r3, #1
    82fc:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
    82fe:	7860      	ldrb	r0, [r4, #1]
    8300:	2301      	movs	r3, #1
    8302:	0029      	movs	r1, r5
    8304:	f7fe fef4 	bl	70f0 <disk_write>
			fs->fsi_flag = 0;
    8308:	2300      	movs	r3, #0
    830a:	7123      	strb	r3, [r4, #4]
    830c:	e7c1      	b.n	8292 <sync_fs+0x12>
    830e:	46c0      	nop			; (mov r8, r8)
    8310:	00000232 	.word	0x00000232
    8314:	00000233 	.word	0x00000233
    8318:	41615252 	.word	0x41615252
    831c:	61417272 	.word	0x61417272

00008320 <put_fat>:
{
    8320:	b5f0      	push	{r4, r5, r6, r7, lr}
    8322:	46d6      	mov	lr, sl
    8324:	464f      	mov	r7, r9
    8326:	4646      	mov	r6, r8
    8328:	b5c0      	push	{r6, r7, lr}
    832a:	0006      	movs	r6, r0
    832c:	000d      	movs	r5, r1
    832e:	0017      	movs	r7, r2
	FRESULT res = FR_INT_ERR;
    8330:	2402      	movs	r4, #2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    8332:	2901      	cmp	r1, #1
    8334:	d902      	bls.n	833c <put_fat+0x1c>
    8336:	6983      	ldr	r3, [r0, #24]
    8338:	4299      	cmp	r1, r3
    833a:	d305      	bcc.n	8348 <put_fat+0x28>
}
    833c:	0020      	movs	r0, r4
    833e:	bc1c      	pop	{r2, r3, r4}
    8340:	4690      	mov	r8, r2
    8342:	4699      	mov	r9, r3
    8344:	46a2      	mov	sl, r4
    8346:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    8348:	7803      	ldrb	r3, [r0, #0]
    834a:	2b02      	cmp	r3, #2
    834c:	d053      	beq.n	83f6 <put_fat+0xd6>
    834e:	2b03      	cmp	r3, #3
    8350:	d066      	beq.n	8420 <put_fat+0x100>
	FRESULT res = FR_INT_ERR;
    8352:	2402      	movs	r4, #2
		switch (fs->fs_type) {
    8354:	2b01      	cmp	r3, #1
    8356:	d1f1      	bne.n	833c <put_fat+0x1c>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
    8358:	084b      	lsrs	r3, r1, #1
    835a:	4698      	mov	r8, r3
    835c:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    835e:	4643      	mov	r3, r8
    8360:	0a59      	lsrs	r1, r3, #9
    8362:	6a43      	ldr	r3, [r0, #36]	; 0x24
    8364:	469c      	mov	ip, r3
    8366:	4461      	add	r1, ip
    8368:	f7ff fea2 	bl	80b0 <move_window>
    836c:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
    836e:	d1e5      	bne.n	833c <put_fat+0x1c>
			p = fs->win + bc++ % SS(fs);
    8370:	2334      	movs	r3, #52	; 0x34
    8372:	469a      	mov	sl, r3
    8374:	44b2      	add	sl, r6
    8376:	3b33      	subs	r3, #51	; 0x33
    8378:	4443      	add	r3, r8
    837a:	4699      	mov	r9, r3
    837c:	4643      	mov	r3, r8
    837e:	05db      	lsls	r3, r3, #23
    8380:	0ddb      	lsrs	r3, r3, #23
    8382:	4453      	add	r3, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
    8384:	07ea      	lsls	r2, r5, #31
    8386:	d51e      	bpl.n	83c6 <put_fat+0xa6>
    8388:	7819      	ldrb	r1, [r3, #0]
    838a:	220f      	movs	r2, #15
    838c:	400a      	ands	r2, r1
    838e:	0139      	lsls	r1, r7, #4
    8390:	20ff      	movs	r0, #255	; 0xff
    8392:	0100      	lsls	r0, r0, #4
    8394:	4001      	ands	r1, r0
    8396:	430a      	orrs	r2, r1
    8398:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
    839a:	2301      	movs	r3, #1
    839c:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    839e:	464b      	mov	r3, r9
    83a0:	0a59      	lsrs	r1, r3, #9
    83a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    83a4:	469c      	mov	ip, r3
    83a6:	4461      	add	r1, ip
    83a8:	0030      	movs	r0, r6
    83aa:	f7ff fe81 	bl	80b0 <move_window>
			if (res != FR_OK) break;
    83ae:	2800      	cmp	r0, #0
    83b0:	d154      	bne.n	845c <put_fat+0x13c>
			p = fs->win + bc % SS(fs);
    83b2:	464b      	mov	r3, r9
    83b4:	05db      	lsls	r3, r3, #23
    83b6:	0ddb      	lsrs	r3, r3, #23
    83b8:	4453      	add	r3, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
    83ba:	093f      	lsrs	r7, r7, #4
    83bc:	b2ff      	uxtb	r7, r7
    83be:	701f      	strb	r7, [r3, #0]
			fs->wflag = 1;
    83c0:	2301      	movs	r3, #1
    83c2:	70f3      	strb	r3, [r6, #3]
			break;
    83c4:	e7ba      	b.n	833c <put_fat+0x1c>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
    83c6:	701f      	strb	r7, [r3, #0]
			fs->wflag = 1;
    83c8:	2301      	movs	r3, #1
    83ca:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    83cc:	464b      	mov	r3, r9
    83ce:	0a59      	lsrs	r1, r3, #9
    83d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
    83d2:	469c      	mov	ip, r3
    83d4:	4461      	add	r1, ip
    83d6:	0030      	movs	r0, r6
    83d8:	f7ff fe6a 	bl	80b0 <move_window>
			if (res != FR_OK) break;
    83dc:	2800      	cmp	r0, #0
    83de:	d13f      	bne.n	8460 <put_fat+0x140>
			p = fs->win + bc % SS(fs);
    83e0:	464b      	mov	r3, r9
    83e2:	05db      	lsls	r3, r3, #23
    83e4:	0ddb      	lsrs	r3, r3, #23
    83e6:	4453      	add	r3, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
    83e8:	781a      	ldrb	r2, [r3, #0]
    83ea:	210f      	movs	r1, #15
    83ec:	438a      	bics	r2, r1
    83ee:	053f      	lsls	r7, r7, #20
    83f0:	0f3f      	lsrs	r7, r7, #28
    83f2:	4317      	orrs	r7, r2
    83f4:	e7e3      	b.n	83be <put_fat+0x9e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    83f6:	0a09      	lsrs	r1, r1, #8
    83f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    83fa:	469c      	mov	ip, r3
    83fc:	4461      	add	r1, ip
    83fe:	f7ff fe57 	bl	80b0 <move_window>
    8402:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
    8404:	d19a      	bne.n	833c <put_fat+0x1c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
    8406:	0033      	movs	r3, r6
    8408:	3334      	adds	r3, #52	; 0x34
    840a:	006d      	lsls	r5, r5, #1
    840c:	22ff      	movs	r2, #255	; 0xff
    840e:	0052      	lsls	r2, r2, #1
    8410:	4015      	ands	r5, r2
    8412:	195d      	adds	r5, r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
    8414:	702f      	strb	r7, [r5, #0]
    8416:	0a3f      	lsrs	r7, r7, #8
	*ptr++ = (BYTE)val;
    8418:	706f      	strb	r7, [r5, #1]
			fs->wflag = 1;
    841a:	2301      	movs	r3, #1
    841c:	70f3      	strb	r3, [r6, #3]
			break;
    841e:	e78d      	b.n	833c <put_fat+0x1c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    8420:	09c9      	lsrs	r1, r1, #7
    8422:	6a43      	ldr	r3, [r0, #36]	; 0x24
    8424:	469c      	mov	ip, r3
    8426:	4461      	add	r1, ip
    8428:	f7ff fe42 	bl	80b0 <move_window>
    842c:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
    842e:	d000      	beq.n	8432 <put_fat+0x112>
    8430:	e784      	b.n	833c <put_fat+0x1c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    8432:	013f      	lsls	r7, r7, #4
    8434:	093f      	lsrs	r7, r7, #4
    8436:	0033      	movs	r3, r6
    8438:	3334      	adds	r3, #52	; 0x34
    843a:	00ad      	lsls	r5, r5, #2
    843c:	22fe      	movs	r2, #254	; 0xfe
    843e:	0052      	lsls	r2, r2, #1
    8440:	4015      	ands	r5, r2
    8442:	195d      	adds	r5, r3, r5
    8444:	0028      	movs	r0, r5
    8446:	f7ff fd63 	bl	7f10 <ld_dword>
    844a:	0f01      	lsrs	r1, r0, #28
    844c:	0709      	lsls	r1, r1, #28
    844e:	4339      	orrs	r1, r7
			st_dword(fs->win + clst * 4 % SS(fs), val);
    8450:	0028      	movs	r0, r5
    8452:	f7ff fd6d 	bl	7f30 <st_dword>
			fs->wflag = 1;
    8456:	2301      	movs	r3, #1
    8458:	70f3      	strb	r3, [r6, #3]
			break;
    845a:	e76f      	b.n	833c <put_fat+0x1c>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    845c:	0004      	movs	r4, r0
    845e:	e76d      	b.n	833c <put_fat+0x1c>
    8460:	0004      	movs	r4, r0
	return res;
    8462:	e76b      	b.n	833c <put_fat+0x1c>
	...

00008470 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
    8470:	768a      	strb	r2, [r1, #26]
    8472:	0a13      	lsrs	r3, r2, #8
	*ptr++ = (BYTE)val;
    8474:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
    8476:	7803      	ldrb	r3, [r0, #0]
    8478:	2b03      	cmp	r3, #3
    847a:	d000      	beq.n	847e <st_clust+0xe>
}
    847c:	4770      	bx	lr
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    847e:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
    8480:	750a      	strb	r2, [r1, #20]
    8482:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
    8484:	754a      	strb	r2, [r1, #21]
}
    8486:	e7f9      	b.n	847c <st_clust+0xc>
	...

00008490 <get_fat>:
{
    8490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8492:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    8494:	2901      	cmp	r1, #1
    8496:	d969      	bls.n	856c <get_fat+0xdc>
	FATFS *fs = obj->fs;
    8498:	6805      	ldr	r5, [r0, #0]
		val = 1;	/* Internal error */
    849a:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    849c:	69ab      	ldr	r3, [r5, #24]
    849e:	4299      	cmp	r1, r3
    84a0:	d265      	bcs.n	856e <get_fat+0xde>
		switch (fs->fs_type) {
    84a2:	782b      	ldrb	r3, [r5, #0]
    84a4:	2b02      	cmp	r3, #2
    84a6:	d032      	beq.n	850e <get_fat+0x7e>
    84a8:	2b03      	cmp	r3, #3
    84aa:	d047      	beq.n	853c <get_fat+0xac>
			val = 1;	/* Internal error */
    84ac:	2001      	movs	r0, #1
		switch (fs->fs_type) {
    84ae:	2b01      	cmp	r3, #1
    84b0:	d15d      	bne.n	856e <get_fat+0xde>
			bc = (UINT)clst; bc += bc / 2;
    84b2:	084e      	lsrs	r6, r1, #1
    84b4:	1876      	adds	r6, r6, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    84b6:	0a71      	lsrs	r1, r6, #9
    84b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    84ba:	469c      	mov	ip, r3
    84bc:	4461      	add	r1, ip
    84be:	0028      	movs	r0, r5
    84c0:	f7ff fdf6 	bl	80b0 <move_window>
    84c4:	2800      	cmp	r0, #0
    84c6:	d002      	beq.n	84ce <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    84c8:	2001      	movs	r0, #1
    84ca:	4240      	negs	r0, r0
    84cc:	e04f      	b.n	856e <get_fat+0xde>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
    84ce:	1c77      	adds	r7, r6, #1
    84d0:	05f3      	lsls	r3, r6, #23
    84d2:	0ddb      	lsrs	r3, r3, #23
    84d4:	18eb      	adds	r3, r5, r3
    84d6:	3334      	adds	r3, #52	; 0x34
    84d8:	781e      	ldrb	r6, [r3, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    84da:	0a79      	lsrs	r1, r7, #9
    84dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    84de:	469c      	mov	ip, r3
    84e0:	4461      	add	r1, ip
    84e2:	0028      	movs	r0, r5
    84e4:	f7ff fde4 	bl	80b0 <move_window>
    84e8:	2800      	cmp	r0, #0
    84ea:	d002      	beq.n	84f2 <get_fat+0x62>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    84ec:	2001      	movs	r0, #1
    84ee:	4240      	negs	r0, r0
    84f0:	e03d      	b.n	856e <get_fat+0xde>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
    84f2:	05ff      	lsls	r7, r7, #23
    84f4:	0dff      	lsrs	r7, r7, #23
    84f6:	19ed      	adds	r5, r5, r7
    84f8:	3534      	adds	r5, #52	; 0x34
    84fa:	7828      	ldrb	r0, [r5, #0]
    84fc:	0200      	lsls	r0, r0, #8
    84fe:	4330      	orrs	r0, r6
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
    8500:	07e3      	lsls	r3, r4, #31
    8502:	d501      	bpl.n	8508 <get_fat+0x78>
    8504:	0900      	lsrs	r0, r0, #4
    8506:	e032      	b.n	856e <get_fat+0xde>
    8508:	0500      	lsls	r0, r0, #20
    850a:	0d00      	lsrs	r0, r0, #20
    850c:	e02f      	b.n	856e <get_fat+0xde>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    850e:	0a09      	lsrs	r1, r1, #8
    8510:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8512:	469c      	mov	ip, r3
    8514:	4461      	add	r1, ip
    8516:	0028      	movs	r0, r5
    8518:	f7ff fdca 	bl	80b0 <move_window>
    851c:	2800      	cmp	r0, #0
    851e:	d002      	beq.n	8526 <get_fat+0x96>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    8520:	2001      	movs	r0, #1
    8522:	4240      	negs	r0, r0
    8524:	e023      	b.n	856e <get_fat+0xde>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    8526:	3534      	adds	r5, #52	; 0x34
    8528:	0064      	lsls	r4, r4, #1
    852a:	23ff      	movs	r3, #255	; 0xff
    852c:	005b      	lsls	r3, r3, #1
    852e:	401c      	ands	r4, r3
    8530:	192d      	adds	r5, r5, r4
	rv = rv << 8 | ptr[0];
    8532:	786b      	ldrb	r3, [r5, #1]
    8534:	021b      	lsls	r3, r3, #8
    8536:	7828      	ldrb	r0, [r5, #0]
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    8538:	4318      	orrs	r0, r3
			break;
    853a:	e018      	b.n	856e <get_fat+0xde>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    853c:	09c9      	lsrs	r1, r1, #7
    853e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8540:	469c      	mov	ip, r3
    8542:	4461      	add	r1, ip
    8544:	0028      	movs	r0, r5
    8546:	f7ff fdb3 	bl	80b0 <move_window>
    854a:	2800      	cmp	r0, #0
    854c:	d002      	beq.n	8554 <get_fat+0xc4>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    854e:	2001      	movs	r0, #1
    8550:	4240      	negs	r0, r0
	return val;
    8552:	e00c      	b.n	856e <get_fat+0xde>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    8554:	0028      	movs	r0, r5
    8556:	3034      	adds	r0, #52	; 0x34
    8558:	00a4      	lsls	r4, r4, #2
    855a:	23fe      	movs	r3, #254	; 0xfe
    855c:	005b      	lsls	r3, r3, #1
    855e:	401c      	ands	r4, r3
    8560:	1900      	adds	r0, r0, r4
    8562:	f7ff fcd5 	bl	7f10 <ld_dword>
    8566:	0100      	lsls	r0, r0, #4
    8568:	0900      	lsrs	r0, r0, #4
			break;
    856a:	e000      	b.n	856e <get_fat+0xde>
		val = 1;	/* Internal error */
    856c:	2001      	movs	r0, #1
}
    856e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008570 <dir_sdi>:
{
    8570:	b5f0      	push	{r4, r5, r6, r7, lr}
    8572:	46c6      	mov	lr, r8
    8574:	b500      	push	{lr}
    8576:	0006      	movs	r6, r0
    8578:	000c      	movs	r4, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    857a:	4b28      	ldr	r3, [pc, #160]	; (861c <dir_sdi+0xac>)
		return FR_INT_ERR;
    857c:	2002      	movs	r0, #2
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    857e:	4299      	cmp	r1, r3
    8580:	d902      	bls.n	8588 <dir_sdi+0x18>
}
    8582:	bc04      	pop	{r2}
    8584:	4690      	mov	r8, r2
    8586:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    8588:	06cb      	lsls	r3, r1, #27
    858a:	d1fa      	bne.n	8582 <dir_sdi+0x12>
	FATFS *fs = dp->obj.fs;
    858c:	6833      	ldr	r3, [r6, #0]
    858e:	4698      	mov	r8, r3
	dp->dptr = ofs;				/* Set current offset */
    8590:	6131      	str	r1, [r6, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
    8592:	68b5      	ldr	r5, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
    8594:	2d00      	cmp	r5, #0
    8596:	d120      	bne.n	85da <dir_sdi+0x6a>
    8598:	781b      	ldrb	r3, [r3, #0]
    859a:	2b02      	cmp	r3, #2
    859c:	d903      	bls.n	85a6 <dir_sdi+0x36>
		clst = fs->dirbase;
    859e:	4643      	mov	r3, r8
    85a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
    85a2:	2b00      	cmp	r3, #0
    85a4:	d118      	bne.n	85d8 <dir_sdi+0x68>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
    85a6:	0963      	lsrs	r3, r4, #5
    85a8:	4642      	mov	r2, r8
    85aa:	8912      	ldrh	r2, [r2, #8]
    85ac:	2002      	movs	r0, #2
    85ae:	4293      	cmp	r3, r2
    85b0:	d2e7      	bcs.n	8582 <dir_sdi+0x12>
		dp->sect = fs->dirbase;
    85b2:	4643      	mov	r3, r8
    85b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    85b6:	61b3      	str	r3, [r6, #24]
	dp->clust = clst;					/* Current cluster# */
    85b8:	6175      	str	r5, [r6, #20]
	if (dp->sect == 0) return FR_INT_ERR;
    85ba:	69b3      	ldr	r3, [r6, #24]
    85bc:	2002      	movs	r0, #2
    85be:	2b00      	cmp	r3, #0
    85c0:	d0df      	beq.n	8582 <dir_sdi+0x12>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
    85c2:	0a62      	lsrs	r2, r4, #9
    85c4:	18d3      	adds	r3, r2, r3
    85c6:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
    85c8:	4643      	mov	r3, r8
    85ca:	3334      	adds	r3, #52	; 0x34
    85cc:	05e4      	lsls	r4, r4, #23
    85ce:	0de4      	lsrs	r4, r4, #23
    85d0:	191c      	adds	r4, r3, r4
    85d2:	61f4      	str	r4, [r6, #28]
	return FR_OK;
    85d4:	2000      	movs	r0, #0
    85d6:	e7d4      	b.n	8582 <dir_sdi+0x12>
		clst = fs->dirbase;
    85d8:	001d      	movs	r5, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
    85da:	4643      	mov	r3, r8
    85dc:	895f      	ldrh	r7, [r3, #10]
    85de:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
    85e0:	42bc      	cmp	r4, r7
    85e2:	d30f      	bcc.n	8604 <dir_sdi+0x94>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
    85e4:	0029      	movs	r1, r5
    85e6:	0030      	movs	r0, r6
    85e8:	f7ff ff52 	bl	8490 <get_fat>
    85ec:	0005      	movs	r5, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    85ee:	1c43      	adds	r3, r0, #1
    85f0:	d00e      	beq.n	8610 <dir_sdi+0xa0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    85f2:	2801      	cmp	r0, #1
    85f4:	d90e      	bls.n	8614 <dir_sdi+0xa4>
    85f6:	4643      	mov	r3, r8
    85f8:	699b      	ldr	r3, [r3, #24]
    85fa:	4298      	cmp	r0, r3
    85fc:	d20c      	bcs.n	8618 <dir_sdi+0xa8>
			ofs -= csz;
    85fe:	1be4      	subs	r4, r4, r7
		while (ofs >= csz) {				/* Follow cluster chain */
    8600:	42a7      	cmp	r7, r4
    8602:	d9ef      	bls.n	85e4 <dir_sdi+0x74>
		dp->sect = clst2sect(fs, clst);
    8604:	0029      	movs	r1, r5
    8606:	4640      	mov	r0, r8
    8608:	f7ff fcba 	bl	7f80 <clst2sect>
    860c:	61b0      	str	r0, [r6, #24]
    860e:	e7d3      	b.n	85b8 <dir_sdi+0x48>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    8610:	2001      	movs	r0, #1
    8612:	e7b6      	b.n	8582 <dir_sdi+0x12>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    8614:	2002      	movs	r0, #2
    8616:	e7b4      	b.n	8582 <dir_sdi+0x12>
    8618:	2002      	movs	r0, #2
    861a:	e7b2      	b.n	8582 <dir_sdi+0x12>
    861c:	001fffff 	.word	0x001fffff

00008620 <create_chain>:
{
    8620:	b5f0      	push	{r4, r5, r6, r7, lr}
    8622:	46c6      	mov	lr, r8
    8624:	b500      	push	{lr}
    8626:	0006      	movs	r6, r0
    8628:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
    862a:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
    862c:	2900      	cmp	r1, #0
    862e:	d109      	bne.n	8644 <create_chain+0x24>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
    8630:	693d      	ldr	r5, [r7, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    8632:	2d00      	cmp	r5, #0
    8634:	d100      	bne.n	8638 <create_chain+0x18>
    8636:	e072      	b.n	871e <create_chain+0xfe>
    8638:	69bb      	ldr	r3, [r7, #24]
    863a:	429d      	cmp	r5, r3
    863c:	d200      	bcs.n	8640 <create_chain+0x20>
    863e:	e06f      	b.n	8720 <create_chain+0x100>
    8640:	2501      	movs	r5, #1
    8642:	e06d      	b.n	8720 <create_chain+0x100>
		cs = get_fat(obj, clst);			/* Check the cluster status */
    8644:	f7ff ff24 	bl	8490 <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
    8648:	2801      	cmp	r0, #1
    864a:	d960      	bls.n	870e <create_chain+0xee>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
    864c:	1c43      	adds	r3, r0, #1
    864e:	d037      	beq.n	86c0 <create_chain+0xa0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    8650:	69bb      	ldr	r3, [r7, #24]
    8652:	4298      	cmp	r0, r3
    8654:	d334      	bcc.n	86c0 <create_chain+0xa0>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
    8656:	6978      	ldr	r0, [r7, #20]
    8658:	2800      	cmp	r0, #0
    865a:	d031      	beq.n	86c0 <create_chain+0xa0>
			ncl = scl + 1;						/* Test if next cluster is free */
    865c:	4643      	mov	r3, r8
    865e:	1c5c      	adds	r4, r3, #1
			if (ncl >= fs->n_fatent) ncl = 2;
    8660:	69bb      	ldr	r3, [r7, #24]
    8662:	429c      	cmp	r4, r3
    8664:	d300      	bcc.n	8668 <create_chain+0x48>
    8666:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
    8668:	0021      	movs	r1, r4
    866a:	0030      	movs	r0, r6
    866c:	f7ff ff10 	bl	8490 <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    8670:	2801      	cmp	r0, #1
    8672:	d025      	beq.n	86c0 <create_chain+0xa0>
    8674:	1c43      	adds	r3, r0, #1
    8676:	d023      	beq.n	86c0 <create_chain+0xa0>
			if (cs != 0) {						/* Not free? */
    8678:	2800      	cmp	r0, #0
    867a:	d007      	beq.n	868c <create_chain+0x6c>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
    867c:	693d      	ldr	r5, [r7, #16]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
    867e:	2d01      	cmp	r5, #1
    8680:	d94b      	bls.n	871a <create_chain+0xfa>
    8682:	69bb      	ldr	r3, [r7, #24]
    8684:	429d      	cmp	r5, r3
    8686:	d34e      	bcc.n	8726 <create_chain+0x106>
    8688:	4645      	mov	r5, r8
    868a:	e04c      	b.n	8726 <create_chain+0x106>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
    868c:	2c00      	cmp	r4, #0
    868e:	d01a      	beq.n	86c6 <create_chain+0xa6>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
    8690:	2201      	movs	r2, #1
    8692:	4252      	negs	r2, r2
    8694:	0021      	movs	r1, r4
    8696:	0038      	movs	r0, r7
    8698:	f7ff fe42 	bl	8320 <put_fat>
		if (res == FR_OK && clst != 0) {
    869c:	2800      	cmp	r0, #0
    869e:	d12f      	bne.n	8700 <create_chain+0xe0>
    86a0:	4643      	mov	r3, r8
    86a2:	2b00      	cmp	r3, #0
    86a4:	d125      	bne.n	86f2 <create_chain+0xd2>
		fs->last_clst = ncl;
    86a6:	613c      	str	r4, [r7, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
    86a8:	697a      	ldr	r2, [r7, #20]
    86aa:	69bb      	ldr	r3, [r7, #24]
    86ac:	3b02      	subs	r3, #2
    86ae:	429a      	cmp	r2, r3
    86b0:	d801      	bhi.n	86b6 <create_chain+0x96>
    86b2:	3a01      	subs	r2, #1
    86b4:	617a      	str	r2, [r7, #20]
		fs->fsi_flag |= 1;
    86b6:	793b      	ldrb	r3, [r7, #4]
    86b8:	2201      	movs	r2, #1
    86ba:	4313      	orrs	r3, r2
    86bc:	713b      	strb	r3, [r7, #4]
    86be:	0020      	movs	r0, r4
}
    86c0:	bc04      	pop	{r2}
    86c2:	4690      	mov	r8, r2
    86c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86c6:	4645      	mov	r5, r8
    86c8:	e02d      	b.n	8726 <create_chain+0x106>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
    86ca:	0021      	movs	r1, r4
    86cc:	0030      	movs	r0, r6
    86ce:	f7ff fedf 	bl	8490 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
    86d2:	2800      	cmp	r0, #0
    86d4:	d0dc      	beq.n	8690 <create_chain+0x70>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    86d6:	2801      	cmp	r0, #1
    86d8:	d0f2      	beq.n	86c0 <create_chain+0xa0>
    86da:	1c43      	adds	r3, r0, #1
    86dc:	d0f0      	beq.n	86c0 <create_chain+0xa0>
				if (ncl == scl) return 0;		/* No free cluster found? */
    86de:	42ac      	cmp	r4, r5
    86e0:	d019      	beq.n	8716 <create_chain+0xf6>
				ncl++;							/* Next cluster */
    86e2:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
    86e4:	69bb      	ldr	r3, [r7, #24]
    86e6:	429c      	cmp	r4, r3
    86e8:	d3ef      	bcc.n	86ca <create_chain+0xaa>
					if (ncl > scl) return 0;	/* No free cluster found? */
    86ea:	2d01      	cmp	r5, #1
    86ec:	d911      	bls.n	8712 <create_chain+0xf2>
					ncl = 2;
    86ee:	2402      	movs	r4, #2
    86f0:	e7eb      	b.n	86ca <create_chain+0xaa>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
    86f2:	0022      	movs	r2, r4
    86f4:	4641      	mov	r1, r8
    86f6:	0038      	movs	r0, r7
    86f8:	f7ff fe12 	bl	8320 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    86fc:	2800      	cmp	r0, #0
    86fe:	d0d2      	beq.n	86a6 <create_chain+0x86>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
    8700:	3801      	subs	r0, #1
    8702:	4242      	negs	r2, r0
    8704:	4142      	adcs	r2, r0
    8706:	4250      	negs	r0, r2
    8708:	2301      	movs	r3, #1
    870a:	4318      	orrs	r0, r3
    870c:	e7d8      	b.n	86c0 <create_chain+0xa0>
		if (cs < 2) return 1;				/* Test for insanity */
    870e:	2001      	movs	r0, #1
    8710:	e7d6      	b.n	86c0 <create_chain+0xa0>
					if (ncl > scl) return 0;	/* No free cluster found? */
    8712:	2000      	movs	r0, #0
    8714:	e7d4      	b.n	86c0 <create_chain+0xa0>
				if (ncl == scl) return 0;		/* No free cluster found? */
    8716:	2000      	movs	r0, #0
    8718:	e7d2      	b.n	86c0 <create_chain+0xa0>
    871a:	4645      	mov	r5, r8
    871c:	e003      	b.n	8726 <create_chain+0x106>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    871e:	2501      	movs	r5, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
    8720:	6978      	ldr	r0, [r7, #20]
    8722:	2800      	cmp	r0, #0
    8724:	d0cc      	beq.n	86c0 <create_chain+0xa0>
    8726:	002c      	movs	r4, r5
    8728:	e7db      	b.n	86e2 <create_chain+0xc2>
    872a:	46c0      	nop			; (mov r8, r8)
    872c:	0000      	movs	r0, r0
	...

00008730 <remove_chain>:
{
    8730:	b5f0      	push	{r4, r5, r6, r7, lr}
    8732:	46c6      	mov	lr, r8
    8734:	b500      	push	{lr}
    8736:	0004      	movs	r4, r0
    8738:	000d      	movs	r5, r1
    873a:	0011      	movs	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    873c:	2002      	movs	r0, #2
    873e:	2d01      	cmp	r5, #1
    8740:	d903      	bls.n	874a <remove_chain+0x1a>
	FATFS *fs = obj->fs;
    8742:	6827      	ldr	r7, [r4, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    8744:	69bb      	ldr	r3, [r7, #24]
    8746:	429d      	cmp	r5, r3
    8748:	d302      	bcc.n	8750 <remove_chain+0x20>
}
    874a:	bc04      	pop	{r2}
    874c:	4690      	mov	r8, r2
    874e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    8750:	2a00      	cmp	r2, #0
    8752:	d102      	bne.n	875a <remove_chain+0x2a>
			fs->fsi_flag |= 1;
    8754:	2301      	movs	r3, #1
    8756:	4698      	mov	r8, r3
    8758:	e00a      	b.n	8770 <remove_chain+0x40>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
    875a:	2201      	movs	r2, #1
    875c:	4252      	negs	r2, r2
    875e:	0038      	movs	r0, r7
    8760:	f7ff fdde 	bl	8320 <put_fat>
		if (res != FR_OK) return res;
    8764:	2800      	cmp	r0, #0
    8766:	d0f5      	beq.n	8754 <remove_chain+0x24>
    8768:	e7ef      	b.n	874a <remove_chain+0x1a>
		clst = nxt;					/* Next cluster */
    876a:	0035      	movs	r5, r6
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    876c:	4296      	cmp	r6, r2
    876e:	d2ec      	bcs.n	874a <remove_chain+0x1a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
    8770:	0029      	movs	r1, r5
    8772:	0020      	movs	r0, r4
    8774:	f7ff fe8c 	bl	8490 <get_fat>
    8778:	1e06      	subs	r6, r0, #0
		if (nxt == 0) break;				/* Empty cluster? */
    877a:	d016      	beq.n	87aa <remove_chain+0x7a>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    877c:	2801      	cmp	r0, #1
    877e:	d016      	beq.n	87ae <remove_chain+0x7e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    8780:	1c43      	adds	r3, r0, #1
    8782:	d016      	beq.n	87b2 <remove_chain+0x82>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    8784:	2200      	movs	r2, #0
    8786:	0029      	movs	r1, r5
    8788:	0038      	movs	r0, r7
    878a:	f7ff fdc9 	bl	8320 <put_fat>
			if (res != FR_OK) return res;
    878e:	2800      	cmp	r0, #0
    8790:	d1db      	bne.n	874a <remove_chain+0x1a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    8792:	697b      	ldr	r3, [r7, #20]
    8794:	69ba      	ldr	r2, [r7, #24]
    8796:	1e91      	subs	r1, r2, #2
    8798:	428b      	cmp	r3, r1
    879a:	d2e6      	bcs.n	876a <remove_chain+0x3a>
			fs->free_clst++;
    879c:	3301      	adds	r3, #1
    879e:	617b      	str	r3, [r7, #20]
			fs->fsi_flag |= 1;
    87a0:	793b      	ldrb	r3, [r7, #4]
    87a2:	4641      	mov	r1, r8
    87a4:	430b      	orrs	r3, r1
    87a6:	713b      	strb	r3, [r7, #4]
    87a8:	e7df      	b.n	876a <remove_chain+0x3a>
	return FR_OK;
    87aa:	2000      	movs	r0, #0
    87ac:	e7cd      	b.n	874a <remove_chain+0x1a>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    87ae:	2002      	movs	r0, #2
    87b0:	e7cb      	b.n	874a <remove_chain+0x1a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    87b2:	2001      	movs	r0, #1
    87b4:	e7c9      	b.n	874a <remove_chain+0x1a>
    87b6:	46c0      	nop			; (mov r8, r8)
	...

000087c0 <dir_next>:
{
    87c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    87c2:	46ce      	mov	lr, r9
    87c4:	b500      	push	{lr}
    87c6:	b082      	sub	sp, #8
    87c8:	0004      	movs	r4, r0
    87ca:	9101      	str	r1, [sp, #4]
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
    87cc:	6983      	ldr	r3, [r0, #24]
    87ce:	2004      	movs	r0, #4
    87d0:	2b00      	cmp	r3, #0
    87d2:	d103      	bne.n	87dc <dir_next+0x1c>
}
    87d4:	b002      	add	sp, #8
    87d6:	bc04      	pop	{r2}
    87d8:	4691      	mov	r9, r2
    87da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
    87dc:	6926      	ldr	r6, [r4, #16]
    87de:	3620      	adds	r6, #32
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
    87e0:	4a28      	ldr	r2, [pc, #160]	; (8884 <dir_next+0xc4>)
    87e2:	4296      	cmp	r6, r2
    87e4:	d8f6      	bhi.n	87d4 <dir_next+0x14>
	FATFS *fs = dp->obj.fs;
    87e6:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    87e8:	05f5      	lsls	r5, r6, #23
    87ea:	0ded      	lsrs	r5, r5, #23
    87ec:	d110      	bne.n	8810 <dir_next+0x50>
		dp->sect++;				/* Next sector */
    87ee:	3301      	adds	r3, #1
    87f0:	61a3      	str	r3, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
    87f2:	6961      	ldr	r1, [r4, #20]
    87f4:	2900      	cmp	r1, #0
    87f6:	d106      	bne.n	8806 <dir_next+0x46>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    87f8:	0973      	lsrs	r3, r6, #5
    87fa:	893a      	ldrh	r2, [r7, #8]
    87fc:	4293      	cmp	r3, r2
    87fe:	d307      	bcc.n	8810 <dir_next+0x50>
				dp->sect = 0; return FR_NO_FILE;
    8800:	2300      	movs	r3, #0
    8802:	61a3      	str	r3, [r4, #24]
    8804:	e7e6      	b.n	87d4 <dir_next+0x14>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    8806:	897b      	ldrh	r3, [r7, #10]
    8808:	3b01      	subs	r3, #1
    880a:	0a72      	lsrs	r2, r6, #9
    880c:	421a      	tst	r2, r3
    880e:	d005      	beq.n	881c <dir_next+0x5c>
	dp->dptr = ofs;						/* Current entry */
    8810:	6126      	str	r6, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    8812:	3734      	adds	r7, #52	; 0x34
    8814:	197f      	adds	r7, r7, r5
    8816:	61e7      	str	r7, [r4, #28]
	return FR_OK;
    8818:	2000      	movs	r0, #0
    881a:	e7db      	b.n	87d4 <dir_next+0x14>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    881c:	0020      	movs	r0, r4
    881e:	f7ff fe37 	bl	8490 <get_fat>
    8822:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    8824:	2002      	movs	r0, #2
    8826:	464b      	mov	r3, r9
    8828:	2b01      	cmp	r3, #1
    882a:	d9d3      	bls.n	87d4 <dir_next+0x14>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    882c:	3301      	adds	r3, #1
    882e:	d027      	beq.n	8880 <dir_next+0xc0>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
    8830:	69bb      	ldr	r3, [r7, #24]
    8832:	4599      	cmp	r9, r3
    8834:	d31c      	bcc.n	8870 <dir_next+0xb0>
					if (!stretch) {								/* If no stretch, report EOT */
    8836:	9b01      	ldr	r3, [sp, #4]
    8838:	2b00      	cmp	r3, #0
    883a:	d102      	bne.n	8842 <dir_next+0x82>
						dp->sect = 0; return FR_NO_FILE;
    883c:	61a3      	str	r3, [r4, #24]
    883e:	3002      	adds	r0, #2
    8840:	e7c8      	b.n	87d4 <dir_next+0x14>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    8842:	6961      	ldr	r1, [r4, #20]
    8844:	0020      	movs	r0, r4
    8846:	f7ff feeb 	bl	8620 <create_chain>
    884a:	4681      	mov	r9, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    884c:	2007      	movs	r0, #7
    884e:	464b      	mov	r3, r9
    8850:	2b00      	cmp	r3, #0
    8852:	d0bf      	beq.n	87d4 <dir_next+0x14>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    8854:	3805      	subs	r0, #5
    8856:	2b01      	cmp	r3, #1
    8858:	d0bc      	beq.n	87d4 <dir_next+0x14>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    885a:	3801      	subs	r0, #1
    885c:	3301      	adds	r3, #1
    885e:	d0b9      	beq.n	87d4 <dir_next+0x14>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
    8860:	4649      	mov	r1, r9
    8862:	0038      	movs	r0, r7
    8864:	f7ff fc44 	bl	80f0 <dir_clear>
    8868:	0003      	movs	r3, r0
    886a:	2001      	movs	r0, #1
    886c:	2b00      	cmp	r3, #0
    886e:	d1b1      	bne.n	87d4 <dir_next+0x14>
				dp->clust = clst;		/* Initialize data for new cluster */
    8870:	464b      	mov	r3, r9
    8872:	6163      	str	r3, [r4, #20]
				dp->sect = clst2sect(fs, clst);
    8874:	4649      	mov	r1, r9
    8876:	0038      	movs	r0, r7
    8878:	f7ff fb82 	bl	7f80 <clst2sect>
    887c:	61a0      	str	r0, [r4, #24]
    887e:	e7c7      	b.n	8810 <dir_next+0x50>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    8880:	2001      	movs	r0, #1
    8882:	e7a7      	b.n	87d4 <dir_next+0x14>
    8884:	001fffff 	.word	0x001fffff
	...

00008890 <dir_find>:
{
    8890:	b5f0      	push	{r4, r5, r6, r7, lr}
    8892:	46de      	mov	lr, fp
    8894:	4657      	mov	r7, sl
    8896:	464e      	mov	r6, r9
    8898:	4645      	mov	r5, r8
    889a:	b5e0      	push	{r5, r6, r7, lr}
    889c:	b085      	sub	sp, #20
    889e:	0004      	movs	r4, r0
	FATFS *fs = dp->obj.fs;
    88a0:	6803      	ldr	r3, [r0, #0]
    88a2:	9300      	str	r3, [sp, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    88a4:	2100      	movs	r1, #0
    88a6:	f7ff fe63 	bl	8570 <dir_sdi>
    88aa:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    88ac:	d000      	beq.n	88b0 <dir_find+0x20>
    88ae:	e0b0      	b.n	8a12 <dir_find+0x182>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
    88b0:	2301      	movs	r3, #1
    88b2:	425b      	negs	r3, r3
    88b4:	62e3      	str	r3, [r4, #44]	; 0x2c
    88b6:	3301      	adds	r3, #1
    88b8:	33ff      	adds	r3, #255	; 0xff
    88ba:	469a      	mov	sl, r3
    88bc:	4699      	mov	r9, r3
			if (uc != 0xFFFF) return 0;		/* Check filler */
    88be:	4b5b      	ldr	r3, [pc, #364]	; (8a2c <dir_find+0x19c>)
    88c0:	4698      	mov	r8, r3
    88c2:	e00c      	b.n	88de <dir_find+0x4e>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
    88c4:	2301      	movs	r3, #1
    88c6:	425b      	negs	r3, r3
    88c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    88ca:	3301      	adds	r3, #1
    88cc:	33ff      	adds	r3, #255	; 0xff
    88ce:	4699      	mov	r9, r3
		res = dir_next(dp, 0);	/* Next entry */
    88d0:	2100      	movs	r1, #0
    88d2:	0020      	movs	r0, r4
    88d4:	f7ff ff74 	bl	87c0 <dir_next>
    88d8:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    88da:	d000      	beq.n	88de <dir_find+0x4e>
    88dc:	e099      	b.n	8a12 <dir_find+0x182>
		res = move_window(fs, dp->sect);
    88de:	69a1      	ldr	r1, [r4, #24]
    88e0:	9800      	ldr	r0, [sp, #0]
    88e2:	f7ff fbe5 	bl	80b0 <move_window>
    88e6:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    88e8:	d000      	beq.n	88ec <dir_find+0x5c>
    88ea:	e092      	b.n	8a12 <dir_find+0x182>
		c = dp->dir[DIR_Name];
    88ec:	69e5      	ldr	r5, [r4, #28]
    88ee:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    88f0:	2e00      	cmp	r6, #0
    88f2:	d100      	bne.n	88f6 <dir_find+0x66>
    88f4:	e08c      	b.n	8a10 <dir_find+0x180>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
    88f6:	7aea      	ldrb	r2, [r5, #11]
    88f8:	233f      	movs	r3, #63	; 0x3f
    88fa:	4013      	ands	r3, r2
    88fc:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    88fe:	2ee5      	cmp	r6, #229	; 0xe5
    8900:	d0e0      	beq.n	88c4 <dir_find+0x34>
    8902:	0712      	lsls	r2, r2, #28
    8904:	d528      	bpl.n	8958 <dir_find+0xc8>
    8906:	2b0f      	cmp	r3, #15
    8908:	d1dc      	bne.n	88c4 <dir_find+0x34>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
    890a:	232b      	movs	r3, #43	; 0x2b
    890c:	5ce3      	ldrb	r3, [r4, r3]
    890e:	065b      	lsls	r3, r3, #25
    8910:	d4de      	bmi.n	88d0 <dir_find+0x40>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
    8912:	0673      	lsls	r3, r6, #25
    8914:	d53d      	bpl.n	8992 <dir_find+0x102>
						sum = dp->dir[LDIR_Chksum];
    8916:	7b6b      	ldrb	r3, [r5, #13]
    8918:	469a      	mov	sl, r3
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
    891a:	2340      	movs	r3, #64	; 0x40
    891c:	439e      	bics	r6, r3
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
    891e:	6923      	ldr	r3, [r4, #16]
    8920:	62e3      	str	r3, [r4, #44]	; 0x2c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    8922:	7b6f      	ldrb	r7, [r5, #13]
    8924:	23ff      	movs	r3, #255	; 0xff
    8926:	4699      	mov	r9, r3
    8928:	4557      	cmp	r7, sl
    892a:	d1d1      	bne.n	88d0 <dir_find+0x40>
	rv = rv << 8 | ptr[0];
    892c:	7eea      	ldrb	r2, [r5, #27]
    892e:	0212      	lsls	r2, r2, #8
    8930:	7eab      	ldrb	r3, [r5, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
    8932:	4313      	orrs	r3, r2
    8934:	d000      	beq.n	8938 <dir_find+0xa8>
    8936:	e074      	b.n	8a22 <dir_find+0x192>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    8938:	9b00      	ldr	r3, [sp, #0]
    893a:	68db      	ldr	r3, [r3, #12]
    893c:	9303      	str	r3, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    893e:	782a      	ldrb	r2, [r5, #0]
    8940:	233f      	movs	r3, #63	; 0x3f
    8942:	4013      	ands	r3, r2
    8944:	3b01      	subs	r3, #1
    8946:	005a      	lsls	r2, r3, #1
    8948:	18d2      	adds	r2, r2, r3
    894a:	0092      	lsls	r2, r2, #2
    894c:	4692      	mov	sl, r2
    894e:	449a      	add	sl, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    8950:	2101      	movs	r1, #1
    8952:	2300      	movs	r3, #0
    8954:	4699      	mov	r9, r3
    8956:	e029      	b.n	89ac <dir_find+0x11c>
			if (a == AM_LFN) {			/* An LFN entry is found */
    8958:	2b0f      	cmp	r3, #15
    895a:	d0d6      	beq.n	890a <dir_find+0x7a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
    895c:	464b      	mov	r3, r9
    895e:	2b00      	cmp	r3, #0
    8960:	d104      	bne.n	896c <dir_find+0xdc>
    8962:	0028      	movs	r0, r5
    8964:	f7ff fb1c 	bl	7fa0 <sum_sfn>
    8968:	4582      	cmp	sl, r0
    896a:	d052      	beq.n	8a12 <dir_find+0x182>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
    896c:	232b      	movs	r3, #43	; 0x2b
    896e:	5ce3      	ldrb	r3, [r4, r3]
    8970:	07db      	lsls	r3, r3, #31
    8972:	d407      	bmi.n	8984 <dir_find+0xf4>
    8974:	0021      	movs	r1, r4
    8976:	3120      	adds	r1, #32
    8978:	220b      	movs	r2, #11
    897a:	0028      	movs	r0, r5
    897c:	f7ff faf0 	bl	7f60 <mem_cmp>
    8980:	2800      	cmp	r0, #0
    8982:	d046      	beq.n	8a12 <dir_find+0x182>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
    8984:	2301      	movs	r3, #1
    8986:	425b      	negs	r3, r3
    8988:	62e3      	str	r3, [r4, #44]	; 0x2c
    898a:	3301      	adds	r3, #1
    898c:	33ff      	adds	r3, #255	; 0xff
    898e:	4699      	mov	r9, r3
    8990:	e79e      	b.n	88d0 <dir_find+0x40>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    8992:	45b1      	cmp	r9, r6
    8994:	d0c5      	beq.n	8922 <dir_find+0x92>
    8996:	23ff      	movs	r3, #255	; 0xff
    8998:	4699      	mov	r9, r3
    899a:	e799      	b.n	88d0 <dir_find+0x40>
			if (uc != 0xFFFF) return 0;		/* Check filler */
    899c:	4543      	cmp	r3, r8
    899e:	d140      	bne.n	8a22 <dir_find+0x192>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    89a0:	2301      	movs	r3, #1
    89a2:	469c      	mov	ip, r3
    89a4:	44e1      	add	r9, ip
    89a6:	464b      	mov	r3, r9
    89a8:	2b0d      	cmp	r3, #13
    89aa:	d021      	beq.n	89f0 <dir_find+0x160>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
    89ac:	4b20      	ldr	r3, [pc, #128]	; (8a30 <dir_find+0x1a0>)
    89ae:	464a      	mov	r2, r9
    89b0:	5cd3      	ldrb	r3, [r2, r3]
    89b2:	18eb      	adds	r3, r5, r3
	rv = rv << 8 | ptr[0];
    89b4:	785a      	ldrb	r2, [r3, #1]
    89b6:	0212      	lsls	r2, r2, #8
    89b8:	781b      	ldrb	r3, [r3, #0]
    89ba:	4313      	orrs	r3, r2
    89bc:	469b      	mov	fp, r3
		if (wc) {
    89be:	2900      	cmp	r1, #0
    89c0:	d0ec      	beq.n	899c <dir_find+0x10c>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
    89c2:	4653      	mov	r3, sl
    89c4:	2bfe      	cmp	r3, #254	; 0xfe
    89c6:	d82c      	bhi.n	8a22 <dir_find+0x192>
    89c8:	4658      	mov	r0, fp
    89ca:	f001 fac1 	bl	9f50 <ff_wtoupper>
    89ce:	9002      	str	r0, [sp, #8]
    89d0:	4653      	mov	r3, sl
    89d2:	3301      	adds	r3, #1
    89d4:	9301      	str	r3, [sp, #4]
    89d6:	4652      	mov	r2, sl
    89d8:	0053      	lsls	r3, r2, #1
    89da:	9a03      	ldr	r2, [sp, #12]
    89dc:	5a98      	ldrh	r0, [r3, r2]
    89de:	f001 fab7 	bl	9f50 <ff_wtoupper>
    89e2:	9a02      	ldr	r2, [sp, #8]
    89e4:	4282      	cmp	r2, r0
    89e6:	d11c      	bne.n	8a22 <dir_find+0x192>
			wc = uc;
    89e8:	4659      	mov	r1, fp
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
    89ea:	9b01      	ldr	r3, [sp, #4]
    89ec:	469a      	mov	sl, r3
    89ee:	e7d7      	b.n	89a0 <dir_find+0x110>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
    89f0:	782b      	ldrb	r3, [r5, #0]
    89f2:	065b      	lsls	r3, r3, #25
    89f4:	d507      	bpl.n	8a06 <dir_find+0x176>
    89f6:	2900      	cmp	r1, #0
    89f8:	d005      	beq.n	8a06 <dir_find+0x176>
    89fa:	4653      	mov	r3, sl
    89fc:	005b      	lsls	r3, r3, #1
    89fe:	9a03      	ldr	r2, [sp, #12]
    8a00:	5a9b      	ldrh	r3, [r3, r2]
    8a02:	2b00      	cmp	r3, #0
    8a04:	d10d      	bne.n	8a22 <dir_find+0x192>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    8a06:	3e01      	subs	r6, #1
    8a08:	b2f3      	uxtb	r3, r6
    8a0a:	4699      	mov	r9, r3
    8a0c:	46ba      	mov	sl, r7
    8a0e:	e75f      	b.n	88d0 <dir_find+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8a10:	2704      	movs	r7, #4
}
    8a12:	0038      	movs	r0, r7
    8a14:	b005      	add	sp, #20
    8a16:	bc3c      	pop	{r2, r3, r4, r5}
    8a18:	4690      	mov	r8, r2
    8a1a:	4699      	mov	r9, r3
    8a1c:	46a2      	mov	sl, r4
    8a1e:	46ab      	mov	fp, r5
    8a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    8a22:	46ba      	mov	sl, r7
    8a24:	23ff      	movs	r3, #255	; 0xff
    8a26:	4699      	mov	r9, r3
    8a28:	e752      	b.n	88d0 <dir_find+0x40>
    8a2a:	46c0      	nop			; (mov r8, r8)
    8a2c:	0000ffff 	.word	0x0000ffff
    8a30:	0000ee6c 	.word	0x0000ee6c
	...

00008a40 <dir_register>:
{
    8a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a42:	46de      	mov	lr, fp
    8a44:	4657      	mov	r7, sl
    8a46:	464e      	mov	r6, r9
    8a48:	4645      	mov	r5, r8
    8a4a:	b5e0      	push	{r5, r6, r7, lr}
    8a4c:	b08b      	sub	sp, #44	; 0x2c
    8a4e:	9002      	str	r0, [sp, #8]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
    8a50:	232b      	movs	r3, #43	; 0x2b
    8a52:	5cc3      	ldrb	r3, [r0, r3]
    8a54:	225f      	movs	r2, #95	; 0x5f
    8a56:	4393      	bics	r3, r2
    8a58:	3a59      	subs	r2, #89	; 0x59
    8a5a:	4691      	mov	r9, r2
    8a5c:	2b00      	cmp	r3, #0
    8a5e:	d007      	beq.n	8a70 <dir_register+0x30>
}
    8a60:	4648      	mov	r0, r9
    8a62:	b00b      	add	sp, #44	; 0x2c
    8a64:	bc3c      	pop	{r2, r3, r4, r5}
    8a66:	4690      	mov	r8, r2
    8a68:	4699      	mov	r9, r3
    8a6a:	46a2      	mov	sl, r4
    8a6c:	46ab      	mov	fp, r5
    8a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	FATFS *fs = dp->obj.fs;
    8a70:	6803      	ldr	r3, [r0, #0]
    8a72:	4698      	mov	r8, r3
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
    8a74:	68db      	ldr	r3, [r3, #12]
    8a76:	881a      	ldrh	r2, [r3, #0]
    8a78:	2a00      	cmp	r2, #0
    8a7a:	d022      	beq.n	8ac2 <dir_register+0x82>
    8a7c:	3302      	adds	r3, #2
    8a7e:	2200      	movs	r2, #0
    8a80:	3201      	adds	r2, #1
    8a82:	3302      	adds	r3, #2
    8a84:	1e99      	subs	r1, r3, #2
    8a86:	8809      	ldrh	r1, [r1, #0]
    8a88:	2900      	cmp	r1, #0
    8a8a:	d1f9      	bne.n	8a80 <dir_register+0x40>
    8a8c:	4692      	mov	sl, r2
	mem_cpy(sn, dp->fn, 12);
    8a8e:	9e02      	ldr	r6, [sp, #8]
    8a90:	0035      	movs	r5, r6
    8a92:	3520      	adds	r5, #32
    8a94:	ac07      	add	r4, sp, #28
    8a96:	220c      	movs	r2, #12
    8a98:	0029      	movs	r1, r5
    8a9a:	0020      	movs	r0, r4
    8a9c:	f7ff fa50 	bl	7f40 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    8aa0:	7ae3      	ldrb	r3, [r4, #11]
    8aa2:	07db      	lsls	r3, r3, #31
    8aa4:	d400      	bmi.n	8aa8 <dir_register+0x68>
    8aa6:	e07e      	b.n	8ba6 <dir_register+0x166>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
    8aa8:	2240      	movs	r2, #64	; 0x40
    8aaa:	232b      	movs	r3, #43	; 0x2b
    8aac:	54f2      	strb	r2, [r6, r3]
	mem_cpy(dst, src, 11);
    8aae:	3a35      	subs	r2, #53	; 0x35
    8ab0:	a907      	add	r1, sp, #28
    8ab2:	0028      	movs	r0, r5
    8ab4:	f7ff fa44 	bl	7f40 <mem_cpy>
		for (n = 1; n < 100; n++) {
    8ab8:	2301      	movs	r3, #1
    8aba:	469b      	mov	fp, r3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    8abc:	2220      	movs	r2, #32
    8abe:	9201      	str	r2, [sp, #4]
    8ac0:	e00f      	b.n	8ae2 <dir_register+0xa2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
    8ac2:	2300      	movs	r3, #0
    8ac4:	469a      	mov	sl, r3
    8ac6:	e7e2      	b.n	8a8e <dir_register+0x4e>
    8ac8:	3c01      	subs	r4, #1
			for (i = 0; i < 16; i++) {
    8aca:	2c00      	cmp	r4, #0
    8acc:	d055      	beq.n	8b7a <dir_register+0x13a>
				sr = (sr << 1) + (wc & 1);
    8ace:	005b      	lsls	r3, r3, #1
    8ad0:	003a      	movs	r2, r7
    8ad2:	400a      	ands	r2, r1
    8ad4:	18d3      	adds	r3, r2, r3
				wc >>= 1;
    8ad6:	0849      	lsrs	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
    8ad8:	4203      	tst	r3, r0
    8ada:	d0f5      	beq.n	8ac8 <dir_register+0x88>
    8adc:	4073      	eors	r3, r6
    8ade:	e7f3      	b.n	8ac8 <dir_register+0x88>
    8ae0:	4665      	mov	r5, ip
		for (n = 1; n < 100; n++) {
    8ae2:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
    8ae4:	270f      	movs	r7, #15
    8ae6:	e005      	b.n	8af4 <dir_register+0xb4>
		ns[i--] = c;
    8ae8:	3a01      	subs	r2, #1
    8aea:	a805      	add	r0, sp, #20
    8aec:	1880      	adds	r0, r0, r2
    8aee:	7041      	strb	r1, [r0, #1]
		seq /= 16;
    8af0:	091b      	lsrs	r3, r3, #4
	} while (seq);
    8af2:	d007      	beq.n	8b04 <dir_register+0xc4>
		c = (BYTE)((seq % 16) + '0');
    8af4:	0038      	movs	r0, r7
    8af6:	4018      	ands	r0, r3
    8af8:	0001      	movs	r1, r0
    8afa:	3130      	adds	r1, #48	; 0x30
		if (c > '9') c += 7;
    8afc:	2939      	cmp	r1, #57	; 0x39
    8afe:	d9f3      	bls.n	8ae8 <dir_register+0xa8>
    8b00:	3107      	adds	r1, #7
    8b02:	e7f1      	b.n	8ae8 <dir_register+0xa8>
	ns[i] = '~';
    8b04:	217e      	movs	r1, #126	; 0x7e
    8b06:	a805      	add	r0, sp, #20
    8b08:	5481      	strb	r1, [r0, r2]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    8b0a:	2a00      	cmp	r2, #0
    8b0c:	d00b      	beq.n	8b26 <dir_register+0xe6>
    8b0e:	9902      	ldr	r1, [sp, #8]
    8b10:	2020      	movs	r0, #32
    8b12:	5c09      	ldrb	r1, [r1, r0]
    8b14:	2920      	cmp	r1, #32
    8b16:	d00e      	beq.n	8b36 <dir_register+0xf6>
    8b18:	3301      	adds	r3, #1
    8b1a:	429a      	cmp	r2, r3
    8b1c:	d005      	beq.n	8b2a <dir_register+0xea>
    8b1e:	5ce9      	ldrb	r1, [r5, r3]
    8b20:	2920      	cmp	r1, #32
    8b22:	d1f9      	bne.n	8b18 <dir_register+0xd8>
    8b24:	e007      	b.n	8b36 <dir_register+0xf6>
    8b26:	0013      	movs	r3, r2
    8b28:	e005      	b.n	8b36 <dir_register+0xf6>
    8b2a:	0013      	movs	r3, r2
    8b2c:	e003      	b.n	8b36 <dir_register+0xf6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    8b2e:	54e9      	strb	r1, [r5, r3]
    8b30:	3301      	adds	r3, #1
	} while (j < 8);
    8b32:	2b07      	cmp	r3, #7
    8b34:	d806      	bhi.n	8b44 <dir_register+0x104>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    8b36:	9901      	ldr	r1, [sp, #4]
    8b38:	2a07      	cmp	r2, #7
    8b3a:	d8f8      	bhi.n	8b2e <dir_register+0xee>
    8b3c:	a905      	add	r1, sp, #20
    8b3e:	5c89      	ldrb	r1, [r1, r2]
    8b40:	3201      	adds	r2, #1
    8b42:	e7f4      	b.n	8b2e <dir_register+0xee>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
    8b44:	9802      	ldr	r0, [sp, #8]
    8b46:	f7ff fea3 	bl	8890 <dir_find>
			if (res != FR_OK) break;
    8b4a:	2800      	cmp	r0, #0
    8b4c:	d11e      	bne.n	8b8c <dir_register+0x14c>
		for (n = 1; n < 100; n++) {
    8b4e:	465b      	mov	r3, fp
    8b50:	3301      	adds	r3, #1
    8b52:	469b      	mov	fp, r3
    8b54:	2b64      	cmp	r3, #100	; 0x64
    8b56:	d016      	beq.n	8b86 <dir_register+0x146>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
    8b58:	4643      	mov	r3, r8
    8b5a:	68dc      	ldr	r4, [r3, #12]
	mem_cpy(dst, src, 11);
    8b5c:	220b      	movs	r2, #11
    8b5e:	a907      	add	r1, sp, #28
    8b60:	0028      	movs	r0, r5
    8b62:	f7ff f9ed 	bl	7f40 <mem_cpy>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
    8b66:	465b      	mov	r3, fp
    8b68:	2b05      	cmp	r3, #5
    8b6a:	d9ba      	bls.n	8ae2 <dir_register+0xa2>
    8b6c:	465b      	mov	r3, fp
				sr = (sr << 1) + (wc & 1);
    8b6e:	2701      	movs	r7, #1
				if (sr & 0x10000) sr ^= 0x11021;
    8b70:	2080      	movs	r0, #128	; 0x80
    8b72:	0240      	lsls	r0, r0, #9
    8b74:	4e84      	ldr	r6, [pc, #528]	; (8d88 <dir_register+0x348>)
    8b76:	46ac      	mov	ip, r5
    8b78:	0025      	movs	r5, r4
		while (*lfn) {	/* Create a CRC */
    8b7a:	8829      	ldrh	r1, [r5, #0]
    8b7c:	2900      	cmp	r1, #0
    8b7e:	d0af      	beq.n	8ae0 <dir_register+0xa0>
			wc = *lfn++;
    8b80:	3502      	adds	r5, #2
    8b82:	2410      	movs	r4, #16
    8b84:	e7a3      	b.n	8ace <dir_register+0x8e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    8b86:	3b5d      	subs	r3, #93	; 0x5d
    8b88:	4699      	mov	r9, r3
    8b8a:	e769      	b.n	8a60 <dir_register+0x20>
    8b8c:	4681      	mov	r9, r0
    8b8e:	465b      	mov	r3, fp
    8b90:	2b64      	cmp	r3, #100	; 0x64
    8b92:	d100      	bne.n	8b96 <dir_register+0x156>
    8b94:	e0a2      	b.n	8cdc <dir_register+0x29c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    8b96:	2804      	cmp	r0, #4
    8b98:	d000      	beq.n	8b9c <dir_register+0x15c>
    8b9a:	e761      	b.n	8a60 <dir_register+0x20>
		dp->fn[NSFLAG] = sn[NSFLAG];
    8b9c:	ab07      	add	r3, sp, #28
    8b9e:	7ada      	ldrb	r2, [r3, #11]
    8ba0:	232b      	movs	r3, #43	; 0x2b
    8ba2:	9902      	ldr	r1, [sp, #8]
    8ba4:	54ca      	strb	r2, [r1, r3]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
    8ba6:	ab07      	add	r3, sp, #28
    8ba8:	7adb      	ldrb	r3, [r3, #11]
    8baa:	2401      	movs	r4, #1
    8bac:	079b      	lsls	r3, r3, #30
    8bae:	d505      	bpl.n	8bbc <dir_register+0x17c>
    8bb0:	4650      	mov	r0, sl
    8bb2:	300c      	adds	r0, #12
    8bb4:	210d      	movs	r1, #13
    8bb6:	f7f7 fb0d 	bl	1d4 <__udivsi3>
    8bba:	1c44      	adds	r4, r0, #1
	FATFS *fs = dp->obj.fs;
    8bbc:	9b02      	ldr	r3, [sp, #8]
    8bbe:	681e      	ldr	r6, [r3, #0]
	res = dir_sdi(dp, 0);
    8bc0:	2100      	movs	r1, #0
    8bc2:	469a      	mov	sl, r3
    8bc4:	0018      	movs	r0, r3
    8bc6:	f7ff fcd3 	bl	8570 <dir_sdi>
    8bca:	4681      	mov	r9, r0
	if (res == FR_OK) {
    8bcc:	2800      	cmp	r0, #0
    8bce:	d000      	beq.n	8bd2 <dir_register+0x192>
    8bd0:	e0a1      	b.n	8d16 <dir_register+0x2d6>
    8bd2:	2700      	movs	r7, #0
    8bd4:	46a9      	mov	r9, r5
    8bd6:	0025      	movs	r5, r4
    8bd8:	0034      	movs	r4, r6
    8bda:	4656      	mov	r6, sl
    8bdc:	e009      	b.n	8bf2 <dir_register+0x1b2>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
    8bde:	3701      	adds	r7, #1
    8be0:	42bd      	cmp	r5, r7
    8be2:	d100      	bne.n	8be6 <dir_register+0x1a6>
    8be4:	e09e      	b.n	8d24 <dir_register+0x2e4>
			res = dir_next(dp, 1);
    8be6:	2101      	movs	r1, #1
    8be8:	0030      	movs	r0, r6
    8bea:	f7ff fde9 	bl	87c0 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
    8bee:	2800      	cmp	r0, #0
    8bf0:	d10e      	bne.n	8c10 <dir_register+0x1d0>
			res = move_window(fs, dp->sect);
    8bf2:	69b1      	ldr	r1, [r6, #24]
    8bf4:	0020      	movs	r0, r4
    8bf6:	f7ff fa5b 	bl	80b0 <move_window>
			if (res != FR_OK) break;
    8bfa:	2800      	cmp	r0, #0
    8bfc:	d000      	beq.n	8c00 <dir_register+0x1c0>
    8bfe:	e089      	b.n	8d14 <dir_register+0x2d4>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
    8c00:	69f3      	ldr	r3, [r6, #28]
    8c02:	781b      	ldrb	r3, [r3, #0]
    8c04:	2be5      	cmp	r3, #229	; 0xe5
    8c06:	d0ea      	beq.n	8bde <dir_register+0x19e>
    8c08:	2b00      	cmp	r3, #0
    8c0a:	d0e8      	beq.n	8bde <dir_register+0x19e>
				n = 0;					/* Not a blank entry. Restart to search */
    8c0c:	2700      	movs	r7, #0
    8c0e:	e7ea      	b.n	8be6 <dir_register+0x1a6>
    8c10:	4681      	mov	r9, r0
    8c12:	e080      	b.n	8d16 <dir_register+0x2d6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
    8c14:	465b      	mov	r3, fp
    8c16:	015b      	lsls	r3, r3, #5
    8c18:	9a02      	ldr	r2, [sp, #8]
    8c1a:	6911      	ldr	r1, [r2, #16]
    8c1c:	9101      	str	r1, [sp, #4]
    8c1e:	0019      	movs	r1, r3
    8c20:	9b01      	ldr	r3, [sp, #4]
    8c22:	1a59      	subs	r1, r3, r1
    8c24:	0010      	movs	r0, r2
    8c26:	f7ff fca3 	bl	8570 <dir_sdi>
    8c2a:	4681      	mov	r9, r0
		if (res == FR_OK) {
    8c2c:	2800      	cmp	r0, #0
    8c2e:	d000      	beq.n	8c32 <dir_register+0x1f2>
    8c30:	e716      	b.n	8a60 <dir_register+0x20>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
    8c32:	0028      	movs	r0, r5
    8c34:	f7ff f9b4 	bl	7fa0 <sum_sfn>
    8c38:	9003      	str	r0, [sp, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
    8c3a:	465e      	mov	r6, fp
    8c3c:	4647      	mov	r7, r8
    8c3e:	46a9      	mov	r9, r5
    8c40:	e020      	b.n	8c84 <dir_register+0x244>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    8c42:	0001      	movs	r1, r0
    8c44:	e053      	b.n	8cee <dir_register+0x2ae>
    8c46:	9a01      	ldr	r2, [sp, #4]
    8c48:	4692      	mov	sl, r2
    8c4a:	4647      	mov	r7, r8
    8c4c:	0030      	movs	r0, r6
    8c4e:	4666      	mov	r6, ip
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
    8c50:	4a4e      	ldr	r2, [pc, #312]	; (8d8c <dir_register+0x34c>)
    8c52:	4293      	cmp	r3, r2
    8c54:	d004      	beq.n	8c60 <dir_register+0x220>
    8c56:	0049      	lsls	r1, r1, #1
    8c58:	4653      	mov	r3, sl
    8c5a:	5acb      	ldrh	r3, [r1, r3]
    8c5c:	2b00      	cmp	r3, #0
    8c5e:	d103      	bne.n	8c68 <dir_register+0x228>
    8c60:	2340      	movs	r3, #64	; 0x40
    8c62:	465a      	mov	r2, fp
    8c64:	431a      	orrs	r2, r3
    8c66:	4693      	mov	fp, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    8c68:	465b      	mov	r3, fp
    8c6a:	7003      	strb	r3, [r0, #0]
				fs->wflag = 1;
    8c6c:	2301      	movs	r3, #1
    8c6e:	70fb      	strb	r3, [r7, #3]
				res = dir_next(dp, 0);	/* Next entry */
    8c70:	2100      	movs	r1, #0
    8c72:	9802      	ldr	r0, [sp, #8]
    8c74:	f7ff fda4 	bl	87c0 <dir_next>
			} while (res == FR_OK && --nent);
    8c78:	2800      	cmp	r0, #0
    8c7a:	d000      	beq.n	8c7e <dir_register+0x23e>
    8c7c:	e081      	b.n	8d82 <dir_register+0x342>
    8c7e:	3e01      	subs	r6, #1
    8c80:	2e00      	cmp	r6, #0
    8c82:	d028      	beq.n	8cd6 <dir_register+0x296>
				res = move_window(fs, dp->sect);
    8c84:	9c02      	ldr	r4, [sp, #8]
    8c86:	69a3      	ldr	r3, [r4, #24]
    8c88:	9301      	str	r3, [sp, #4]
    8c8a:	0019      	movs	r1, r3
    8c8c:	0038      	movs	r0, r7
    8c8e:	f7ff fa0f 	bl	80b0 <move_window>
				if (res != FR_OK) break;
    8c92:	2800      	cmp	r0, #0
    8c94:	d173      	bne.n	8d7e <dir_register+0x33e>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
    8c96:	68fb      	ldr	r3, [r7, #12]
    8c98:	469a      	mov	sl, r3
    8c9a:	69e0      	ldr	r0, [r4, #28]
    8c9c:	b2f3      	uxtb	r3, r6
    8c9e:	469b      	mov	fp, r3
	dir[LDIR_Chksum] = sum;			/* Set checksum */
    8ca0:	466b      	mov	r3, sp
    8ca2:	7b1b      	ldrb	r3, [r3, #12]
    8ca4:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    8ca6:	230f      	movs	r3, #15
    8ca8:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    8caa:	2300      	movs	r3, #0
    8cac:	7303      	strb	r3, [r0, #12]
	*ptr++ = (BYTE)val; val >>= 8;
    8cae:	7683      	strb	r3, [r0, #26]
	*ptr++ = (BYTE)val;
    8cb0:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
    8cb2:	33ff      	adds	r3, #255	; 0xff
    8cb4:	4033      	ands	r3, r6
    8cb6:	3b01      	subs	r3, #1
    8cb8:	0059      	lsls	r1, r3, #1
    8cba:	18c9      	adds	r1, r1, r3
    8cbc:	0089      	lsls	r1, r1, #2
    8cbe:	18c9      	adds	r1, r1, r3
    8cc0:	4a33      	ldr	r2, [pc, #204]	; (8d90 <dir_register+0x350>)
    8cc2:	0015      	movs	r5, r2
    8cc4:	350d      	adds	r5, #13
	s = wc = 0;
    8cc6:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    8cc8:	4c30      	ldr	r4, [pc, #192]	; (8d8c <dir_register+0x34c>)
    8cca:	46b4      	mov	ip, r6
    8ccc:	46b8      	mov	r8, r7
    8cce:	4656      	mov	r6, sl
    8cd0:	9601      	str	r6, [sp, #4]
    8cd2:	0006      	movs	r6, r0
    8cd4:	e00e      	b.n	8cf4 <dir_register+0x2b4>
    8cd6:	46b8      	mov	r8, r7
    8cd8:	464d      	mov	r5, r9
    8cda:	e02a      	b.n	8d32 <dir_register+0x2f2>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    8cdc:	2307      	movs	r3, #7
    8cde:	4699      	mov	r9, r3
    8ce0:	e6be      	b.n	8a60 <dir_register+0x20>
		st_word(dir + LfnOfs[s], wc);		/* Put it */
    8ce2:	7810      	ldrb	r0, [r2, #0]
    8ce4:	1830      	adds	r0, r6, r0
	*ptr++ = (BYTE)val; val >>= 8;
    8ce6:	27ff      	movs	r7, #255	; 0xff
    8ce8:	7007      	strb	r7, [r0, #0]
	*ptr++ = (BYTE)val;
    8cea:	27ff      	movs	r7, #255	; 0xff
    8cec:	7047      	strb	r7, [r0, #1]
    8cee:	3201      	adds	r2, #1
	} while (++s < 13);
    8cf0:	4295      	cmp	r5, r2
    8cf2:	d0a8      	beq.n	8c46 <dir_register+0x206>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    8cf4:	42a3      	cmp	r3, r4
    8cf6:	d0f4      	beq.n	8ce2 <dir_register+0x2a2>
    8cf8:	1c48      	adds	r0, r1, #1
    8cfa:	0049      	lsls	r1, r1, #1
    8cfc:	9b01      	ldr	r3, [sp, #4]
    8cfe:	5acb      	ldrh	r3, [r1, r3]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
    8d00:	7811      	ldrb	r1, [r2, #0]
    8d02:	1871      	adds	r1, r6, r1
	*ptr++ = (BYTE)val; val >>= 8;
    8d04:	700b      	strb	r3, [r1, #0]
    8d06:	0a1f      	lsrs	r7, r3, #8
	*ptr++ = (BYTE)val;
    8d08:	704f      	strb	r7, [r1, #1]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
    8d0a:	2b00      	cmp	r3, #0
    8d0c:	d199      	bne.n	8c42 <dir_register+0x202>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    8d0e:	0001      	movs	r1, r0
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
    8d10:	0023      	movs	r3, r4
    8d12:	e7ec      	b.n	8cee <dir_register+0x2ae>
    8d14:	4681      	mov	r9, r0
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    8d16:	464b      	mov	r3, r9
    8d18:	2b04      	cmp	r3, #4
    8d1a:	d000      	beq.n	8d1e <dir_register+0x2de>
    8d1c:	e6a0      	b.n	8a60 <dir_register+0x20>
    8d1e:	2307      	movs	r3, #7
    8d20:	4699      	mov	r9, r3
    8d22:	e69d      	b.n	8a60 <dir_register+0x20>
    8d24:	002c      	movs	r4, r5
    8d26:	464d      	mov	r5, r9
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
    8d28:	1e63      	subs	r3, r4, #1
    8d2a:	469b      	mov	fp, r3
    8d2c:	2b00      	cmp	r3, #0
    8d2e:	d000      	beq.n	8d32 <dir_register+0x2f2>
    8d30:	e770      	b.n	8c14 <dir_register+0x1d4>
		res = move_window(fs, dp->sect);
    8d32:	9b02      	ldr	r3, [sp, #8]
    8d34:	699b      	ldr	r3, [r3, #24]
    8d36:	9301      	str	r3, [sp, #4]
    8d38:	0019      	movs	r1, r3
    8d3a:	4640      	mov	r0, r8
    8d3c:	f7ff f9b8 	bl	80b0 <move_window>
    8d40:	4681      	mov	r9, r0
		if (res == FR_OK) {
    8d42:	2800      	cmp	r0, #0
    8d44:	d000      	beq.n	8d48 <dir_register+0x308>
    8d46:	e68b      	b.n	8a60 <dir_register+0x20>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
    8d48:	9b02      	ldr	r3, [sp, #8]
    8d4a:	69db      	ldr	r3, [r3, #28]
    8d4c:	0019      	movs	r1, r3
    8d4e:	3120      	adds	r1, #32
		*d++ = (BYTE)val;
    8d50:	2200      	movs	r2, #0
    8d52:	701a      	strb	r2, [r3, #0]
    8d54:	3301      	adds	r3, #1
	} while (--cnt);
    8d56:	428b      	cmp	r3, r1
    8d58:	d1fb      	bne.n	8d52 <dir_register+0x312>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    8d5a:	9c02      	ldr	r4, [sp, #8]
    8d5c:	69e3      	ldr	r3, [r4, #28]
    8d5e:	9301      	str	r3, [sp, #4]
    8d60:	220b      	movs	r2, #11
    8d62:	0029      	movs	r1, r5
    8d64:	0018      	movs	r0, r3
    8d66:	f7ff f8eb 	bl	7f40 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
    8d6a:	69e2      	ldr	r2, [r4, #28]
    8d6c:	232b      	movs	r3, #43	; 0x2b
    8d6e:	5ce1      	ldrb	r1, [r4, r3]
    8d70:	3b13      	subs	r3, #19
    8d72:	400b      	ands	r3, r1
    8d74:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
    8d76:	2301      	movs	r3, #1
    8d78:	4642      	mov	r2, r8
    8d7a:	70d3      	strb	r3, [r2, #3]
    8d7c:	e670      	b.n	8a60 <dir_register+0x20>
    8d7e:	4681      	mov	r9, r0
    8d80:	e66e      	b.n	8a60 <dir_register+0x20>
    8d82:	4681      	mov	r9, r0
    8d84:	e66c      	b.n	8a60 <dir_register+0x20>
    8d86:	46c0      	nop			; (mov r8, r8)
    8d88:	00011021 	.word	0x00011021
    8d8c:	0000ffff 	.word	0x0000ffff
    8d90:	0000ee6c 	.word	0x0000ee6c
	...

00008da0 <check_fs>:
{
    8da0:	b510      	push	{r4, lr}
    8da2:	0004      	movs	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
    8da4:	2300      	movs	r3, #0
    8da6:	70c3      	strb	r3, [r0, #3]
    8da8:	3b01      	subs	r3, #1
    8daa:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
    8dac:	f7ff f980 	bl	80b0 <move_window>
    8db0:	2304      	movs	r3, #4
    8db2:	2800      	cmp	r0, #0
    8db4:	d001      	beq.n	8dba <check_fs+0x1a>
}
    8db6:	0018      	movs	r0, r3
    8db8:	bd10      	pop	{r4, pc}
	rv = ptr[1];
    8dba:	4b15      	ldr	r3, [pc, #84]	; (8e10 <check_fs+0x70>)
	rv = rv << 8 | ptr[0];
    8dbc:	5ce3      	ldrb	r3, [r4, r3]
    8dbe:	021b      	lsls	r3, r3, #8
    8dc0:	4a14      	ldr	r2, [pc, #80]	; (8e14 <check_fs+0x74>)
    8dc2:	5ca2      	ldrb	r2, [r4, r2]
    8dc4:	431a      	orrs	r2, r3
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
    8dc6:	4914      	ldr	r1, [pc, #80]	; (8e18 <check_fs+0x78>)
    8dc8:	b212      	sxth	r2, r2
    8dca:	2303      	movs	r3, #3
    8dcc:	428a      	cmp	r2, r1
    8dce:	d1f2      	bne.n	8db6 <check_fs+0x16>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {	/* Valid JumpBoot code? */
    8dd0:	3331      	adds	r3, #49	; 0x31
    8dd2:	5ce3      	ldrb	r3, [r4, r3]
    8dd4:	2be9      	cmp	r3, #233	; 0xe9
    8dd6:	d006      	beq.n	8de6 <check_fs+0x46>
    8dd8:	4a10      	ldr	r2, [pc, #64]	; (8e1c <check_fs+0x7c>)
    8dda:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8ddc:	401a      	ands	r2, r3
    8dde:	4910      	ldr	r1, [pc, #64]	; (8e20 <check_fs+0x80>)
	return 2;	/* Valid BS but not FAT */
    8de0:	2302      	movs	r3, #2
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {	/* Valid JumpBoot code? */
    8de2:	428a      	cmp	r2, r1
    8de4:	d1e7      	bne.n	8db6 <check_fs+0x16>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
    8de6:	2203      	movs	r2, #3
    8de8:	490e      	ldr	r1, [pc, #56]	; (8e24 <check_fs+0x84>)
    8dea:	0020      	movs	r0, r4
    8dec:	306a      	adds	r0, #106	; 0x6a
    8dee:	f7ff f8b7 	bl	7f60 <mem_cmp>
    8df2:	2300      	movs	r3, #0
    8df4:	2800      	cmp	r0, #0
    8df6:	d0de      	beq.n	8db6 <check_fs+0x16>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
    8df8:	0020      	movs	r0, r4
    8dfa:	3086      	adds	r0, #134	; 0x86
    8dfc:	2205      	movs	r2, #5
    8dfe:	490a      	ldr	r1, [pc, #40]	; (8e28 <check_fs+0x88>)
    8e00:	f7ff f8ae 	bl	7f60 <mem_cmp>
	return 2;	/* Valid BS but not FAT */
    8e04:	0003      	movs	r3, r0
    8e06:	1e58      	subs	r0, r3, #1
    8e08:	4183      	sbcs	r3, r0
    8e0a:	005b      	lsls	r3, r3, #1
    8e0c:	e7d3      	b.n	8db6 <check_fs+0x16>
    8e0e:	46c0      	nop			; (mov r8, r8)
    8e10:	00000233 	.word	0x00000233
    8e14:	00000232 	.word	0x00000232
    8e18:	ffffaa55 	.word	0xffffaa55
    8e1c:	00ff00ff 	.word	0x00ff00ff
    8e20:	009000eb 	.word	0x009000eb
    8e24:	0000ee7c 	.word	0x0000ee7c
    8e28:	0000ee80 	.word	0x0000ee80
    8e2c:	00000000 	.word	0x00000000

00008e30 <find_volume>:
{
    8e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e32:	46de      	mov	lr, fp
    8e34:	4657      	mov	r7, sl
    8e36:	464e      	mov	r6, r9
    8e38:	4645      	mov	r5, r8
    8e3a:	b5e0      	push	{r5, r6, r7, lr}
    8e3c:	b087      	sub	sp, #28
    8e3e:	000f      	movs	r7, r1
    8e40:	0016      	movs	r6, r2
	*rfs = 0;
    8e42:	2300      	movs	r3, #0
    8e44:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
    8e46:	f7ff f8bb 	bl	7fc0 <get_ldnumber>
    8e4a:	0005      	movs	r5, r0
	if (vol < 0) return FR_INVALID_DRIVE;
    8e4c:	230b      	movs	r3, #11
    8e4e:	2800      	cmp	r0, #0
    8e50:	db21      	blt.n	8e96 <find_volume+0x66>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    8e52:	0083      	lsls	r3, r0, #2
    8e54:	4ac0      	ldr	r2, [pc, #768]	; (9158 <find_volume+0x328>)
    8e56:	589c      	ldr	r4, [r3, r2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    8e58:	2c00      	cmp	r4, #0
    8e5a:	d100      	bne.n	8e5e <find_volume+0x2e>
    8e5c:	e150      	b.n	9100 <find_volume+0x2d0>
	*rfs = fs;							/* Return pointer to the filesystem object */
    8e5e:	603c      	str	r4, [r7, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    8e60:	2301      	movs	r3, #1
    8e62:	439e      	bics	r6, r3
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    8e64:	7823      	ldrb	r3, [r4, #0]
    8e66:	2b00      	cmp	r3, #0
    8e68:	d00c      	beq.n	8e84 <find_volume+0x54>
		stat = disk_status(fs->pdrv);
    8e6a:	7860      	ldrb	r0, [r4, #1]
    8e6c:	f7fe f818 	bl	6ea0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    8e70:	07c3      	lsls	r3, r0, #31
    8e72:	d407      	bmi.n	8e84 <find_volume+0x54>
			return FR_OK;				/* The filesystem object is valid */
    8e74:	2300      	movs	r3, #0
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    8e76:	2e00      	cmp	r6, #0
    8e78:	d00d      	beq.n	8e96 <find_volume+0x66>
    8e7a:	0743      	lsls	r3, r0, #29
    8e7c:	d400      	bmi.n	8e80 <find_volume+0x50>
    8e7e:	e141      	b.n	9104 <find_volume+0x2d4>
				return FR_WRITE_PROTECTED;
    8e80:	230a      	movs	r3, #10
    8e82:	e008      	b.n	8e96 <find_volume+0x66>
	fs->fs_type = 0;					/* Clear the filesystem object */
    8e84:	2300      	movs	r3, #0
    8e86:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    8e88:	b2e8      	uxtb	r0, r5
    8e8a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
    8e8c:	f7fe f818 	bl	6ec0 <disk_initialize>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    8e90:	2303      	movs	r3, #3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    8e92:	07c2      	lsls	r2, r0, #31
    8e94:	d507      	bpl.n	8ea6 <find_volume+0x76>
}
    8e96:	0018      	movs	r0, r3
    8e98:	b007      	add	sp, #28
    8e9a:	bc3c      	pop	{r2, r3, r4, r5}
    8e9c:	4690      	mov	r8, r2
    8e9e:	4699      	mov	r9, r3
    8ea0:	46a2      	mov	sl, r4
    8ea2:	46ab      	mov	fp, r5
    8ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    8ea6:	2e00      	cmp	r6, #0
    8ea8:	d002      	beq.n	8eb0 <find_volume+0x80>
		return FR_WRITE_PROTECTED;
    8eaa:	3307      	adds	r3, #7
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    8eac:	0742      	lsls	r2, r0, #29
    8eae:	d4f2      	bmi.n	8e96 <find_volume+0x66>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
    8eb0:	2100      	movs	r1, #0
    8eb2:	0020      	movs	r0, r4
    8eb4:	f7ff ff74 	bl	8da0 <check_fs>
	bsect = 0;
    8eb8:	2500      	movs	r5, #0
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
    8eba:	2802      	cmp	r0, #2
    8ebc:	d100      	bne.n	8ec0 <find_volume+0x90>
    8ebe:	e0ed      	b.n	909c <find_volume+0x26c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    8ec0:	2804      	cmp	r0, #4
    8ec2:	d100      	bne.n	8ec6 <find_volume+0x96>
    8ec4:	e120      	b.n	9108 <find_volume+0x2d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    8ec6:	230d      	movs	r3, #13
    8ec8:	2801      	cmp	r0, #1
    8eca:	d8e4      	bhi.n	8e96 <find_volume+0x66>
	rv = ptr[1];
    8ecc:	2340      	movs	r3, #64	; 0x40
	rv = rv << 8 | ptr[0];
    8ece:	5ce3      	ldrb	r3, [r4, r3]
    8ed0:	021b      	lsls	r3, r3, #8
    8ed2:	223f      	movs	r2, #63	; 0x3f
    8ed4:	5ca2      	ldrb	r2, [r4, r2]
    8ed6:	431a      	orrs	r2, r3
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    8ed8:	2180      	movs	r1, #128	; 0x80
    8eda:	0089      	lsls	r1, r1, #2
    8edc:	b212      	sxth	r2, r2
    8ede:	230d      	movs	r3, #13
    8ee0:	428a      	cmp	r2, r1
    8ee2:	d1d8      	bne.n	8e96 <find_volume+0x66>
	rv = ptr[1];
    8ee4:	333e      	adds	r3, #62	; 0x3e
	rv = rv << 8 | ptr[0];
    8ee6:	5ce3      	ldrb	r3, [r4, r3]
    8ee8:	021b      	lsls	r3, r3, #8
    8eea:	224a      	movs	r2, #74	; 0x4a
    8eec:	5ca2      	ldrb	r2, [r4, r2]
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
    8eee:	431a      	orrs	r2, r3
    8ef0:	4691      	mov	r9, r2
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    8ef2:	d104      	bne.n	8efe <find_volume+0xce>
    8ef4:	0020      	movs	r0, r4
    8ef6:	3058      	adds	r0, #88	; 0x58
    8ef8:	f7ff f80a 	bl	7f10 <ld_dword>
    8efc:	4681      	mov	r9, r0
		fs->fsize = fasize;
    8efe:	464b      	mov	r3, r9
    8f00:	61e3      	str	r3, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    8f02:	2344      	movs	r3, #68	; 0x44
    8f04:	5ce3      	ldrb	r3, [r4, r3]
    8f06:	4698      	mov	r8, r3
    8f08:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    8f0a:	1e5a      	subs	r2, r3, #1
    8f0c:	230d      	movs	r3, #13
    8f0e:	2a01      	cmp	r2, #1
    8f10:	d8c1      	bhi.n	8e96 <find_volume+0x66>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    8f12:	3334      	adds	r3, #52	; 0x34
    8f14:	5ce6      	ldrb	r6, [r4, r3]
    8f16:	b2b2      	uxth	r2, r6
    8f18:	8162      	strh	r2, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    8f1a:	3b34      	subs	r3, #52	; 0x34
    8f1c:	2a00      	cmp	r2, #0
    8f1e:	d0ba      	beq.n	8e96 <find_volume+0x66>
    8f20:	1e72      	subs	r2, r6, #1
    8f22:	4216      	tst	r6, r2
    8f24:	d1b7      	bne.n	8e96 <find_volume+0x66>
	rv = ptr[1];
    8f26:	3339      	adds	r3, #57	; 0x39
	rv = rv << 8 | ptr[0];
    8f28:	5ce3      	ldrb	r3, [r4, r3]
    8f2a:	021b      	lsls	r3, r3, #8
    8f2c:	2245      	movs	r2, #69	; 0x45
    8f2e:	5ca2      	ldrb	r2, [r4, r2]
    8f30:	431a      	orrs	r2, r3
    8f32:	4693      	mov	fp, r2
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    8f34:	8122      	strh	r2, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    8f36:	230d      	movs	r3, #13
    8f38:	0712      	lsls	r2, r2, #28
    8f3a:	d1ac      	bne.n	8e96 <find_volume+0x66>
	rv = ptr[1];
    8f3c:	333b      	adds	r3, #59	; 0x3b
	rv = rv << 8 | ptr[0];
    8f3e:	5ce0      	ldrb	r0, [r4, r3]
    8f40:	0200      	lsls	r0, r0, #8
    8f42:	3b01      	subs	r3, #1
    8f44:	5ce3      	ldrb	r3, [r4, r3]
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
    8f46:	4318      	orrs	r0, r3
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    8f48:	d103      	bne.n	8f52 <find_volume+0x122>
    8f4a:	0020      	movs	r0, r4
    8f4c:	3054      	adds	r0, #84	; 0x54
    8f4e:	f7fe ffdf 	bl	7f10 <ld_dword>
	rv = ptr[1];
    8f52:	2343      	movs	r3, #67	; 0x43
	rv = rv << 8 | ptr[0];
    8f54:	5ce3      	ldrb	r3, [r4, r3]
    8f56:	021b      	lsls	r3, r3, #8
    8f58:	2242      	movs	r2, #66	; 0x42
    8f5a:	5ca7      	ldrb	r7, [r4, r2]
    8f5c:	431f      	orrs	r7, r3
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    8f5e:	230d      	movs	r3, #13
    8f60:	2f00      	cmp	r7, #0
    8f62:	d098      	beq.n	8e96 <find_volume+0x66>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    8f64:	4643      	mov	r3, r8
    8f66:	464a      	mov	r2, r9
    8f68:	4353      	muls	r3, r2
    8f6a:	001a      	movs	r2, r3
    8f6c:	9301      	str	r3, [sp, #4]
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    8f6e:	465b      	mov	r3, fp
    8f70:	091b      	lsrs	r3, r3, #4
    8f72:	19db      	adds	r3, r3, r7
    8f74:	4690      	mov	r8, r2
    8f76:	4498      	add	r8, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    8f78:	230d      	movs	r3, #13
    8f7a:	4540      	cmp	r0, r8
    8f7c:	d200      	bcs.n	8f80 <find_volume+0x150>
    8f7e:	e78a      	b.n	8e96 <find_volume+0x66>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    8f80:	4643      	mov	r3, r8
    8f82:	1ac0      	subs	r0, r0, r3
    8f84:	0031      	movs	r1, r6
    8f86:	f7f7 f925 	bl	1d4 <__udivsi3>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    8f8a:	230d      	movs	r3, #13
    8f8c:	2800      	cmp	r0, #0
    8f8e:	d100      	bne.n	8f92 <find_volume+0x162>
    8f90:	e781      	b.n	8e96 <find_volume+0x66>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    8f92:	4b72      	ldr	r3, [pc, #456]	; (915c <find_volume+0x32c>)
		fmt = 0;
    8f94:	2200      	movs	r2, #0
    8f96:	4692      	mov	sl, r2
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    8f98:	4298      	cmp	r0, r3
    8f9a:	d801      	bhi.n	8fa0 <find_volume+0x170>
    8f9c:	2303      	movs	r3, #3
    8f9e:	469a      	mov	sl, r3
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    8fa0:	4b6f      	ldr	r3, [pc, #444]	; (9160 <find_volume+0x330>)
    8fa2:	4298      	cmp	r0, r3
    8fa4:	d801      	bhi.n	8faa <find_volume+0x17a>
    8fa6:	2302      	movs	r3, #2
    8fa8:	469a      	mov	sl, r3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    8faa:	4b6e      	ldr	r3, [pc, #440]	; (9164 <find_volume+0x334>)
    8fac:	4298      	cmp	r0, r3
    8fae:	d800      	bhi.n	8fb2 <find_volume+0x182>
    8fb0:	e0ac      	b.n	910c <find_volume+0x2dc>
		if (fmt == 0) return FR_NO_FILESYSTEM;
    8fb2:	230d      	movs	r3, #13
    8fb4:	4652      	mov	r2, sl
    8fb6:	2a00      	cmp	r2, #0
    8fb8:	d100      	bne.n	8fbc <find_volume+0x18c>
    8fba:	e76c      	b.n	8e96 <find_volume+0x66>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    8fbc:	1c86      	adds	r6, r0, #2
    8fbe:	61a6      	str	r6, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
    8fc0:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    8fc2:	197f      	adds	r7, r7, r5
    8fc4:	6267      	str	r7, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
    8fc6:	4643      	mov	r3, r8
    8fc8:	195b      	adds	r3, r3, r5
    8fca:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
    8fcc:	4653      	mov	r3, sl
    8fce:	2a03      	cmp	r2, #3
    8fd0:	d000      	beq.n	8fd4 <find_volume+0x1a4>
    8fd2:	e0a4      	b.n	911e <find_volume+0x2ee>
	rv = ptr[1];
    8fd4:	335c      	adds	r3, #92	; 0x5c
	rv = rv << 8 | ptr[0];
    8fd6:	5ce3      	ldrb	r3, [r4, r3]
    8fd8:	021b      	lsls	r3, r3, #8
    8fda:	225e      	movs	r2, #94	; 0x5e
    8fdc:	5ca2      	ldrb	r2, [r4, r2]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    8fde:	431a      	orrs	r2, r3
    8fe0:	230d      	movs	r3, #13
    8fe2:	2a00      	cmp	r2, #0
    8fe4:	d000      	beq.n	8fe8 <find_volume+0x1b8>
    8fe6:	e756      	b.n	8e96 <find_volume+0x66>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    8fe8:	465a      	mov	r2, fp
    8fea:	2a00      	cmp	r2, #0
    8fec:	d000      	beq.n	8ff0 <find_volume+0x1c0>
    8fee:	e752      	b.n	8e96 <find_volume+0x66>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    8ff0:	0020      	movs	r0, r4
    8ff2:	3060      	adds	r0, #96	; 0x60
    8ff4:	f7fe ff8c 	bl	7f10 <ld_dword>
    8ff8:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    8ffa:	00b2      	lsls	r2, r6, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    8ffc:	4b5a      	ldr	r3, [pc, #360]	; (9168 <find_volume+0x338>)
    8ffe:	469c      	mov	ip, r3
    9000:	4462      	add	r2, ip
    9002:	0a52      	lsrs	r2, r2, #9
    9004:	3bf3      	subs	r3, #243	; 0xf3
    9006:	3bff      	subs	r3, #255	; 0xff
    9008:	4591      	cmp	r9, r2
    900a:	d200      	bcs.n	900e <find_volume+0x1de>
    900c:	e743      	b.n	8e96 <find_volume+0x66>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    900e:	2301      	movs	r3, #1
    9010:	425b      	negs	r3, r3
    9012:	6163      	str	r3, [r4, #20]
    9014:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
    9016:	3381      	adds	r3, #129	; 0x81
    9018:	7123      	strb	r3, [r4, #4]
	rv = ptr[1];
    901a:	3b1b      	subs	r3, #27
	rv = rv << 8 | ptr[0];
    901c:	5ce2      	ldrb	r2, [r4, r3]
    901e:	0212      	lsls	r2, r2, #8
    9020:	3b01      	subs	r3, #1
    9022:	5ce3      	ldrb	r3, [r4, r3]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    9024:	4313      	orrs	r3, r2
    9026:	2b01      	cmp	r3, #1
    9028:	d12c      	bne.n	9084 <find_volume+0x254>
			&& move_window(fs, bsect + 1) == FR_OK)
    902a:	1c69      	adds	r1, r5, #1
    902c:	0020      	movs	r0, r4
    902e:	f7ff f83f 	bl	80b0 <move_window>
    9032:	2800      	cmp	r0, #0
    9034:	d126      	bne.n	9084 <find_volume+0x254>
			fs->fsi_flag = 0;
    9036:	2300      	movs	r3, #0
    9038:	7123      	strb	r3, [r4, #4]
	rv = ptr[1];
    903a:	4b4c      	ldr	r3, [pc, #304]	; (916c <find_volume+0x33c>)
	rv = rv << 8 | ptr[0];
    903c:	5ce2      	ldrb	r2, [r4, r3]
    903e:	0212      	lsls	r2, r2, #8
    9040:	4b4b      	ldr	r3, [pc, #300]	; (9170 <find_volume+0x340>)
    9042:	5ce3      	ldrb	r3, [r4, r3]
    9044:	4313      	orrs	r3, r2
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    9046:	4a4b      	ldr	r2, [pc, #300]	; (9174 <find_volume+0x344>)
    9048:	b21b      	sxth	r3, r3
    904a:	4293      	cmp	r3, r2
    904c:	d11a      	bne.n	9084 <find_volume+0x254>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    904e:	0020      	movs	r0, r4
    9050:	3034      	adds	r0, #52	; 0x34
    9052:	f7fe ff5d 	bl	7f10 <ld_dword>
    9056:	4b48      	ldr	r3, [pc, #288]	; (9178 <find_volume+0x348>)
    9058:	4298      	cmp	r0, r3
    905a:	d113      	bne.n	9084 <find_volume+0x254>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    905c:	2386      	movs	r3, #134	; 0x86
    905e:	009b      	lsls	r3, r3, #2
    9060:	18e0      	adds	r0, r4, r3
    9062:	f7fe ff55 	bl	7f10 <ld_dword>
    9066:	4b45      	ldr	r3, [pc, #276]	; (917c <find_volume+0x34c>)
    9068:	4298      	cmp	r0, r3
    906a:	d10b      	bne.n	9084 <find_volume+0x254>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    906c:	2387      	movs	r3, #135	; 0x87
    906e:	009b      	lsls	r3, r3, #2
    9070:	18e0      	adds	r0, r4, r3
    9072:	f7fe ff4d 	bl	7f10 <ld_dword>
    9076:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    9078:	2388      	movs	r3, #136	; 0x88
    907a:	009b      	lsls	r3, r3, #2
    907c:	18e0      	adds	r0, r4, r3
    907e:	f7fe ff47 	bl	7f10 <ld_dword>
    9082:	6120      	str	r0, [r4, #16]
	fs->fs_type = fmt;		/* FAT sub-type */
    9084:	4653      	mov	r3, sl
    9086:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
    9088:	4a3d      	ldr	r2, [pc, #244]	; (9180 <find_volume+0x350>)
    908a:	8813      	ldrh	r3, [r2, #0]
    908c:	3301      	adds	r3, #1
    908e:	b29b      	uxth	r3, r3
    9090:	8013      	strh	r3, [r2, #0]
    9092:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
    9094:	4b3b      	ldr	r3, [pc, #236]	; (9184 <find_volume+0x354>)
    9096:	60e3      	str	r3, [r4, #12]
	return FR_OK;
    9098:	2300      	movs	r3, #0
    909a:	e6fc      	b.n	8e96 <find_volume+0x66>
    909c:	0026      	movs	r6, r4
    909e:	36fb      	adds	r6, #251	; 0xfb
    90a0:	36ff      	adds	r6, #255	; 0xff
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    90a2:	2700      	movs	r7, #0
    90a4:	e005      	b.n	90b2 <find_volume+0x282>
    90a6:	ab02      	add	r3, sp, #8
    90a8:	50e8      	str	r0, [r5, r3]
    90aa:	3610      	adds	r6, #16
    90ac:	3504      	adds	r5, #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
    90ae:	2d10      	cmp	r5, #16
    90b0:	d008      	beq.n	90c4 <find_volume+0x294>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    90b2:	1f33      	subs	r3, r6, #4
    90b4:	781b      	ldrb	r3, [r3, #0]
    90b6:	0038      	movs	r0, r7
    90b8:	2b00      	cmp	r3, #0
    90ba:	d0f4      	beq.n	90a6 <find_volume+0x276>
    90bc:	0030      	movs	r0, r6
    90be:	f7fe ff27 	bl	7f10 <ld_dword>
    90c2:	e7f0      	b.n	90a6 <find_volume+0x276>
    90c4:	2700      	movs	r7, #0
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
    90c6:	2603      	movs	r6, #3
    90c8:	e003      	b.n	90d2 <find_volume+0x2a2>
    90ca:	3704      	adds	r7, #4
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
    90cc:	2f10      	cmp	r7, #16
    90ce:	d100      	bne.n	90d2 <find_volume+0x2a2>
    90d0:	e6f6      	b.n	8ec0 <find_volume+0x90>
			bsect = br[i];
    90d2:	ab02      	add	r3, sp, #8
    90d4:	58fd      	ldr	r5, [r7, r3]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
    90d6:	0030      	movs	r0, r6
    90d8:	2d00      	cmp	r5, #0
    90da:	d0f6      	beq.n	90ca <find_volume+0x29a>
    90dc:	0029      	movs	r1, r5
    90de:	0020      	movs	r0, r4
    90e0:	f7ff fe5e 	bl	8da0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
    90e4:	2801      	cmp	r0, #1
    90e6:	d8f0      	bhi.n	90ca <find_volume+0x29a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    90e8:	2804      	cmp	r0, #4
    90ea:	d000      	beq.n	90ee <find_volume+0x2be>
    90ec:	e6ee      	b.n	8ecc <find_volume+0x9c>
    90ee:	2301      	movs	r3, #1
    90f0:	e6d1      	b.n	8e96 <find_volume+0x66>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    90f2:	2303      	movs	r3, #3
    90f4:	4373      	muls	r3, r6
    90f6:	085b      	lsrs	r3, r3, #1
    90f8:	2201      	movs	r2, #1
    90fa:	4016      	ands	r6, r2
    90fc:	199e      	adds	r6, r3, r6
    90fe:	e01b      	b.n	9138 <find_volume+0x308>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    9100:	230c      	movs	r3, #12
    9102:	e6c8      	b.n	8e96 <find_volume+0x66>
			return FR_OK;				/* The filesystem object is valid */
    9104:	2300      	movs	r3, #0
    9106:	e6c6      	b.n	8e96 <find_volume+0x66>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    9108:	2301      	movs	r3, #1
    910a:	e6c4      	b.n	8e96 <find_volume+0x66>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    910c:	1c86      	adds	r6, r0, #2
    910e:	61a6      	str	r6, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
    9110:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    9112:	197f      	adds	r7, r7, r5
    9114:	6267      	str	r7, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
    9116:	4445      	add	r5, r8
    9118:	62e5      	str	r5, [r4, #44]	; 0x2c
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    911a:	2301      	movs	r3, #1
    911c:	469a      	mov	sl, r3
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    911e:	230d      	movs	r3, #13
    9120:	465a      	mov	r2, fp
    9122:	2a00      	cmp	r2, #0
    9124:	d100      	bne.n	9128 <find_volume+0x2f8>
    9126:	e6b6      	b.n	8e96 <find_volume+0x66>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    9128:	9b01      	ldr	r3, [sp, #4]
    912a:	469c      	mov	ip, r3
    912c:	4467      	add	r7, ip
    912e:	62a7      	str	r7, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    9130:	4653      	mov	r3, sl
    9132:	2b02      	cmp	r3, #2
    9134:	d1dd      	bne.n	90f2 <find_volume+0x2c2>
    9136:	0076      	lsls	r6, r6, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    9138:	4b0b      	ldr	r3, [pc, #44]	; (9168 <find_volume+0x338>)
    913a:	469c      	mov	ip, r3
    913c:	4466      	add	r6, ip
    913e:	0a76      	lsrs	r6, r6, #9
    9140:	3bf3      	subs	r3, #243	; 0xf3
    9142:	3bff      	subs	r3, #255	; 0xff
    9144:	45b1      	cmp	r9, r6
    9146:	d200      	bcs.n	914a <find_volume+0x31a>
    9148:	e6a5      	b.n	8e96 <find_volume+0x66>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    914a:	2301      	movs	r3, #1
    914c:	425b      	negs	r3, r3
    914e:	6163      	str	r3, [r4, #20]
    9150:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
    9152:	3381      	adds	r3, #129	; 0x81
    9154:	7123      	strb	r3, [r4, #4]
    9156:	e795      	b.n	9084 <find_volume+0x254>
    9158:	20000db0 	.word	0x20000db0
    915c:	0ffffff5 	.word	0x0ffffff5
    9160:	0000fff5 	.word	0x0000fff5
    9164:	00000ff5 	.word	0x00000ff5
    9168:	000001ff 	.word	0x000001ff
    916c:	00000233 	.word	0x00000233
    9170:	00000232 	.word	0x00000232
    9174:	ffffaa55 	.word	0xffffaa55
    9178:	41615252 	.word	0x41615252
    917c:	61417272 	.word	0x61417272
    9180:	20000db4 	.word	0x20000db4
    9184:	20000db8 	.word	0x20000db8
	...

00009190 <dir_read>:
{
    9190:	b5f0      	push	{r4, r5, r6, r7, lr}
    9192:	46de      	mov	lr, fp
    9194:	4657      	mov	r7, sl
    9196:	464e      	mov	r6, r9
    9198:	4645      	mov	r5, r8
    919a:	b5e0      	push	{r5, r6, r7, lr}
    919c:	b083      	sub	sp, #12
    919e:	0005      	movs	r5, r0
    91a0:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
    91a2:	6803      	ldr	r3, [r0, #0]
    91a4:	9300      	str	r3, [sp, #0]
	BYTE ord = 0xFF, sum = 0xFF;
    91a6:	23ff      	movs	r3, #255	; 0xff
    91a8:	4699      	mov	r9, r3
    91aa:	27ff      	movs	r7, #255	; 0xff
	FRESULT res = FR_NO_FILE;
    91ac:	2404      	movs	r4, #4
			if (uc != 0xFFFF) return 0;		/* Check filler */
    91ae:	4b4c      	ldr	r3, [pc, #304]	; (92e0 <dir_read+0x150>)
    91b0:	469a      	mov	sl, r3
	while (dp->sect) {
    91b2:	e063      	b.n	927c <dir_read+0xec>
				if (a == AM_LFN) {			/* An LFN entry is found */
    91b4:	2b0f      	cmp	r3, #15
    91b6:	d14e      	bne.n	9256 <dir_read+0xc6>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
    91b8:	0653      	lsls	r3, r2, #25
    91ba:	d51e      	bpl.n	91fa <dir_read+0x6a>
						sum = dp->dir[LDIR_Chksum];
    91bc:	7b43      	ldrb	r3, [r0, #13]
    91be:	4699      	mov	r9, r3
						c &= (BYTE)~LLEF; ord = c;
    91c0:	2340      	movs	r3, #64	; 0x40
    91c2:	439a      	bics	r2, r3
						dp->blk_ofs = dp->dptr;
    91c4:	692b      	ldr	r3, [r5, #16]
    91c6:	62eb      	str	r3, [r5, #44]	; 0x2c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    91c8:	7b44      	ldrb	r4, [r0, #13]
    91ca:	27ff      	movs	r7, #255	; 0xff
    91cc:	454c      	cmp	r4, r9
    91ce:	d14f      	bne.n	9270 <dir_read+0xe0>
	rv = rv << 8 | ptr[0];
    91d0:	7ec1      	ldrb	r1, [r0, #27]
    91d2:	0209      	lsls	r1, r1, #8
    91d4:	7e83      	ldrb	r3, [r0, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
    91d6:	430b      	orrs	r3, r1
    91d8:	d173      	bne.n	92c2 <dir_read+0x132>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    91da:	9b00      	ldr	r3, [sp, #0]
    91dc:	68db      	ldr	r3, [r3, #12]
    91de:	4699      	mov	r9, r3
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
    91e0:	7807      	ldrb	r7, [r0, #0]
    91e2:	2340      	movs	r3, #64	; 0x40
    91e4:	439f      	bics	r7, r3
    91e6:	1e7b      	subs	r3, r7, #1
    91e8:	005f      	lsls	r7, r3, #1
    91ea:	18ff      	adds	r7, r7, r3
    91ec:	00bf      	lsls	r7, r7, #2
    91ee:	18fb      	adds	r3, r7, r3
    91f0:	9301      	str	r3, [sp, #4]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    91f2:	2301      	movs	r3, #1
    91f4:	469c      	mov	ip, r3
    91f6:	2100      	movs	r1, #0
    91f8:	e008      	b.n	920c <dir_read+0x7c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    91fa:	4297      	cmp	r7, r2
    91fc:	d0e4      	beq.n	91c8 <dir_read+0x38>
    91fe:	27ff      	movs	r7, #255	; 0xff
    9200:	e036      	b.n	9270 <dir_read+0xe0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
    9202:	4553      	cmp	r3, sl
    9204:	d15d      	bne.n	92c2 <dir_read+0x132>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    9206:	3101      	adds	r1, #1
    9208:	290d      	cmp	r1, #13
    920a:	d016      	beq.n	923a <dir_read+0xaa>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
    920c:	4b35      	ldr	r3, [pc, #212]	; (92e4 <dir_read+0x154>)
    920e:	5ccb      	ldrb	r3, [r1, r3]
    9210:	18c3      	adds	r3, r0, r3
	rv = rv << 8 | ptr[0];
    9212:	785e      	ldrb	r6, [r3, #1]
    9214:	0236      	lsls	r6, r6, #8
    9216:	781b      	ldrb	r3, [r3, #0]
    9218:	4333      	orrs	r3, r6
		if (wc) {
    921a:	4666      	mov	r6, ip
    921c:	2e00      	cmp	r6, #0
    921e:	d0f0      	beq.n	9202 <dir_read+0x72>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
    9220:	9e01      	ldr	r6, [sp, #4]
    9222:	2efe      	cmp	r6, #254	; 0xfe
    9224:	d84d      	bhi.n	92c2 <dir_read+0x132>
			lfnbuf[i++] = wc = uc;			/* Store it */
    9226:	0076      	lsls	r6, r6, #1
    9228:	46b4      	mov	ip, r6
    922a:	464e      	mov	r6, r9
    922c:	4667      	mov	r7, ip
    922e:	53bb      	strh	r3, [r7, r6]
    9230:	469c      	mov	ip, r3
    9232:	9e01      	ldr	r6, [sp, #4]
    9234:	3601      	adds	r6, #1
    9236:	9601      	str	r6, [sp, #4]
    9238:	e7e5      	b.n	9206 <dir_read+0x76>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
    923a:	7803      	ldrb	r3, [r0, #0]
    923c:	065b      	lsls	r3, r3, #25
    923e:	d506      	bpl.n	924e <dir_read+0xbe>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
    9240:	9b01      	ldr	r3, [sp, #4]
    9242:	2bfe      	cmp	r3, #254	; 0xfe
    9244:	d83d      	bhi.n	92c2 <dir_read+0x132>
		lfnbuf[i] = 0;
    9246:	005f      	lsls	r7, r3, #1
    9248:	2300      	movs	r3, #0
    924a:	4649      	mov	r1, r9
    924c:	527b      	strh	r3, [r7, r1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    924e:	3a01      	subs	r2, #1
    9250:	b2d7      	uxtb	r7, r2
    9252:	46a1      	mov	r9, r4
    9254:	e00c      	b.n	9270 <dir_read+0xe0>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
    9256:	2f00      	cmp	r7, #0
    9258:	d103      	bne.n	9262 <dir_read+0xd2>
    925a:	f7fe fea1 	bl	7fa0 <sum_sfn>
    925e:	4581      	cmp	r9, r0
    9260:	d035      	beq.n	92ce <dir_read+0x13e>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
    9262:	2301      	movs	r3, #1
    9264:	425b      	negs	r3, r3
    9266:	62eb      	str	r3, [r5, #44]	; 0x2c
    9268:	e031      	b.n	92ce <dir_read+0x13e>
				ord = 0xFF;
    926a:	27ff      	movs	r7, #255	; 0xff
    926c:	e000      	b.n	9270 <dir_read+0xe0>
    926e:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
    9270:	2100      	movs	r1, #0
    9272:	0028      	movs	r0, r5
    9274:	f7ff faa4 	bl	87c0 <dir_next>
    9278:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
    927a:	d126      	bne.n	92ca <dir_read+0x13a>
	while (dp->sect) {
    927c:	69a9      	ldr	r1, [r5, #24]
    927e:	2900      	cmp	r1, #0
    9280:	d01c      	beq.n	92bc <dir_read+0x12c>
		res = move_window(fs, dp->sect);
    9282:	9800      	ldr	r0, [sp, #0]
    9284:	f7fe ff14 	bl	80b0 <move_window>
    9288:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
    928a:	d11e      	bne.n	92ca <dir_read+0x13a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
    928c:	69e8      	ldr	r0, [r5, #28]
    928e:	7802      	ldrb	r2, [r0, #0]
		if (c == 0) {
    9290:	2a00      	cmp	r2, #0
    9292:	d019      	beq.n	92c8 <dir_read+0x138>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
    9294:	7ac3      	ldrb	r3, [r0, #11]
    9296:	213f      	movs	r1, #63	; 0x3f
    9298:	400b      	ands	r3, r1
    929a:	71ab      	strb	r3, [r5, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
    929c:	2ae5      	cmp	r2, #229	; 0xe5
    929e:	d0e4      	beq.n	926a <dir_read+0xda>
    92a0:	2a2e      	cmp	r2, #46	; 0x2e
    92a2:	d0e4      	beq.n	926e <dir_read+0xde>
    92a4:	391f      	subs	r1, #31
    92a6:	001e      	movs	r6, r3
    92a8:	438e      	bics	r6, r1
    92aa:	0031      	movs	r1, r6
    92ac:	3908      	subs	r1, #8
    92ae:	424e      	negs	r6, r1
    92b0:	414e      	adcs	r6, r1
    92b2:	4546      	cmp	r6, r8
    92b4:	d100      	bne.n	92b8 <dir_read+0x128>
    92b6:	e77d      	b.n	91b4 <dir_read+0x24>
				ord = 0xFF;
    92b8:	27ff      	movs	r7, #255	; 0xff
    92ba:	e7d9      	b.n	9270 <dir_read+0xe0>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    92bc:	2c00      	cmp	r4, #0
    92be:	d006      	beq.n	92ce <dir_read+0x13e>
    92c0:	e003      	b.n	92ca <dir_read+0x13a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    92c2:	46a1      	mov	r9, r4
    92c4:	27ff      	movs	r7, #255	; 0xff
    92c6:	e7d3      	b.n	9270 <dir_read+0xe0>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
    92c8:	2404      	movs	r4, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    92ca:	2300      	movs	r3, #0
    92cc:	61ab      	str	r3, [r5, #24]
}
    92ce:	0020      	movs	r0, r4
    92d0:	b003      	add	sp, #12
    92d2:	bc3c      	pop	{r2, r3, r4, r5}
    92d4:	4690      	mov	r8, r2
    92d6:	4699      	mov	r9, r3
    92d8:	46a2      	mov	sl, r4
    92da:	46ab      	mov	fp, r5
    92dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92de:	46c0      	nop			; (mov r8, r8)
    92e0:	0000ffff 	.word	0x0000ffff
    92e4:	0000ee6c 	.word	0x0000ee6c
	...

000092f0 <ld_clust>:
{
    92f0:	b510      	push	{r4, lr}
    92f2:	0004      	movs	r4, r0
	rv = rv << 8 | ptr[0];
    92f4:	7eca      	ldrb	r2, [r1, #27]
    92f6:	0212      	lsls	r2, r2, #8
    92f8:	7e88      	ldrb	r0, [r1, #26]
	cl = ld_word(dir + DIR_FstClusLO);
    92fa:	4310      	orrs	r0, r2
	if (fs->fs_type == FS_FAT32) {
    92fc:	7823      	ldrb	r3, [r4, #0]
    92fe:	2b03      	cmp	r3, #3
    9300:	d000      	beq.n	9304 <ld_clust+0x14>
}
    9302:	bd10      	pop	{r4, pc}
	rv = rv << 8 | ptr[0];
    9304:	7d4a      	ldrb	r2, [r1, #21]
    9306:	0212      	lsls	r2, r2, #8
    9308:	7d0b      	ldrb	r3, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    930a:	4313      	orrs	r3, r2
    930c:	041b      	lsls	r3, r3, #16
    930e:	4318      	orrs	r0, r3
	return cl;
    9310:	e7f7      	b.n	9302 <ld_clust+0x12>
    9312:	46c0      	nop			; (mov r8, r8)
	...

00009320 <follow_path>:
{
    9320:	b5f0      	push	{r4, r5, r6, r7, lr}
    9322:	46de      	mov	lr, fp
    9324:	4657      	mov	r7, sl
    9326:	464e      	mov	r6, r9
    9328:	4645      	mov	r5, r8
    932a:	b5e0      	push	{r5, r6, r7, lr}
    932c:	b085      	sub	sp, #20
    932e:	000d      	movs	r5, r1
	FATFS *fs = dp->obj.fs;
    9330:	6803      	ldr	r3, [r0, #0]
    9332:	9302      	str	r3, [sp, #8]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    9334:	e000      	b.n	9338 <follow_path+0x18>
    9336:	3501      	adds	r5, #1
    9338:	782b      	ldrb	r3, [r5, #0]
    933a:	2b2f      	cmp	r3, #47	; 0x2f
    933c:	d0fb      	beq.n	9336 <follow_path+0x16>
    933e:	2b5c      	cmp	r3, #92	; 0x5c
    9340:	d0f9      	beq.n	9336 <follow_path+0x16>
		dp->obj.sclust = 0;					/* Start from root directory */
    9342:	2300      	movs	r3, #0
    9344:	6083      	str	r3, [r0, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    9346:	782b      	ldrb	r3, [r5, #0]
    9348:	2b1f      	cmp	r3, #31
    934a:	d904      	bls.n	9356 <follow_path+0x36>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    934c:	231f      	movs	r3, #31
    934e:	469b      	mov	fp, r3
			if (w & 0x80) w = ExCvt[w & 0x7F];	/* Convert extended character to upper (SBCS) */
    9350:	4682      	mov	sl, r0
    9352:	46a9      	mov	r9, r5
    9354:	e0fc      	b.n	9550 <follow_path+0x230>
		dp->fn[NSFLAG] = NS_NONAME;
    9356:	2280      	movs	r2, #128	; 0x80
    9358:	232b      	movs	r3, #43	; 0x2b
    935a:	54c2      	strb	r2, [r0, r3]
		res = dir_sdi(dp, 0);
    935c:	2100      	movs	r1, #0
    935e:	f7ff f907 	bl	8570 <dir_sdi>
    9362:	e193      	b.n	968c <follow_path+0x36c>
    9364:	4649      	mov	r1, r9
    9366:	e00a      	b.n	937e <follow_path+0x5e>
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
    9368:	2400      	movs	r4, #0
		w = p[si++];					/* Get a character */
    936a:	2301      	movs	r3, #1
    936c:	4649      	mov	r1, r9
    936e:	e006      	b.n	937e <follow_path+0x5e>
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
    9370:	2400      	movs	r4, #0
		w = p[si++];					/* Get a character */
    9372:	2301      	movs	r3, #1
    9374:	4649      	mov	r1, r9
    9376:	e002      	b.n	937e <follow_path+0x5e>
    9378:	4649      	mov	r1, r9
    937a:	e000      	b.n	937e <follow_path+0x5e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    937c:	3301      	adds	r3, #1
    937e:	5cca      	ldrb	r2, [r1, r3]
    9380:	2a2f      	cmp	r2, #47	; 0x2f
    9382:	d0fb      	beq.n	937c <follow_path+0x5c>
    9384:	2a5c      	cmp	r2, #92	; 0x5c
    9386:	d0f9      	beq.n	937c <follow_path+0x5c>
    9388:	4689      	mov	r9, r1
	*path = &p[si];						/* Return pointer to the next segment */
    938a:	4499      	add	r9, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    938c:	2500      	movs	r5, #0
    938e:	465b      	mov	r3, fp
    9390:	4283      	cmp	r3, r0
    9392:	416d      	adcs	r5, r5
    9394:	00ad      	lsls	r5, r5, #2
	while (di) {						/* Snip off trailing spaces and dots if exist */
    9396:	2c00      	cmp	r4, #0
    9398:	d100      	bne.n	939c <follow_path+0x7c>
    939a:	e173      	b.n	9684 <follow_path+0x364>
    939c:	4bb5      	ldr	r3, [pc, #724]	; (9674 <follow_path+0x354>)
    939e:	18e3      	adds	r3, r4, r3
    93a0:	005b      	lsls	r3, r3, #1
    93a2:	9a01      	ldr	r2, [sp, #4]
    93a4:	4694      	mov	ip, r2
    93a6:	4463      	add	r3, ip
    93a8:	e02a      	b.n	9400 <follow_path+0xe0>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
    93aa:	2b00      	cmp	r3, #0
    93ac:	d133      	bne.n	9416 <follow_path+0xf6>
		lfn[di++] = w;					/* Store the Unicode character */
    93ae:	8038      	strh	r0, [r7, #0]
		w = p[si++];					/* Get a character */
    93b0:	1c63      	adds	r3, r4, #1
    93b2:	7830      	ldrb	r0, [r6, #0]
		if (w < ' ') break;				/* Break if end of the path name */
    93b4:	281f      	cmp	r0, #31
    93b6:	d800      	bhi.n	93ba <follow_path+0x9a>
    93b8:	e159      	b.n	966e <follow_path+0x34e>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
    93ba:	282f      	cmp	r0, #47	; 0x2f
    93bc:	d0d2      	beq.n	9364 <follow_path+0x44>
    93be:	285c      	cmp	r0, #92	; 0x5c
    93c0:	d0da      	beq.n	9378 <follow_path+0x58>
    93c2:	3702      	adds	r7, #2
    93c4:	3601      	adds	r6, #1
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
    93c6:	4543      	cmp	r3, r8
    93c8:	d025      	beq.n	9416 <follow_path+0xf6>
		w = p[si++];					/* Get a character */
    93ca:	001c      	movs	r4, r3
		w = ff_oem2uni(w, CODEPAGE);	/* Convert ANSI/OEM to Unicode */
    93cc:	21b6      	movs	r1, #182	; 0xb6
    93ce:	31ff      	adds	r1, #255	; 0xff
    93d0:	f000 fda6 	bl	9f20 <ff_oem2uni>
    93d4:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    93d6:	d01e      	beq.n	9416 <follow_path+0xf6>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
    93d8:	287f      	cmp	r0, #127	; 0x7f
    93da:	d8e8      	bhi.n	93ae <follow_path+0x8e>
	while (*str && *str != chr) str++;
    93dc:	2822      	cmp	r0, #34	; 0x22
    93de:	d100      	bne.n	93e2 <follow_path+0xc2>
    93e0:	e153      	b.n	968a <follow_path+0x36a>
    93e2:	232a      	movs	r3, #42	; 0x2a
    93e4:	4aa4      	ldr	r2, [pc, #656]	; (9678 <follow_path+0x358>)
    93e6:	b29d      	uxth	r5, r3
    93e8:	428d      	cmp	r5, r1
    93ea:	d0de      	beq.n	93aa <follow_path+0x8a>
    93ec:	3201      	adds	r2, #1
    93ee:	7813      	ldrb	r3, [r2, #0]
    93f0:	2b00      	cmp	r3, #0
    93f2:	d1f8      	bne.n	93e6 <follow_path+0xc6>
    93f4:	e7db      	b.n	93ae <follow_path+0x8e>
		di--;
    93f6:	3c01      	subs	r4, #1
    93f8:	3b02      	subs	r3, #2
	while (di) {						/* Snip off trailing spaces and dots if exist */
    93fa:	2c00      	cmp	r4, #0
    93fc:	d100      	bne.n	9400 <follow_path+0xe0>
    93fe:	e141      	b.n	9684 <follow_path+0x364>
		w = lfn[di - 1];
    9400:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    9402:	2a20      	cmp	r2, #32
    9404:	d0f7      	beq.n	93f6 <follow_path+0xd6>
    9406:	2a2e      	cmp	r2, #46	; 0x2e
    9408:	d0f5      	beq.n	93f6 <follow_path+0xd6>
	lfn[di] = 0;						/* LFN is created */
    940a:	0060      	lsls	r0, r4, #1
    940c:	2300      	movs	r3, #0
    940e:	9a01      	ldr	r2, [sp, #4]
    9410:	5213      	strh	r3, [r2, r0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
    9412:	2c00      	cmp	r4, #0
    9414:	d101      	bne.n	941a <follow_path+0xfa>
				res = FR_NO_PATH; break;
    9416:	2006      	movs	r0, #6
	return res;
    9418:	e138      	b.n	968c <follow_path+0x36c>
	mem_set(dp->fn, ' ', 11);
    941a:	4653      	mov	r3, sl
    941c:	3320      	adds	r3, #32
    941e:	4651      	mov	r1, sl
    9420:	312b      	adds	r1, #43	; 0x2b
		*d++ = (BYTE)val;
    9422:	2220      	movs	r2, #32
    9424:	701a      	strb	r2, [r3, #0]
    9426:	3301      	adds	r3, #1
	} while (--cnt);
    9428:	428b      	cmp	r3, r1
    942a:	d1fb      	bne.n	9424 <follow_path+0x104>
    942c:	9a01      	ldr	r2, [sp, #4]
    942e:	2300      	movs	r3, #0
    9430:	e001      	b.n	9436 <follow_path+0x116>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    9432:	3301      	adds	r3, #1
    9434:	3202      	adds	r2, #2
    9436:	8811      	ldrh	r1, [r2, #0]
    9438:	2920      	cmp	r1, #32
    943a:	d0fa      	beq.n	9432 <follow_path+0x112>
    943c:	292e      	cmp	r1, #46	; 0x2e
    943e:	d0f8      	beq.n	9432 <follow_path+0x112>
	if (si > 0) cf |= NS_LOSS | NS_LFN;
    9440:	2b00      	cmp	r3, #0
    9442:	d002      	beq.n	944a <follow_path+0x12a>
    9444:	2203      	movs	r2, #3
    9446:	4315      	orrs	r5, r2
    9448:	b2ed      	uxtb	r5, r5
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    944a:	9901      	ldr	r1, [sp, #4]
    944c:	180a      	adds	r2, r1, r0
    944e:	3a02      	subs	r2, #2
    9450:	8812      	ldrh	r2, [r2, #0]
    9452:	2a2e      	cmp	r2, #46	; 0x2e
    9454:	d009      	beq.n	946a <follow_path+0x14a>
    9456:	1f02      	subs	r2, r0, #4
    9458:	468c      	mov	ip, r1
    945a:	4462      	add	r2, ip
    945c:	3c01      	subs	r4, #1
    945e:	2c00      	cmp	r4, #0
    9460:	d003      	beq.n	946a <follow_path+0x14a>
    9462:	3a02      	subs	r2, #2
    9464:	8851      	ldrh	r1, [r2, #2]
    9466:	292e      	cmp	r1, #46	; 0x2e
    9468:	d1f8      	bne.n	945c <follow_path+0x13c>
		w = lfn[si++];					/* Get an LFN character */
    946a:	2708      	movs	r7, #8
    946c:	2200      	movs	r2, #0
    946e:	9203      	str	r2, [sp, #12]
    9470:	4690      	mov	r8, r2
    9472:	e006      	b.n	9482 <follow_path+0x162>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    9474:	42a6      	cmp	r6, r4
    9476:	d100      	bne.n	947a <follow_path+0x15a>
    9478:	e10f      	b.n	969a <follow_path+0x37a>
			cf |= NS_LOSS | NS_LFN;
    947a:	2303      	movs	r3, #3
    947c:	431d      	orrs	r5, r3
    947e:	b2ed      	uxtb	r5, r5
		w = lfn[si++];					/* Get an LFN character */
    9480:	0033      	movs	r3, r6
    9482:	1c5e      	adds	r6, r3, #1
    9484:	005b      	lsls	r3, r3, #1
    9486:	9a01      	ldr	r2, [sp, #4]
    9488:	5a9b      	ldrh	r3, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    948a:	2b00      	cmp	r3, #0
    948c:	d024      	beq.n	94d8 <follow_path+0x1b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    948e:	2b20      	cmp	r3, #32
    9490:	d0f3      	beq.n	947a <follow_path+0x15a>
    9492:	2b2e      	cmp	r3, #46	; 0x2e
    9494:	d0ee      	beq.n	9474 <follow_path+0x154>
		if (i >= ni || si == di) {		/* Entered extension or end of SFN */
    9496:	9a03      	ldr	r2, [sp, #12]
    9498:	42ba      	cmp	r2, r7
    949a:	d212      	bcs.n	94c2 <follow_path+0x1a2>
    949c:	42a6      	cmp	r6, r4
    949e:	d100      	bne.n	94a2 <follow_path+0x182>
    94a0:	e0fb      	b.n	969a <follow_path+0x37a>
		if (w >= 0x80) {				/* Is this a non-ASCII character? */
    94a2:	2b7f      	cmp	r3, #127	; 0x7f
    94a4:	d878      	bhi.n	9598 <follow_path+0x278>
		if (w >= 0x100) {				/* Is this a DBC? */
    94a6:	2bff      	cmp	r3, #255	; 0xff
    94a8:	d800      	bhi.n	94ac <follow_path+0x18c>
    94aa:	e09d      	b.n	95e8 <follow_path+0x2c8>
			if (i >= ni - 1) {			/* Field overflow? */
    94ac:	1e7a      	subs	r2, r7, #1
    94ae:	9903      	ldr	r1, [sp, #12]
    94b0:	4291      	cmp	r1, r2
    94b2:	d200      	bcs.n	94b6 <follow_path+0x196>
    94b4:	e090      	b.n	95d8 <follow_path+0x2b8>
				cf |= NS_LOSS | NS_LFN;
    94b6:	2303      	movs	r3, #3
    94b8:	431d      	orrs	r5, r3
    94ba:	b2ed      	uxtb	r5, r5
		w = lfn[si++];					/* Get an LFN character */
    94bc:	0033      	movs	r3, r6
				cf |= NS_LOSS | NS_LFN;
    94be:	9703      	str	r7, [sp, #12]
    94c0:	e7df      	b.n	9482 <follow_path+0x162>
			if (ni == 11) {				/* Extension fileld overflow? */
    94c2:	2f0b      	cmp	r7, #11
    94c4:	d05a      	beq.n	957c <follow_path+0x25c>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    94c6:	42a6      	cmp	r6, r4
    94c8:	d100      	bne.n	94cc <follow_path+0x1ac>
    94ca:	e0e9      	b.n	96a0 <follow_path+0x380>
    94cc:	2303      	movs	r3, #3
    94ce:	431d      	orrs	r5, r3
    94d0:	b2ed      	uxtb	r5, r5
			if (si > di) break;			/* No extension */
    94d2:	42a6      	cmp	r6, r4
    94d4:	d800      	bhi.n	94d8 <follow_path+0x1b8>
    94d6:	e0e3      	b.n	96a0 <follow_path+0x380>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    94d8:	2320      	movs	r3, #32
    94da:	4652      	mov	r2, sl
    94dc:	5cd3      	ldrb	r3, [r2, r3]
    94de:	2be5      	cmp	r3, #229	; 0xe5
    94e0:	d055      	beq.n	958e <follow_path+0x26e>
	if (ni == 8) b <<= 2;
    94e2:	2f08      	cmp	r7, #8
    94e4:	d100      	bne.n	94e8 <follow_path+0x1c8>
    94e6:	e0a7      	b.n	9638 <follow_path+0x318>
    94e8:	230c      	movs	r3, #12
    94ea:	4642      	mov	r2, r8
    94ec:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
    94ee:	2b0c      	cmp	r3, #12
    94f0:	d100      	bne.n	94f4 <follow_path+0x1d4>
    94f2:	e0a6      	b.n	9642 <follow_path+0x322>
    94f4:	43d2      	mvns	r2, r2
    94f6:	0792      	lsls	r2, r2, #30
    94f8:	d100      	bne.n	94fc <follow_path+0x1dc>
    94fa:	e0a2      	b.n	9642 <follow_path+0x322>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
    94fc:	07aa      	lsls	r2, r5, #30
    94fe:	d408      	bmi.n	9512 <follow_path+0x1f2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    9500:	2203      	movs	r2, #3
    9502:	4641      	mov	r1, r8
    9504:	400a      	ands	r2, r1
    9506:	2a01      	cmp	r2, #1
    9508:	d100      	bne.n	950c <follow_path+0x1ec>
    950a:	e09e      	b.n	964a <follow_path+0x32a>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    950c:	2b04      	cmp	r3, #4
    950e:	d100      	bne.n	9512 <follow_path+0x1f2>
    9510:	e09f      	b.n	9652 <follow_path+0x332>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
    9512:	242b      	movs	r4, #43	; 0x2b
    9514:	4653      	mov	r3, sl
    9516:	551d      	strb	r5, [r3, r4]
			res = dir_find(dp);				/* Find an object with the segment name */
    9518:	4650      	mov	r0, sl
    951a:	f7ff f9b9 	bl	8890 <dir_find>
			ns = dp->fn[NSFLAG];
    951e:	4653      	mov	r3, sl
    9520:	5d1b      	ldrb	r3, [r3, r4]
			if (res != FR_OK) {				/* Failed to find the object */
    9522:	2800      	cmp	r0, #0
    9524:	d000      	beq.n	9528 <follow_path+0x208>
    9526:	e098      	b.n	965a <follow_path+0x33a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    9528:	075b      	lsls	r3, r3, #29
    952a:	d500      	bpl.n	952e <follow_path+0x20e>
    952c:	e0ae      	b.n	968c <follow_path+0x36c>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    952e:	4653      	mov	r3, sl
    9530:	799b      	ldrb	r3, [r3, #6]
    9532:	06db      	lsls	r3, r3, #27
    9534:	d400      	bmi.n	9538 <follow_path+0x218>
    9536:	e096      	b.n	9666 <follow_path+0x346>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    9538:	9802      	ldr	r0, [sp, #8]
    953a:	0003      	movs	r3, r0
    953c:	3334      	adds	r3, #52	; 0x34
    953e:	4652      	mov	r2, sl
    9540:	6912      	ldr	r2, [r2, #16]
    9542:	05d1      	lsls	r1, r2, #23
    9544:	0dc9      	lsrs	r1, r1, #23
    9546:	1859      	adds	r1, r3, r1
    9548:	f7ff fed2 	bl	92f0 <ld_clust>
    954c:	4653      	mov	r3, sl
    954e:	6098      	str	r0, [r3, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
    9550:	4653      	mov	r3, sl
    9552:	681b      	ldr	r3, [r3, #0]
    9554:	68db      	ldr	r3, [r3, #12]
    9556:	9301      	str	r3, [sp, #4]
		w = p[si++];					/* Get a character */
    9558:	464a      	mov	r2, r9
    955a:	7810      	ldrb	r0, [r2, #0]
		if (w < ' ') break;				/* Break if end of the path name */
    955c:	281f      	cmp	r0, #31
    955e:	d800      	bhi.n	9562 <follow_path+0x242>
    9560:	e083      	b.n	966a <follow_path+0x34a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
    9562:	282f      	cmp	r0, #47	; 0x2f
    9564:	d100      	bne.n	9568 <follow_path+0x248>
    9566:	e6ff      	b.n	9368 <follow_path+0x48>
    9568:	285c      	cmp	r0, #92	; 0x5c
    956a:	d100      	bne.n	956e <follow_path+0x24e>
    956c:	e700      	b.n	9370 <follow_path+0x50>
    956e:	001f      	movs	r7, r3
    9570:	1c56      	adds	r6, r2, #1
    9572:	2401      	movs	r4, #1
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
    9574:	2380      	movs	r3, #128	; 0x80
    9576:	005b      	lsls	r3, r3, #1
    9578:	4698      	mov	r8, r3
    957a:	e727      	b.n	93cc <follow_path+0xac>
				cf |= NS_LOSS | NS_LFN;
    957c:	2303      	movs	r3, #3
    957e:	431d      	orrs	r5, r3
    9580:	b2ed      	uxtb	r5, r5
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    9582:	2320      	movs	r3, #32
    9584:	4652      	mov	r2, sl
    9586:	5cd3      	ldrb	r3, [r2, r3]
    9588:	2be5      	cmp	r3, #229	; 0xe5
    958a:	d1ad      	bne.n	94e8 <follow_path+0x1c8>
    958c:	270b      	movs	r7, #11
    958e:	2205      	movs	r2, #5
    9590:	2320      	movs	r3, #32
    9592:	4651      	mov	r1, sl
    9594:	54ca      	strb	r2, [r1, r3]
    9596:	e7a4      	b.n	94e2 <follow_path+0x1c2>
			cf |= NS_LFN;				/* Force to create LFN entry */
    9598:	2202      	movs	r2, #2
    959a:	4315      	orrs	r5, r2
    959c:	b2ed      	uxtb	r5, r5
			w = ff_uni2oem(w, CODEPAGE);	/* Unicode -> OEM code */
    959e:	21b6      	movs	r1, #182	; 0xb6
    95a0:	31ff      	adds	r1, #255	; 0xff
    95a2:	0018      	movs	r0, r3
    95a4:	f000 fc9c 	bl	9ee0 <ff_uni2oem>
    95a8:	0003      	movs	r3, r0
			if (w & 0x80) w = ExCvt[w & 0x7F];	/* Convert extended character to upper (SBCS) */
    95aa:	0602      	lsls	r2, r0, #24
    95ac:	d503      	bpl.n	95b6 <follow_path+0x296>
    95ae:	237f      	movs	r3, #127	; 0x7f
    95b0:	4018      	ands	r0, r3
    95b2:	4b32      	ldr	r3, [pc, #200]	; (967c <follow_path+0x35c>)
    95b4:	5c1b      	ldrb	r3, [r3, r0]
		if (w >= 0x100) {				/* Is this a DBC? */
    95b6:	2bff      	cmp	r3, #255	; 0xff
    95b8:	d900      	bls.n	95bc <follow_path+0x29c>
    95ba:	e777      	b.n	94ac <follow_path+0x18c>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
    95bc:	2b00      	cmp	r3, #0
    95be:	d113      	bne.n	95e8 <follow_path+0x2c8>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    95c0:	2303      	movs	r3, #3
    95c2:	431d      	orrs	r5, r3
    95c4:	b2ed      	uxtb	r5, r5
    95c6:	9a03      	ldr	r2, [sp, #12]
    95c8:	335c      	adds	r3, #92	; 0x5c
		dp->fn[i++] = (BYTE)w;
    95ca:	1c51      	adds	r1, r2, #1
    95cc:	9103      	str	r1, [sp, #12]
    95ce:	4452      	add	r2, sl
    95d0:	3220      	adds	r2, #32
    95d2:	7013      	strb	r3, [r2, #0]
		w = lfn[si++];					/* Get an LFN character */
    95d4:	0033      	movs	r3, r6
    95d6:	e754      	b.n	9482 <follow_path+0x162>
			dp->fn[i++] = (BYTE)(w >> 8);	/* Put 1st byte */
    95d8:	9903      	ldr	r1, [sp, #12]
    95da:	000a      	movs	r2, r1
    95dc:	3201      	adds	r2, #1
    95de:	4451      	add	r1, sl
    95e0:	3120      	adds	r1, #32
    95e2:	0a18      	lsrs	r0, r3, #8
    95e4:	7008      	strb	r0, [r1, #0]
    95e6:	e7f0      	b.n	95ca <follow_path+0x2aa>
	while (*str && *str != chr) str++;
    95e8:	2b2b      	cmp	r3, #43	; 0x2b
    95ea:	d0e9      	beq.n	95c0 <follow_path+0x2a0>
    95ec:	222c      	movs	r2, #44	; 0x2c
    95ee:	4924      	ldr	r1, [pc, #144]	; (9680 <follow_path+0x360>)
    95f0:	b290      	uxth	r0, r2
    95f2:	4298      	cmp	r0, r3
    95f4:	d00e      	beq.n	9614 <follow_path+0x2f4>
    95f6:	3101      	adds	r1, #1
    95f8:	780a      	ldrb	r2, [r1, #0]
    95fa:	2a00      	cmp	r2, #0
    95fc:	d1f8      	bne.n	95f0 <follow_path+0x2d0>
				if (IsUpper(w)) {		/* ASCII large capital */
    95fe:	001a      	movs	r2, r3
    9600:	3a41      	subs	r2, #65	; 0x41
    9602:	b292      	uxth	r2, r2
    9604:	2a19      	cmp	r2, #25
    9606:	d808      	bhi.n	961a <follow_path+0x2fa>
					b |= 2;
    9608:	2202      	movs	r2, #2
    960a:	4641      	mov	r1, r8
    960c:	4311      	orrs	r1, r2
    960e:	4688      	mov	r8, r1
    9610:	9a03      	ldr	r2, [sp, #12]
    9612:	e7da      	b.n	95ca <follow_path+0x2aa>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
    9614:	2a00      	cmp	r2, #0
    9616:	d1d3      	bne.n	95c0 <follow_path+0x2a0>
    9618:	e7f1      	b.n	95fe <follow_path+0x2de>
					if (IsLower(w)) {	/* ASCII small capital */
    961a:	0019      	movs	r1, r3
    961c:	3961      	subs	r1, #97	; 0x61
    961e:	b289      	uxth	r1, r1
    9620:	9803      	ldr	r0, [sp, #12]
    9622:	0002      	movs	r2, r0
    9624:	2919      	cmp	r1, #25
    9626:	d8d0      	bhi.n	95ca <follow_path+0x2aa>
						b |= 1; w -= 0x20;
    9628:	2201      	movs	r2, #1
    962a:	4641      	mov	r1, r8
    962c:	4311      	orrs	r1, r2
    962e:	4688      	mov	r8, r1
    9630:	3b20      	subs	r3, #32
    9632:	b29b      	uxth	r3, r3
    9634:	0002      	movs	r2, r0
    9636:	e7c8      	b.n	95ca <follow_path+0x2aa>
	if (ni == 8) b <<= 2;
    9638:	4643      	mov	r3, r8
    963a:	009b      	lsls	r3, r3, #2
    963c:	b2db      	uxtb	r3, r3
    963e:	4698      	mov	r8, r3
    9640:	e752      	b.n	94e8 <follow_path+0x1c8>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
    9642:	2202      	movs	r2, #2
    9644:	4315      	orrs	r5, r2
    9646:	b2ed      	uxtb	r5, r5
    9648:	e758      	b.n	94fc <follow_path+0x1dc>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    964a:	2210      	movs	r2, #16
    964c:	4315      	orrs	r5, r2
    964e:	b2ed      	uxtb	r5, r5
    9650:	e75c      	b.n	950c <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    9652:	2308      	movs	r3, #8
    9654:	431d      	orrs	r5, r3
    9656:	b2ed      	uxtb	r5, r5
    9658:	e75b      	b.n	9512 <follow_path+0x1f2>
				if (res == FR_NO_FILE) {	/* Object is not found */
    965a:	2804      	cmp	r0, #4
    965c:	d116      	bne.n	968c <follow_path+0x36c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    965e:	075b      	lsls	r3, r3, #29
    9660:	d414      	bmi.n	968c <follow_path+0x36c>
    9662:	3001      	adds	r0, #1
    9664:	e012      	b.n	968c <follow_path+0x36c>
				res = FR_NO_PATH; break;
    9666:	2005      	movs	r0, #5
    9668:	e010      	b.n	968c <follow_path+0x36c>
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
    966a:	2400      	movs	r4, #0
		w = p[si++];					/* Get a character */
    966c:	2301      	movs	r3, #1
	*path = &p[si];						/* Return pointer to the next segment */
    966e:	4499      	add	r9, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    9670:	2504      	movs	r5, #4
    9672:	e690      	b.n	9396 <follow_path+0x76>
    9674:	7fffffff 	.word	0x7fffffff
    9678:	0000ee89 	.word	0x0000ee89
    967c:	0000edec 	.word	0x0000edec
    9680:	0000ee95 	.word	0x0000ee95
	lfn[di] = 0;						/* LFN is created */
    9684:	2300      	movs	r3, #0
    9686:	9a01      	ldr	r2, [sp, #4]
    9688:	8013      	strh	r3, [r2, #0]
    968a:	2006      	movs	r0, #6
}
    968c:	b005      	add	sp, #20
    968e:	bc3c      	pop	{r2, r3, r4, r5}
    9690:	4690      	mov	r8, r2
    9692:	4699      	mov	r9, r3
    9694:	46a2      	mov	sl, r4
    9696:	46ab      	mov	fp, r5
    9698:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ni == 11) {				/* Extension fileld overflow? */
    969a:	2f0b      	cmp	r7, #11
    969c:	d100      	bne.n	96a0 <follow_path+0x380>
    969e:	e76d      	b.n	957c <follow_path+0x25c>
			b <<= 2; continue;
    96a0:	4643      	mov	r3, r8
    96a2:	009b      	lsls	r3, r3, #2
    96a4:	b2db      	uxtb	r3, r3
    96a6:	4698      	mov	r8, r3
    96a8:	0023      	movs	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension fileld */
    96aa:	270b      	movs	r7, #11
    96ac:	2208      	movs	r2, #8
    96ae:	9203      	str	r2, [sp, #12]
    96b0:	e6e7      	b.n	9482 <follow_path+0x162>
    96b2:	46c0      	nop			; (mov r8, r8)
	...

000096c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    96c0:	b510      	push	{r4, lr}
    96c2:	b084      	sub	sp, #16
    96c4:	9001      	str	r0, [sp, #4]
    96c6:	9100      	str	r1, [sp, #0]
    96c8:	0014      	movs	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    96ca:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
    96cc:	a803      	add	r0, sp, #12
    96ce:	f7fe fc77 	bl	7fc0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    96d2:	230b      	movs	r3, #11
    96d4:	2800      	cmp	r0, #0
    96d6:	db12      	blt.n	96fe <f_mount+0x3e>
	cfs = FatFs[vol];					/* Pointer to fs object */
    96d8:	0083      	lsls	r3, r0, #2
    96da:	4a0e      	ldr	r2, [pc, #56]	; (9714 <f_mount+0x54>)
    96dc:	589b      	ldr	r3, [r3, r2]

	if (cfs) {
    96de:	2b00      	cmp	r3, #0
    96e0:	d001      	beq.n	96e6 <f_mount+0x26>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    96e2:	2200      	movs	r2, #0
    96e4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    96e6:	9b01      	ldr	r3, [sp, #4]
    96e8:	2b00      	cmp	r3, #0
    96ea:	d001      	beq.n	96f0 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
    96ec:	2200      	movs	r2, #0
    96ee:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    96f0:	0080      	lsls	r0, r0, #2
    96f2:	4b08      	ldr	r3, [pc, #32]	; (9714 <f_mount+0x54>)
    96f4:	9a01      	ldr	r2, [sp, #4]
    96f6:	50c2      	str	r2, [r0, r3]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    96f8:	2300      	movs	r3, #0
    96fa:	2c00      	cmp	r4, #0
    96fc:	d102      	bne.n	9704 <f_mount+0x44>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    96fe:	0018      	movs	r0, r3
    9700:	b004      	add	sp, #16
    9702:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
    9704:	2200      	movs	r2, #0
    9706:	a901      	add	r1, sp, #4
    9708:	4668      	mov	r0, sp
    970a:	f7ff fb91 	bl	8e30 <find_volume>
    970e:	0003      	movs	r3, r0
	LEAVE_FF(fs, res);
    9710:	e7f5      	b.n	96fe <f_mount+0x3e>
    9712:	46c0      	nop			; (mov r8, r8)
    9714:	20000db0 	.word	0x20000db0
	...

00009720 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    9720:	b5f0      	push	{r4, r5, r6, r7, lr}
    9722:	46ce      	mov	lr, r9
    9724:	4647      	mov	r7, r8
    9726:	b580      	push	{r7, lr}
    9728:	b091      	sub	sp, #68	; 0x44
    972a:	0005      	movs	r5, r0
    972c:	9101      	str	r1, [sp, #4]
    972e:	0017      	movs	r7, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    9730:	2409      	movs	r4, #9
    9732:	2800      	cmp	r0, #0
    9734:	d00a      	beq.n	974c <f_open+0x2c>

	/* Get logical drive */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
    9736:	263f      	movs	r6, #63	; 0x3f
    9738:	4016      	ands	r6, r2
	res = find_volume(&path, &fs, mode);
    973a:	0032      	movs	r2, r6
    973c:	a903      	add	r1, sp, #12
    973e:	a801      	add	r0, sp, #4
    9740:	f7ff fb76 	bl	8e30 <find_volume>
    9744:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    9746:	d007      	beq.n	9758 <f_open+0x38>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    9748:	2300      	movs	r3, #0
    974a:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
    974c:	0020      	movs	r0, r4
    974e:	b011      	add	sp, #68	; 0x44
    9750:	bc0c      	pop	{r2, r3}
    9752:	4690      	mov	r8, r2
    9754:	4699      	mov	r9, r3
    9756:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dj.obj.fs = fs;
    9758:	9b03      	ldr	r3, [sp, #12]
    975a:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
    975c:	9901      	ldr	r1, [sp, #4]
    975e:	a804      	add	r0, sp, #16
    9760:	f7ff fdde 	bl	9320 <follow_path>
		if (res == FR_OK) {
    9764:	2800      	cmp	r0, #0
    9766:	d14b      	bne.n	9800 <f_open+0xe0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    9768:	232b      	movs	r3, #43	; 0x2b
    976a:	aa04      	add	r2, sp, #16
    976c:	5cd3      	ldrb	r3, [r2, r3]
    976e:	2b7f      	cmp	r3, #127	; 0x7f
    9770:	d900      	bls.n	9774 <f_open+0x54>
    9772:	e0ac      	b.n	98ce <f_open+0x1ae>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    9774:	231c      	movs	r3, #28
    9776:	423b      	tst	r3, r7
    9778:	d156      	bne.n	9828 <f_open+0x108>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    977a:	ab04      	add	r3, sp, #16
    977c:	799b      	ldrb	r3, [r3, #6]
    977e:	06da      	lsls	r2, r3, #27
    9780:	d500      	bpl.n	9784 <f_open+0x64>
    9782:	e0d4      	b.n	992e <f_open+0x20e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    9784:	07ba      	lsls	r2, r7, #30
    9786:	d502      	bpl.n	978e <f_open+0x6e>
    9788:	07db      	lsls	r3, r3, #31
    978a:	d500      	bpl.n	978e <f_open+0x6e>
    978c:	e0cd      	b.n	992a <f_open+0x20a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    978e:	073b      	lsls	r3, r7, #28
    9790:	d501      	bpl.n	9796 <f_open+0x76>
    9792:	2340      	movs	r3, #64	; 0x40
    9794:	431e      	orrs	r6, r3
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    9796:	9b03      	ldr	r3, [sp, #12]
    9798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    979a:	622b      	str	r3, [r5, #32]
			fp->dir_ptr = dj.dir;
    979c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    979e:	626b      	str	r3, [r5, #36]	; 0x24
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    97a0:	9b03      	ldr	r3, [sp, #12]
    97a2:	4698      	mov	r8, r3
    97a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    97a6:	0039      	movs	r1, r7
    97a8:	0018      	movs	r0, r3
    97aa:	f7ff fda1 	bl	92f0 <ld_clust>
    97ae:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    97b0:	0038      	movs	r0, r7
    97b2:	301c      	adds	r0, #28
    97b4:	f7fe fbac 	bl	7f10 <ld_dword>
    97b8:	60e8      	str	r0, [r5, #12]
			fp->obj.fs = fs;	 	/* Validate the file object */
    97ba:	4643      	mov	r3, r8
    97bc:	602b      	str	r3, [r5, #0]
			fp->obj.id = fs->id;
    97be:	88db      	ldrh	r3, [r3, #6]
    97c0:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
    97c2:	742e      	strb	r6, [r5, #16]
			fp->err = 0;			/* Clear error flag */
    97c4:	2300      	movs	r3, #0
    97c6:	746b      	strb	r3, [r5, #17]
			fp->sect = 0;			/* Invalidate current data sector */
    97c8:	61eb      	str	r3, [r5, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
    97ca:	616b      	str	r3, [r5, #20]
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
    97cc:	3328      	adds	r3, #40	; 0x28
    97ce:	4699      	mov	r9, r3
    97d0:	44a9      	add	r9, r5
    97d2:	464b      	mov	r3, r9
    97d4:	228a      	movs	r2, #138	; 0x8a
    97d6:	0092      	lsls	r2, r2, #2
    97d8:	18a9      	adds	r1, r5, r2
		*d++ = (BYTE)val;
    97da:	2200      	movs	r2, #0
    97dc:	701a      	strb	r2, [r3, #0]
    97de:	3301      	adds	r3, #1
	} while (--cnt);
    97e0:	428b      	cmp	r3, r1
    97e2:	d1fb      	bne.n	97dc <f_open+0xbc>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    97e4:	06b3      	lsls	r3, r6, #26
    97e6:	d5b1      	bpl.n	974c <f_open+0x2c>
    97e8:	68ee      	ldr	r6, [r5, #12]
    97ea:	2e00      	cmp	r6, #0
    97ec:	d0ae      	beq.n	974c <f_open+0x2c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    97ee:	616e      	str	r6, [r5, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    97f0:	4643      	mov	r3, r8
    97f2:	895f      	ldrh	r7, [r3, #10]
    97f4:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
    97f6:	68a9      	ldr	r1, [r5, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    97f8:	42be      	cmp	r6, r7
    97fa:	d96e      	bls.n	98da <f_open+0x1ba>
    97fc:	1bf6      	subs	r6, r6, r7
    97fe:	e07d      	b.n	98fc <f_open+0x1dc>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    9800:	231c      	movs	r3, #28
    9802:	423b      	tst	r3, r7
    9804:	d003      	beq.n	980e <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    9806:	2804      	cmp	r0, #4
    9808:	d005      	beq.n	9816 <f_open+0xf6>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    980a:	2308      	movs	r3, #8
    980c:	431e      	orrs	r6, r3
		if (res == FR_OK) {
    980e:	2800      	cmp	r0, #0
    9810:	d0c6      	beq.n	97a0 <f_open+0x80>
    9812:	0004      	movs	r4, r0
    9814:	e798      	b.n	9748 <f_open+0x28>
					res = dir_register(&dj);
    9816:	a804      	add	r0, sp, #16
    9818:	f7ff f912 	bl	8a40 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    981c:	2308      	movs	r3, #8
    981e:	431e      	orrs	r6, r3
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    9820:	2800      	cmp	r0, #0
    9822:	d008      	beq.n	9836 <f_open+0x116>
					res = dir_register(&dj);
    9824:	0004      	movs	r4, r0
    9826:	e78f      	b.n	9748 <f_open+0x28>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    9828:	ab04      	add	r3, sp, #16
    982a:	799b      	ldrb	r3, [r3, #6]
    982c:	2211      	movs	r2, #17
    982e:	421a      	tst	r2, r3
    9830:	d177      	bne.n	9922 <f_open+0x202>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    9832:	077b      	lsls	r3, r7, #29
    9834:	d477      	bmi.n	9926 <f_open+0x206>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    9836:	0733      	lsls	r3, r6, #28
    9838:	d5ad      	bpl.n	9796 <f_open+0x76>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    983a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    983c:	0039      	movs	r1, r7
    983e:	9803      	ldr	r0, [sp, #12]
    9840:	f7ff fd56 	bl	92f0 <ld_clust>
    9844:	4680      	mov	r8, r0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
    9846:	f003 fc33 	bl	d0b0 <get_fattime>
    984a:	0001      	movs	r1, r0
    984c:	0038      	movs	r0, r7
    984e:	300e      	adds	r0, #14
    9850:	f7fe fb6e 	bl	7f30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    9854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9856:	9300      	str	r3, [sp, #0]
    9858:	2320      	movs	r3, #32
    985a:	9a00      	ldr	r2, [sp, #0]
    985c:	72d3      	strb	r3, [r2, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    985e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9860:	9300      	str	r3, [sp, #0]
    9862:	2200      	movs	r2, #0
    9864:	0019      	movs	r1, r3
    9866:	9803      	ldr	r0, [sp, #12]
    9868:	f7fe fe02 	bl	8470 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
    986c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    986e:	301c      	adds	r0, #28
    9870:	2100      	movs	r1, #0
    9872:	f7fe fb5d 	bl	7f30 <st_dword>
					fs->wflag = 1;
    9876:	2301      	movs	r3, #1
    9878:	9a03      	ldr	r2, [sp, #12]
    987a:	70d3      	strb	r3, [r2, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
    987c:	4643      	mov	r3, r8
    987e:	2b00      	cmp	r3, #0
    9880:	d087      	beq.n	9792 <f_open+0x72>
						dw = fs->winsect;
    9882:	9b03      	ldr	r3, [sp, #12]
    9884:	6b1f      	ldr	r7, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
    9886:	2200      	movs	r2, #0
    9888:	4641      	mov	r1, r8
    988a:	a804      	add	r0, sp, #16
    988c:	f7fe ff50 	bl	8730 <remove_chain>
						if (res == FR_OK) {
    9890:	2800      	cmp	r0, #0
    9892:	d001      	beq.n	9898 <f_open+0x178>
						res = remove_chain(&dj.obj, cl, 0);
    9894:	0004      	movs	r4, r0
    9896:	e757      	b.n	9748 <f_open+0x28>
							res = move_window(fs, dw);
    9898:	0039      	movs	r1, r7
    989a:	9803      	ldr	r0, [sp, #12]
    989c:	f7fe fc08 	bl	80b0 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    98a0:	4643      	mov	r3, r8
    98a2:	3b01      	subs	r3, #1
    98a4:	9a03      	ldr	r2, [sp, #12]
    98a6:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
    98a8:	2800      	cmp	r0, #0
    98aa:	d100      	bne.n	98ae <f_open+0x18e>
    98ac:	e771      	b.n	9792 <f_open+0x72>
							res = move_window(fs, dw);
    98ae:	0004      	movs	r4, r0
    98b0:	e74a      	b.n	9748 <f_open+0x28>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    98b2:	0a76      	lsrs	r6, r6, #9
    98b4:	1832      	adds	r2, r6, r0
    98b6:	61ea      	str	r2, [r5, #28]
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
    98b8:	4643      	mov	r3, r8
    98ba:	7858      	ldrb	r0, [r3, #1]
    98bc:	2301      	movs	r3, #1
    98be:	4649      	mov	r1, r9
    98c0:	f7fd fbce 	bl	7060 <disk_read>
    98c4:	2800      	cmp	r0, #0
    98c6:	d100      	bne.n	98ca <f_open+0x1aa>
    98c8:	e740      	b.n	974c <f_open+0x2c>
    98ca:	2401      	movs	r4, #1
    98cc:	e73c      	b.n	9748 <f_open+0x28>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    98ce:	231c      	movs	r3, #28
				res = FR_INVALID_NAME;
    98d0:	2006      	movs	r0, #6
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    98d2:	423b      	tst	r3, r7
    98d4:	d09b      	beq.n	980e <f_open+0xee>
				res = FR_INVALID_NAME;
    98d6:	2006      	movs	r0, #6
    98d8:	e797      	b.n	980a <f_open+0xea>
				fp->clust = clst;
    98da:	61a9      	str	r1, [r5, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    98dc:	05f3      	lsls	r3, r6, #23
    98de:	d100      	bne.n	98e2 <f_open+0x1c2>
    98e0:	e734      	b.n	974c <f_open+0x2c>
					if ((sc = clst2sect(fs, clst)) == 0) {
    98e2:	9b03      	ldr	r3, [sp, #12]
    98e4:	4698      	mov	r8, r3
    98e6:	0018      	movs	r0, r3
    98e8:	f7fe fb4a 	bl	7f80 <clst2sect>
    98ec:	2800      	cmp	r0, #0
    98ee:	d1e0      	bne.n	98b2 <f_open+0x192>
						res = FR_INT_ERR;
    98f0:	2402      	movs	r4, #2
    98f2:	e729      	b.n	9748 <f_open+0x28>
    98f4:	1bf3      	subs	r3, r6, r7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    98f6:	42be      	cmp	r6, r7
    98f8:	d9ef      	bls.n	98da <f_open+0x1ba>
    98fa:	001e      	movs	r6, r3
					clst = get_fat(&fp->obj, clst);
    98fc:	0028      	movs	r0, r5
    98fe:	f7fe fdc7 	bl	8490 <get_fat>
    9902:	0001      	movs	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
    9904:	2801      	cmp	r0, #1
    9906:	d905      	bls.n	9914 <f_open+0x1f4>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    9908:	1c43      	adds	r3, r0, #1
    990a:	d1f3      	bne.n	98f4 <f_open+0x1d4>
    990c:	e004      	b.n	9918 <f_open+0x1f8>
				fp->clust = clst;
    990e:	61a9      	str	r1, [r5, #24]
					if (clst <= 1) res = FR_INT_ERR;
    9910:	2402      	movs	r4, #2
    9912:	e719      	b.n	9748 <f_open+0x28>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    9914:	1c43      	adds	r3, r0, #1
    9916:	d1fa      	bne.n	990e <f_open+0x1ee>
				fp->clust = clst;
    9918:	2301      	movs	r3, #1
    991a:	425b      	negs	r3, r3
    991c:	61ab      	str	r3, [r5, #24]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    991e:	2401      	movs	r4, #1
    9920:	e712      	b.n	9748 <f_open+0x28>
					res = FR_DENIED;
    9922:	2407      	movs	r4, #7
    9924:	e710      	b.n	9748 <f_open+0x28>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    9926:	2408      	movs	r4, #8
    9928:	e70e      	b.n	9748 <f_open+0x28>
						res = FR_DENIED;
    992a:	2407      	movs	r4, #7
    992c:	e70c      	b.n	9748 <f_open+0x28>
					res = FR_NO_FILE;
    992e:	2404      	movs	r4, #4
    9930:	e70a      	b.n	9748 <f_open+0x28>
    9932:	46c0      	nop			; (mov r8, r8)
	...

00009940 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    9940:	b5f0      	push	{r4, r5, r6, r7, lr}
    9942:	46de      	mov	lr, fp
    9944:	4657      	mov	r7, sl
    9946:	464e      	mov	r6, r9
    9948:	4645      	mov	r5, r8
    994a:	b5e0      	push	{r5, r6, r7, lr}
    994c:	b087      	sub	sp, #28
    994e:	0004      	movs	r4, r0
    9950:	000d      	movs	r5, r1
    9952:	0017      	movs	r7, r2
    9954:	4699      	mov	r9, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    9956:	2300      	movs	r3, #0
    9958:	464a      	mov	r2, r9
    995a:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
    995c:	9001      	str	r0, [sp, #4]
    995e:	a905      	add	r1, sp, #20
    9960:	f7fe fb5e 	bl	8020 <validate>
    9964:	1e06      	subs	r6, r0, #0
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    9966:	d106      	bne.n	9976 <f_write+0x36>
    9968:	7c66      	ldrb	r6, [r4, #17]
    996a:	2e00      	cmp	r6, #0
    996c:	d103      	bne.n	9976 <f_write+0x36>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    996e:	7c23      	ldrb	r3, [r4, #16]
    9970:	079b      	lsls	r3, r3, #30
    9972:	d408      	bmi.n	9986 <f_write+0x46>
    9974:	2607      	movs	r6, #7
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
    9976:	0030      	movs	r0, r6
    9978:	b007      	add	sp, #28
    997a:	bc3c      	pop	{r2, r3, r4, r5}
    997c:	4690      	mov	r8, r2
    997e:	4699      	mov	r9, r3
    9980:	46a2      	mov	sl, r4
    9982:	46ab      	mov	fp, r5
    9984:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    9986:	6963      	ldr	r3, [r4, #20]
    9988:	19da      	adds	r2, r3, r7
    998a:	4293      	cmp	r3, r2
    998c:	d900      	bls.n	9990 <f_write+0x50>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    998e:	43df      	mvns	r7, r3
	for ( ;  btw;							/* Repeat until all data written */
    9990:	2f00      	cmp	r7, #0
    9992:	d100      	bne.n	9996 <f_write+0x56>
    9994:	e0bb      	b.n	9b0e <f_write+0x1ce>
    9996:	46ab      	mov	fp, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    9998:	2328      	movs	r3, #40	; 0x28
    999a:	469c      	mov	ip, r3
    999c:	44a4      	add	ip, r4
    999e:	4663      	mov	r3, ip
    99a0:	9302      	str	r3, [sp, #8]
		fp->flag |= FA_DIRTY;
    99a2:	9603      	str	r6, [sp, #12]
    99a4:	e06a      	b.n	9a7c <f_write+0x13c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    99a6:	2100      	movs	r1, #0
    99a8:	9801      	ldr	r0, [sp, #4]
    99aa:	f7fe fe39 	bl	8620 <create_chain>
    99ae:	e003      	b.n	99b8 <f_write+0x78>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    99b0:	69a1      	ldr	r1, [r4, #24]
    99b2:	9801      	ldr	r0, [sp, #4]
    99b4:	f7fe fe34 	bl	8620 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    99b8:	2800      	cmp	r0, #0
    99ba:	d16d      	bne.n	9a98 <f_write+0x158>
    99bc:	9e03      	ldr	r6, [sp, #12]
    99be:	e0a6      	b.n	9b0e <f_write+0x1ce>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    99c0:	2302      	movs	r3, #2
    99c2:	7463      	strb	r3, [r4, #17]
    99c4:	2602      	movs	r6, #2
    99c6:	e7d6      	b.n	9976 <f_write+0x36>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    99c8:	2301      	movs	r3, #1
    99ca:	7463      	strb	r3, [r4, #17]
    99cc:	2601      	movs	r6, #1
    99ce:	e7d2      	b.n	9976 <f_write+0x36>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    99d0:	9b05      	ldr	r3, [sp, #20]
    99d2:	7858      	ldrb	r0, [r3, #1]
    99d4:	2301      	movs	r3, #1
    99d6:	69e2      	ldr	r2, [r4, #28]
    99d8:	9902      	ldr	r1, [sp, #8]
    99da:	f7fd fb89 	bl	70f0 <disk_write>
    99de:	2800      	cmp	r0, #0
    99e0:	d104      	bne.n	99ec <f_write+0xac>
				fp->flag &= (BYTE)~FA_DIRTY;
    99e2:	7c22      	ldrb	r2, [r4, #16]
    99e4:	237f      	movs	r3, #127	; 0x7f
    99e6:	4013      	ands	r3, r2
    99e8:	7423      	strb	r3, [r4, #16]
    99ea:	e061      	b.n	9ab0 <f_write+0x170>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    99ec:	2301      	movs	r3, #1
    99ee:	7463      	strb	r3, [r4, #17]
    99f0:	2601      	movs	r6, #1
    99f2:	e7c0      	b.n	9976 <f_write+0x36>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    99f4:	2302      	movs	r3, #2
    99f6:	7463      	strb	r3, [r4, #17]
    99f8:	2602      	movs	r6, #2
    99fa:	e7bc      	b.n	9976 <f_write+0x36>
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    99fc:	2301      	movs	r3, #1
    99fe:	7463      	strb	r3, [r4, #17]
    9a00:	2601      	movs	r6, #1
    9a02:	e7b8      	b.n	9976 <f_write+0x36>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
    9a04:	0249      	lsls	r1, r1, #9
    9a06:	4459      	add	r1, fp
    9a08:	2280      	movs	r2, #128	; 0x80
    9a0a:	0092      	lsls	r2, r2, #2
    9a0c:	9802      	ldr	r0, [sp, #8]
    9a0e:	f7fe fa97 	bl	7f40 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
    9a12:	7c22      	ldrb	r2, [r4, #16]
    9a14:	237f      	movs	r3, #127	; 0x7f
    9a16:	4013      	ands	r3, r2
    9a18:	7423      	strb	r3, [r4, #16]
    9a1a:	e069      	b.n	9af0 <f_write+0x1b0>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
    9a1c:	69e3      	ldr	r3, [r4, #28]
    9a1e:	4598      	cmp	r8, r3
    9a20:	d003      	beq.n	9a2a <f_write+0xea>
    9a22:	6963      	ldr	r3, [r4, #20]
    9a24:	68e2      	ldr	r2, [r4, #12]
    9a26:	4293      	cmp	r3, r2
    9a28:	d364      	bcc.n	9af4 <f_write+0x1b4>
			fp->sect = sect;
    9a2a:	4643      	mov	r3, r8
    9a2c:	61e3      	str	r3, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
    9a2e:	6963      	ldr	r3, [r4, #20]
    9a30:	05d8      	lsls	r0, r3, #23
    9a32:	0dc0      	lsrs	r0, r0, #23
    9a34:	2380      	movs	r3, #128	; 0x80
    9a36:	009b      	lsls	r3, r3, #2
    9a38:	1a1d      	subs	r5, r3, r0
    9a3a:	42bd      	cmp	r5, r7
    9a3c:	d900      	bls.n	9a40 <f_write+0x100>
    9a3e:	003d      	movs	r5, r7
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    9a40:	9b02      	ldr	r3, [sp, #8]
    9a42:	469c      	mov	ip, r3
    9a44:	4460      	add	r0, ip
    9a46:	002a      	movs	r2, r5
    9a48:	4659      	mov	r1, fp
    9a4a:	f7fe fa79 	bl	7f40 <mem_cpy>
		fp->flag |= FA_DIRTY;
    9a4e:	7c23      	ldrb	r3, [r4, #16]
    9a50:	2280      	movs	r2, #128	; 0x80
    9a52:	4252      	negs	r2, r2
    9a54:	4313      	orrs	r3, r2
    9a56:	7423      	strb	r3, [r4, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
    9a58:	1b7f      	subs	r7, r7, r5
    9a5a:	464b      	mov	r3, r9
    9a5c:	681b      	ldr	r3, [r3, #0]
    9a5e:	195b      	adds	r3, r3, r5
    9a60:	464a      	mov	r2, r9
    9a62:	6013      	str	r3, [r2, #0]
    9a64:	44ab      	add	fp, r5
    9a66:	6963      	ldr	r3, [r4, #20]
    9a68:	469c      	mov	ip, r3
    9a6a:	4465      	add	r5, ip
    9a6c:	6165      	str	r5, [r4, #20]
    9a6e:	68e3      	ldr	r3, [r4, #12]
    9a70:	42ab      	cmp	r3, r5
    9a72:	d200      	bcs.n	9a76 <f_write+0x136>
    9a74:	002b      	movs	r3, r5
    9a76:	60e3      	str	r3, [r4, #12]
	for ( ;  btw;							/* Repeat until all data written */
    9a78:	2f00      	cmp	r7, #0
    9a7a:	d047      	beq.n	9b0c <f_write+0x1cc>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    9a7c:	6963      	ldr	r3, [r4, #20]
    9a7e:	05da      	lsls	r2, r3, #23
    9a80:	d1d5      	bne.n	9a2e <f_write+0xee>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    9a82:	9a05      	ldr	r2, [sp, #20]
    9a84:	8956      	ldrh	r6, [r2, #10]
    9a86:	3e01      	subs	r6, #1
    9a88:	0a5a      	lsrs	r2, r3, #9
    9a8a:	4016      	ands	r6, r2
			if (csect == 0) {				/* On the cluster boundary? */
    9a8c:	d10d      	bne.n	9aaa <f_write+0x16a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    9a8e:	2b00      	cmp	r3, #0
    9a90:	d18e      	bne.n	99b0 <f_write+0x70>
					clst = fp->obj.sclust;	/* Follow from the origin */
    9a92:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
    9a94:	2800      	cmp	r0, #0
    9a96:	d086      	beq.n	99a6 <f_write+0x66>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    9a98:	2801      	cmp	r0, #1
    9a9a:	d091      	beq.n	99c0 <f_write+0x80>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    9a9c:	1c43      	adds	r3, r0, #1
    9a9e:	d093      	beq.n	99c8 <f_write+0x88>
				fp->clust = clst;			/* Update current cluster */
    9aa0:	61a0      	str	r0, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    9aa2:	68a3      	ldr	r3, [r4, #8]
    9aa4:	2b00      	cmp	r3, #0
    9aa6:	d100      	bne.n	9aaa <f_write+0x16a>
    9aa8:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
    9aaa:	7c23      	ldrb	r3, [r4, #16]
    9aac:	2b7f      	cmp	r3, #127	; 0x7f
    9aae:	d88f      	bhi.n	99d0 <f_write+0x90>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    9ab0:	9b05      	ldr	r3, [sp, #20]
    9ab2:	469a      	mov	sl, r3
    9ab4:	69a1      	ldr	r1, [r4, #24]
    9ab6:	0018      	movs	r0, r3
    9ab8:	f7fe fa62 	bl	7f80 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    9abc:	2800      	cmp	r0, #0
    9abe:	d099      	beq.n	99f4 <f_write+0xb4>
			sect += csect;
    9ac0:	4680      	mov	r8, r0
    9ac2:	44b0      	add	r8, r6
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    9ac4:	0a7d      	lsrs	r5, r7, #9
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    9ac6:	d0a9      	beq.n	9a1c <f_write+0xdc>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    9ac8:	4653      	mov	r3, sl
    9aca:	895b      	ldrh	r3, [r3, #10]
    9acc:	1972      	adds	r2, r6, r5
    9ace:	429a      	cmp	r2, r3
    9ad0:	d900      	bls.n	9ad4 <f_write+0x194>
					cc = fs->csize - csect;
    9ad2:	1b9d      	subs	r5, r3, r6
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    9ad4:	4653      	mov	r3, sl
    9ad6:	7858      	ldrb	r0, [r3, #1]
    9ad8:	002b      	movs	r3, r5
    9ada:	4642      	mov	r2, r8
    9adc:	4659      	mov	r1, fp
    9ade:	f7fd fb07 	bl	70f0 <disk_write>
    9ae2:	2800      	cmp	r0, #0
    9ae4:	d18a      	bne.n	99fc <f_write+0xbc>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    9ae6:	69e3      	ldr	r3, [r4, #28]
    9ae8:	4642      	mov	r2, r8
    9aea:	1a99      	subs	r1, r3, r2
    9aec:	428d      	cmp	r5, r1
    9aee:	d889      	bhi.n	9a04 <f_write+0xc4>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    9af0:	026d      	lsls	r5, r5, #9
				continue;
    9af2:	e7b1      	b.n	9a58 <f_write+0x118>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
    9af4:	4653      	mov	r3, sl
    9af6:	7858      	ldrb	r0, [r3, #1]
    9af8:	2301      	movs	r3, #1
    9afa:	4642      	mov	r2, r8
    9afc:	9902      	ldr	r1, [sp, #8]
    9afe:	f7fd faaf 	bl	7060 <disk_read>
				fp->fptr < fp->obj.objsize &&
    9b02:	2800      	cmp	r0, #0
    9b04:	d091      	beq.n	9a2a <f_write+0xea>
					ABORT(fs, FR_DISK_ERR);
    9b06:	2601      	movs	r6, #1
    9b08:	7466      	strb	r6, [r4, #17]
    9b0a:	e734      	b.n	9976 <f_write+0x36>
    9b0c:	9e03      	ldr	r6, [sp, #12]
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    9b0e:	7c23      	ldrb	r3, [r4, #16]
    9b10:	2240      	movs	r2, #64	; 0x40
    9b12:	4313      	orrs	r3, r2
    9b14:	7423      	strb	r3, [r4, #16]
	LEAVE_FF(fs, FR_OK);
    9b16:	e72e      	b.n	9976 <f_write+0x36>
	...

00009b20 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    9b20:	b570      	push	{r4, r5, r6, lr}
    9b22:	b082      	sub	sp, #8
    9b24:	0004      	movs	r4, r0
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    9b26:	a901      	add	r1, sp, #4
    9b28:	f7fe fa7a 	bl	8020 <validate>
	if (res == FR_OK) {
    9b2c:	2800      	cmp	r0, #0
    9b2e:	d10e      	bne.n	9b4e <f_sync+0x2e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    9b30:	7c23      	ldrb	r3, [r4, #16]
    9b32:	065a      	lsls	r2, r3, #25
    9b34:	d50b      	bpl.n	9b4e <f_sync+0x2e>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
    9b36:	b25b      	sxtb	r3, r3
    9b38:	2b00      	cmp	r3, #0
    9b3a:	db0a      	blt.n	9b52 <f_sync+0x32>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
    9b3c:	f003 fab8 	bl	d0b0 <get_fattime>
    9b40:	0005      	movs	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
    9b42:	6a21      	ldr	r1, [r4, #32]
    9b44:	9801      	ldr	r0, [sp, #4]
    9b46:	f7fe fab3 	bl	80b0 <move_window>
				if (res == FR_OK) {
    9b4a:	2800      	cmp	r0, #0
    9b4c:	d012      	beq.n	9b74 <f_sync+0x54>
			}
		}
	}

	LEAVE_FF(fs, res);
}
    9b4e:	b002      	add	sp, #8
    9b50:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
    9b52:	0021      	movs	r1, r4
    9b54:	3128      	adds	r1, #40	; 0x28
    9b56:	9b01      	ldr	r3, [sp, #4]
    9b58:	7858      	ldrb	r0, [r3, #1]
    9b5a:	2301      	movs	r3, #1
    9b5c:	69e2      	ldr	r2, [r4, #28]
    9b5e:	f7fd fac7 	bl	70f0 <disk_write>
    9b62:	0003      	movs	r3, r0
    9b64:	2001      	movs	r0, #1
    9b66:	2b00      	cmp	r3, #0
    9b68:	d1f1      	bne.n	9b4e <f_sync+0x2e>
				fp->flag &= (BYTE)~FA_DIRTY;
    9b6a:	7c22      	ldrb	r2, [r4, #16]
    9b6c:	337f      	adds	r3, #127	; 0x7f
    9b6e:	4013      	ands	r3, r2
    9b70:	7423      	strb	r3, [r4, #16]
    9b72:	e7e3      	b.n	9b3c <f_sync+0x1c>
					dir = fp->dir_ptr;
    9b74:	6a66      	ldr	r6, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    9b76:	7af3      	ldrb	r3, [r6, #11]
    9b78:	2220      	movs	r2, #32
    9b7a:	4313      	orrs	r3, r2
    9b7c:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    9b7e:	68a2      	ldr	r2, [r4, #8]
    9b80:	0031      	movs	r1, r6
    9b82:	6820      	ldr	r0, [r4, #0]
    9b84:	f7fe fc74 	bl	8470 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    9b88:	0030      	movs	r0, r6
    9b8a:	301c      	adds	r0, #28
    9b8c:	68e1      	ldr	r1, [r4, #12]
    9b8e:	f7fe f9cf 	bl	7f30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
    9b92:	0030      	movs	r0, r6
    9b94:	3016      	adds	r0, #22
    9b96:	0029      	movs	r1, r5
    9b98:	f7fe f9ca 	bl	7f30 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
    9b9c:	2300      	movs	r3, #0
    9b9e:	74b3      	strb	r3, [r6, #18]
	*ptr++ = (BYTE)val;
    9ba0:	74f3      	strb	r3, [r6, #19]
					fs->wflag = 1;
    9ba2:	3301      	adds	r3, #1
    9ba4:	9a01      	ldr	r2, [sp, #4]
    9ba6:	70d3      	strb	r3, [r2, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
    9ba8:	9801      	ldr	r0, [sp, #4]
    9baa:	f7fe fb69 	bl	8280 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
    9bae:	7c23      	ldrb	r3, [r4, #16]
    9bb0:	2240      	movs	r2, #64	; 0x40
    9bb2:	4393      	bics	r3, r2
    9bb4:	7423      	strb	r3, [r4, #16]
    9bb6:	e7ca      	b.n	9b4e <f_sync+0x2e>
	...

00009bc0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
    9bc0:	b510      	push	{r4, lr}
    9bc2:	b082      	sub	sp, #8
    9bc4:	0004      	movs	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    9bc6:	f7ff ffab 	bl	9b20 <f_sync>
	if (res == FR_OK)
    9bca:	2800      	cmp	r0, #0
    9bcc:	d001      	beq.n	9bd2 <f_close+0x12>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    9bce:	b002      	add	sp, #8
    9bd0:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
    9bd2:	a901      	add	r1, sp, #4
    9bd4:	0020      	movs	r0, r4
    9bd6:	f7fe fa23 	bl	8020 <validate>
		if (res == FR_OK) {
    9bda:	2800      	cmp	r0, #0
    9bdc:	d1f7      	bne.n	9bce <f_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
    9bde:	2300      	movs	r3, #0
    9be0:	6023      	str	r3, [r4, #0]
    9be2:	e7f4      	b.n	9bce <f_close+0xe>
	...

00009bf0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    9bf0:	b510      	push	{r4, lr}
    9bf2:	b084      	sub	sp, #16
    9bf4:	0004      	movs	r4, r0
    9bf6:	9101      	str	r1, [sp, #4]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    9bf8:	2009      	movs	r0, #9
    9bfa:	2c00      	cmp	r4, #0
    9bfc:	d008      	beq.n	9c10 <f_opendir+0x20>

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
    9bfe:	2200      	movs	r2, #0
    9c00:	a903      	add	r1, sp, #12
    9c02:	a801      	add	r0, sp, #4
    9c04:	f7ff f914 	bl	8e30 <find_volume>
	if (res == FR_OK) {
    9c08:	2800      	cmp	r0, #0
    9c0a:	d003      	beq.n	9c14 <f_opendir+0x24>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
    9c0c:	2300      	movs	r3, #0
    9c0e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
    9c10:	b004      	add	sp, #16
    9c12:	bd10      	pop	{r4, pc}
		dp->obj.fs = fs;
    9c14:	9b03      	ldr	r3, [sp, #12]
    9c16:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
    9c18:	9901      	ldr	r1, [sp, #4]
    9c1a:	0020      	movs	r0, r4
    9c1c:	f7ff fb80 	bl	9320 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    9c20:	2800      	cmp	r0, #0
    9c22:	d11b      	bne.n	9c5c <f_opendir+0x6c>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
    9c24:	232b      	movs	r3, #43	; 0x2b
    9c26:	5ce3      	ldrb	r3, [r4, r3]
    9c28:	2b7f      	cmp	r3, #127	; 0x7f
    9c2a:	d807      	bhi.n	9c3c <f_opendir+0x4c>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
    9c2c:	79a3      	ldrb	r3, [r4, #6]
    9c2e:	06db      	lsls	r3, r3, #27
    9c30:	d510      	bpl.n	9c54 <f_opendir+0x64>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
    9c32:	69e1      	ldr	r1, [r4, #28]
    9c34:	9803      	ldr	r0, [sp, #12]
    9c36:	f7ff fb5b 	bl	92f0 <ld_clust>
    9c3a:	60a0      	str	r0, [r4, #8]
				dp->obj.id = fs->id;
    9c3c:	9b03      	ldr	r3, [sp, #12]
    9c3e:	88db      	ldrh	r3, [r3, #6]
    9c40:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
    9c42:	2100      	movs	r1, #0
    9c44:	0020      	movs	r0, r4
    9c46:	f7fe fc93 	bl	8570 <dir_sdi>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    9c4a:	2804      	cmp	r0, #4
    9c4c:	d004      	beq.n	9c58 <f_opendir+0x68>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
    9c4e:	2800      	cmp	r0, #0
    9c50:	d0de      	beq.n	9c10 <f_opendir+0x20>
    9c52:	e7db      	b.n	9c0c <f_opendir+0x1c>
					res = FR_NO_PATH;
    9c54:	2005      	movs	r0, #5
    9c56:	e7d9      	b.n	9c0c <f_opendir+0x1c>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    9c58:	3001      	adds	r0, #1
    9c5a:	e7d7      	b.n	9c0c <f_opendir+0x1c>
    9c5c:	2804      	cmp	r0, #4
    9c5e:	d1d5      	bne.n	9c0c <f_opendir+0x1c>
    9c60:	2005      	movs	r0, #5
    9c62:	e7d3      	b.n	9c0c <f_opendir+0x1c>
	...

00009c70 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    9c70:	b570      	push	{r4, r5, r6, lr}
    9c72:	b082      	sub	sp, #8
    9c74:	0004      	movs	r4, r0
    9c76:	000d      	movs	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
    9c78:	a901      	add	r1, sp, #4
    9c7a:	f7fe f9d1 	bl	8020 <validate>
	if (res == FR_OK) {
    9c7e:	2800      	cmp	r0, #0
    9c80:	d108      	bne.n	9c94 <f_readdir+0x24>
		if (!fno) {
    9c82:	2d00      	cmp	r5, #0
    9c84:	d008      	beq.n	9c98 <f_readdir+0x28>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
    9c86:	2100      	movs	r1, #0
    9c88:	0020      	movs	r0, r4
    9c8a:	f7ff fa81 	bl	9190 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
    9c8e:	26fb      	movs	r6, #251	; 0xfb
    9c90:	4006      	ands	r6, r0
    9c92:	d006      	beq.n	9ca2 <f_readdir+0x32>
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
    9c94:	b002      	add	sp, #8
    9c96:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    9c98:	2100      	movs	r1, #0
    9c9a:	0020      	movs	r0, r4
    9c9c:	f7fe fc68 	bl	8570 <dir_sdi>
    9ca0:	e7f8      	b.n	9c94 <f_readdir+0x24>
				get_fileinfo(dp, fno);		/* Get the object information */
    9ca2:	0029      	movs	r1, r5
    9ca4:	0020      	movs	r0, r4
    9ca6:	f7fe fa5b 	bl	8160 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
    9caa:	2100      	movs	r1, #0
    9cac:	0020      	movs	r0, r4
    9cae:	f7fe fd87 	bl	87c0 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    9cb2:	2804      	cmp	r0, #4
    9cb4:	d1ee      	bne.n	9c94 <f_readdir+0x24>
    9cb6:	0030      	movs	r0, r6
    9cb8:	e7ec      	b.n	9c94 <f_readdir+0x24>
    9cba:	46c0      	nop			; (mov r8, r8)
    9cbc:	0000      	movs	r0, r0
	...

00009cc0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
)
{
    9cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cc2:	46d6      	mov	lr, sl
    9cc4:	464f      	mov	r7, r9
    9cc6:	b580      	push	{r7, lr}
    9cc8:	b089      	sub	sp, #36	; 0x24
    9cca:	9001      	str	r0, [sp, #4]
    9ccc:	4689      	mov	r9, r1
    9cce:	0014      	movs	r4, r2
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
    9cd0:	2200      	movs	r2, #0
    9cd2:	a907      	add	r1, sp, #28
    9cd4:	a801      	add	r0, sp, #4
    9cd6:	f7ff f8ab 	bl	8e30 <find_volume>
    9cda:	9000      	str	r0, [sp, #0]
	if (res == FR_OK) {
    9cdc:	2800      	cmp	r0, #0
    9cde:	d15d      	bne.n	9d9c <f_getfree+0xdc>
		*fatfs = fs;				/* Return ptr to the fs object */
    9ce0:	9b07      	ldr	r3, [sp, #28]
    9ce2:	6023      	str	r3, [r4, #0]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
    9ce4:	695a      	ldr	r2, [r3, #20]
    9ce6:	699f      	ldr	r7, [r3, #24]
    9ce8:	1eb9      	subs	r1, r7, #2
    9cea:	428a      	cmp	r2, r1
    9cec:	d906      	bls.n	9cfc <f_getfree+0x3c>
			*nclst = fs->free_clst;
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
    9cee:	781a      	ldrb	r2, [r3, #0]
    9cf0:	2a01      	cmp	r2, #1
    9cf2:	d006      	beq.n	9d02 <f_getfree+0x42>
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
    9cf4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
					i = 0;					/* Offset in the sector */
    9cf6:	2400      	movs	r4, #0
			nfree = 0;
    9cf8:	2500      	movs	r5, #0
    9cfa:	e028      	b.n	9d4e <f_getfree+0x8e>
			*nclst = fs->free_clst;
    9cfc:	464b      	mov	r3, r9
    9cfe:	601a      	str	r2, [r3, #0]
    9d00:	e04c      	b.n	9d9c <f_getfree+0xdc>
				clst = 2; obj.fs = fs;
    9d02:	9303      	str	r3, [sp, #12]
    9d04:	2402      	movs	r4, #2
			nfree = 0;
    9d06:	2500      	movs	r5, #0
					stat = get_fat(&obj, clst);
    9d08:	0021      	movs	r1, r4
    9d0a:	a803      	add	r0, sp, #12
    9d0c:	f7fe fbc0 	bl	8490 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    9d10:	1c43      	adds	r3, r0, #1
    9d12:	d034      	beq.n	9d7e <f_getfree+0xbe>
					if (stat == 1) { res = FR_INT_ERR; break; }
    9d14:	2801      	cmp	r0, #1
    9d16:	d035      	beq.n	9d84 <f_getfree+0xc4>
					if (stat == 0) nfree++;
    9d18:	4243      	negs	r3, r0
    9d1a:	4158      	adcs	r0, r3
    9d1c:	182d      	adds	r5, r5, r0
				} while (++clst < fs->n_fatent);
    9d1e:	3401      	adds	r4, #1
    9d20:	9b07      	ldr	r3, [sp, #28]
    9d22:	699b      	ldr	r3, [r3, #24]
    9d24:	429c      	cmp	r4, r3
    9d26:	d3ef      	bcc.n	9d08 <f_getfree+0x48>
    9d28:	e030      	b.n	9d8c <f_getfree+0xcc>
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
							res = move_window(fs, sect++);
							if (res != FR_OK) break;
						}
						if (fs->fs_type == FS_FAT16) {
    9d2a:	9807      	ldr	r0, [sp, #28]
    9d2c:	7803      	ldrb	r3, [r0, #0]
    9d2e:	2b02      	cmp	r3, #2
    9d30:	d019      	beq.n	9d66 <f_getfree+0xa6>
							if (ld_word(fs->win + i) == 0) nfree++;
							i += 2;
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
    9d32:	3034      	adds	r0, #52	; 0x34
    9d34:	1900      	adds	r0, r0, r4
    9d36:	f7fe f8eb 	bl	7f10 <ld_dword>
    9d3a:	0100      	lsls	r0, r0, #4
    9d3c:	4243      	negs	r3, r0
    9d3e:	4158      	adcs	r0, r3
    9d40:	182d      	adds	r5, r5, r0
							i += 4;
    9d42:	3404      	adds	r4, #4
						}
						i %= SS(fs);
    9d44:	05e4      	lsls	r4, r4, #23
    9d46:	0de4      	lsrs	r4, r4, #23
					} while (--clst);
    9d48:	3f01      	subs	r7, #1
    9d4a:	2f00      	cmp	r7, #0
    9d4c:	d01e      	beq.n	9d8c <f_getfree+0xcc>
						if (i == 0) {
    9d4e:	2c00      	cmp	r4, #0
    9d50:	d1eb      	bne.n	9d2a <f_getfree+0x6a>
							res = move_window(fs, sect++);
    9d52:	1c73      	adds	r3, r6, #1
    9d54:	469a      	mov	sl, r3
    9d56:	0031      	movs	r1, r6
    9d58:	9807      	ldr	r0, [sp, #28]
    9d5a:	f7fe f9a9 	bl	80b0 <move_window>
							if (res != FR_OK) break;
    9d5e:	2800      	cmp	r0, #0
    9d60:	d113      	bne.n	9d8a <f_getfree+0xca>
							res = move_window(fs, sect++);
    9d62:	4656      	mov	r6, sl
    9d64:	e7e1      	b.n	9d2a <f_getfree+0x6a>
							if (ld_word(fs->win + i) == 0) nfree++;
    9d66:	3034      	adds	r0, #52	; 0x34
    9d68:	1900      	adds	r0, r0, r4
	rv = rv << 8 | ptr[0];
    9d6a:	7842      	ldrb	r2, [r0, #1]
    9d6c:	0212      	lsls	r2, r2, #8
    9d6e:	7803      	ldrb	r3, [r0, #0]
    9d70:	4313      	orrs	r3, r2
							if (ld_word(fs->win + i) == 0) nfree++;
    9d72:	b21b      	sxth	r3, r3
    9d74:	425a      	negs	r2, r3
    9d76:	4153      	adcs	r3, r2
    9d78:	18ed      	adds	r5, r5, r3
							i += 2;
    9d7a:	3402      	adds	r4, #2
    9d7c:	e7e2      	b.n	9d44 <f_getfree+0x84>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    9d7e:	2301      	movs	r3, #1
    9d80:	9300      	str	r3, [sp, #0]
    9d82:	e003      	b.n	9d8c <f_getfree+0xcc>
					if (stat == 1) { res = FR_INT_ERR; break; }
    9d84:	2302      	movs	r3, #2
    9d86:	9300      	str	r3, [sp, #0]
    9d88:	e000      	b.n	9d8c <f_getfree+0xcc>
							res = move_window(fs, sect++);
    9d8a:	9000      	str	r0, [sp, #0]
				}
			}
			*nclst = nfree;			/* Return the free clusters */
    9d8c:	464b      	mov	r3, r9
    9d8e:	601d      	str	r5, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
    9d90:	9b07      	ldr	r3, [sp, #28]
    9d92:	615d      	str	r5, [r3, #20]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
    9d94:	791a      	ldrb	r2, [r3, #4]
    9d96:	2101      	movs	r1, #1
    9d98:	430a      	orrs	r2, r1
    9d9a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
}
    9d9c:	9800      	ldr	r0, [sp, #0]
    9d9e:	b009      	add	sp, #36	; 0x24
    9da0:	bc0c      	pop	{r2, r3}
    9da2:	4691      	mov	r9, r2
    9da4:	469a      	mov	sl, r3
    9da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00009db0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    9db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9db2:	b093      	sub	sp, #76	; 0x4c
    9db4:	9003      	str	r0, [sp, #12]
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
    9db6:	2202      	movs	r2, #2
    9db8:	a905      	add	r1, sp, #20
    9dba:	a803      	add	r0, sp, #12
    9dbc:	f7ff f838 	bl	8e30 <find_volume>
    9dc0:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    9dc2:	d002      	beq.n	9dca <f_mkdir+0x1a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    9dc4:	0020      	movs	r0, r4
    9dc6:	b013      	add	sp, #76	; 0x4c
    9dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dj.obj.fs = fs;
    9dca:	9b05      	ldr	r3, [sp, #20]
    9dcc:	9306      	str	r3, [sp, #24]
		res = follow_path(&dj, path);			/* Follow the file path */
    9dce:	9903      	ldr	r1, [sp, #12]
    9dd0:	a806      	add	r0, sp, #24
    9dd2:	f7ff faa5 	bl	9320 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    9dd6:	2800      	cmp	r0, #0
    9dd8:	d07c      	beq.n	9ed4 <f_mkdir+0x124>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
    9dda:	2804      	cmp	r0, #4
    9ddc:	d001      	beq.n	9de2 <f_mkdir+0x32>
		res = follow_path(&dj, path);			/* Follow the file path */
    9dde:	0004      	movs	r4, r0
	LEAVE_FF(fs, res);
    9de0:	e7f0      	b.n	9dc4 <f_mkdir+0x14>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
    9de2:	2100      	movs	r1, #0
    9de4:	a806      	add	r0, sp, #24
    9de6:	f7fe fc1b 	bl	8620 <create_chain>
    9dea:	0005      	movs	r5, r0
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
    9dec:	9805      	ldr	r0, [sp, #20]
    9dee:	8943      	ldrh	r3, [r0, #10]
    9df0:	025b      	lsls	r3, r3, #9
    9df2:	9309      	str	r3, [sp, #36]	; 0x24
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    9df4:	2d00      	cmp	r5, #0
    9df6:	d011      	beq.n	9e1c <f_mkdir+0x6c>
			if (dcl == 1) res = FR_INT_ERR;
    9df8:	2d01      	cmp	r5, #1
    9dfa:	d108      	bne.n	9e0e <f_mkdir+0x5e>
    9dfc:	2402      	movs	r4, #2
			tm = GET_FATTIME();
    9dfe:	f003 f957 	bl	d0b0 <get_fattime>
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
    9e02:	2200      	movs	r2, #0
    9e04:	0029      	movs	r1, r5
    9e06:	a806      	add	r0, sp, #24
    9e08:	f7fe fc92 	bl	8730 <remove_chain>
    9e0c:	e7da      	b.n	9dc4 <f_mkdir+0x14>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    9e0e:	1c6b      	adds	r3, r5, #1
    9e10:	d105      	bne.n	9e1e <f_mkdir+0x6e>
			tm = GET_FATTIME();
    9e12:	f003 f94d 	bl	d0b0 <get_fattime>
    9e16:	9001      	str	r0, [sp, #4]
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    9e18:	2401      	movs	r4, #1
    9e1a:	e044      	b.n	9ea6 <f_mkdir+0xf6>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    9e1c:	2407      	movs	r4, #7
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
    9e1e:	2c00      	cmp	r4, #0
    9e20:	d1ed      	bne.n	9dfe <f_mkdir+0x4e>
    9e22:	f7fe f91d 	bl	8060 <sync_window>
    9e26:	0004      	movs	r4, r0
			tm = GET_FATTIME();
    9e28:	f003 f942 	bl	d0b0 <get_fattime>
    9e2c:	9001      	str	r0, [sp, #4]
			if (res == FR_OK) {					/* Initialize the new directory table */
    9e2e:	2c00      	cmp	r4, #0
    9e30:	d1e7      	bne.n	9e02 <f_mkdir+0x52>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    9e32:	0029      	movs	r1, r5
    9e34:	9805      	ldr	r0, [sp, #20]
    9e36:	f7fe f95b 	bl	80f0 <dir_clear>
    9e3a:	1e04      	subs	r4, r0, #0
				if (res == FR_OK && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT)) {	/* Create dot entries (FAT only) */
    9e3c:	d1e1      	bne.n	9e02 <f_mkdir+0x52>
					dir = fs->win;
    9e3e:	9e05      	ldr	r6, [sp, #20]
    9e40:	2334      	movs	r3, #52	; 0x34
    9e42:	469c      	mov	ip, r3
    9e44:	44b4      	add	ip, r6
    9e46:	4663      	mov	r3, ip
    9e48:	9302      	str	r3, [sp, #8]
    9e4a:	0031      	movs	r1, r6
    9e4c:	313f      	adds	r1, #63	; 0x3f
		*d++ = (BYTE)val;
    9e4e:	2220      	movs	r2, #32
    9e50:	701a      	strb	r2, [r3, #0]
    9e52:	3301      	adds	r3, #1
	} while (--cnt);
    9e54:	4299      	cmp	r1, r3
    9e56:	d1fb      	bne.n	9e50 <f_mkdir+0xa0>
					dir[DIR_Name] = '.';
    9e58:	242e      	movs	r4, #46	; 0x2e
    9e5a:	2334      	movs	r3, #52	; 0x34
    9e5c:	54f4      	strb	r4, [r6, r3]
					dir[DIR_Attr] = AM_DIR;
    9e5e:	2210      	movs	r2, #16
    9e60:	330b      	adds	r3, #11
    9e62:	54f2      	strb	r2, [r6, r3]
					st_dword(dir + DIR_ModTime, tm);
    9e64:	0030      	movs	r0, r6
    9e66:	304a      	adds	r0, #74	; 0x4a
    9e68:	9901      	ldr	r1, [sp, #4]
    9e6a:	f7fe f861 	bl	7f30 <st_dword>
					st_clust(fs, dir, dcl);
    9e6e:	002a      	movs	r2, r5
    9e70:	9902      	ldr	r1, [sp, #8]
    9e72:	9805      	ldr	r0, [sp, #20]
    9e74:	f7fe fafc 	bl	8470 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); /* Create ".." entry */
    9e78:	0037      	movs	r7, r6
    9e7a:	3754      	adds	r7, #84	; 0x54
    9e7c:	2220      	movs	r2, #32
    9e7e:	9902      	ldr	r1, [sp, #8]
    9e80:	0038      	movs	r0, r7
    9e82:	f7fe f85d 	bl	7f40 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    9e86:	2355      	movs	r3, #85	; 0x55
    9e88:	54f4      	strb	r4, [r6, r3]
					st_clust(fs, dir + SZDIRE, pcl);
    9e8a:	9b08      	ldr	r3, [sp, #32]
    9e8c:	9302      	str	r3, [sp, #8]
    9e8e:	001a      	movs	r2, r3
    9e90:	0039      	movs	r1, r7
    9e92:	9805      	ldr	r0, [sp, #20]
    9e94:	f7fe faec 	bl	8470 <st_clust>
					fs->wflag = 1;
    9e98:	2301      	movs	r3, #1
    9e9a:	9a05      	ldr	r2, [sp, #20]
    9e9c:	70d3      	strb	r3, [r2, #3]
				res = dir_register(&dj);	/* Register the object to the directoy */
    9e9e:	a806      	add	r0, sp, #24
    9ea0:	f7fe fdce 	bl	8a40 <dir_register>
    9ea4:	0004      	movs	r4, r0
			if (res == FR_OK) {
    9ea6:	2c00      	cmp	r4, #0
    9ea8:	d1ab      	bne.n	9e02 <f_mkdir+0x52>
					dir = dj.dir;
    9eaa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
    9eac:	0020      	movs	r0, r4
    9eae:	3016      	adds	r0, #22
    9eb0:	9901      	ldr	r1, [sp, #4]
    9eb2:	f7fe f83d 	bl	7f30 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
    9eb6:	002a      	movs	r2, r5
    9eb8:	0021      	movs	r1, r4
    9eba:	9805      	ldr	r0, [sp, #20]
    9ebc:	f7fe fad8 	bl	8470 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
    9ec0:	2310      	movs	r3, #16
    9ec2:	72e3      	strb	r3, [r4, #11]
					fs->wflag = 1;
    9ec4:	3b0f      	subs	r3, #15
    9ec6:	9a05      	ldr	r2, [sp, #20]
    9ec8:	70d3      	strb	r3, [r2, #3]
					res = sync_fs(fs);
    9eca:	9805      	ldr	r0, [sp, #20]
    9ecc:	f7fe f9d8 	bl	8280 <sync_fs>
    9ed0:	0004      	movs	r4, r0
    9ed2:	e777      	b.n	9dc4 <f_mkdir+0x14>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    9ed4:	2408      	movs	r4, #8
    9ed6:	e775      	b.n	9dc4 <f_mkdir+0x14>
	...

00009ee0 <ff_uni2oem>:
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII char */
		c = uni;
    9ee0:	0003      	movs	r3, r0
	if (uni < 0x80) {	/* ASCII char */
    9ee2:	287f      	cmp	r0, #127	; 0x7f
    9ee4:	d904      	bls.n	9ef0 <ff_uni2oem+0x10>

	} else {			/* Non-ASCII char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    9ee6:	22b6      	movs	r2, #182	; 0xb6
    9ee8:	32ff      	adds	r2, #255	; 0xff
	WCHAR c = 0;
    9eea:	2300      	movs	r3, #0
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    9eec:	4291      	cmp	r1, r2
    9eee:	d001      	beq.n	9ef4 <ff_uni2oem+0x14>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
			c = (c + 0x80) & 0xFF;
		}
	}
	return c;
}
    9ef0:	0018      	movs	r0, r3
    9ef2:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    9ef4:	28c7      	cmp	r0, #199	; 0xc7
    9ef6:	d00d      	beq.n	9f14 <ff_uni2oem+0x34>
    9ef8:	4a07      	ldr	r2, [pc, #28]	; (9f18 <ff_uni2oem+0x38>)
    9efa:	3301      	adds	r3, #1
    9efc:	8851      	ldrh	r1, [r2, #2]
    9efe:	4281      	cmp	r1, r0
    9f00:	d004      	beq.n	9f0c <ff_uni2oem+0x2c>
    9f02:	3301      	adds	r3, #1
    9f04:	b29b      	uxth	r3, r3
    9f06:	3202      	adds	r2, #2
    9f08:	2b80      	cmp	r3, #128	; 0x80
    9f0a:	d1f7      	bne.n	9efc <ff_uni2oem+0x1c>
			c = (c + 0x80) & 0xFF;
    9f0c:	3380      	adds	r3, #128	; 0x80
    9f0e:	20ff      	movs	r0, #255	; 0xff
    9f10:	4003      	ands	r3, r0
    9f12:	e7ed      	b.n	9ef0 <ff_uni2oem+0x10>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    9f14:	2300      	movs	r3, #0
    9f16:	e7f9      	b.n	9f0c <ff_uni2oem+0x2c>
    9f18:	0000f170 	.word	0x0000f170
    9f1c:	00000000 	.word	0x00000000

00009f20 <ff_oem2uni>:
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII char */
		c = oem;
    9f20:	0003      	movs	r3, r0
	if (oem < 0x80) {	/* ASCII char */
    9f22:	287f      	cmp	r0, #127	; 0x7f
    9f24:	d904      	bls.n	9f30 <ff_oem2uni+0x10>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    9f26:	22b6      	movs	r2, #182	; 0xb6
    9f28:	32ff      	adds	r2, #255	; 0xff
	WCHAR c = 0;
    9f2a:	2300      	movs	r3, #0
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    9f2c:	4291      	cmp	r1, r2
    9f2e:	d001      	beq.n	9f34 <ff_oem2uni+0x14>
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}
	return c;
}
    9f30:	0018      	movs	r0, r3
    9f32:	4770      	bx	lr
			if (oem < 0x100) c = p[oem - 0x80];
    9f34:	28ff      	cmp	r0, #255	; 0xff
    9f36:	d8fb      	bhi.n	9f30 <ff_oem2uni+0x10>
    9f38:	4b03      	ldr	r3, [pc, #12]	; (9f48 <ff_oem2uni+0x28>)
    9f3a:	469c      	mov	ip, r3
    9f3c:	4460      	add	r0, ip
    9f3e:	0040      	lsls	r0, r0, #1
    9f40:	4b02      	ldr	r3, [pc, #8]	; (9f4c <ff_oem2uni+0x2c>)
    9f42:	5ac3      	ldrh	r3, [r0, r3]
    9f44:	e7f4      	b.n	9f30 <ff_oem2uni+0x10>
    9f46:	46c0      	nop			; (mov r8, r8)
    9f48:	7fffff80 	.word	0x7fffff80
    9f4c:	0000f170 	.word	0x0000f170

00009f50 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

WCHAR ff_wtoupper (	/* Returns up-converted character */
	WCHAR uni		/* Unicode character to be upper converted (BMP only) */
)
{
    9f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f52:	b083      	sub	sp, #12
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = uni < 0x1000 ? cvt1 : cvt2;
    9f54:	4b22      	ldr	r3, [pc, #136]	; (9fe0 <ff_wtoupper+0x90>)
    9f56:	4298      	cmp	r0, r3
    9f58:	d916      	bls.n	9f88 <ff_wtoupper+0x38>
    9f5a:	4922      	ldr	r1, [pc, #136]	; (9fe4 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || uni < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    9f5c:	26ff      	movs	r6, #255	; 0xff
		if (uni < bc + nc) {	/* In the block? */
    9f5e:	0005      	movs	r5, r0
		bc = *p++;								/* Get block base */
    9f60:	880b      	ldrh	r3, [r1, #0]
		if (!bc || uni < bc) break;
    9f62:	2b00      	cmp	r3, #0
    9f64:	d01d      	beq.n	9fa2 <ff_wtoupper+0x52>
    9f66:	4298      	cmp	r0, r3
    9f68:	d31b      	bcc.n	9fa2 <ff_wtoupper+0x52>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    9f6a:	1d0f      	adds	r7, r1, #4
    9f6c:	884a      	ldrh	r2, [r1, #2]
    9f6e:	0a14      	lsrs	r4, r2, #8
    9f70:	4032      	ands	r2, r6
		if (uni < bc + nc) {	/* In the block? */
    9f72:	9500      	str	r5, [sp, #0]
    9f74:	9301      	str	r3, [sp, #4]
    9f76:	18d1      	adds	r1, r2, r3
    9f78:	4288      	cmp	r0, r1
    9f7a:	db07      	blt.n	9f8c <ff_wtoupper+0x3c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    9f7c:	0039      	movs	r1, r7
			case 7: uni -= 80; break;				/* Shift -80 */
			case 8:	uni -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
    9f7e:	2c00      	cmp	r4, #0
    9f80:	d1ee      	bne.n	9f60 <ff_wtoupper+0x10>
    9f82:	0052      	lsls	r2, r2, #1
    9f84:	18b9      	adds	r1, r7, r2
    9f86:	e7eb      	b.n	9f60 <ff_wtoupper+0x10>
	p = uni < 0x1000 ? cvt1 : cvt2;
    9f88:	4917      	ldr	r1, [pc, #92]	; (9fe8 <ff_wtoupper+0x98>)
    9f8a:	e7e7      	b.n	9f5c <ff_wtoupper+0xc>
			switch (cmd) {
    9f8c:	2c08      	cmp	r4, #8
    9f8e:	d808      	bhi.n	9fa2 <ff_wtoupper+0x52>
    9f90:	00a4      	lsls	r4, r4, #2
    9f92:	4a16      	ldr	r2, [pc, #88]	; (9fec <ff_wtoupper+0x9c>)
    9f94:	5912      	ldr	r2, [r2, r4]
    9f96:	4697      	mov	pc, r2
			case 0:	uni = p[uni - bc]; break;		/* Table conversion */
    9f98:	9b00      	ldr	r3, [sp, #0]
    9f9a:	9a01      	ldr	r2, [sp, #4]
    9f9c:	1a99      	subs	r1, r3, r2
    9f9e:	0049      	lsls	r1, r1, #1
    9fa0:	5bc8      	ldrh	r0, [r1, r7]
	}

	return uni;
}
    9fa2:	b003      	add	sp, #12
    9fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			case 1:	uni -= (uni - bc) & 1; break;	/* Case pairs */
    9fa6:	1ac3      	subs	r3, r0, r3
    9fa8:	2201      	movs	r2, #1
    9faa:	4013      	ands	r3, r2
    9fac:	1ac0      	subs	r0, r0, r3
    9fae:	b280      	uxth	r0, r0
    9fb0:	e7f7      	b.n	9fa2 <ff_wtoupper+0x52>
			case 2: uni -= 16; break;				/* Shift -16 */
    9fb2:	3810      	subs	r0, #16
    9fb4:	b280      	uxth	r0, r0
    9fb6:	e7f4      	b.n	9fa2 <ff_wtoupper+0x52>
			case 3:	uni -= 32; break;				/* Shift -32 */
    9fb8:	3820      	subs	r0, #32
    9fba:	b280      	uxth	r0, r0
    9fbc:	e7f1      	b.n	9fa2 <ff_wtoupper+0x52>
			case 4:	uni -= 48; break;				/* Shift -48 */
    9fbe:	3830      	subs	r0, #48	; 0x30
    9fc0:	b280      	uxth	r0, r0
    9fc2:	e7ee      	b.n	9fa2 <ff_wtoupper+0x52>
			case 5:	uni -= 26; break;				/* Shift -26 */
    9fc4:	381a      	subs	r0, #26
    9fc6:	b280      	uxth	r0, r0
    9fc8:	e7eb      	b.n	9fa2 <ff_wtoupper+0x52>
			case 6:	uni += 8; break;				/* Shift +8 */
    9fca:	3008      	adds	r0, #8
    9fcc:	b280      	uxth	r0, r0
    9fce:	e7e8      	b.n	9fa2 <ff_wtoupper+0x52>
			case 7: uni -= 80; break;				/* Shift -80 */
    9fd0:	3850      	subs	r0, #80	; 0x50
    9fd2:	b280      	uxth	r0, r0
    9fd4:	e7e5      	b.n	9fa2 <ff_wtoupper+0x52>
			case 8:	uni -= 0x1C60; break;			/* Shift -0x1C60 */
    9fd6:	4b06      	ldr	r3, [pc, #24]	; (9ff0 <ff_wtoupper+0xa0>)
    9fd8:	469c      	mov	ip, r3
    9fda:	4460      	add	r0, ip
    9fdc:	b280      	uxth	r0, r0
    9fde:	e7e0      	b.n	9fa2 <ff_wtoupper+0x52>
    9fe0:	00000fff 	.word	0x00000fff
    9fe4:	0000f0b4 	.word	0x0000f0b4
    9fe8:	0000eec0 	.word	0x0000eec0
    9fec:	0000ee9c 	.word	0x0000ee9c
    9ff0:	ffffe3a0 	.word	0xffffe3a0
	...

0000a000 <_ZN11TinyGPSPlusC1Ev>:
#define _GPRMCterm   "GPRMC"
#define _GNRMCterm   "GNRMC"
#define _GPGGAterm   "GPGGA"
#define _GNGGAterm   "GNGGA"

TinyGPSPlus::TinyGPSPlus()
    a000:	b510      	push	{r4, lr}
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
    a002:	2200      	movs	r2, #0
    a004:	7002      	strb	r2, [r0, #0]
    a006:	7042      	strb	r2, [r0, #1]
   RawDegrees() : deg(0), billionths(0), negative(false)
    a008:	2300      	movs	r3, #0
    a00a:	8082      	strh	r2, [r0, #4]
    a00c:	6082      	str	r2, [r0, #8]
    a00e:	7303      	strb	r3, [r0, #12]
    a010:	8202      	strh	r2, [r0, #16]
    a012:	6142      	str	r2, [r0, #20]
    a014:	7603      	strb	r3, [r0, #24]
    a016:	8382      	strh	r2, [r0, #28]
    a018:	6202      	str	r2, [r0, #32]
    a01a:	2124      	movs	r1, #36	; 0x24
    a01c:	5443      	strb	r3, [r0, r1]
    a01e:	8502      	strh	r2, [r0, #40]	; 0x28
    a020:	62c2      	str	r2, [r0, #44]	; 0x2c
    a022:	0001      	movs	r1, r0
    a024:	3128      	adds	r1, #40	; 0x28
    a026:	720b      	strb	r3, [r1, #8]
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
    a028:	2138      	movs	r1, #56	; 0x38
    a02a:	5443      	strb	r3, [r0, r1]
    a02c:	0001      	movs	r1, r0
    a02e:	3138      	adds	r1, #56	; 0x38
    a030:	704b      	strb	r3, [r1, #1]
    a032:	63c2      	str	r2, [r0, #60]	; 0x3c
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
    a034:	2148      	movs	r1, #72	; 0x48
    a036:	5443      	strb	r3, [r0, r1]
    a038:	0001      	movs	r1, r0
    a03a:	3148      	adds	r1, #72	; 0x48
    a03c:	704b      	strb	r3, [r1, #1]
    a03e:	64c2      	str	r2, [r0, #76]	; 0x4c
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
    a040:	2158      	movs	r1, #88	; 0x58
    a042:	5443      	strb	r3, [r0, r1]
    a044:	0001      	movs	r1, r0
    a046:	3158      	adds	r1, #88	; 0x58
    a048:	704b      	strb	r3, [r1, #1]
    a04a:	6602      	str	r2, [r0, #96]	; 0x60
    a04c:	2168      	movs	r1, #104	; 0x68
    a04e:	5443      	strb	r3, [r0, r1]
    a050:	0001      	movs	r1, r0
    a052:	3168      	adds	r1, #104	; 0x68
    a054:	704b      	strb	r3, [r1, #1]
    a056:	6702      	str	r2, [r0, #112]	; 0x70
    a058:	2178      	movs	r1, #120	; 0x78
    a05a:	5443      	strb	r3, [r0, r1]
    a05c:	0001      	movs	r1, r0
    a05e:	3178      	adds	r1, #120	; 0x78
    a060:	704b      	strb	r3, [r1, #1]
    a062:	2180      	movs	r1, #128	; 0x80
    a064:	5042      	str	r2, [r0, r1]
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
    a066:	3108      	adds	r1, #8
    a068:	5443      	strb	r3, [r0, r1]
    a06a:	0001      	movs	r1, r0
    a06c:	3188      	adds	r1, #136	; 0x88
    a06e:	704b      	strb	r3, [r1, #1]
    a070:	608a      	str	r2, [r1, #8]
   TinyGPSDecimal() : valid(false), updated(false), val(0)
    a072:	2198      	movs	r1, #152	; 0x98
    a074:	5443      	strb	r3, [r0, r1]
    a076:	0001      	movs	r1, r0
    a078:	3198      	adds	r1, #152	; 0x98
    a07a:	704b      	strb	r3, [r1, #1]
    a07c:	608a      	str	r2, [r1, #8]
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
    a07e:	21a8      	movs	r1, #168	; 0xa8
    a080:	5443      	strb	r3, [r0, r1]
    a082:	3101      	adds	r1, #1
    a084:	5443      	strb	r3, [r0, r1]
    a086:	2402      	movs	r4, #2
    a088:	3110      	adds	r1, #16
    a08a:	5444      	strb	r4, [r0, r1]
    a08c:	3101      	adds	r1, #1
    a08e:	5443      	strb	r3, [r0, r1]
    a090:	3101      	adds	r1, #1
    a092:	5443      	strb	r3, [r0, r1]
    a094:	3101      	adds	r1, #1
    a096:	5443      	strb	r3, [r0, r1]
    a098:	3104      	adds	r1, #4
    a09a:	5042      	str	r2, [r0, r1]
    a09c:	3104      	adds	r1, #4
    a09e:	5042      	str	r2, [r0, r1]
    a0a0:	3104      	adds	r1, #4
    a0a2:	5042      	str	r2, [r0, r1]
    a0a4:	3104      	adds	r1, #4
    a0a6:	5042      	str	r2, [r0, r1]
    a0a8:	3104      	adds	r1, #4
    a0aa:	5042      	str	r2, [r0, r1]
    a0ac:	3104      	adds	r1, #4
    a0ae:	5042      	str	r2, [r0, r1]
{
  term[0] = '\0';
    a0b0:	32aa      	adds	r2, #170	; 0xaa
    a0b2:	5483      	strb	r3, [r0, r2]
}
    a0b4:	bd10      	pop	{r4, pc}
    a0b6:	46c0      	nop			; (mov r8, r8)
	...

0000a0c0 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
    a0c0:	000b      	movs	r3, r1
    a0c2:	3b41      	subs	r3, #65	; 0x41
    a0c4:	2b05      	cmp	r3, #5
    a0c6:	d908      	bls.n	a0da <_ZN11TinyGPSPlus7fromHexEc+0x1a>
    return a - 'A' + 10;
  else if (a >= 'a' && a <= 'f')
    return a - 'a' + 10;
  else
    return a - '0';
    a0c8:	0008      	movs	r0, r1
    a0ca:	3830      	subs	r0, #48	; 0x30
  else if (a >= 'a' && a <= 'f')
    a0cc:	000b      	movs	r3, r1
    a0ce:	3b61      	subs	r3, #97	; 0x61
    a0d0:	2b05      	cmp	r3, #5
    a0d2:	d804      	bhi.n	a0de <_ZN11TinyGPSPlus7fromHexEc+0x1e>
    return a - 'a' + 10;
    a0d4:	3957      	subs	r1, #87	; 0x57
    a0d6:	0008      	movs	r0, r1
    a0d8:	e001      	b.n	a0de <_ZN11TinyGPSPlus7fromHexEc+0x1e>
    return a - 'A' + 10;
    a0da:	3937      	subs	r1, #55	; 0x37
    a0dc:	0008      	movs	r0, r1
}
    a0de:	4770      	bx	lr

0000a0e0 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
    a0e0:	b570      	push	{r4, r5, r6, lr}
  bool negative = *term == '-';
    a0e2:	7805      	ldrb	r5, [r0, #0]
  if (negative) ++term;
    a0e4:	002b      	movs	r3, r5
    a0e6:	3b2d      	subs	r3, #45	; 0x2d
    a0e8:	425a      	negs	r2, r3
    a0ea:	4153      	adcs	r3, r2
    a0ec:	18c4      	adds	r4, r0, r3
  int32_t ret = 100 * (int32_t)atol(term);
    a0ee:	0020      	movs	r0, r4
    a0f0:	f003 fce9 	bl	dac6 <atol>
    a0f4:	2364      	movs	r3, #100	; 0x64
    a0f6:	4358      	muls	r0, r3
  while (isdigit(*term)) ++term;
    a0f8:	7823      	ldrb	r3, [r4, #0]
    a0fa:	001a      	movs	r2, r3
    a0fc:	3a30      	subs	r2, #48	; 0x30
    a0fe:	2a09      	cmp	r2, #9
    a100:	d805      	bhi.n	a10e <_ZN11TinyGPSPlus12parseDecimalEPKc+0x2e>
    a102:	3401      	adds	r4, #1
    a104:	7823      	ldrb	r3, [r4, #0]
    a106:	001a      	movs	r2, r3
    a108:	3a30      	subs	r2, #48	; 0x30
    a10a:	2a09      	cmp	r2, #9
    a10c:	d9f9      	bls.n	a102 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x22>
  if (*term == '.' && isdigit(term[1]))
    a10e:	2b2e      	cmp	r3, #46	; 0x2e
    a110:	d002      	beq.n	a118 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x38>
  {
    ret += 10 * (term[1] - '0');
    if (isdigit(term[2]))
      ret += term[2] - '0';
  }
  return negative ? -ret : ret;
    a112:	2d2d      	cmp	r5, #45	; 0x2d
    a114:	d011      	beq.n	a13a <_ZN11TinyGPSPlus12parseDecimalEPKc+0x5a>
}
    a116:	bd70      	pop	{r4, r5, r6, pc}
  if (*term == '.' && isdigit(term[1]))
    a118:	7863      	ldrb	r3, [r4, #1]
    a11a:	001a      	movs	r2, r3
    a11c:	3a30      	subs	r2, #48	; 0x30
    a11e:	2a09      	cmp	r2, #9
    a120:	d8f7      	bhi.n	a112 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x32>
    ret += 10 * (term[1] - '0');
    a122:	0013      	movs	r3, r2
    a124:	0092      	lsls	r2, r2, #2
    a126:	18d3      	adds	r3, r2, r3
    a128:	005b      	lsls	r3, r3, #1
    a12a:	18c0      	adds	r0, r0, r3
    if (isdigit(term[2]))
    a12c:	78a3      	ldrb	r3, [r4, #2]
    a12e:	001a      	movs	r2, r3
    a130:	3a30      	subs	r2, #48	; 0x30
    a132:	2a09      	cmp	r2, #9
    a134:	d8ed      	bhi.n	a112 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x32>
      ret += term[2] - '0';
    a136:	1880      	adds	r0, r0, r2
    a138:	e7eb      	b.n	a112 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x32>
  return negative ? -ret : ret;
    a13a:	4240      	negs	r0, r0
    a13c:	e7eb      	b.n	a116 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x36>
    a13e:	46c0      	nop			; (mov r8, r8)

0000a140 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
    a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a142:	0004      	movs	r4, r0
    a144:	000d      	movs	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
    a146:	f003 fcbe 	bl	dac6 <atol>
    a14a:	0006      	movs	r6, r0
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
    a14c:	2164      	movs	r1, #100	; 0x64
    a14e:	f7f6 f8c7 	bl	2e0 <__aeabi_uidivmod>
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
    a152:	0409      	lsls	r1, r1, #16
    a154:	0c09      	lsrs	r1, r1, #16
    a156:	4f19      	ldr	r7, [pc, #100]	; (a1bc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x7c>)
    a158:	434f      	muls	r7, r1

  deg.deg = (int16_t)(leftOfDecimal / 100);
    a15a:	2164      	movs	r1, #100	; 0x64
    a15c:	0030      	movs	r0, r6
    a15e:	f7f6 f839 	bl	1d4 <__udivsi3>
    a162:	8028      	strh	r0, [r5, #0]

  while (isdigit(*term))
    a164:	7823      	ldrb	r3, [r4, #0]
    a166:	001a      	movs	r2, r3
    a168:	3a30      	subs	r2, #48	; 0x30
    a16a:	2a09      	cmp	r2, #9
    a16c:	d805      	bhi.n	a17a <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x3a>
    ++term;
    a16e:	3401      	adds	r4, #1
  while (isdigit(*term))
    a170:	7823      	ldrb	r3, [r4, #0]
    a172:	001a      	movs	r2, r3
    a174:	3a30      	subs	r2, #48	; 0x30
    a176:	2a09      	cmp	r2, #9
    a178:	d9f9      	bls.n	a16e <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x2e>

  if (*term == '.')
    a17a:	2b2e      	cmp	r3, #46	; 0x2e
    a17c:	d009      	beq.n	a192 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x52>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
    a17e:	00b8      	lsls	r0, r7, #2
    a180:	19c0      	adds	r0, r0, r7
    a182:	3001      	adds	r0, #1
    a184:	2103      	movs	r1, #3
    a186:	f7f6 f825 	bl	1d4 <__udivsi3>
    a18a:	6068      	str	r0, [r5, #4]
  deg.negative = false;
    a18c:	2300      	movs	r3, #0
    a18e:	722b      	strb	r3, [r5, #8]
}
    a190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (isdigit(*++term))
    a192:	7866      	ldrb	r6, [r4, #1]
    a194:	0033      	movs	r3, r6
    a196:	3b30      	subs	r3, #48	; 0x30
    a198:	2b09      	cmp	r3, #9
    a19a:	d8f0      	bhi.n	a17e <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x3e>
    a19c:	3401      	adds	r4, #1
    a19e:	4807      	ldr	r0, [pc, #28]	; (a1bc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x7c>)
      multiplier /= 10;
    a1a0:	210a      	movs	r1, #10
    a1a2:	f7f6 f817 	bl	1d4 <__udivsi3>
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    a1a6:	3e30      	subs	r6, #48	; 0x30
    a1a8:	4346      	muls	r6, r0
    a1aa:	19bf      	adds	r7, r7, r6
    while (isdigit(*++term))
    a1ac:	3401      	adds	r4, #1
    a1ae:	7826      	ldrb	r6, [r4, #0]
    a1b0:	0033      	movs	r3, r6
    a1b2:	3b30      	subs	r3, #48	; 0x30
    a1b4:	2b09      	cmp	r3, #9
    a1b6:	d9f3      	bls.n	a1a0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x60>
    a1b8:	e7e1      	b.n	a17e <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x3e>
    a1ba:	46c0      	nop			; (mov r8, r8)
    a1bc:	00989680 	.word	0x00989680

0000a1c0 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
    a1c0:	b510      	push	{r4, lr}
    a1c2:	0004      	movs	r4, r0
   rawLatData = rawNewLatData;
    a1c4:	3004      	adds	r0, #4
    a1c6:	0021      	movs	r1, r4
    a1c8:	311c      	adds	r1, #28
    a1ca:	2209      	movs	r2, #9
    a1cc:	f003 fc97 	bl	dafe <memcpy>
   rawLngData = rawNewLngData;
    a1d0:	0020      	movs	r0, r4
    a1d2:	3010      	adds	r0, #16
    a1d4:	0021      	movs	r1, r4
    a1d6:	3128      	adds	r1, #40	; 0x28
    a1d8:	2209      	movs	r2, #9
    a1da:	f003 fc90 	bl	dafe <memcpy>
   lastCommitTime = millis();
    a1de:	2300      	movs	r3, #0
    a1e0:	6363      	str	r3, [r4, #52]	; 0x34
   valid = updated = true;
    a1e2:	3301      	adds	r3, #1
    a1e4:	7063      	strb	r3, [r4, #1]
    a1e6:	7023      	strb	r3, [r4, #0]
}
    a1e8:	bd10      	pop	{r4, pc}
    a1ea:	46c0      	nop			; (mov r8, r8)
    a1ec:	0000      	movs	r0, r0
	...

0000a1f0 <_ZN11TinyGPSDate6commitEv>:
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
   date = newDate;
    a1f0:	6883      	ldr	r3, [r0, #8]
    a1f2:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
    a1f4:	2300      	movs	r3, #0
    a1f6:	60c3      	str	r3, [r0, #12]
   valid = updated = true;
    a1f8:	3301      	adds	r3, #1
    a1fa:	7043      	strb	r3, [r0, #1]
    a1fc:	7003      	strb	r3, [r0, #0]
}
    a1fe:	4770      	bx	lr

0000a200 <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   time = newTime;
    a200:	6883      	ldr	r3, [r0, #8]
    a202:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
    a204:	2300      	movs	r3, #0
    a206:	60c3      	str	r3, [r0, #12]
   valid = updated = true;
    a208:	3301      	adds	r3, #1
    a20a:	7043      	strb	r3, [r0, #1]
    a20c:	7003      	strb	r3, [r0, #0]
}
    a20e:	4770      	bx	lr

0000a210 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
    a210:	b510      	push	{r4, lr}
    a212:	0004      	movs	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
    a214:	0008      	movs	r0, r1
    a216:	f7ff ff63 	bl	a0e0 <_ZN11TinyGPSPlus12parseDecimalEPKc>
    a21a:	60a0      	str	r0, [r4, #8]
}
    a21c:	bd10      	pop	{r4, pc}
    a21e:	46c0      	nop			; (mov r8, r8)

0000a220 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
    a220:	b510      	push	{r4, lr}
    a222:	0004      	movs	r4, r0
   newDate = atol(term);
    a224:	0008      	movs	r0, r1
    a226:	f003 fc4e 	bl	dac6 <atol>
    a22a:	60a0      	str	r0, [r4, #8]
}
    a22c:	bd10      	pop	{r4, pc}
    a22e:	46c0      	nop			; (mov r8, r8)

0000a230 <_ZN11TinyGPSDate4yearEv>:

uint16_t TinyGPSDate::year()
{
    a230:	b510      	push	{r4, lr}
   updated = false;
    a232:	2300      	movs	r3, #0
    a234:	7043      	strb	r3, [r0, #1]
   uint16_t year = date % 100;
    a236:	6840      	ldr	r0, [r0, #4]
    a238:	2164      	movs	r1, #100	; 0x64
    a23a:	f7f6 f851 	bl	2e0 <__aeabi_uidivmod>
   return year + 2000;
    a23e:	23fa      	movs	r3, #250	; 0xfa
    a240:	00db      	lsls	r3, r3, #3
    a242:	469c      	mov	ip, r3
    a244:	4461      	add	r1, ip
    a246:	b288      	uxth	r0, r1
}
    a248:	bd10      	pop	{r4, pc}
    a24a:	46c0      	nop			; (mov r8, r8)
    a24c:	0000      	movs	r0, r0
	...

0000a250 <_ZN11TinyGPSDate5monthEv>:

uint8_t TinyGPSDate::month()
{
    a250:	b510      	push	{r4, lr}
   updated = false;
    a252:	2300      	movs	r3, #0
    a254:	7043      	strb	r3, [r0, #1]
   return (date / 100) % 100;
    a256:	6840      	ldr	r0, [r0, #4]
    a258:	2164      	movs	r1, #100	; 0x64
    a25a:	f7f5 ffbb 	bl	1d4 <__udivsi3>
    a25e:	2164      	movs	r1, #100	; 0x64
    a260:	f7f6 f83e 	bl	2e0 <__aeabi_uidivmod>
    a264:	b2c8      	uxtb	r0, r1
}
    a266:	bd10      	pop	{r4, pc}
	...

0000a270 <_ZN11TinyGPSDate3dayEv>:

uint8_t TinyGPSDate::day()
{
    a270:	b510      	push	{r4, lr}
   updated = false;
    a272:	2300      	movs	r3, #0
    a274:	7043      	strb	r3, [r0, #1]
   return date / 10000;
    a276:	6840      	ldr	r0, [r0, #4]
    a278:	4902      	ldr	r1, [pc, #8]	; (a284 <_ZN11TinyGPSDate3dayEv+0x14>)
    a27a:	f7f5 ffab 	bl	1d4 <__udivsi3>
    a27e:	b2c0      	uxtb	r0, r0
}
    a280:	bd10      	pop	{r4, pc}
    a282:	46c0      	nop			; (mov r8, r8)
    a284:	00002710 	.word	0x00002710
	...

0000a290 <_ZN11TinyGPSTime4hourEv>:

uint8_t TinyGPSTime::hour()
{
    a290:	b510      	push	{r4, lr}
   updated = false;
    a292:	2300      	movs	r3, #0
    a294:	7043      	strb	r3, [r0, #1]
   return time / 1000000;
    a296:	6840      	ldr	r0, [r0, #4]
    a298:	4902      	ldr	r1, [pc, #8]	; (a2a4 <_ZN11TinyGPSTime4hourEv+0x14>)
    a29a:	f7f5 ff9b 	bl	1d4 <__udivsi3>
    a29e:	b2c0      	uxtb	r0, r0
}
    a2a0:	bd10      	pop	{r4, pc}
    a2a2:	46c0      	nop			; (mov r8, r8)
    a2a4:	000f4240 	.word	0x000f4240
	...

0000a2b0 <_ZN11TinyGPSTime6minuteEv>:

uint8_t TinyGPSTime::minute()
{
    a2b0:	b510      	push	{r4, lr}
   updated = false;
    a2b2:	2300      	movs	r3, #0
    a2b4:	7043      	strb	r3, [r0, #1]
   return (time / 10000) % 100;
    a2b6:	6840      	ldr	r0, [r0, #4]
    a2b8:	4903      	ldr	r1, [pc, #12]	; (a2c8 <_ZN11TinyGPSTime6minuteEv+0x18>)
    a2ba:	f7f5 ff8b 	bl	1d4 <__udivsi3>
    a2be:	2164      	movs	r1, #100	; 0x64
    a2c0:	f7f6 f80e 	bl	2e0 <__aeabi_uidivmod>
    a2c4:	b2c8      	uxtb	r0, r1
}
    a2c6:	bd10      	pop	{r4, pc}
    a2c8:	00002710 	.word	0x00002710
    a2cc:	00000000 	.word	0x00000000

0000a2d0 <_ZN11TinyGPSTime6secondEv>:

uint8_t TinyGPSTime::second()
{
    a2d0:	b510      	push	{r4, lr}
   updated = false;
    a2d2:	2300      	movs	r3, #0
    a2d4:	7043      	strb	r3, [r0, #1]
   return (time / 100) % 100;
    a2d6:	6840      	ldr	r0, [r0, #4]
    a2d8:	2164      	movs	r1, #100	; 0x64
    a2da:	f7f5 ff7b 	bl	1d4 <__udivsi3>
    a2de:	2164      	movs	r1, #100	; 0x64
    a2e0:	f7f5 fffe 	bl	2e0 <__aeabi_uidivmod>
    a2e4:	b2c8      	uxtb	r0, r1
}
    a2e6:	bd10      	pop	{r4, pc}
	...

0000a2f0 <_ZN14TinyGPSDecimal6commitEv>:
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   val = newval;
    a2f0:	68c3      	ldr	r3, [r0, #12]
    a2f2:	6083      	str	r3, [r0, #8]
   lastCommitTime = millis();
    a2f4:	2300      	movs	r3, #0
    a2f6:	6043      	str	r3, [r0, #4]
   valid = updated = true;
    a2f8:	3301      	adds	r3, #1
    a2fa:	7043      	strb	r3, [r0, #1]
    a2fc:	7003      	strb	r3, [r0, #0]
}
    a2fe:	4770      	bx	lr

0000a300 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
    a300:	b510      	push	{r4, lr}
    a302:	0004      	movs	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
    a304:	0008      	movs	r0, r1
    a306:	f7ff feeb 	bl	a0e0 <_ZN11TinyGPSPlus12parseDecimalEPKc>
    a30a:	60e0      	str	r0, [r4, #12]
}
    a30c:	bd10      	pop	{r4, pc}
    a30e:	46c0      	nop			; (mov r8, r8)

0000a310 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   val = newval;
    a310:	68c3      	ldr	r3, [r0, #12]
    a312:	6083      	str	r3, [r0, #8]
   lastCommitTime = millis();
    a314:	2300      	movs	r3, #0
    a316:	6043      	str	r3, [r0, #4]
   valid = updated = true;
    a318:	3301      	adds	r3, #1
    a31a:	7043      	strb	r3, [r0, #1]
    a31c:	7003      	strb	r3, [r0, #0]
}
    a31e:	4770      	bx	lr

0000a320 <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
    a320:	b510      	push	{r4, lr}
    a322:	0004      	movs	r4, r0
   newval = atol(term);
    a324:	0008      	movs	r0, r1
    a326:	f003 fbce 	bl	dac6 <atol>
    a32a:	60e0      	str	r0, [r4, #12]
}
    a32c:	bd10      	pop	{r4, pc}
    a32e:	46c0      	nop			; (mov r8, r8)

0000a330 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
    a330:	b510      	push	{r4, lr}
    a332:	0004      	movs	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
    a334:	3010      	adds	r0, #16
    a336:	0021      	movs	r1, r4
    a338:	f003 fc3c 	bl	dbb4 <strcpy>
   lastCommitTime = millis();
    a33c:	2300      	movs	r3, #0
    a33e:	6223      	str	r3, [r4, #32]
   valid = updated = true;
    a340:	3301      	adds	r3, #1
    a342:	2225      	movs	r2, #37	; 0x25
    a344:	54a3      	strb	r3, [r4, r2]
    a346:	3a01      	subs	r2, #1
    a348:	54a3      	strb	r3, [r4, r2]
}
    a34a:	bd10      	pop	{r4, pc}
    a34c:	0000      	movs	r0, r0
	...

0000a350 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
    a350:	b510      	push	{r4, lr}
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
    a352:	2210      	movs	r2, #16
    a354:	f003 fc47 	bl	dbe6 <strncpy>
}
    a358:	bd10      	pop	{r4, pc}
    a35a:	46c0      	nop			; (mov r8, r8)
    a35c:	0000      	movs	r0, r0
	...

0000a360 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
    a360:	b5f0      	push	{r4, r5, r6, r7, lr}
    a362:	46c6      	mov	lr, r8
    a364:	b500      	push	{lr}
    a366:	b082      	sub	sp, #8
    a368:	0004      	movs	r4, r0
  if (isChecksumTerm)
    a36a:	23a9      	movs	r3, #169	; 0xa9
    a36c:	5cc3      	ldrb	r3, [r0, r3]
    a36e:	4698      	mov	r8, r3
    a370:	2b00      	cmp	r3, #0
    a372:	d100      	bne.n	a376 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x16>
    a374:	e070      	b.n	a458 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf8>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
    a376:	23aa      	movs	r3, #170	; 0xaa
    a378:	5cc1      	ldrb	r1, [r0, r3]
    a37a:	f7ff fea1 	bl	a0c0 <_ZN11TinyGPSPlus7fromHexEc>
    a37e:	0005      	movs	r5, r0
    a380:	23ab      	movs	r3, #171	; 0xab
    a382:	5ce1      	ldrb	r1, [r4, r3]
    a384:	0020      	movs	r0, r4
    a386:	f7ff fe9b 	bl	a0c0 <_ZN11TinyGPSPlus7fromHexEc>
    a38a:	012d      	lsls	r5, r5, #4
    a38c:	1828      	adds	r0, r5, r0
    if (checksum == parity)
    a38e:	23a8      	movs	r3, #168	; 0xa8
    a390:	5ce3      	ldrb	r3, [r4, r3]
    a392:	b2c0      	uxtb	r0, r0
    a394:	4283      	cmp	r3, r0
    a396:	d00a      	beq.n	a3ae <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x4e>
      ++failedChecksumCount;
    a398:	22d0      	movs	r2, #208	; 0xd0
    a39a:	58a3      	ldr	r3, [r4, r2]
    a39c:	3301      	adds	r3, #1
    a39e:	50a3      	str	r3, [r4, r2]
    return false;
    a3a0:	2300      	movs	r3, #0
    a3a2:	4698      	mov	r8, r3
}
    a3a4:	4640      	mov	r0, r8
    a3a6:	b002      	add	sp, #8
    a3a8:	bc04      	pop	{r2}
    a3aa:	4690      	mov	r8, r2
    a3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      passedChecksumCount++;
    a3ae:	22d4      	movs	r2, #212	; 0xd4
    a3b0:	58a3      	ldr	r3, [r4, r2]
    a3b2:	3301      	adds	r3, #1
    a3b4:	50a3      	str	r3, [r4, r2]
      if (sentenceHasFix)
    a3b6:	23bc      	movs	r3, #188	; 0xbc
    a3b8:	5ce3      	ldrb	r3, [r4, r3]
    a3ba:	2b00      	cmp	r3, #0
    a3bc:	d003      	beq.n	a3c6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x66>
        ++sentencesWithFixCount;
    a3be:	3a08      	subs	r2, #8
    a3c0:	58a3      	ldr	r3, [r4, r2]
    a3c2:	3301      	adds	r3, #1
    a3c4:	50a3      	str	r3, [r4, r2]
      switch(curSentenceType)
    a3c6:	23b9      	movs	r3, #185	; 0xb9
    a3c8:	5ce3      	ldrb	r3, [r4, r3]
    a3ca:	2b00      	cmp	r3, #0
    a3cc:	d019      	beq.n	a402 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa2>
    a3ce:	2b01      	cmp	r3, #1
    a3d0:	d127      	bne.n	a422 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc2>
        date.commit();
    a3d2:	0020      	movs	r0, r4
    a3d4:	3038      	adds	r0, #56	; 0x38
    a3d6:	f7ff ff0b 	bl	a1f0 <_ZN11TinyGPSDate6commitEv>
        time.commit();
    a3da:	0020      	movs	r0, r4
    a3dc:	3048      	adds	r0, #72	; 0x48
    a3de:	f7ff ff0f 	bl	a200 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
    a3e2:	23bc      	movs	r3, #188	; 0xbc
    a3e4:	5ce3      	ldrb	r3, [r4, r3]
    a3e6:	2b00      	cmp	r3, #0
    a3e8:	d01b      	beq.n	a422 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc2>
           location.commit();
    a3ea:	0020      	movs	r0, r4
    a3ec:	f7ff fee8 	bl	a1c0 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
    a3f0:	0020      	movs	r0, r4
    a3f2:	3058      	adds	r0, #88	; 0x58
    a3f4:	f7ff ff7c 	bl	a2f0 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
    a3f8:	0020      	movs	r0, r4
    a3fa:	3068      	adds	r0, #104	; 0x68
    a3fc:	f7ff ff78 	bl	a2f0 <_ZN14TinyGPSDecimal6commitEv>
    a400:	e00f      	b.n	a422 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc2>
        time.commit();
    a402:	0020      	movs	r0, r4
    a404:	3048      	adds	r0, #72	; 0x48
    a406:	f7ff fefb 	bl	a200 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
    a40a:	23bc      	movs	r3, #188	; 0xbc
    a40c:	5ce3      	ldrb	r3, [r4, r3]
    a40e:	2b00      	cmp	r3, #0
    a410:	d11a      	bne.n	a448 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xe8>
        satellites.commit();
    a412:	0020      	movs	r0, r4
    a414:	3088      	adds	r0, #136	; 0x88
    a416:	f7ff ff7b 	bl	a310 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
    a41a:	0020      	movs	r0, r4
    a41c:	3098      	adds	r0, #152	; 0x98
    a41e:	f7ff ff67 	bl	a2f0 <_ZN14TinyGPSDecimal6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
    a422:	23c4      	movs	r3, #196	; 0xc4
    a424:	58e5      	ldr	r5, [r4, r3]
    a426:	2d00      	cmp	r5, #0
    a428:	d0bc      	beq.n	a3a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x44>
    a42a:	26c4      	movs	r6, #196	; 0xc4
    a42c:	59a3      	ldr	r3, [r4, r6]
    a42e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    a430:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    a432:	f7f8 fb8d 	bl	2b50 <strcmp>
    a436:	2800      	cmp	r0, #0
    a438:	d1b4      	bne.n	a3a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x44>
         p->commit();
    a43a:	0028      	movs	r0, r5
    a43c:	f7ff ff78 	bl	a330 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
    a440:	6b2d      	ldr	r5, [r5, #48]	; 0x30
    a442:	2d00      	cmp	r5, #0
    a444:	d1f2      	bne.n	a42c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xcc>
    a446:	e7ad      	b.n	a3a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x44>
          location.commit();
    a448:	0020      	movs	r0, r4
    a44a:	f7ff feb9 	bl	a1c0 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
    a44e:	0020      	movs	r0, r4
    a450:	3078      	adds	r0, #120	; 0x78
    a452:	f7ff ff4d 	bl	a2f0 <_ZN14TinyGPSDecimal6commitEv>
    a456:	e7dc      	b.n	a412 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb2>
  if (curTermNumber == 0)
    a458:	23ba      	movs	r3, #186	; 0xba
    a45a:	5cc2      	ldrb	r2, [r0, r3]
    a45c:	2a00      	cmp	r2, #0
    a45e:	d141      	bne.n	a4e4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x184>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
    a460:	0006      	movs	r6, r0
    a462:	36aa      	adds	r6, #170	; 0xaa
    a464:	4960      	ldr	r1, [pc, #384]	; (a5e8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x288>)
    a466:	0030      	movs	r0, r6
    a468:	f7f8 fb72 	bl	2b50 <strcmp>
    a46c:	2800      	cmp	r0, #0
    a46e:	d005      	beq.n	a47c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11c>
    a470:	495e      	ldr	r1, [pc, #376]	; (a5ec <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x28c>)
    a472:	0030      	movs	r0, r6
    a474:	f7f8 fb6c 	bl	2b50 <strcmp>
    a478:	2800      	cmp	r0, #0
    a47a:	d115      	bne.n	a4a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x148>
      curSentenceType = GPS_SENTENCE_GPRMC;
    a47c:	2201      	movs	r2, #1
    a47e:	23b9      	movs	r3, #185	; 0xb9
    a480:	54e2      	strb	r2, [r4, r3]
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    a482:	23c0      	movs	r3, #192	; 0xc0
    a484:	58e5      	ldr	r5, [r4, r3]
    a486:	3304      	adds	r3, #4
    a488:	50e5      	str	r5, [r4, r3]
    a48a:	2d00      	cmp	r5, #0
    a48c:	d100      	bne.n	a490 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x130>
    a48e:	e789      	b.n	a3a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x44>
    a490:	27c4      	movs	r7, #196	; 0xc4
    a492:	0031      	movs	r1, r6
    a494:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    a496:	f7f8 fb5b 	bl	2b50 <strcmp>
    a49a:	2800      	cmp	r0, #0
    a49c:	da18      	bge.n	a4d0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x170>
    a49e:	6b2d      	ldr	r5, [r5, #48]	; 0x30
    a4a0:	51e5      	str	r5, [r4, r7]
    a4a2:	2d00      	cmp	r5, #0
    a4a4:	d1f5      	bne.n	a492 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x132>
    a4a6:	e77d      	b.n	a3a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x44>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
    a4a8:	4951      	ldr	r1, [pc, #324]	; (a5f0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x290>)
    a4aa:	0030      	movs	r0, r6
    a4ac:	f7f8 fb50 	bl	2b50 <strcmp>
    a4b0:	2800      	cmp	r0, #0
    a4b2:	d005      	beq.n	a4c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    a4b4:	494f      	ldr	r1, [pc, #316]	; (a5f4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x294>)
    a4b6:	0030      	movs	r0, r6
    a4b8:	f7f8 fb4a 	bl	2b50 <strcmp>
    a4bc:	2800      	cmp	r0, #0
    a4be:	d103      	bne.n	a4c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x168>
      curSentenceType = GPS_SENTENCE_GPGGA;
    a4c0:	2200      	movs	r2, #0
    a4c2:	23b9      	movs	r3, #185	; 0xb9
    a4c4:	54e2      	strb	r2, [r4, r3]
    a4c6:	e7dc      	b.n	a482 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x122>
      curSentenceType = GPS_SENTENCE_OTHER;
    a4c8:	2202      	movs	r2, #2
    a4ca:	23b9      	movs	r3, #185	; 0xb9
    a4cc:	54e2      	strb	r2, [r4, r3]
    a4ce:	e7d8      	b.n	a482 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x122>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
    a4d0:	2d00      	cmp	r5, #0
    a4d2:	d100      	bne.n	a4d6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
    a4d4:	e766      	b.n	a3a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x44>
    a4d6:	2800      	cmp	r0, #0
    a4d8:	dc00      	bgt.n	a4dc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x17c>
    a4da:	e763      	b.n	a3a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x44>
       customCandidates = NULL;
    a4dc:	2200      	movs	r2, #0
    a4de:	23c4      	movs	r3, #196	; 0xc4
    a4e0:	50e2      	str	r2, [r4, r3]
    a4e2:	e75f      	b.n	a3a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x44>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
    a4e4:	23b9      	movs	r3, #185	; 0xb9
    a4e6:	5cc3      	ldrb	r3, [r0, r3]
    a4e8:	2b02      	cmp	r3, #2
    a4ea:	d010      	beq.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
    a4ec:	21aa      	movs	r1, #170	; 0xaa
    a4ee:	5c41      	ldrb	r1, [r0, r1]
    a4f0:	2900      	cmp	r1, #0
    a4f2:	d00c      	beq.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
    switch(COMBINE(curSentenceType, curTermNumber))
    a4f4:	015b      	lsls	r3, r3, #5
    a4f6:	4313      	orrs	r3, r2
    a4f8:	2b29      	cmp	r3, #41	; 0x29
    a4fa:	d808      	bhi.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
    a4fc:	009b      	lsls	r3, r3, #2
    a4fe:	4a3e      	ldr	r2, [pc, #248]	; (a5f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x298>)
    a500:	58d3      	ldr	r3, [r2, r3]
    a502:	469f      	mov	pc, r3
      time.setTime(term);
    a504:	3048      	adds	r0, #72	; 0x48
    a506:	0021      	movs	r1, r4
    a508:	31aa      	adds	r1, #170	; 0xaa
    a50a:	f7ff fe81 	bl	a210 <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    a50e:	23c4      	movs	r3, #196	; 0xc4
    a510:	58e5      	ldr	r5, [r4, r3]
    a512:	2d00      	cmp	r5, #0
    a514:	d100      	bne.n	a518 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b8>
    a516:	e745      	b.n	a3a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x44>
    a518:	27c4      	movs	r7, #196	; 0xc4
    a51a:	26ba      	movs	r6, #186	; 0xba
         p->set(term);
    a51c:	3b1a      	subs	r3, #26
    a51e:	469c      	mov	ip, r3
    a520:	44a4      	add	ip, r4
    a522:	4663      	mov	r3, ip
    a524:	9301      	str	r3, [sp, #4]
    a526:	e04c      	b.n	a5c2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x262>
      sentenceHasFix = term[0] == 'A';
    a528:	3941      	subs	r1, #65	; 0x41
    a52a:	424a      	negs	r2, r1
    a52c:	414a      	adcs	r2, r1
    a52e:	23bc      	movs	r3, #188	; 0xbc
    a530:	54c2      	strb	r2, [r0, r3]
      break;
    a532:	e7ec      	b.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
    a534:	0001      	movs	r1, r0
    a536:	311c      	adds	r1, #28
    a538:	30aa      	adds	r0, #170	; 0xaa
    a53a:	f7ff fe01 	bl	a140 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
    a53e:	e7e6      	b.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
      location.rawNewLatData.negative = term[0] == 'S';
    a540:	3953      	subs	r1, #83	; 0x53
    a542:	424a      	negs	r2, r1
    a544:	414a      	adcs	r2, r1
    a546:	2324      	movs	r3, #36	; 0x24
    a548:	54c2      	strb	r2, [r0, r3]
      break;
    a54a:	e7e0      	b.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
    a54c:	0001      	movs	r1, r0
    a54e:	3128      	adds	r1, #40	; 0x28
    a550:	30aa      	adds	r0, #170	; 0xaa
    a552:	f7ff fdf5 	bl	a140 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
    a556:	e7da      	b.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
      location.rawNewLngData.negative = term[0] == 'W';
    a558:	3957      	subs	r1, #87	; 0x57
    a55a:	424a      	negs	r2, r1
    a55c:	414a      	adcs	r2, r1
    a55e:	2330      	movs	r3, #48	; 0x30
    a560:	54c2      	strb	r2, [r0, r3]
      break;
    a562:	e7d4      	b.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
      speed.set(term);
    a564:	3058      	adds	r0, #88	; 0x58
    a566:	0021      	movs	r1, r4
    a568:	31aa      	adds	r1, #170	; 0xaa
    a56a:	f7ff fec9 	bl	a300 <_ZN14TinyGPSDecimal3setEPKc>
      break;
    a56e:	e7ce      	b.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
      course.set(term);
    a570:	3068      	adds	r0, #104	; 0x68
    a572:	0021      	movs	r1, r4
    a574:	31aa      	adds	r1, #170	; 0xaa
    a576:	f7ff fec3 	bl	a300 <_ZN14TinyGPSDecimal3setEPKc>
      break;
    a57a:	e7c8      	b.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
      date.setDate(term);
    a57c:	3038      	adds	r0, #56	; 0x38
    a57e:	0021      	movs	r1, r4
    a580:	31aa      	adds	r1, #170	; 0xaa
    a582:	f7ff fe4d 	bl	a220 <_ZN11TinyGPSDate7setDateEPKc>
      break;
    a586:	e7c2      	b.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
      sentenceHasFix = term[0] > '0';
    a588:	2301      	movs	r3, #1
    a58a:	2930      	cmp	r1, #48	; 0x30
    a58c:	dc00      	bgt.n	a590 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x230>
    a58e:	2300      	movs	r3, #0
    a590:	22bc      	movs	r2, #188	; 0xbc
    a592:	54a3      	strb	r3, [r4, r2]
      break;
    a594:	e7bb      	b.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
      satellites.set(term);
    a596:	3088      	adds	r0, #136	; 0x88
    a598:	0021      	movs	r1, r4
    a59a:	31aa      	adds	r1, #170	; 0xaa
    a59c:	f7ff fec0 	bl	a320 <_ZN14TinyGPSInteger3setEPKc>
      break;
    a5a0:	e7b5      	b.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
      hdop.set(term);
    a5a2:	3098      	adds	r0, #152	; 0x98
    a5a4:	0021      	movs	r1, r4
    a5a6:	31aa      	adds	r1, #170	; 0xaa
    a5a8:	f7ff feaa 	bl	a300 <_ZN14TinyGPSDecimal3setEPKc>
      break;
    a5ac:	e7af      	b.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
      altitude.set(term);
    a5ae:	3078      	adds	r0, #120	; 0x78
    a5b0:	0021      	movs	r1, r4
    a5b2:	31aa      	adds	r1, #170	; 0xaa
    a5b4:	f7ff fea4 	bl	a300 <_ZN14TinyGPSDecimal3setEPKc>
      break;
    a5b8:	e7a9      	b.n	a50e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ae>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    a5ba:	6b2d      	ldr	r5, [r5, #48]	; 0x30
    a5bc:	2d00      	cmp	r5, #0
    a5be:	d100      	bne.n	a5c2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x262>
    a5c0:	e6f0      	b.n	a3a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x44>
    a5c2:	59e3      	ldr	r3, [r4, r7]
    a5c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    a5c6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    a5c8:	f7f8 fac2 	bl	2b50 <strcmp>
    a5cc:	2800      	cmp	r0, #0
    a5ce:	d000      	beq.n	a5d2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x272>
    a5d0:	e6e8      	b.n	a3a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x44>
    a5d2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    a5d4:	5da3      	ldrb	r3, [r4, r6]
    a5d6:	429a      	cmp	r2, r3
    a5d8:	dd00      	ble.n	a5dc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x27c>
    a5da:	e6e3      	b.n	a3a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x44>
    if (p->termNumber == curTermNumber)
    a5dc:	d1ed      	bne.n	a5ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x25a>
         p->set(term);
    a5de:	9901      	ldr	r1, [sp, #4]
    a5e0:	0028      	movs	r0, r5
    a5e2:	f7ff feb5 	bl	a350 <_ZN13TinyGPSCustom3setEPKc>
    a5e6:	e7e8      	b.n	a5ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x25a>
    a5e8:	0000f3a4 	.word	0x0000f3a4
    a5ec:	0000f3ac 	.word	0x0000f3ac
    a5f0:	0000f3b4 	.word	0x0000f3b4
    a5f4:	0000f3bc 	.word	0x0000f3bc
    a5f8:	0000f270 	.word	0x0000f270
    a5fc:	00000000 	.word	0x00000000

0000a600 <_ZN11TinyGPSPlus6encodeEc>:
{
    a600:	b570      	push	{r4, r5, r6, lr}
    a602:	0004      	movs	r4, r0
    a604:	000d      	movs	r5, r1
  ++encodedCharCount;
    a606:	22c8      	movs	r2, #200	; 0xc8
    a608:	5883      	ldr	r3, [r0, r2]
    a60a:	3301      	adds	r3, #1
    a60c:	5083      	str	r3, [r0, r2]
  switch(c)
    a60e:	000b      	movs	r3, r1
    a610:	3b0a      	subs	r3, #10
    a612:	b2da      	uxtb	r2, r3
    a614:	2a22      	cmp	r2, #34	; 0x22
    a616:	d832      	bhi.n	a67e <_ZN11TinyGPSPlus6encodeEc+0x7e>
    a618:	0093      	lsls	r3, r2, #2
    a61a:	4a23      	ldr	r2, [pc, #140]	; (a6a8 <_ZN11TinyGPSPlus6encodeEc+0xa8>)
    a61c:	58d3      	ldr	r3, [r2, r3]
    a61e:	469f      	mov	pc, r3
    parity ^= (uint8_t)c;
    a620:	22a8      	movs	r2, #168	; 0xa8
    a622:	5c83      	ldrb	r3, [r0, r2]
    a624:	212c      	movs	r1, #44	; 0x2c
    a626:	404b      	eors	r3, r1
    a628:	5483      	strb	r3, [r0, r2]
      if (curTermOffset < sizeof(term))
    a62a:	23bb      	movs	r3, #187	; 0xbb
    a62c:	5ce3      	ldrb	r3, [r4, r3]
      bool isValidSentence = false;
    a62e:	2000      	movs	r0, #0
      if (curTermOffset < sizeof(term))
    a630:	2b0e      	cmp	r3, #14
    a632:	d90c      	bls.n	a64e <_ZN11TinyGPSPlus6encodeEc+0x4e>
      ++curTermNumber;
    a634:	22ba      	movs	r2, #186	; 0xba
    a636:	5ca3      	ldrb	r3, [r4, r2]
    a638:	3301      	adds	r3, #1
    a63a:	54a3      	strb	r3, [r4, r2]
      curTermOffset = 0;
    a63c:	2200      	movs	r2, #0
    a63e:	23bb      	movs	r3, #187	; 0xbb
    a640:	54e2      	strb	r2, [r4, r3]
      isChecksumTerm = c == '*';
    a642:	3d2a      	subs	r5, #42	; 0x2a
    a644:	426a      	negs	r2, r5
    a646:	416a      	adcs	r2, r5
    a648:	23a9      	movs	r3, #169	; 0xa9
    a64a:	54e2      	strb	r2, [r4, r3]
}
    a64c:	bd70      	pop	{r4, r5, r6, pc}
        term[curTermOffset] = 0;
    a64e:	18e3      	adds	r3, r4, r3
    a650:	33aa      	adds	r3, #170	; 0xaa
    a652:	2200      	movs	r2, #0
    a654:	701a      	strb	r2, [r3, #0]
        isValidSentence = endOfTermHandler();
    a656:	0020      	movs	r0, r4
    a658:	f7ff fe82 	bl	a360 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
    a65c:	e7ea      	b.n	a634 <_ZN11TinyGPSPlus6encodeEc+0x34>
    curTermNumber = curTermOffset = 0;
    a65e:	2300      	movs	r3, #0
    a660:	22bb      	movs	r2, #187	; 0xbb
    a662:	5483      	strb	r3, [r0, r2]
    a664:	3a01      	subs	r2, #1
    a666:	5483      	strb	r3, [r0, r2]
    parity = 0;
    a668:	3a12      	subs	r2, #18
    a66a:	5483      	strb	r3, [r0, r2]
    curSentenceType = GPS_SENTENCE_OTHER;
    a66c:	2102      	movs	r1, #2
    a66e:	3211      	adds	r2, #17
    a670:	5481      	strb	r1, [r0, r2]
    isChecksumTerm = false;
    a672:	3a10      	subs	r2, #16
    a674:	5483      	strb	r3, [r0, r2]
    sentenceHasFix = false;
    a676:	3213      	adds	r2, #19
    a678:	5483      	strb	r3, [r0, r2]
    return false;
    a67a:	2000      	movs	r0, #0
    a67c:	e7e6      	b.n	a64c <_ZN11TinyGPSPlus6encodeEc+0x4c>
    if (curTermOffset < sizeof(term) - 1)
    a67e:	23bb      	movs	r3, #187	; 0xbb
    a680:	5ce3      	ldrb	r3, [r4, r3]
    a682:	2b0d      	cmp	r3, #13
    a684:	d805      	bhi.n	a692 <_ZN11TinyGPSPlus6encodeEc+0x92>
      term[curTermOffset++] = c;
    a686:	1c59      	adds	r1, r3, #1
    a688:	22bb      	movs	r2, #187	; 0xbb
    a68a:	54a1      	strb	r1, [r4, r2]
    a68c:	18e3      	adds	r3, r4, r3
    a68e:	33aa      	adds	r3, #170	; 0xaa
    a690:	701d      	strb	r5, [r3, #0]
    if (!isChecksumTerm)
    a692:	23a9      	movs	r3, #169	; 0xa9
    a694:	5ce0      	ldrb	r0, [r4, r3]
    a696:	2800      	cmp	r0, #0
    a698:	d104      	bne.n	a6a4 <_ZN11TinyGPSPlus6encodeEc+0xa4>
      parity ^= c;
    a69a:	3b01      	subs	r3, #1
    a69c:	5ce2      	ldrb	r2, [r4, r3]
    a69e:	4055      	eors	r5, r2
    a6a0:	54e5      	strb	r5, [r4, r3]
    a6a2:	e7d3      	b.n	a64c <_ZN11TinyGPSPlus6encodeEc+0x4c>
    return false;
    a6a4:	2000      	movs	r0, #0
    a6a6:	e7d1      	b.n	a64c <_ZN11TinyGPSPlus6encodeEc+0x4c>
    a6a8:	0000f318 	.word	0x0000f318
    a6ac:	00000000 	.word	0x00000000

0000a6b0 <_ZN8MadgwickC1Ev>:
//-------------------------------------------------------------------------------------------
// AHRS algorithm update

Madgwick::Madgwick()
{
	beta = betaDef;
    a6b0:	4a06      	ldr	r2, [pc, #24]	; (a6cc <_ZN8MadgwickC1Ev+0x1c>)
    a6b2:	6002      	str	r2, [r0, #0]
	q0 = 1.0f;
    a6b4:	23fe      	movs	r3, #254	; 0xfe
    a6b6:	059b      	lsls	r3, r3, #22
    a6b8:	6043      	str	r3, [r0, #4]
	q1 = 0.0f;
    a6ba:	2300      	movs	r3, #0
    a6bc:	6083      	str	r3, [r0, #8]
	q2 = 0.0f;
    a6be:	60c3      	str	r3, [r0, #12]
	q3 = 0.0f;
    a6c0:	6103      	str	r3, [r0, #16]
	invSampleFreq = 1.0f / sampleFreqDef;
    a6c2:	6142      	str	r2, [r0, #20]
	anglesComputed = 0;
    a6c4:	2200      	movs	r2, #0
    a6c6:	2324      	movs	r3, #36	; 0x24
    a6c8:	54c2      	strb	r2, [r0, r3]
}
    a6ca:	4770      	bx	lr
    a6cc:	3dcccccd 	.word	0x3dcccccd

0000a6d0 <_ZN8Madgwick7invSqrtEf>:
//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float Madgwick::invSqrt(float x)
{
    a6d0:	b570      	push	{r4, r5, r6, lr}
    a6d2:	1c04      	adds	r4, r0, #0
	float halfx = 0.5f * x;
    a6d4:	21fc      	movs	r1, #252	; 0xfc
    a6d6:	0589      	lsls	r1, r1, #22
    a6d8:	f7f6 faf0 	bl	cbc <__aeabi_fmul>
    a6dc:	1c05      	adds	r5, r0, #0
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
    a6de:	1064      	asrs	r4, r4, #1
	y = *(float*)&i;
    a6e0:	4b10      	ldr	r3, [pc, #64]	; (a724 <_ZN8Madgwick7invSqrtEf+0x54>)
    a6e2:	1b1c      	subs	r4, r3, r4
	y = y * (1.5f - (halfx * y * y));
    a6e4:	1c21      	adds	r1, r4, #0
    a6e6:	f7f6 fae9 	bl	cbc <__aeabi_fmul>
    a6ea:	1c21      	adds	r1, r4, #0
    a6ec:	f7f6 fae6 	bl	cbc <__aeabi_fmul>
    a6f0:	1c01      	adds	r1, r0, #0
    a6f2:	20ff      	movs	r0, #255	; 0xff
    a6f4:	0580      	lsls	r0, r0, #22
    a6f6:	f7f6 fc01 	bl	efc <__aeabi_fsub>
    a6fa:	1c21      	adds	r1, r4, #0
    a6fc:	f7f6 fade 	bl	cbc <__aeabi_fmul>
    a700:	1c04      	adds	r4, r0, #0
	y = y * (1.5f - (halfx * y * y));
    a702:	1c01      	adds	r1, r0, #0
    a704:	1c28      	adds	r0, r5, #0
    a706:	f7f6 fad9 	bl	cbc <__aeabi_fmul>
    a70a:	1c21      	adds	r1, r4, #0
    a70c:	f7f6 fad6 	bl	cbc <__aeabi_fmul>
    a710:	1c01      	adds	r1, r0, #0
    a712:	20ff      	movs	r0, #255	; 0xff
    a714:	0580      	lsls	r0, r0, #22
    a716:	f7f6 fbf1 	bl	efc <__aeabi_fsub>
    a71a:	1c21      	adds	r1, r4, #0
    a71c:	f7f6 face 	bl	cbc <__aeabi_fmul>
	return y;
}
    a720:	bd70      	pop	{r4, r5, r6, pc}
    a722:	46c0      	nop			; (mov r8, r8)
    a724:	5f3759df 	.word	0x5f3759df
	...

0000a730 <_ZN8Madgwick9updateIMUEffffff>:
{
    a730:	b5f0      	push	{r4, r5, r6, r7, lr}
    a732:	b097      	sub	sp, #92	; 0x5c
    a734:	0005      	movs	r5, r0
    a736:	1c08      	adds	r0, r1, #0
    a738:	1c17      	adds	r7, r2, #0
    a73a:	1c1e      	adds	r6, r3, #0
	gx *= 0.0174533f;
    a73c:	494a      	ldr	r1, [pc, #296]	; (a868 <_ZN8Madgwick9updateIMUEffffff+0x138>)
    a73e:	f7f6 fabd 	bl	cbc <__aeabi_fmul>
    a742:	1c04      	adds	r4, r0, #0
	gy *= 0.0174533f;
    a744:	4948      	ldr	r1, [pc, #288]	; (a868 <_ZN8Madgwick9updateIMUEffffff+0x138>)
    a746:	1c38      	adds	r0, r7, #0
    a748:	f7f6 fab8 	bl	cbc <__aeabi_fmul>
    a74c:	9003      	str	r0, [sp, #12]
	gz *= 0.0174533f;
    a74e:	4946      	ldr	r1, [pc, #280]	; (a868 <_ZN8Madgwick9updateIMUEffffff+0x138>)
    a750:	1c30      	adds	r0, r6, #0
    a752:	f7f6 fab3 	bl	cbc <__aeabi_fmul>
    a756:	1c06      	adds	r6, r0, #0
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
    a758:	68af      	ldr	r7, [r5, #8]
    a75a:	68eb      	ldr	r3, [r5, #12]
    a75c:	9301      	str	r3, [sp, #4]
    a75e:	692a      	ldr	r2, [r5, #16]
    a760:	9200      	str	r2, [sp, #0]
    a762:	2180      	movs	r1, #128	; 0x80
    a764:	0609      	lsls	r1, r1, #24
    a766:	1878      	adds	r0, r7, r1
    a768:	1c21      	adds	r1, r4, #0
    a76a:	f7f6 faa7 	bl	cbc <__aeabi_fmul>
    a76e:	9002      	str	r0, [sp, #8]
    a770:	9901      	ldr	r1, [sp, #4]
    a772:	9803      	ldr	r0, [sp, #12]
    a774:	f7f6 faa2 	bl	cbc <__aeabi_fmul>
    a778:	1c01      	adds	r1, r0, #0
    a77a:	9802      	ldr	r0, [sp, #8]
    a77c:	f7f6 fbbe 	bl	efc <__aeabi_fsub>
    a780:	9002      	str	r0, [sp, #8]
    a782:	9900      	ldr	r1, [sp, #0]
    a784:	1c30      	adds	r0, r6, #0
    a786:	f7f6 fa99 	bl	cbc <__aeabi_fmul>
    a78a:	1c01      	adds	r1, r0, #0
    a78c:	9802      	ldr	r0, [sp, #8]
    a78e:	f7f6 fbb5 	bl	efc <__aeabi_fsub>
    a792:	21fc      	movs	r1, #252	; 0xfc
    a794:	0589      	lsls	r1, r1, #22
    a796:	f7f6 fa91 	bl	cbc <__aeabi_fmul>
    a79a:	9006      	str	r0, [sp, #24]
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
    a79c:	6869      	ldr	r1, [r5, #4]
    a79e:	9102      	str	r1, [sp, #8]
    a7a0:	1c20      	adds	r0, r4, #0
    a7a2:	f7f6 fa8b 	bl	cbc <__aeabi_fmul>
    a7a6:	9004      	str	r0, [sp, #16]
    a7a8:	9901      	ldr	r1, [sp, #4]
    a7aa:	1c30      	adds	r0, r6, #0
    a7ac:	f7f6 fa86 	bl	cbc <__aeabi_fmul>
    a7b0:	1c01      	adds	r1, r0, #0
    a7b2:	9804      	ldr	r0, [sp, #16]
    a7b4:	f7f5 ff00 	bl	5b8 <__aeabi_fadd>
    a7b8:	9004      	str	r0, [sp, #16]
    a7ba:	9900      	ldr	r1, [sp, #0]
    a7bc:	9803      	ldr	r0, [sp, #12]
    a7be:	f7f6 fa7d 	bl	cbc <__aeabi_fmul>
    a7c2:	1c01      	adds	r1, r0, #0
    a7c4:	9804      	ldr	r0, [sp, #16]
    a7c6:	f7f6 fb99 	bl	efc <__aeabi_fsub>
    a7ca:	21fc      	movs	r1, #252	; 0xfc
    a7cc:	0589      	lsls	r1, r1, #22
    a7ce:	f7f6 fa75 	bl	cbc <__aeabi_fmul>
    a7d2:	9007      	str	r0, [sp, #28]
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
    a7d4:	9902      	ldr	r1, [sp, #8]
    a7d6:	9803      	ldr	r0, [sp, #12]
    a7d8:	f7f6 fa70 	bl	cbc <__aeabi_fmul>
    a7dc:	9004      	str	r0, [sp, #16]
    a7de:	1c39      	adds	r1, r7, #0
    a7e0:	1c30      	adds	r0, r6, #0
    a7e2:	f7f6 fa6b 	bl	cbc <__aeabi_fmul>
    a7e6:	1c01      	adds	r1, r0, #0
    a7e8:	9804      	ldr	r0, [sp, #16]
    a7ea:	f7f6 fb87 	bl	efc <__aeabi_fsub>
    a7ee:	9004      	str	r0, [sp, #16]
    a7f0:	9900      	ldr	r1, [sp, #0]
    a7f2:	1c20      	adds	r0, r4, #0
    a7f4:	f7f6 fa62 	bl	cbc <__aeabi_fmul>
    a7f8:	1c01      	adds	r1, r0, #0
    a7fa:	9804      	ldr	r0, [sp, #16]
    a7fc:	f7f5 fedc 	bl	5b8 <__aeabi_fadd>
    a800:	21fc      	movs	r1, #252	; 0xfc
    a802:	0589      	lsls	r1, r1, #22
    a804:	f7f6 fa5a 	bl	cbc <__aeabi_fmul>
    a808:	9008      	str	r0, [sp, #32]
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
    a80a:	9902      	ldr	r1, [sp, #8]
    a80c:	1c30      	adds	r0, r6, #0
    a80e:	f7f6 fa55 	bl	cbc <__aeabi_fmul>
    a812:	1c06      	adds	r6, r0, #0
    a814:	1c39      	adds	r1, r7, #0
    a816:	9803      	ldr	r0, [sp, #12]
    a818:	f7f6 fa50 	bl	cbc <__aeabi_fmul>
    a81c:	1c01      	adds	r1, r0, #0
    a81e:	1c30      	adds	r0, r6, #0
    a820:	f7f5 feca 	bl	5b8 <__aeabi_fadd>
    a824:	1c06      	adds	r6, r0, #0
    a826:	9901      	ldr	r1, [sp, #4]
    a828:	1c20      	adds	r0, r4, #0
    a82a:	f7f6 fa47 	bl	cbc <__aeabi_fmul>
    a82e:	1c01      	adds	r1, r0, #0
    a830:	1c30      	adds	r0, r6, #0
    a832:	f7f6 fb63 	bl	efc <__aeabi_fsub>
    a836:	21fc      	movs	r1, #252	; 0xfc
    a838:	0589      	lsls	r1, r1, #22
    a83a:	f7f6 fa3f 	bl	cbc <__aeabi_fmul>
    a83e:	9009      	str	r0, [sp, #36]	; 0x24
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
    a840:	2100      	movs	r1, #0
    a842:	981c      	ldr	r0, [sp, #112]	; 0x70
    a844:	f7f5 fe48 	bl	4d8 <__aeabi_fcmpeq>
    a848:	2800      	cmp	r0, #0
    a84a:	d00f      	beq.n	a86c <_ZN8Madgwick9updateIMUEffffff+0x13c>
    a84c:	2100      	movs	r1, #0
    a84e:	981d      	ldr	r0, [sp, #116]	; 0x74
    a850:	f7f5 fe42 	bl	4d8 <__aeabi_fcmpeq>
    a854:	2800      	cmp	r0, #0
    a856:	d009      	beq.n	a86c <_ZN8Madgwick9updateIMUEffffff+0x13c>
    a858:	2100      	movs	r1, #0
    a85a:	981e      	ldr	r0, [sp, #120]	; 0x78
    a85c:	f7f5 fe3c 	bl	4d8 <__aeabi_fcmpeq>
    a860:	2800      	cmp	r0, #0
    a862:	d000      	beq.n	a866 <_ZN8Madgwick9updateIMUEffffff+0x136>
    a864:	e19a      	b.n	ab9c <_ZN8Madgwick9updateIMUEffffff+0x46c>
    a866:	e001      	b.n	a86c <_ZN8Madgwick9updateIMUEffffff+0x13c>
    a868:	3c8efa39 	.word	0x3c8efa39
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    a86c:	991c      	ldr	r1, [sp, #112]	; 0x70
    a86e:	1c08      	adds	r0, r1, #0
    a870:	f7f6 fa24 	bl	cbc <__aeabi_fmul>
    a874:	1c04      	adds	r4, r0, #0
    a876:	991d      	ldr	r1, [sp, #116]	; 0x74
    a878:	1c08      	adds	r0, r1, #0
    a87a:	f7f6 fa1f 	bl	cbc <__aeabi_fmul>
    a87e:	1c01      	adds	r1, r0, #0
    a880:	1c20      	adds	r0, r4, #0
    a882:	f7f5 fe99 	bl	5b8 <__aeabi_fadd>
    a886:	1c04      	adds	r4, r0, #0
    a888:	991e      	ldr	r1, [sp, #120]	; 0x78
    a88a:	1c08      	adds	r0, r1, #0
    a88c:	f7f6 fa16 	bl	cbc <__aeabi_fmul>
    a890:	1c01      	adds	r1, r0, #0
    a892:	1c20      	adds	r0, r4, #0
    a894:	f7f5 fe90 	bl	5b8 <__aeabi_fadd>
    a898:	f7ff ff1a 	bl	a6d0 <_ZN8Madgwick7invSqrtEf>
    a89c:	1c04      	adds	r4, r0, #0
		ax *= recipNorm;
    a89e:	1c01      	adds	r1, r0, #0
    a8a0:	981c      	ldr	r0, [sp, #112]	; 0x70
    a8a2:	f7f6 fa0b 	bl	cbc <__aeabi_fmul>
    a8a6:	9003      	str	r0, [sp, #12]
		ay *= recipNorm;
    a8a8:	1c21      	adds	r1, r4, #0
    a8aa:	981d      	ldr	r0, [sp, #116]	; 0x74
    a8ac:	f7f6 fa06 	bl	cbc <__aeabi_fmul>
    a8b0:	9004      	str	r0, [sp, #16]
		az *= recipNorm;
    a8b2:	1c21      	adds	r1, r4, #0
    a8b4:	981e      	ldr	r0, [sp, #120]	; 0x78
    a8b6:	f7f6 fa01 	bl	cbc <__aeabi_fmul>
    a8ba:	900e      	str	r0, [sp, #56]	; 0x38
		_2q0 = 2.0f * q0;
    a8bc:	9c02      	ldr	r4, [sp, #8]
    a8be:	1c21      	adds	r1, r4, #0
    a8c0:	1c20      	adds	r0, r4, #0
    a8c2:	f7f5 fe79 	bl	5b8 <__aeabi_fadd>
    a8c6:	900f      	str	r0, [sp, #60]	; 0x3c
		_2q1 = 2.0f * q1;
    a8c8:	1c39      	adds	r1, r7, #0
    a8ca:	1c38      	adds	r0, r7, #0
    a8cc:	f7f5 fe74 	bl	5b8 <__aeabi_fadd>
    a8d0:	9010      	str	r0, [sp, #64]	; 0x40
		_2q2 = 2.0f * q2;
    a8d2:	9e01      	ldr	r6, [sp, #4]
    a8d4:	1c31      	adds	r1, r6, #0
    a8d6:	1c30      	adds	r0, r6, #0
    a8d8:	f7f5 fe6e 	bl	5b8 <__aeabi_fadd>
    a8dc:	9011      	str	r0, [sp, #68]	; 0x44
		_2q3 = 2.0f * q3;
    a8de:	9b00      	ldr	r3, [sp, #0]
    a8e0:	1c19      	adds	r1, r3, #0
    a8e2:	1c18      	adds	r0, r3, #0
    a8e4:	f7f5 fe68 	bl	5b8 <__aeabi_fadd>
    a8e8:	9012      	str	r0, [sp, #72]	; 0x48
		_4q0 = 4.0f * q0;
    a8ea:	2181      	movs	r1, #129	; 0x81
    a8ec:	05c9      	lsls	r1, r1, #23
    a8ee:	9402      	str	r4, [sp, #8]
    a8f0:	1c20      	adds	r0, r4, #0
    a8f2:	f7f6 f9e3 	bl	cbc <__aeabi_fmul>
    a8f6:	1c04      	adds	r4, r0, #0
		_4q1 = 4.0f * q1;
    a8f8:	2181      	movs	r1, #129	; 0x81
    a8fa:	05c9      	lsls	r1, r1, #23
    a8fc:	1c38      	adds	r0, r7, #0
    a8fe:	f7f6 f9dd 	bl	cbc <__aeabi_fmul>
    a902:	900a      	str	r0, [sp, #40]	; 0x28
		_4q2 = 4.0f * q2;
    a904:	2181      	movs	r1, #129	; 0x81
    a906:	05c9      	lsls	r1, r1, #23
    a908:	1c30      	adds	r0, r6, #0
    a90a:	f7f6 f9d7 	bl	cbc <__aeabi_fmul>
    a90e:	900b      	str	r0, [sp, #44]	; 0x2c
		_8q1 = 8.0f * q1;
    a910:	2182      	movs	r1, #130	; 0x82
    a912:	05c9      	lsls	r1, r1, #23
    a914:	1c38      	adds	r0, r7, #0
    a916:	f7f6 f9d1 	bl	cbc <__aeabi_fmul>
    a91a:	9013      	str	r0, [sp, #76]	; 0x4c
		_8q2 = 8.0f * q2;
    a91c:	2182      	movs	r1, #130	; 0x82
    a91e:	05c9      	lsls	r1, r1, #23
    a920:	1c30      	adds	r0, r6, #0
    a922:	f7f6 f9cb 	bl	cbc <__aeabi_fmul>
    a926:	9014      	str	r0, [sp, #80]	; 0x50
		q1q1 = q1 * q1;
    a928:	1c39      	adds	r1, r7, #0
    a92a:	1c38      	adds	r0, r7, #0
    a92c:	f7f6 f9c6 	bl	cbc <__aeabi_fmul>
    a930:	900c      	str	r0, [sp, #48]	; 0x30
		q2q2 = q2 * q2;
    a932:	1c31      	adds	r1, r6, #0
    a934:	9601      	str	r6, [sp, #4]
    a936:	1c30      	adds	r0, r6, #0
    a938:	f7f6 f9c0 	bl	cbc <__aeabi_fmul>
    a93c:	9005      	str	r0, [sp, #20]
		q3q3 = q3 * q3;
    a93e:	9e00      	ldr	r6, [sp, #0]
    a940:	1c31      	adds	r1, r6, #0
    a942:	1c30      	adds	r0, r6, #0
    a944:	f7f6 f9ba 	bl	cbc <__aeabi_fmul>
    a948:	9015      	str	r0, [sp, #84]	; 0x54
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
    a94a:	9905      	ldr	r1, [sp, #20]
    a94c:	1c20      	adds	r0, r4, #0
    a94e:	f7f6 f9b5 	bl	cbc <__aeabi_fmul>
    a952:	1c06      	adds	r6, r0, #0
    a954:	9911      	ldr	r1, [sp, #68]	; 0x44
    a956:	9803      	ldr	r0, [sp, #12]
    a958:	f7f6 f9b0 	bl	cbc <__aeabi_fmul>
    a95c:	1c01      	adds	r1, r0, #0
    a95e:	1c30      	adds	r0, r6, #0
    a960:	f7f5 fe2a 	bl	5b8 <__aeabi_fadd>
    a964:	1c06      	adds	r6, r0, #0
    a966:	990c      	ldr	r1, [sp, #48]	; 0x30
    a968:	1c20      	adds	r0, r4, #0
    a96a:	f7f6 f9a7 	bl	cbc <__aeabi_fmul>
    a96e:	1c01      	adds	r1, r0, #0
    a970:	1c30      	adds	r0, r6, #0
    a972:	f7f5 fe21 	bl	5b8 <__aeabi_fadd>
    a976:	1c04      	adds	r4, r0, #0
    a978:	9910      	ldr	r1, [sp, #64]	; 0x40
    a97a:	9804      	ldr	r0, [sp, #16]
    a97c:	f7f6 f99e 	bl	cbc <__aeabi_fmul>
    a980:	1c01      	adds	r1, r0, #0
    a982:	1c20      	adds	r0, r4, #0
    a984:	f7f6 faba 	bl	efc <__aeabi_fsub>
    a988:	900d      	str	r0, [sp, #52]	; 0x34
		q0q0 = q0 * q0;
    a98a:	9a02      	ldr	r2, [sp, #8]
    a98c:	1c11      	adds	r1, r2, #0
    a98e:	1c10      	adds	r0, r2, #0
    a990:	f7f6 f994 	bl	cbc <__aeabi_fmul>
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
    a994:	2181      	movs	r1, #129	; 0x81
    a996:	05c9      	lsls	r1, r1, #23
    a998:	f7f6 f990 	bl	cbc <__aeabi_fmul>
    a99c:	1c04      	adds	r4, r0, #0
    a99e:	9915      	ldr	r1, [sp, #84]	; 0x54
    a9a0:	980a      	ldr	r0, [sp, #40]	; 0x28
    a9a2:	f7f6 f98b 	bl	cbc <__aeabi_fmul>
    a9a6:	1c06      	adds	r6, r0, #0
    a9a8:	9912      	ldr	r1, [sp, #72]	; 0x48
    a9aa:	9803      	ldr	r0, [sp, #12]
    a9ac:	f7f6 f986 	bl	cbc <__aeabi_fmul>
    a9b0:	1c01      	adds	r1, r0, #0
    a9b2:	1c30      	adds	r0, r6, #0
    a9b4:	f7f6 faa2 	bl	efc <__aeabi_fsub>
    a9b8:	1c06      	adds	r6, r0, #0
    a9ba:	1c21      	adds	r1, r4, #0
    a9bc:	1c38      	adds	r0, r7, #0
    a9be:	f7f6 f97d 	bl	cbc <__aeabi_fmul>
    a9c2:	1c01      	adds	r1, r0, #0
    a9c4:	1c30      	adds	r0, r6, #0
    a9c6:	f7f5 fdf7 	bl	5b8 <__aeabi_fadd>
    a9ca:	1c06      	adds	r6, r0, #0
    a9cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a9ce:	9804      	ldr	r0, [sp, #16]
    a9d0:	f7f6 f974 	bl	cbc <__aeabi_fmul>
    a9d4:	1c01      	adds	r1, r0, #0
    a9d6:	1c30      	adds	r0, r6, #0
    a9d8:	f7f6 fa90 	bl	efc <__aeabi_fsub>
    a9dc:	990a      	ldr	r1, [sp, #40]	; 0x28
    a9de:	f7f6 fa8d 	bl	efc <__aeabi_fsub>
    a9e2:	1c06      	adds	r6, r0, #0
    a9e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    a9e6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a9e8:	f7f6 f968 	bl	cbc <__aeabi_fmul>
    a9ec:	1c01      	adds	r1, r0, #0
    a9ee:	1c30      	adds	r0, r6, #0
    a9f0:	f7f5 fde2 	bl	5b8 <__aeabi_fadd>
    a9f4:	1c06      	adds	r6, r0, #0
    a9f6:	9905      	ldr	r1, [sp, #20]
    a9f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a9fa:	f7f6 f95f 	bl	cbc <__aeabi_fmul>
    a9fe:	1c01      	adds	r1, r0, #0
    aa00:	1c30      	adds	r0, r6, #0
    aa02:	f7f5 fdd9 	bl	5b8 <__aeabi_fadd>
    aa06:	1c06      	adds	r6, r0, #0
    aa08:	990a      	ldr	r1, [sp, #40]	; 0x28
    aa0a:	980e      	ldr	r0, [sp, #56]	; 0x38
    aa0c:	f7f6 f956 	bl	cbc <__aeabi_fmul>
    aa10:	1c01      	adds	r1, r0, #0
    aa12:	1c30      	adds	r0, r6, #0
    aa14:	f7f5 fdd0 	bl	5b8 <__aeabi_fadd>
    aa18:	900a      	str	r0, [sp, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
    aa1a:	1c21      	adds	r1, r4, #0
    aa1c:	9801      	ldr	r0, [sp, #4]
    aa1e:	f7f6 f94d 	bl	cbc <__aeabi_fmul>
    aa22:	1c04      	adds	r4, r0, #0
    aa24:	990f      	ldr	r1, [sp, #60]	; 0x3c
    aa26:	9803      	ldr	r0, [sp, #12]
    aa28:	f7f6 f948 	bl	cbc <__aeabi_fmul>
    aa2c:	1c01      	adds	r1, r0, #0
    aa2e:	1c20      	adds	r0, r4, #0
    aa30:	f7f5 fdc2 	bl	5b8 <__aeabi_fadd>
    aa34:	1c04      	adds	r4, r0, #0
    aa36:	9915      	ldr	r1, [sp, #84]	; 0x54
    aa38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    aa3a:	1c30      	adds	r0, r6, #0
    aa3c:	f7f6 f93e 	bl	cbc <__aeabi_fmul>
    aa40:	1c01      	adds	r1, r0, #0
    aa42:	1c20      	adds	r0, r4, #0
    aa44:	f7f5 fdb8 	bl	5b8 <__aeabi_fadd>
    aa48:	1c04      	adds	r4, r0, #0
    aa4a:	9912      	ldr	r1, [sp, #72]	; 0x48
    aa4c:	9804      	ldr	r0, [sp, #16]
    aa4e:	f7f6 f935 	bl	cbc <__aeabi_fmul>
    aa52:	1c01      	adds	r1, r0, #0
    aa54:	1c20      	adds	r0, r4, #0
    aa56:	f7f6 fa51 	bl	efc <__aeabi_fsub>
    aa5a:	960b      	str	r6, [sp, #44]	; 0x2c
    aa5c:	1c31      	adds	r1, r6, #0
    aa5e:	f7f6 fa4d 	bl	efc <__aeabi_fsub>
    aa62:	1c04      	adds	r4, r0, #0
    aa64:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    aa66:	1c31      	adds	r1, r6, #0
    aa68:	9814      	ldr	r0, [sp, #80]	; 0x50
    aa6a:	f7f6 f927 	bl	cbc <__aeabi_fmul>
    aa6e:	1c01      	adds	r1, r0, #0
    aa70:	1c20      	adds	r0, r4, #0
    aa72:	f7f5 fda1 	bl	5b8 <__aeabi_fadd>
    aa76:	1c04      	adds	r4, r0, #0
    aa78:	9905      	ldr	r1, [sp, #20]
    aa7a:	9814      	ldr	r0, [sp, #80]	; 0x50
    aa7c:	f7f6 f91e 	bl	cbc <__aeabi_fmul>
    aa80:	1c01      	adds	r1, r0, #0
    aa82:	1c20      	adds	r0, r4, #0
    aa84:	f7f5 fd98 	bl	5b8 <__aeabi_fadd>
    aa88:	1c04      	adds	r4, r0, #0
    aa8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    aa8c:	980e      	ldr	r0, [sp, #56]	; 0x38
    aa8e:	f7f6 f915 	bl	cbc <__aeabi_fmul>
    aa92:	1c01      	adds	r1, r0, #0
    aa94:	1c20      	adds	r0, r4, #0
    aa96:	f7f5 fd8f 	bl	5b8 <__aeabi_fadd>
    aa9a:	900b      	str	r0, [sp, #44]	; 0x2c
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
    aa9c:	2181      	movs	r1, #129	; 0x81
    aa9e:	05c9      	lsls	r1, r1, #23
    aaa0:	1c30      	adds	r0, r6, #0
    aaa2:	f7f6 f90b 	bl	cbc <__aeabi_fmul>
    aaa6:	9e00      	ldr	r6, [sp, #0]
    aaa8:	1c31      	adds	r1, r6, #0
    aaaa:	f7f6 f907 	bl	cbc <__aeabi_fmul>
    aaae:	1c04      	adds	r4, r0, #0
    aab0:	9910      	ldr	r1, [sp, #64]	; 0x40
    aab2:	9803      	ldr	r0, [sp, #12]
    aab4:	f7f6 f902 	bl	cbc <__aeabi_fmul>
    aab8:	1c01      	adds	r1, r0, #0
    aaba:	1c20      	adds	r0, r4, #0
    aabc:	f7f6 fa1e 	bl	efc <__aeabi_fsub>
    aac0:	1c04      	adds	r4, r0, #0
    aac2:	2181      	movs	r1, #129	; 0x81
    aac4:	05c9      	lsls	r1, r1, #23
    aac6:	9805      	ldr	r0, [sp, #20]
    aac8:	f7f6 f8f8 	bl	cbc <__aeabi_fmul>
    aacc:	1c31      	adds	r1, r6, #0
    aace:	f7f6 f8f5 	bl	cbc <__aeabi_fmul>
    aad2:	1c01      	adds	r1, r0, #0
    aad4:	1c20      	adds	r0, r4, #0
    aad6:	f7f5 fd6f 	bl	5b8 <__aeabi_fadd>
    aada:	1c04      	adds	r4, r0, #0
    aadc:	9911      	ldr	r1, [sp, #68]	; 0x44
    aade:	9804      	ldr	r0, [sp, #16]
    aae0:	f7f6 f8ec 	bl	cbc <__aeabi_fmul>
    aae4:	1c01      	adds	r1, r0, #0
    aae6:	1c20      	adds	r0, r4, #0
    aae8:	f7f6 fa08 	bl	efc <__aeabi_fsub>
    aaec:	1c06      	adds	r6, r0, #0
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
    aaee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    aaf0:	1c21      	adds	r1, r4, #0
    aaf2:	1c20      	adds	r0, r4, #0
    aaf4:	f7f6 f8e2 	bl	cbc <__aeabi_fmul>
    aaf8:	1c04      	adds	r4, r0, #0
    aafa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    aafc:	1c11      	adds	r1, r2, #0
    aafe:	1c10      	adds	r0, r2, #0
    ab00:	f7f6 f8dc 	bl	cbc <__aeabi_fmul>
    ab04:	1c01      	adds	r1, r0, #0
    ab06:	1c20      	adds	r0, r4, #0
    ab08:	f7f5 fd56 	bl	5b8 <__aeabi_fadd>
    ab0c:	1c04      	adds	r4, r0, #0
    ab0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ab10:	1c19      	adds	r1, r3, #0
    ab12:	1c18      	adds	r0, r3, #0
    ab14:	f7f6 f8d2 	bl	cbc <__aeabi_fmul>
    ab18:	1c01      	adds	r1, r0, #0
    ab1a:	1c20      	adds	r0, r4, #0
    ab1c:	f7f5 fd4c 	bl	5b8 <__aeabi_fadd>
    ab20:	1c04      	adds	r4, r0, #0
    ab22:	1c31      	adds	r1, r6, #0
    ab24:	9603      	str	r6, [sp, #12]
    ab26:	1c30      	adds	r0, r6, #0
    ab28:	f7f6 f8c8 	bl	cbc <__aeabi_fmul>
    ab2c:	1c01      	adds	r1, r0, #0
    ab2e:	1c20      	adds	r0, r4, #0
    ab30:	f7f5 fd42 	bl	5b8 <__aeabi_fadd>
    ab34:	f7ff fdcc 	bl	a6d0 <_ZN8Madgwick7invSqrtEf>
    ab38:	1c06      	adds	r6, r0, #0
		qDot1 -= beta * s0;
    ab3a:	682c      	ldr	r4, [r5, #0]
		s0 *= recipNorm;
    ab3c:	1c01      	adds	r1, r0, #0
    ab3e:	980d      	ldr	r0, [sp, #52]	; 0x34
    ab40:	f7f6 f8bc 	bl	cbc <__aeabi_fmul>
		qDot1 -= beta * s0;
    ab44:	1c21      	adds	r1, r4, #0
    ab46:	f7f6 f8b9 	bl	cbc <__aeabi_fmul>
    ab4a:	1c01      	adds	r1, r0, #0
    ab4c:	9806      	ldr	r0, [sp, #24]
    ab4e:	f7f6 f9d5 	bl	efc <__aeabi_fsub>
    ab52:	9006      	str	r0, [sp, #24]
		s1 *= recipNorm;
    ab54:	1c31      	adds	r1, r6, #0
    ab56:	980a      	ldr	r0, [sp, #40]	; 0x28
    ab58:	f7f6 f8b0 	bl	cbc <__aeabi_fmul>
		qDot2 -= beta * s1;
    ab5c:	1c21      	adds	r1, r4, #0
    ab5e:	f7f6 f8ad 	bl	cbc <__aeabi_fmul>
    ab62:	1c01      	adds	r1, r0, #0
    ab64:	9807      	ldr	r0, [sp, #28]
    ab66:	f7f6 f9c9 	bl	efc <__aeabi_fsub>
    ab6a:	9007      	str	r0, [sp, #28]
		s2 *= recipNorm;
    ab6c:	1c31      	adds	r1, r6, #0
    ab6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ab70:	f7f6 f8a4 	bl	cbc <__aeabi_fmul>
		qDot3 -= beta * s2;
    ab74:	1c21      	adds	r1, r4, #0
    ab76:	f7f6 f8a1 	bl	cbc <__aeabi_fmul>
    ab7a:	1c01      	adds	r1, r0, #0
    ab7c:	9808      	ldr	r0, [sp, #32]
    ab7e:	f7f6 f9bd 	bl	efc <__aeabi_fsub>
    ab82:	9008      	str	r0, [sp, #32]
		s3 *= recipNorm;
    ab84:	1c31      	adds	r1, r6, #0
    ab86:	9803      	ldr	r0, [sp, #12]
    ab88:	f7f6 f898 	bl	cbc <__aeabi_fmul>
		qDot4 -= beta * s3;
    ab8c:	1c21      	adds	r1, r4, #0
    ab8e:	f7f6 f895 	bl	cbc <__aeabi_fmul>
    ab92:	1c01      	adds	r1, r0, #0
    ab94:	9809      	ldr	r0, [sp, #36]	; 0x24
    ab96:	f7f6 f9b1 	bl	efc <__aeabi_fsub>
    ab9a:	9009      	str	r0, [sp, #36]	; 0x24
	q0 += qDot1 * invSampleFreq;
    ab9c:	696c      	ldr	r4, [r5, #20]
    ab9e:	1c21      	adds	r1, r4, #0
    aba0:	9806      	ldr	r0, [sp, #24]
    aba2:	f7f6 f88b 	bl	cbc <__aeabi_fmul>
    aba6:	9902      	ldr	r1, [sp, #8]
    aba8:	f7f5 fd06 	bl	5b8 <__aeabi_fadd>
    abac:	9002      	str	r0, [sp, #8]
	q1 += qDot2 * invSampleFreq;
    abae:	1c21      	adds	r1, r4, #0
    abb0:	9807      	ldr	r0, [sp, #28]
    abb2:	f7f6 f883 	bl	cbc <__aeabi_fmul>
    abb6:	1c39      	adds	r1, r7, #0
    abb8:	f7f5 fcfe 	bl	5b8 <__aeabi_fadd>
    abbc:	1c06      	adds	r6, r0, #0
	q2 += qDot3 * invSampleFreq;
    abbe:	1c21      	adds	r1, r4, #0
    abc0:	9808      	ldr	r0, [sp, #32]
    abc2:	f7f6 f87b 	bl	cbc <__aeabi_fmul>
    abc6:	9901      	ldr	r1, [sp, #4]
    abc8:	f7f5 fcf6 	bl	5b8 <__aeabi_fadd>
    abcc:	1c07      	adds	r7, r0, #0
	q3 += qDot4 * invSampleFreq;
    abce:	1c21      	adds	r1, r4, #0
    abd0:	9809      	ldr	r0, [sp, #36]	; 0x24
    abd2:	f7f6 f873 	bl	cbc <__aeabi_fmul>
    abd6:	9900      	ldr	r1, [sp, #0]
    abd8:	f7f5 fcee 	bl	5b8 <__aeabi_fadd>
    abdc:	9000      	str	r0, [sp, #0]
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    abde:	9a02      	ldr	r2, [sp, #8]
    abe0:	1c11      	adds	r1, r2, #0
    abe2:	1c10      	adds	r0, r2, #0
    abe4:	f7f6 f86a 	bl	cbc <__aeabi_fmul>
    abe8:	1c04      	adds	r4, r0, #0
    abea:	1c31      	adds	r1, r6, #0
    abec:	1c30      	adds	r0, r6, #0
    abee:	f7f6 f865 	bl	cbc <__aeabi_fmul>
    abf2:	1c01      	adds	r1, r0, #0
    abf4:	1c20      	adds	r0, r4, #0
    abf6:	f7f5 fcdf 	bl	5b8 <__aeabi_fadd>
    abfa:	1c04      	adds	r4, r0, #0
    abfc:	1c39      	adds	r1, r7, #0
    abfe:	1c38      	adds	r0, r7, #0
    ac00:	f7f6 f85c 	bl	cbc <__aeabi_fmul>
    ac04:	1c01      	adds	r1, r0, #0
    ac06:	1c20      	adds	r0, r4, #0
    ac08:	f7f5 fcd6 	bl	5b8 <__aeabi_fadd>
    ac0c:	1c04      	adds	r4, r0, #0
    ac0e:	9b00      	ldr	r3, [sp, #0]
    ac10:	1c19      	adds	r1, r3, #0
    ac12:	1c18      	adds	r0, r3, #0
    ac14:	f7f6 f852 	bl	cbc <__aeabi_fmul>
    ac18:	1c01      	adds	r1, r0, #0
    ac1a:	1c20      	adds	r0, r4, #0
    ac1c:	f7f5 fccc 	bl	5b8 <__aeabi_fadd>
    ac20:	f7ff fd56 	bl	a6d0 <_ZN8Madgwick7invSqrtEf>
    ac24:	1c04      	adds	r4, r0, #0
	q0 *= recipNorm;
    ac26:	1c01      	adds	r1, r0, #0
    ac28:	9802      	ldr	r0, [sp, #8]
    ac2a:	f7f6 f847 	bl	cbc <__aeabi_fmul>
    ac2e:	6068      	str	r0, [r5, #4]
	q1 *= recipNorm;
    ac30:	1c21      	adds	r1, r4, #0
    ac32:	1c30      	adds	r0, r6, #0
    ac34:	f7f6 f842 	bl	cbc <__aeabi_fmul>
    ac38:	60a8      	str	r0, [r5, #8]
	q2 *= recipNorm;
    ac3a:	1c21      	adds	r1, r4, #0
    ac3c:	1c38      	adds	r0, r7, #0
    ac3e:	f7f6 f83d 	bl	cbc <__aeabi_fmul>
    ac42:	60e8      	str	r0, [r5, #12]
	q3 *= recipNorm;
    ac44:	1c21      	adds	r1, r4, #0
    ac46:	9800      	ldr	r0, [sp, #0]
    ac48:	f7f6 f838 	bl	cbc <__aeabi_fmul>
    ac4c:	6128      	str	r0, [r5, #16]
	anglesComputed = 0;
    ac4e:	2200      	movs	r2, #0
    ac50:	2324      	movs	r3, #36	; 0x24
    ac52:	54ea      	strb	r2, [r5, r3]
}
    ac54:	b017      	add	sp, #92	; 0x5c
    ac56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000ac60 <_ZN8Madgwick6updateEfffffffff>:
{
    ac60:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac62:	b0a3      	sub	sp, #140	; 0x8c
    ac64:	0007      	movs	r7, r0
    ac66:	1c0c      	adds	r4, r1, #0
    ac68:	1c15      	adds	r5, r2, #0
    ac6a:	1c1e      	adds	r6, r3, #0
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f))
    ac6c:	2100      	movs	r1, #0
    ac6e:	982b      	ldr	r0, [sp, #172]	; 0xac
    ac70:	f7f5 fc32 	bl	4d8 <__aeabi_fcmpeq>
    ac74:	2800      	cmp	r0, #0
    ac76:	d00d      	beq.n	ac94 <_ZN8Madgwick6updateEfffffffff+0x34>
    ac78:	2100      	movs	r1, #0
    ac7a:	982c      	ldr	r0, [sp, #176]	; 0xb0
    ac7c:	f7f5 fc2c 	bl	4d8 <__aeabi_fcmpeq>
    ac80:	2800      	cmp	r0, #0
    ac82:	d007      	beq.n	ac94 <_ZN8Madgwick6updateEfffffffff+0x34>
    ac84:	2100      	movs	r1, #0
    ac86:	982d      	ldr	r0, [sp, #180]	; 0xb4
    ac88:	f7f5 fc26 	bl	4d8 <__aeabi_fcmpeq>
    ac8c:	2800      	cmp	r0, #0
    ac8e:	d001      	beq.n	ac94 <_ZN8Madgwick6updateEfffffffff+0x34>
    ac90:	f000 fcad 	bl	b5ee <_ZN8Madgwick6updateEfffffffff+0x98e>
	gx *= 0.0174533f;
    ac94:	494b      	ldr	r1, [pc, #300]	; (adc4 <_ZN8Madgwick6updateEfffffffff+0x164>)
    ac96:	1c20      	adds	r0, r4, #0
    ac98:	f7f6 f810 	bl	cbc <__aeabi_fmul>
    ac9c:	1c04      	adds	r4, r0, #0
	gy *= 0.0174533f;
    ac9e:	4949      	ldr	r1, [pc, #292]	; (adc4 <_ZN8Madgwick6updateEfffffffff+0x164>)
    aca0:	1c28      	adds	r0, r5, #0
    aca2:	f7f6 f80b 	bl	cbc <__aeabi_fmul>
    aca6:	9006      	str	r0, [sp, #24]
	gz *= 0.0174533f;
    aca8:	4946      	ldr	r1, [pc, #280]	; (adc4 <_ZN8Madgwick6updateEfffffffff+0x164>)
    acaa:	1c30      	adds	r0, r6, #0
    acac:	f7f6 f806 	bl	cbc <__aeabi_fmul>
    acb0:	9007      	str	r0, [sp, #28]
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
    acb2:	68be      	ldr	r6, [r7, #8]
    acb4:	68fb      	ldr	r3, [r7, #12]
    acb6:	9304      	str	r3, [sp, #16]
    acb8:	693d      	ldr	r5, [r7, #16]
    acba:	2280      	movs	r2, #128	; 0x80
    acbc:	0612      	lsls	r2, r2, #24
    acbe:	18b0      	adds	r0, r6, r2
    acc0:	1c21      	adds	r1, r4, #0
    acc2:	f7f5 fffb 	bl	cbc <__aeabi_fmul>
    acc6:	9005      	str	r0, [sp, #20]
    acc8:	9904      	ldr	r1, [sp, #16]
    acca:	9806      	ldr	r0, [sp, #24]
    accc:	f7f5 fff6 	bl	cbc <__aeabi_fmul>
    acd0:	1c01      	adds	r1, r0, #0
    acd2:	9805      	ldr	r0, [sp, #20]
    acd4:	f7f6 f912 	bl	efc <__aeabi_fsub>
    acd8:	9005      	str	r0, [sp, #20]
    acda:	1c29      	adds	r1, r5, #0
    acdc:	9807      	ldr	r0, [sp, #28]
    acde:	f7f5 ffed 	bl	cbc <__aeabi_fmul>
    ace2:	1c01      	adds	r1, r0, #0
    ace4:	9805      	ldr	r0, [sp, #20]
    ace6:	f7f6 f909 	bl	efc <__aeabi_fsub>
    acea:	21fc      	movs	r1, #252	; 0xfc
    acec:	0589      	lsls	r1, r1, #22
    acee:	f7f5 ffe5 	bl	cbc <__aeabi_fmul>
    acf2:	9017      	str	r0, [sp, #92]	; 0x5c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
    acf4:	687a      	ldr	r2, [r7, #4]
    acf6:	9205      	str	r2, [sp, #20]
    acf8:	1c11      	adds	r1, r2, #0
    acfa:	1c20      	adds	r0, r4, #0
    acfc:	f7f5 ffde 	bl	cbc <__aeabi_fmul>
    ad00:	9008      	str	r0, [sp, #32]
    ad02:	9904      	ldr	r1, [sp, #16]
    ad04:	9807      	ldr	r0, [sp, #28]
    ad06:	f7f5 ffd9 	bl	cbc <__aeabi_fmul>
    ad0a:	1c01      	adds	r1, r0, #0
    ad0c:	9808      	ldr	r0, [sp, #32]
    ad0e:	f7f5 fc53 	bl	5b8 <__aeabi_fadd>
    ad12:	9008      	str	r0, [sp, #32]
    ad14:	1c29      	adds	r1, r5, #0
    ad16:	9806      	ldr	r0, [sp, #24]
    ad18:	f7f5 ffd0 	bl	cbc <__aeabi_fmul>
    ad1c:	1c01      	adds	r1, r0, #0
    ad1e:	9808      	ldr	r0, [sp, #32]
    ad20:	f7f6 f8ec 	bl	efc <__aeabi_fsub>
    ad24:	21fc      	movs	r1, #252	; 0xfc
    ad26:	0589      	lsls	r1, r1, #22
    ad28:	f7f5 ffc8 	bl	cbc <__aeabi_fmul>
    ad2c:	9018      	str	r0, [sp, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
    ad2e:	9905      	ldr	r1, [sp, #20]
    ad30:	9806      	ldr	r0, [sp, #24]
    ad32:	f7f5 ffc3 	bl	cbc <__aeabi_fmul>
    ad36:	9008      	str	r0, [sp, #32]
    ad38:	1c31      	adds	r1, r6, #0
    ad3a:	9807      	ldr	r0, [sp, #28]
    ad3c:	f7f5 ffbe 	bl	cbc <__aeabi_fmul>
    ad40:	1c01      	adds	r1, r0, #0
    ad42:	9808      	ldr	r0, [sp, #32]
    ad44:	f7f6 f8da 	bl	efc <__aeabi_fsub>
    ad48:	9008      	str	r0, [sp, #32]
    ad4a:	1c29      	adds	r1, r5, #0
    ad4c:	1c20      	adds	r0, r4, #0
    ad4e:	f7f5 ffb5 	bl	cbc <__aeabi_fmul>
    ad52:	1c01      	adds	r1, r0, #0
    ad54:	9808      	ldr	r0, [sp, #32]
    ad56:	f7f5 fc2f 	bl	5b8 <__aeabi_fadd>
    ad5a:	21fc      	movs	r1, #252	; 0xfc
    ad5c:	0589      	lsls	r1, r1, #22
    ad5e:	f7f5 ffad 	bl	cbc <__aeabi_fmul>
    ad62:	9019      	str	r0, [sp, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
    ad64:	9905      	ldr	r1, [sp, #20]
    ad66:	9807      	ldr	r0, [sp, #28]
    ad68:	f7f5 ffa8 	bl	cbc <__aeabi_fmul>
    ad6c:	9007      	str	r0, [sp, #28]
    ad6e:	1c31      	adds	r1, r6, #0
    ad70:	9806      	ldr	r0, [sp, #24]
    ad72:	f7f5 ffa3 	bl	cbc <__aeabi_fmul>
    ad76:	1c01      	adds	r1, r0, #0
    ad78:	9807      	ldr	r0, [sp, #28]
    ad7a:	f7f5 fc1d 	bl	5b8 <__aeabi_fadd>
    ad7e:	9006      	str	r0, [sp, #24]
    ad80:	9904      	ldr	r1, [sp, #16]
    ad82:	1c20      	adds	r0, r4, #0
    ad84:	f7f5 ff9a 	bl	cbc <__aeabi_fmul>
    ad88:	1c01      	adds	r1, r0, #0
    ad8a:	9806      	ldr	r0, [sp, #24]
    ad8c:	f7f6 f8b6 	bl	efc <__aeabi_fsub>
    ad90:	21fc      	movs	r1, #252	; 0xfc
    ad92:	0589      	lsls	r1, r1, #22
    ad94:	f7f5 ff92 	bl	cbc <__aeabi_fmul>
    ad98:	901a      	str	r0, [sp, #104]	; 0x68
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
    ad9a:	2100      	movs	r1, #0
    ad9c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    ad9e:	f7f5 fb9b 	bl	4d8 <__aeabi_fcmpeq>
    ada2:	2800      	cmp	r0, #0
    ada4:	d010      	beq.n	adc8 <_ZN8Madgwick6updateEfffffffff+0x168>
    ada6:	2100      	movs	r1, #0
    ada8:	9829      	ldr	r0, [sp, #164]	; 0xa4
    adaa:	f7f5 fb95 	bl	4d8 <__aeabi_fcmpeq>
    adae:	2800      	cmp	r0, #0
    adb0:	d00a      	beq.n	adc8 <_ZN8Madgwick6updateEfffffffff+0x168>
    adb2:	2100      	movs	r1, #0
    adb4:	982a      	ldr	r0, [sp, #168]	; 0xa8
    adb6:	f7f5 fb8f 	bl	4d8 <__aeabi_fcmpeq>
    adba:	2800      	cmp	r0, #0
    adbc:	d000      	beq.n	adc0 <_ZN8Madgwick6updateEfffffffff+0x160>
    adbe:	e3b8      	b.n	b532 <_ZN8Madgwick6updateEfffffffff+0x8d2>
    adc0:	e002      	b.n	adc8 <_ZN8Madgwick6updateEfffffffff+0x168>
    adc2:	46c0      	nop			; (mov r8, r8)
    adc4:	3c8efa39 	.word	0x3c8efa39
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    adc8:	9928      	ldr	r1, [sp, #160]	; 0xa0
    adca:	1c08      	adds	r0, r1, #0
    adcc:	f7f5 ff76 	bl	cbc <__aeabi_fmul>
    add0:	1c04      	adds	r4, r0, #0
    add2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    add4:	1c08      	adds	r0, r1, #0
    add6:	f7f5 ff71 	bl	cbc <__aeabi_fmul>
    adda:	1c01      	adds	r1, r0, #0
    addc:	1c20      	adds	r0, r4, #0
    adde:	f7f5 fbeb 	bl	5b8 <__aeabi_fadd>
    ade2:	1c04      	adds	r4, r0, #0
    ade4:	992a      	ldr	r1, [sp, #168]	; 0xa8
    ade6:	1c08      	adds	r0, r1, #0
    ade8:	f7f5 ff68 	bl	cbc <__aeabi_fmul>
    adec:	1c01      	adds	r1, r0, #0
    adee:	1c20      	adds	r0, r4, #0
    adf0:	f7f5 fbe2 	bl	5b8 <__aeabi_fadd>
    adf4:	f7ff fc6c 	bl	a6d0 <_ZN8Madgwick7invSqrtEf>
    adf8:	1c04      	adds	r4, r0, #0
		ax *= recipNorm;
    adfa:	1c01      	adds	r1, r0, #0
    adfc:	9828      	ldr	r0, [sp, #160]	; 0xa0
    adfe:	f7f5 ff5d 	bl	cbc <__aeabi_fmul>
    ae02:	901f      	str	r0, [sp, #124]	; 0x7c
		ay *= recipNorm;
    ae04:	1c21      	adds	r1, r4, #0
    ae06:	9829      	ldr	r0, [sp, #164]	; 0xa4
    ae08:	f7f5 ff58 	bl	cbc <__aeabi_fmul>
    ae0c:	9020      	str	r0, [sp, #128]	; 0x80
		az *= recipNorm;
    ae0e:	1c21      	adds	r1, r4, #0
    ae10:	982a      	ldr	r0, [sp, #168]	; 0xa8
    ae12:	f7f5 ff53 	bl	cbc <__aeabi_fmul>
    ae16:	9021      	str	r0, [sp, #132]	; 0x84
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
    ae18:	992b      	ldr	r1, [sp, #172]	; 0xac
    ae1a:	1c08      	adds	r0, r1, #0
    ae1c:	f7f5 ff4e 	bl	cbc <__aeabi_fmul>
    ae20:	1c04      	adds	r4, r0, #0
    ae22:	992c      	ldr	r1, [sp, #176]	; 0xb0
    ae24:	1c08      	adds	r0, r1, #0
    ae26:	f7f5 ff49 	bl	cbc <__aeabi_fmul>
    ae2a:	1c01      	adds	r1, r0, #0
    ae2c:	1c20      	adds	r0, r4, #0
    ae2e:	f7f5 fbc3 	bl	5b8 <__aeabi_fadd>
    ae32:	1c04      	adds	r4, r0, #0
    ae34:	992d      	ldr	r1, [sp, #180]	; 0xb4
    ae36:	1c08      	adds	r0, r1, #0
    ae38:	f7f5 ff40 	bl	cbc <__aeabi_fmul>
    ae3c:	1c01      	adds	r1, r0, #0
    ae3e:	1c20      	adds	r0, r4, #0
    ae40:	f7f5 fbba 	bl	5b8 <__aeabi_fadd>
    ae44:	f7ff fc44 	bl	a6d0 <_ZN8Madgwick7invSqrtEf>
    ae48:	1c04      	adds	r4, r0, #0
		mx *= recipNorm;
    ae4a:	1c01      	adds	r1, r0, #0
    ae4c:	982b      	ldr	r0, [sp, #172]	; 0xac
    ae4e:	f7f5 ff35 	bl	cbc <__aeabi_fmul>
    ae52:	9008      	str	r0, [sp, #32]
		my *= recipNorm;
    ae54:	1c21      	adds	r1, r4, #0
    ae56:	982c      	ldr	r0, [sp, #176]	; 0xb0
    ae58:	f7f5 ff30 	bl	cbc <__aeabi_fmul>
    ae5c:	9007      	str	r0, [sp, #28]
		mz *= recipNorm;
    ae5e:	1c21      	adds	r1, r4, #0
    ae60:	982d      	ldr	r0, [sp, #180]	; 0xb4
    ae62:	f7f5 ff2b 	bl	cbc <__aeabi_fmul>
    ae66:	1c04      	adds	r4, r0, #0
		_2q0mx = 2.0f * q0 * mx;
    ae68:	9b05      	ldr	r3, [sp, #20]
    ae6a:	1c19      	adds	r1, r3, #0
    ae6c:	1c18      	adds	r0, r3, #0
    ae6e:	f7f5 fba3 	bl	5b8 <__aeabi_fadd>
    ae72:	900f      	str	r0, [sp, #60]	; 0x3c
    ae74:	1c01      	adds	r1, r0, #0
    ae76:	9808      	ldr	r0, [sp, #32]
    ae78:	f7f5 ff20 	bl	cbc <__aeabi_fmul>
    ae7c:	900d      	str	r0, [sp, #52]	; 0x34
		_2q0my = 2.0f * q0 * my;
    ae7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ae80:	9807      	ldr	r0, [sp, #28]
    ae82:	f7f5 ff1b 	bl	cbc <__aeabi_fmul>
    ae86:	9015      	str	r0, [sp, #84]	; 0x54
		_2q0mz = 2.0f * q0 * mz;
    ae88:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ae8a:	9409      	str	r4, [sp, #36]	; 0x24
    ae8c:	1c20      	adds	r0, r4, #0
    ae8e:	f7f5 ff15 	bl	cbc <__aeabi_fmul>
    ae92:	9006      	str	r0, [sp, #24]
		_2q1mx = 2.0f * q1 * mx;
    ae94:	1c31      	adds	r1, r6, #0
    ae96:	1c30      	adds	r0, r6, #0
    ae98:	f7f5 fb8e 	bl	5b8 <__aeabi_fadd>
    ae9c:	9012      	str	r0, [sp, #72]	; 0x48
    ae9e:	1c01      	adds	r1, r0, #0
    aea0:	9808      	ldr	r0, [sp, #32]
    aea2:	f7f5 ff0b 	bl	cbc <__aeabi_fmul>
    aea6:	9016      	str	r0, [sp, #88]	; 0x58
		_2q2 = 2.0f * q2;
    aea8:	9c04      	ldr	r4, [sp, #16]
    aeaa:	1c21      	adds	r1, r4, #0
    aeac:	1c20      	adds	r0, r4, #0
    aeae:	f7f5 fb83 	bl	5b8 <__aeabi_fadd>
    aeb2:	9010      	str	r0, [sp, #64]	; 0x40
		_2q3 = 2.0f * q3;
    aeb4:	1c29      	adds	r1, r5, #0
    aeb6:	1c28      	adds	r0, r5, #0
    aeb8:	f7f5 fb7e 	bl	5b8 <__aeabi_fadd>
    aebc:	901c      	str	r0, [sp, #112]	; 0x70
		q0q0 = q0 * q0;
    aebe:	9b05      	ldr	r3, [sp, #20]
    aec0:	1c19      	adds	r1, r3, #0
    aec2:	1c18      	adds	r0, r3, #0
    aec4:	f7f5 fefa 	bl	cbc <__aeabi_fmul>
    aec8:	900c      	str	r0, [sp, #48]	; 0x30
		q0q1 = q0 * q1;
    aeca:	9905      	ldr	r1, [sp, #20]
    aecc:	1c30      	adds	r0, r6, #0
    aece:	f7f5 fef5 	bl	cbc <__aeabi_fmul>
    aed2:	901b      	str	r0, [sp, #108]	; 0x6c
		q0q2 = q0 * q2;
    aed4:	9905      	ldr	r1, [sp, #20]
    aed6:	1c20      	adds	r0, r4, #0
    aed8:	f7f5 fef0 	bl	cbc <__aeabi_fmul>
    aedc:	901d      	str	r0, [sp, #116]	; 0x74
		q1q1 = q1 * q1;
    aede:	1c31      	adds	r1, r6, #0
    aee0:	1c30      	adds	r0, r6, #0
    aee2:	f7f5 feeb 	bl	cbc <__aeabi_fmul>
    aee6:	9011      	str	r0, [sp, #68]	; 0x44
		q1q3 = q1 * q3;
    aee8:	1c29      	adds	r1, r5, #0
    aeea:	1c30      	adds	r0, r6, #0
    aeec:	f7f5 fee6 	bl	cbc <__aeabi_fmul>
    aef0:	9013      	str	r0, [sp, #76]	; 0x4c
		q2q2 = q2 * q2;
    aef2:	1c21      	adds	r1, r4, #0
    aef4:	9404      	str	r4, [sp, #16]
    aef6:	1c20      	adds	r0, r4, #0
    aef8:	f7f5 fee0 	bl	cbc <__aeabi_fmul>
    aefc:	900b      	str	r0, [sp, #44]	; 0x2c
		q3q3 = q3 * q3;
    aefe:	1c29      	adds	r1, r5, #0
    af00:	1c28      	adds	r0, r5, #0
    af02:	f7f5 fedb 	bl	cbc <__aeabi_fmul>
    af06:	9014      	str	r0, [sp, #80]	; 0x50
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
    af08:	990c      	ldr	r1, [sp, #48]	; 0x30
    af0a:	9808      	ldr	r0, [sp, #32]
    af0c:	f7f5 fed6 	bl	cbc <__aeabi_fmul>
    af10:	1c04      	adds	r4, r0, #0
    af12:	9915      	ldr	r1, [sp, #84]	; 0x54
    af14:	1c28      	adds	r0, r5, #0
    af16:	f7f5 fed1 	bl	cbc <__aeabi_fmul>
    af1a:	1c01      	adds	r1, r0, #0
    af1c:	1c20      	adds	r0, r4, #0
    af1e:	f7f5 ffed 	bl	efc <__aeabi_fsub>
    af22:	1c04      	adds	r4, r0, #0
    af24:	9906      	ldr	r1, [sp, #24]
    af26:	9804      	ldr	r0, [sp, #16]
    af28:	f7f5 fec8 	bl	cbc <__aeabi_fmul>
    af2c:	1c01      	adds	r1, r0, #0
    af2e:	1c20      	adds	r0, r4, #0
    af30:	f7f5 fb42 	bl	5b8 <__aeabi_fadd>
    af34:	1c04      	adds	r4, r0, #0
    af36:	9911      	ldr	r1, [sp, #68]	; 0x44
    af38:	9808      	ldr	r0, [sp, #32]
    af3a:	f7f5 febf 	bl	cbc <__aeabi_fmul>
    af3e:	1c01      	adds	r1, r0, #0
    af40:	1c20      	adds	r0, r4, #0
    af42:	f7f5 fb39 	bl	5b8 <__aeabi_fadd>
    af46:	1c04      	adds	r4, r0, #0
    af48:	9912      	ldr	r1, [sp, #72]	; 0x48
    af4a:	9807      	ldr	r0, [sp, #28]
    af4c:	f7f5 feb6 	bl	cbc <__aeabi_fmul>
    af50:	9904      	ldr	r1, [sp, #16]
    af52:	f7f5 feb3 	bl	cbc <__aeabi_fmul>
    af56:	1c01      	adds	r1, r0, #0
    af58:	1c20      	adds	r0, r4, #0
    af5a:	f7f5 fb2d 	bl	5b8 <__aeabi_fadd>
    af5e:	1c04      	adds	r4, r0, #0
    af60:	9912      	ldr	r1, [sp, #72]	; 0x48
    af62:	9809      	ldr	r0, [sp, #36]	; 0x24
    af64:	f7f5 feaa 	bl	cbc <__aeabi_fmul>
    af68:	1c29      	adds	r1, r5, #0
    af6a:	f7f5 fea7 	bl	cbc <__aeabi_fmul>
    af6e:	1c01      	adds	r1, r0, #0
    af70:	1c20      	adds	r0, r4, #0
    af72:	f7f5 fb21 	bl	5b8 <__aeabi_fadd>
    af76:	1c04      	adds	r4, r0, #0
    af78:	990b      	ldr	r1, [sp, #44]	; 0x2c
    af7a:	9808      	ldr	r0, [sp, #32]
    af7c:	f7f5 fe9e 	bl	cbc <__aeabi_fmul>
    af80:	1c01      	adds	r1, r0, #0
    af82:	1c20      	adds	r0, r4, #0
    af84:	f7f5 ffba 	bl	efc <__aeabi_fsub>
    af88:	1c04      	adds	r4, r0, #0
    af8a:	9914      	ldr	r1, [sp, #80]	; 0x50
    af8c:	9808      	ldr	r0, [sp, #32]
    af8e:	f7f5 fe95 	bl	cbc <__aeabi_fmul>
    af92:	1c01      	adds	r1, r0, #0
    af94:	1c20      	adds	r0, r4, #0
    af96:	f7f5 ffb1 	bl	efc <__aeabi_fsub>
    af9a:	900a      	str	r0, [sp, #40]	; 0x28
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
    af9c:	990d      	ldr	r1, [sp, #52]	; 0x34
    af9e:	1c28      	adds	r0, r5, #0
    afa0:	f7f5 fe8c 	bl	cbc <__aeabi_fmul>
    afa4:	1c04      	adds	r4, r0, #0
    afa6:	990c      	ldr	r1, [sp, #48]	; 0x30
    afa8:	9807      	ldr	r0, [sp, #28]
    afaa:	f7f5 fe87 	bl	cbc <__aeabi_fmul>
    afae:	1c01      	adds	r1, r0, #0
    afb0:	1c20      	adds	r0, r4, #0
    afb2:	f7f5 fb01 	bl	5b8 <__aeabi_fadd>
    afb6:	1c04      	adds	r4, r0, #0
    afb8:	9906      	ldr	r1, [sp, #24]
    afba:	1c30      	adds	r0, r6, #0
    afbc:	f7f5 fe7e 	bl	cbc <__aeabi_fmul>
    afc0:	1c01      	adds	r1, r0, #0
    afc2:	1c20      	adds	r0, r4, #0
    afc4:	f7f5 ff9a 	bl	efc <__aeabi_fsub>
    afc8:	1c04      	adds	r4, r0, #0
    afca:	9916      	ldr	r1, [sp, #88]	; 0x58
    afcc:	9804      	ldr	r0, [sp, #16]
    afce:	f7f5 fe75 	bl	cbc <__aeabi_fmul>
    afd2:	1c01      	adds	r1, r0, #0
    afd4:	1c20      	adds	r0, r4, #0
    afd6:	f7f5 faef 	bl	5b8 <__aeabi_fadd>
    afda:	1c04      	adds	r4, r0, #0
    afdc:	9911      	ldr	r1, [sp, #68]	; 0x44
    afde:	9807      	ldr	r0, [sp, #28]
    afe0:	f7f5 fe6c 	bl	cbc <__aeabi_fmul>
    afe4:	1c01      	adds	r1, r0, #0
    afe6:	1c20      	adds	r0, r4, #0
    afe8:	f7f5 ff88 	bl	efc <__aeabi_fsub>
    afec:	1c04      	adds	r4, r0, #0
    afee:	990b      	ldr	r1, [sp, #44]	; 0x2c
    aff0:	9807      	ldr	r0, [sp, #28]
    aff2:	f7f5 fe63 	bl	cbc <__aeabi_fmul>
    aff6:	1c01      	adds	r1, r0, #0
    aff8:	1c20      	adds	r0, r4, #0
    affa:	f7f5 fadd 	bl	5b8 <__aeabi_fadd>
    affe:	1c04      	adds	r4, r0, #0
    b000:	9910      	ldr	r1, [sp, #64]	; 0x40
    b002:	9809      	ldr	r0, [sp, #36]	; 0x24
    b004:	f7f5 fe5a 	bl	cbc <__aeabi_fmul>
    b008:	1c29      	adds	r1, r5, #0
    b00a:	f7f5 fe57 	bl	cbc <__aeabi_fmul>
    b00e:	1c01      	adds	r1, r0, #0
    b010:	1c20      	adds	r0, r4, #0
    b012:	f7f5 fad1 	bl	5b8 <__aeabi_fadd>
    b016:	1c04      	adds	r4, r0, #0
    b018:	9914      	ldr	r1, [sp, #80]	; 0x50
    b01a:	9807      	ldr	r0, [sp, #28]
    b01c:	f7f5 fe4e 	bl	cbc <__aeabi_fmul>
    b020:	1c01      	adds	r1, r0, #0
    b022:	1c20      	adds	r0, r4, #0
    b024:	f7f5 ff6a 	bl	efc <__aeabi_fsub>
    b028:	1c04      	adds	r4, r0, #0
		_2bx = sqrtf(hx * hx + hy * hy);
    b02a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b02c:	1c11      	adds	r1, r2, #0
    b02e:	1c10      	adds	r0, r2, #0
    b030:	f7f5 fe44 	bl	cbc <__aeabi_fmul>
    b034:	9006      	str	r0, [sp, #24]
    b036:	1c21      	adds	r1, r4, #0
    b038:	1c20      	adds	r0, r4, #0
    b03a:	f7f5 fe3f 	bl	cbc <__aeabi_fmul>
    b03e:	1c01      	adds	r1, r0, #0
    b040:	9806      	ldr	r0, [sp, #24]
    b042:	f7f5 fab9 	bl	5b8 <__aeabi_fadd>
    b046:	f002 f97b 	bl	d340 <sqrtf>
    b04a:	9006      	str	r0, [sp, #24]
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
    b04c:	68fa      	ldr	r2, [r7, #12]
    b04e:	68bc      	ldr	r4, [r7, #8]
    b050:	940e      	str	r4, [sp, #56]	; 0x38
    b052:	693c      	ldr	r4, [r7, #16]
    b054:	940a      	str	r4, [sp, #40]	; 0x28
    b056:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    b058:	2380      	movs	r3, #128	; 0x80
    b05a:	061b      	lsls	r3, r3, #24
    b05c:	469c      	mov	ip, r3
    b05e:	4464      	add	r4, ip
    b060:	0020      	movs	r0, r4
    b062:	920d      	str	r2, [sp, #52]	; 0x34
    b064:	1c11      	adds	r1, r2, #0
    b066:	f7f5 fe29 	bl	cbc <__aeabi_fmul>
    b06a:	1c04      	adds	r4, r0, #0
    b06c:	990e      	ldr	r1, [sp, #56]	; 0x38
    b06e:	9815      	ldr	r0, [sp, #84]	; 0x54
    b070:	f7f5 fe24 	bl	cbc <__aeabi_fmul>
    b074:	1c01      	adds	r1, r0, #0
    b076:	1c20      	adds	r0, r4, #0
    b078:	f7f5 fa9e 	bl	5b8 <__aeabi_fadd>
    b07c:	1c04      	adds	r4, r0, #0
    b07e:	990c      	ldr	r1, [sp, #48]	; 0x30
    b080:	9809      	ldr	r0, [sp, #36]	; 0x24
    b082:	f7f5 fe1b 	bl	cbc <__aeabi_fmul>
    b086:	1c01      	adds	r1, r0, #0
    b088:	1c20      	adds	r0, r4, #0
    b08a:	f7f5 fa95 	bl	5b8 <__aeabi_fadd>
    b08e:	1c04      	adds	r4, r0, #0
    b090:	990a      	ldr	r1, [sp, #40]	; 0x28
    b092:	9816      	ldr	r0, [sp, #88]	; 0x58
    b094:	f7f5 fe12 	bl	cbc <__aeabi_fmul>
    b098:	1c01      	adds	r1, r0, #0
    b09a:	1c20      	adds	r0, r4, #0
    b09c:	f7f5 fa8c 	bl	5b8 <__aeabi_fadd>
    b0a0:	1c04      	adds	r4, r0, #0
    b0a2:	9911      	ldr	r1, [sp, #68]	; 0x44
    b0a4:	9809      	ldr	r0, [sp, #36]	; 0x24
    b0a6:	f7f5 fe09 	bl	cbc <__aeabi_fmul>
    b0aa:	1c01      	adds	r1, r0, #0
    b0ac:	1c20      	adds	r0, r4, #0
    b0ae:	f7f5 ff25 	bl	efc <__aeabi_fsub>
    b0b2:	1c04      	adds	r4, r0, #0
    b0b4:	9910      	ldr	r1, [sp, #64]	; 0x40
    b0b6:	9807      	ldr	r0, [sp, #28]
    b0b8:	f7f5 fe00 	bl	cbc <__aeabi_fmul>
    b0bc:	990a      	ldr	r1, [sp, #40]	; 0x28
    b0be:	f7f5 fdfd 	bl	cbc <__aeabi_fmul>
    b0c2:	1c01      	adds	r1, r0, #0
    b0c4:	1c20      	adds	r0, r4, #0
    b0c6:	f7f5 fa77 	bl	5b8 <__aeabi_fadd>
    b0ca:	1c04      	adds	r4, r0, #0
    b0cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b0ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    b0d0:	f7f5 fdf4 	bl	cbc <__aeabi_fmul>
    b0d4:	1c01      	adds	r1, r0, #0
    b0d6:	1c20      	adds	r0, r4, #0
    b0d8:	f7f5 ff10 	bl	efc <__aeabi_fsub>
    b0dc:	1c04      	adds	r4, r0, #0
    b0de:	9914      	ldr	r1, [sp, #80]	; 0x50
    b0e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    b0e2:	f7f5 fdeb 	bl	cbc <__aeabi_fmul>
    b0e6:	1c01      	adds	r1, r0, #0
    b0e8:	1c20      	adds	r0, r4, #0
    b0ea:	f7f5 fa65 	bl	5b8 <__aeabi_fadd>
		_4bz = 2.0f * _2bz;
    b0ee:	1c01      	adds	r1, r0, #0
    b0f0:	900c      	str	r0, [sp, #48]	; 0x30
    b0f2:	f7f5 fa61 	bl	5b8 <__aeabi_fadd>
    b0f6:	901e      	str	r0, [sp, #120]	; 0x78
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
    b0f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b0fa:	1c19      	adds	r1, r3, #0
    b0fc:	1c18      	adds	r0, r3, #0
    b0fe:	f7f5 fa5b 	bl	5b8 <__aeabi_fadd>
    b102:	1c04      	adds	r4, r0, #0
		_2q0q2 = 2.0f * q0 * q2;
    b104:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b106:	9804      	ldr	r0, [sp, #16]
    b108:	f7f5 fdd8 	bl	cbc <__aeabi_fmul>
    b10c:	1c01      	adds	r1, r0, #0
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
    b10e:	1c20      	adds	r0, r4, #0
    b110:	f7f5 fef4 	bl	efc <__aeabi_fsub>
    b114:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b116:	f7f5 fef1 	bl	efc <__aeabi_fsub>
    b11a:	9015      	str	r0, [sp, #84]	; 0x54
		_2q2q3 = 2.0f * q2 * q3;
    b11c:	9910      	ldr	r1, [sp, #64]	; 0x40
    b11e:	1c28      	adds	r0, r5, #0
    b120:	f7f5 fdcc 	bl	cbc <__aeabi_fmul>
    b124:	1c04      	adds	r4, r0, #0
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
    b126:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b128:	1c19      	adds	r1, r3, #0
    b12a:	1c18      	adds	r0, r3, #0
    b12c:	f7f5 fa44 	bl	5b8 <__aeabi_fadd>
    b130:	1c01      	adds	r1, r0, #0
    b132:	1c20      	adds	r0, r4, #0
    b134:	f7f5 fa40 	bl	5b8 <__aeabi_fadd>
    b138:	9920      	ldr	r1, [sp, #128]	; 0x80
    b13a:	f7f5 fedf 	bl	efc <__aeabi_fsub>
    b13e:	9016      	str	r0, [sp, #88]	; 0x58
    b140:	990c      	ldr	r1, [sp, #48]	; 0x30
    b142:	980d      	ldr	r0, [sp, #52]	; 0x34
    b144:	f7f5 fdba 	bl	cbc <__aeabi_fmul>
    b148:	901f      	str	r0, [sp, #124]	; 0x7c
    b14a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b14c:	20fc      	movs	r0, #252	; 0xfc
    b14e:	0580      	lsls	r0, r0, #22
    b150:	f7f5 fed4 	bl	efc <__aeabi_fsub>
    b154:	9914      	ldr	r1, [sp, #80]	; 0x50
    b156:	f7f5 fed1 	bl	efc <__aeabi_fsub>
    b15a:	9906      	ldr	r1, [sp, #24]
    b15c:	f7f5 fdae 	bl	cbc <__aeabi_fmul>
    b160:	1c04      	adds	r4, r0, #0
    b162:	991d      	ldr	r1, [sp, #116]	; 0x74
    b164:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b166:	f7f5 fec9 	bl	efc <__aeabi_fsub>
    b16a:	990c      	ldr	r1, [sp, #48]	; 0x30
    b16c:	f7f5 fda6 	bl	cbc <__aeabi_fmul>
    b170:	1c01      	adds	r1, r0, #0
    b172:	1c20      	adds	r0, r4, #0
    b174:	f7f5 fa20 	bl	5b8 <__aeabi_fadd>
    b178:	9908      	ldr	r1, [sp, #32]
    b17a:	f7f5 febf 	bl	efc <__aeabi_fsub>
    b17e:	9008      	str	r0, [sp, #32]
    b180:	9c06      	ldr	r4, [sp, #24]
    b182:	2280      	movs	r2, #128	; 0x80
    b184:	0612      	lsls	r2, r2, #24
    b186:	4694      	mov	ip, r2
    b188:	4464      	add	r4, ip
    b18a:	9414      	str	r4, [sp, #80]	; 0x50
    b18c:	990c      	ldr	r1, [sp, #48]	; 0x30
    b18e:	980e      	ldr	r0, [sp, #56]	; 0x38
    b190:	f7f5 fd94 	bl	cbc <__aeabi_fmul>
    b194:	9020      	str	r0, [sp, #128]	; 0x80
		q1q2 = q1 * q2;
    b196:	9904      	ldr	r1, [sp, #16]
    b198:	1c30      	adds	r0, r6, #0
    b19a:	f7f5 fd8f 	bl	cbc <__aeabi_fmul>
    b19e:	1c04      	adds	r4, r0, #0
		q0q3 = q0 * q3;
    b1a0:	9905      	ldr	r1, [sp, #20]
    b1a2:	1c28      	adds	r0, r5, #0
    b1a4:	f7f5 fd8a 	bl	cbc <__aeabi_fmul>
    b1a8:	1c01      	adds	r1, r0, #0
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
    b1aa:	1c20      	adds	r0, r4, #0
    b1ac:	f7f5 fea6 	bl	efc <__aeabi_fsub>
    b1b0:	9e06      	ldr	r6, [sp, #24]
    b1b2:	1c31      	adds	r1, r6, #0
    b1b4:	f7f5 fd82 	bl	cbc <__aeabi_fmul>
    b1b8:	1c04      	adds	r4, r0, #0
		q2q3 = q2 * q3;
    b1ba:	1c29      	adds	r1, r5, #0
    b1bc:	9804      	ldr	r0, [sp, #16]
    b1be:	f7f5 fd7d 	bl	cbc <__aeabi_fmul>
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
    b1c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    b1c4:	f7f5 f9f8 	bl	5b8 <__aeabi_fadd>
    b1c8:	990c      	ldr	r1, [sp, #48]	; 0x30
    b1ca:	f7f5 fd77 	bl	cbc <__aeabi_fmul>
    b1ce:	1c01      	adds	r1, r0, #0
    b1d0:	1c20      	adds	r0, r4, #0
    b1d2:	f7f5 f9f1 	bl	5b8 <__aeabi_fadd>
    b1d6:	9907      	ldr	r1, [sp, #28]
    b1d8:	f7f5 fe90 	bl	efc <__aeabi_fsub>
    b1dc:	9004      	str	r0, [sp, #16]
    b1de:	990d      	ldr	r1, [sp, #52]	; 0x34
    b1e0:	1c35      	adds	r5, r6, #0
    b1e2:	1c30      	adds	r0, r6, #0
    b1e4:	f7f5 fd6a 	bl	cbc <__aeabi_fmul>
    b1e8:	1c04      	adds	r4, r0, #0
    b1ea:	9911      	ldr	r1, [sp, #68]	; 0x44
    b1ec:	20fc      	movs	r0, #252	; 0xfc
    b1ee:	0580      	lsls	r0, r0, #22
    b1f0:	f7f5 fe84 	bl	efc <__aeabi_fsub>
    b1f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b1f6:	f7f5 fe81 	bl	efc <__aeabi_fsub>
    b1fa:	990c      	ldr	r1, [sp, #48]	; 0x30
    b1fc:	f7f5 fd5e 	bl	cbc <__aeabi_fmul>
    b200:	1c06      	adds	r6, r0, #0
    b202:	9913      	ldr	r1, [sp, #76]	; 0x4c
    b204:	981d      	ldr	r0, [sp, #116]	; 0x74
    b206:	f7f5 f9d7 	bl	5b8 <__aeabi_fadd>
    b20a:	9506      	str	r5, [sp, #24]
    b20c:	1c29      	adds	r1, r5, #0
    b20e:	f7f5 fd55 	bl	cbc <__aeabi_fmul>
    b212:	1c01      	adds	r1, r0, #0
    b214:	1c30      	adds	r0, r6, #0
    b216:	f7f5 f9cf 	bl	5b8 <__aeabi_fadd>
    b21a:	9909      	ldr	r1, [sp, #36]	; 0x24
    b21c:	f7f5 fe6e 	bl	efc <__aeabi_fsub>
    b220:	1c05      	adds	r5, r0, #0
    b222:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b224:	2380      	movs	r3, #128	; 0x80
    b226:	061b      	lsls	r3, r3, #24
    b228:	469c      	mov	ip, r3
    b22a:	4462      	add	r2, ip
    b22c:	0010      	movs	r0, r2
    b22e:	9915      	ldr	r1, [sp, #84]	; 0x54
    b230:	f7f5 fd44 	bl	cbc <__aeabi_fmul>
    b234:	1c06      	adds	r6, r0, #0
    b236:	9916      	ldr	r1, [sp, #88]	; 0x58
    b238:	9812      	ldr	r0, [sp, #72]	; 0x48
    b23a:	f7f5 fd3f 	bl	cbc <__aeabi_fmul>
    b23e:	1c01      	adds	r1, r0, #0
    b240:	1c30      	adds	r0, r6, #0
    b242:	f7f5 f9b9 	bl	5b8 <__aeabi_fadd>
    b246:	1c06      	adds	r6, r0, #0
    b248:	9908      	ldr	r1, [sp, #32]
    b24a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b24c:	f7f5 fd36 	bl	cbc <__aeabi_fmul>
    b250:	1c01      	adds	r1, r0, #0
    b252:	1c30      	adds	r0, r6, #0
    b254:	f7f5 fe52 	bl	efc <__aeabi_fsub>
    b258:	1c06      	adds	r6, r0, #0
    b25a:	9914      	ldr	r1, [sp, #80]	; 0x50
    b25c:	980a      	ldr	r0, [sp, #40]	; 0x28
    b25e:	f7f5 fd2d 	bl	cbc <__aeabi_fmul>
    b262:	9920      	ldr	r1, [sp, #128]	; 0x80
    b264:	f7f5 f9a8 	bl	5b8 <__aeabi_fadd>
    b268:	9904      	ldr	r1, [sp, #16]
    b26a:	f7f5 fd27 	bl	cbc <__aeabi_fmul>
    b26e:	1c01      	adds	r1, r0, #0
    b270:	1c30      	adds	r0, r6, #0
    b272:	f7f5 f9a1 	bl	5b8 <__aeabi_fadd>
    b276:	1c06      	adds	r6, r0, #0
    b278:	9505      	str	r5, [sp, #20]
    b27a:	1c29      	adds	r1, r5, #0
    b27c:	1c20      	adds	r0, r4, #0
    b27e:	f7f5 fd1d 	bl	cbc <__aeabi_fmul>
    b282:	1c01      	adds	r1, r0, #0
    b284:	1c30      	adds	r0, r6, #0
    b286:	f7f5 f997 	bl	5b8 <__aeabi_fadd>
    b28a:	9007      	str	r0, [sp, #28]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
    b28c:	9e11      	ldr	r6, [sp, #68]	; 0x44
    b28e:	1c31      	adds	r1, r6, #0
    b290:	1c30      	adds	r0, r6, #0
    b292:	f7f5 f991 	bl	5b8 <__aeabi_fadd>
    b296:	1c01      	adds	r1, r0, #0
    b298:	20fe      	movs	r0, #254	; 0xfe
    b29a:	0580      	lsls	r0, r0, #22
    b29c:	f7f5 fe2e 	bl	efc <__aeabi_fsub>
    b2a0:	1c06      	adds	r6, r0, #0
    b2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b2a4:	1c19      	adds	r1, r3, #0
    b2a6:	1c18      	adds	r0, r3, #0
    b2a8:	f7f5 f986 	bl	5b8 <__aeabi_fadd>
    b2ac:	1c01      	adds	r1, r0, #0
    b2ae:	1c30      	adds	r0, r6, #0
    b2b0:	f7f5 fe24 	bl	efc <__aeabi_fsub>
    b2b4:	9921      	ldr	r1, [sp, #132]	; 0x84
    b2b6:	f7f5 fe21 	bl	efc <__aeabi_fsub>
    b2ba:	900b      	str	r0, [sp, #44]	; 0x2c
    b2bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b2be:	1c29      	adds	r1, r5, #0
    b2c0:	980a      	ldr	r0, [sp, #40]	; 0x28
    b2c2:	f7f5 fcfb 	bl	cbc <__aeabi_fmul>
    b2c6:	900c      	str	r0, [sp, #48]	; 0x30
    b2c8:	687e      	ldr	r6, [r7, #4]
    b2ca:	1c31      	adds	r1, r6, #0
    b2cc:	1c28      	adds	r0, r5, #0
    b2ce:	f7f5 fcf5 	bl	cbc <__aeabi_fmul>
    b2d2:	9011      	str	r0, [sp, #68]	; 0x44
    b2d4:	9915      	ldr	r1, [sp, #84]	; 0x54
    b2d6:	981c      	ldr	r0, [sp, #112]	; 0x70
    b2d8:	f7f5 fcf0 	bl	cbc <__aeabi_fmul>
    b2dc:	1c05      	adds	r5, r0, #0
    b2de:	9916      	ldr	r1, [sp, #88]	; 0x58
    b2e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b2e2:	f7f5 fceb 	bl	cbc <__aeabi_fmul>
    b2e6:	1c01      	adds	r1, r0, #0
    b2e8:	1c28      	adds	r0, r5, #0
    b2ea:	f7f5 f965 	bl	5b8 <__aeabi_fadd>
    b2ee:	1c05      	adds	r5, r0, #0
    b2f0:	2181      	movs	r1, #129	; 0x81
    b2f2:	05c9      	lsls	r1, r1, #23
    b2f4:	980e      	ldr	r0, [sp, #56]	; 0x38
    b2f6:	f7f5 fce1 	bl	cbc <__aeabi_fmul>
    b2fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b2fc:	f7f5 fcde 	bl	cbc <__aeabi_fmul>
    b300:	1c01      	adds	r1, r0, #0
    b302:	1c28      	adds	r0, r5, #0
    b304:	f7f5 fdfa 	bl	efc <__aeabi_fsub>
    b308:	1c05      	adds	r5, r0, #0
    b30a:	990c      	ldr	r1, [sp, #48]	; 0x30
    b30c:	9808      	ldr	r0, [sp, #32]
    b30e:	f7f5 fcd5 	bl	cbc <__aeabi_fmul>
    b312:	1c01      	adds	r1, r0, #0
    b314:	1c28      	adds	r0, r5, #0
    b316:	f7f5 f94f 	bl	5b8 <__aeabi_fadd>
    b31a:	1c05      	adds	r5, r0, #0
    b31c:	9911      	ldr	r1, [sp, #68]	; 0x44
    b31e:	1c20      	adds	r0, r4, #0
    b320:	f7f5 f94a 	bl	5b8 <__aeabi_fadd>
    b324:	9904      	ldr	r1, [sp, #16]
    b326:	f7f5 fcc9 	bl	cbc <__aeabi_fmul>
    b32a:	1c01      	adds	r1, r0, #0
    b32c:	1c28      	adds	r0, r5, #0
    b32e:	f7f5 f943 	bl	5b8 <__aeabi_fadd>
    b332:	1c04      	adds	r4, r0, #0
    b334:	990a      	ldr	r1, [sp, #40]	; 0x28
    b336:	9806      	ldr	r0, [sp, #24]
    b338:	f7f5 fcc0 	bl	cbc <__aeabi_fmul>
    b33c:	1c05      	adds	r5, r0, #0
    b33e:	991e      	ldr	r1, [sp, #120]	; 0x78
    b340:	980e      	ldr	r0, [sp, #56]	; 0x38
    b342:	f7f5 fcbb 	bl	cbc <__aeabi_fmul>
    b346:	1c01      	adds	r1, r0, #0
    b348:	1c28      	adds	r0, r5, #0
    b34a:	f7f5 fdd7 	bl	efc <__aeabi_fsub>
    b34e:	9905      	ldr	r1, [sp, #20]
    b350:	f7f5 fcb4 	bl	cbc <__aeabi_fmul>
    b354:	1c01      	adds	r1, r0, #0
    b356:	1c20      	adds	r0, r4, #0
    b358:	f7f5 f92e 	bl	5b8 <__aeabi_fadd>
    b35c:	9009      	str	r0, [sp, #36]	; 0x24
		_4bx = 2.0f * _2bx;
    b35e:	9d06      	ldr	r5, [sp, #24]
    b360:	1c29      	adds	r1, r5, #0
    b362:	1c28      	adds	r0, r5, #0
    b364:	f7f5 f928 	bl	5b8 <__aeabi_fadd>
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
    b368:	2380      	movs	r3, #128	; 0x80
    b36a:	061b      	lsls	r3, r3, #24
    b36c:	18c4      	adds	r4, r0, r3
    b36e:	990e      	ldr	r1, [sp, #56]	; 0x38
    b370:	9506      	str	r5, [sp, #24]
    b372:	1c28      	adds	r0, r5, #0
    b374:	f7f5 fca2 	bl	cbc <__aeabi_fmul>
    b378:	900e      	str	r0, [sp, #56]	; 0x38
    b37a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b37c:	001a      	movs	r2, r3
    b37e:	2380      	movs	r3, #128	; 0x80
    b380:	061b      	lsls	r3, r3, #24
    b382:	469c      	mov	ip, r3
    b384:	4462      	add	r2, ip
    b386:	0010      	movs	r0, r2
    b388:	9915      	ldr	r1, [sp, #84]	; 0x54
    b38a:	f7f5 fc97 	bl	cbc <__aeabi_fmul>
    b38e:	1c05      	adds	r5, r0, #0
    b390:	9916      	ldr	r1, [sp, #88]	; 0x58
    b392:	981c      	ldr	r0, [sp, #112]	; 0x70
    b394:	f7f5 fc92 	bl	cbc <__aeabi_fmul>
    b398:	1c01      	adds	r1, r0, #0
    b39a:	1c28      	adds	r0, r5, #0
    b39c:	f7f5 f90c 	bl	5b8 <__aeabi_fadd>
    b3a0:	1c05      	adds	r5, r0, #0
    b3a2:	2181      	movs	r1, #129	; 0x81
    b3a4:	05c9      	lsls	r1, r1, #23
    b3a6:	980d      	ldr	r0, [sp, #52]	; 0x34
    b3a8:	f7f5 fc88 	bl	cbc <__aeabi_fmul>
    b3ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b3ae:	f7f5 fc85 	bl	cbc <__aeabi_fmul>
    b3b2:	1c01      	adds	r1, r0, #0
    b3b4:	1c28      	adds	r0, r5, #0
    b3b6:	f7f5 fda1 	bl	efc <__aeabi_fsub>
    b3ba:	1c05      	adds	r5, r0, #0
    b3bc:	1c21      	adds	r1, r4, #0
    b3be:	980d      	ldr	r0, [sp, #52]	; 0x34
    b3c0:	f7f5 fc7c 	bl	cbc <__aeabi_fmul>
    b3c4:	9911      	ldr	r1, [sp, #68]	; 0x44
    b3c6:	f7f5 fd99 	bl	efc <__aeabi_fsub>
    b3ca:	9908      	ldr	r1, [sp, #32]
    b3cc:	f7f5 fc76 	bl	cbc <__aeabi_fmul>
    b3d0:	1c01      	adds	r1, r0, #0
    b3d2:	1c28      	adds	r0, r5, #0
    b3d4:	f7f5 f8f0 	bl	5b8 <__aeabi_fadd>
    b3d8:	1c05      	adds	r5, r0, #0
    b3da:	990e      	ldr	r1, [sp, #56]	; 0x38
    b3dc:	980c      	ldr	r0, [sp, #48]	; 0x30
    b3de:	f7f5 f8eb 	bl	5b8 <__aeabi_fadd>
    b3e2:	9904      	ldr	r1, [sp, #16]
    b3e4:	f7f5 fc6a 	bl	cbc <__aeabi_fmul>
    b3e8:	1c01      	adds	r1, r0, #0
    b3ea:	1c28      	adds	r0, r5, #0
    b3ec:	f7f5 f8e4 	bl	5b8 <__aeabi_fadd>
    b3f0:	1c05      	adds	r5, r0, #0
    b3f2:	1c31      	adds	r1, r6, #0
    b3f4:	9806      	ldr	r0, [sp, #24]
    b3f6:	f7f5 fc61 	bl	cbc <__aeabi_fmul>
    b3fa:	9006      	str	r0, [sp, #24]
    b3fc:	991e      	ldr	r1, [sp, #120]	; 0x78
    b3fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    b400:	f7f5 fc5c 	bl	cbc <__aeabi_fmul>
    b404:	1c01      	adds	r1, r0, #0
    b406:	9806      	ldr	r0, [sp, #24]
    b408:	f7f5 fd78 	bl	efc <__aeabi_fsub>
    b40c:	9905      	ldr	r1, [sp, #20]
    b40e:	f7f5 fc55 	bl	cbc <__aeabi_fmul>
    b412:	1c01      	adds	r1, r0, #0
    b414:	1c28      	adds	r0, r5, #0
    b416:	f7f5 f8cf 	bl	5b8 <__aeabi_fadd>
    b41a:	9006      	str	r0, [sp, #24]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
    b41c:	9915      	ldr	r1, [sp, #84]	; 0x54
    b41e:	9812      	ldr	r0, [sp, #72]	; 0x48
    b420:	f7f5 fc4c 	bl	cbc <__aeabi_fmul>
    b424:	1c05      	adds	r5, r0, #0
    b426:	9916      	ldr	r1, [sp, #88]	; 0x58
    b428:	9810      	ldr	r0, [sp, #64]	; 0x40
    b42a:	f7f5 fc47 	bl	cbc <__aeabi_fmul>
    b42e:	1c01      	adds	r1, r0, #0
    b430:	1c28      	adds	r0, r5, #0
    b432:	f7f5 f8c1 	bl	5b8 <__aeabi_fadd>
    b436:	1c05      	adds	r5, r0, #0
    b438:	1c21      	adds	r1, r4, #0
    b43a:	980a      	ldr	r0, [sp, #40]	; 0x28
    b43c:	f7f5 fc3e 	bl	cbc <__aeabi_fmul>
    b440:	9920      	ldr	r1, [sp, #128]	; 0x80
    b442:	f7f5 f8b9 	bl	5b8 <__aeabi_fadd>
    b446:	9908      	ldr	r1, [sp, #32]
    b448:	f7f5 fc38 	bl	cbc <__aeabi_fmul>
    b44c:	1c01      	adds	r1, r0, #0
    b44e:	1c28      	adds	r0, r5, #0
    b450:	f7f5 f8b2 	bl	5b8 <__aeabi_fadd>
    b454:	1c04      	adds	r4, r0, #0
    b456:	1c31      	adds	r1, r6, #0
    b458:	9814      	ldr	r0, [sp, #80]	; 0x50
    b45a:	f7f5 fc2f 	bl	cbc <__aeabi_fmul>
    b45e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b460:	f7f5 f8aa 	bl	5b8 <__aeabi_fadd>
    b464:	9904      	ldr	r1, [sp, #16]
    b466:	f7f5 fc29 	bl	cbc <__aeabi_fmul>
    b46a:	1c01      	adds	r1, r0, #0
    b46c:	1c20      	adds	r0, r4, #0
    b46e:	f7f5 f8a3 	bl	5b8 <__aeabi_fadd>
    b472:	1c04      	adds	r4, r0, #0
    b474:	990e      	ldr	r1, [sp, #56]	; 0x38
    b476:	9805      	ldr	r0, [sp, #20]
    b478:	f7f5 fc20 	bl	cbc <__aeabi_fmul>
    b47c:	1c01      	adds	r1, r0, #0
    b47e:	1c20      	adds	r0, r4, #0
    b480:	f7f5 f89a 	bl	5b8 <__aeabi_fadd>
    b484:	1c06      	adds	r6, r0, #0
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
    b486:	9c07      	ldr	r4, [sp, #28]
    b488:	1c21      	adds	r1, r4, #0
    b48a:	1c20      	adds	r0, r4, #0
    b48c:	f7f5 fc16 	bl	cbc <__aeabi_fmul>
    b490:	1c04      	adds	r4, r0, #0
    b492:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b494:	1c11      	adds	r1, r2, #0
    b496:	1c10      	adds	r0, r2, #0
    b498:	f7f5 fc10 	bl	cbc <__aeabi_fmul>
    b49c:	1c01      	adds	r1, r0, #0
    b49e:	1c20      	adds	r0, r4, #0
    b4a0:	f7f5 f88a 	bl	5b8 <__aeabi_fadd>
    b4a4:	1c04      	adds	r4, r0, #0
    b4a6:	9b06      	ldr	r3, [sp, #24]
    b4a8:	1c19      	adds	r1, r3, #0
    b4aa:	1c18      	adds	r0, r3, #0
    b4ac:	f7f5 fc06 	bl	cbc <__aeabi_fmul>
    b4b0:	1c01      	adds	r1, r0, #0
    b4b2:	1c20      	adds	r0, r4, #0
    b4b4:	f7f5 f880 	bl	5b8 <__aeabi_fadd>
    b4b8:	1c04      	adds	r4, r0, #0
    b4ba:	1c31      	adds	r1, r6, #0
    b4bc:	1c30      	adds	r0, r6, #0
    b4be:	f7f5 fbfd 	bl	cbc <__aeabi_fmul>
    b4c2:	1c01      	adds	r1, r0, #0
    b4c4:	1c20      	adds	r0, r4, #0
    b4c6:	f7f5 f877 	bl	5b8 <__aeabi_fadd>
    b4ca:	f7ff f901 	bl	a6d0 <_ZN8Madgwick7invSqrtEf>
    b4ce:	1c05      	adds	r5, r0, #0
		qDot1 -= beta * s0;
    b4d0:	683c      	ldr	r4, [r7, #0]
		s0 *= recipNorm;
    b4d2:	1c01      	adds	r1, r0, #0
    b4d4:	9807      	ldr	r0, [sp, #28]
    b4d6:	f7f5 fbf1 	bl	cbc <__aeabi_fmul>
		qDot1 -= beta * s0;
    b4da:	1c21      	adds	r1, r4, #0
    b4dc:	f7f5 fbee 	bl	cbc <__aeabi_fmul>
    b4e0:	1c01      	adds	r1, r0, #0
    b4e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b4e4:	f7f5 fd0a 	bl	efc <__aeabi_fsub>
    b4e8:	9017      	str	r0, [sp, #92]	; 0x5c
		s1 *= recipNorm;
    b4ea:	1c29      	adds	r1, r5, #0
    b4ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    b4ee:	f7f5 fbe5 	bl	cbc <__aeabi_fmul>
		qDot2 -= beta * s1;
    b4f2:	1c21      	adds	r1, r4, #0
    b4f4:	f7f5 fbe2 	bl	cbc <__aeabi_fmul>
    b4f8:	1c01      	adds	r1, r0, #0
    b4fa:	9818      	ldr	r0, [sp, #96]	; 0x60
    b4fc:	f7f5 fcfe 	bl	efc <__aeabi_fsub>
    b500:	9018      	str	r0, [sp, #96]	; 0x60
		s2 *= recipNorm;
    b502:	1c29      	adds	r1, r5, #0
    b504:	9806      	ldr	r0, [sp, #24]
    b506:	f7f5 fbd9 	bl	cbc <__aeabi_fmul>
		qDot3 -= beta * s2;
    b50a:	1c21      	adds	r1, r4, #0
    b50c:	f7f5 fbd6 	bl	cbc <__aeabi_fmul>
    b510:	1c01      	adds	r1, r0, #0
    b512:	9819      	ldr	r0, [sp, #100]	; 0x64
    b514:	f7f5 fcf2 	bl	efc <__aeabi_fsub>
    b518:	9019      	str	r0, [sp, #100]	; 0x64
		s3 *= recipNorm;
    b51a:	1c29      	adds	r1, r5, #0
    b51c:	1c30      	adds	r0, r6, #0
    b51e:	f7f5 fbcd 	bl	cbc <__aeabi_fmul>
		qDot4 -= beta * s3;
    b522:	1c21      	adds	r1, r4, #0
    b524:	f7f5 fbca 	bl	cbc <__aeabi_fmul>
    b528:	1c01      	adds	r1, r0, #0
    b52a:	981a      	ldr	r0, [sp, #104]	; 0x68
    b52c:	f7f5 fce6 	bl	efc <__aeabi_fsub>
    b530:	901a      	str	r0, [sp, #104]	; 0x68
	q0 += qDot1 * invSampleFreq;
    b532:	697c      	ldr	r4, [r7, #20]
    b534:	1c21      	adds	r1, r4, #0
    b536:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b538:	f7f5 fbc0 	bl	cbc <__aeabi_fmul>
    b53c:	6879      	ldr	r1, [r7, #4]
    b53e:	f7f5 f83b 	bl	5b8 <__aeabi_fadd>
    b542:	9004      	str	r0, [sp, #16]
	q1 += qDot2 * invSampleFreq;
    b544:	1c21      	adds	r1, r4, #0
    b546:	9818      	ldr	r0, [sp, #96]	; 0x60
    b548:	f7f5 fbb8 	bl	cbc <__aeabi_fmul>
    b54c:	68b9      	ldr	r1, [r7, #8]
    b54e:	f7f5 f833 	bl	5b8 <__aeabi_fadd>
    b552:	1c06      	adds	r6, r0, #0
	q2 += qDot3 * invSampleFreq;
    b554:	1c21      	adds	r1, r4, #0
    b556:	9819      	ldr	r0, [sp, #100]	; 0x64
    b558:	f7f5 fbb0 	bl	cbc <__aeabi_fmul>
    b55c:	68f9      	ldr	r1, [r7, #12]
    b55e:	f7f5 f82b 	bl	5b8 <__aeabi_fadd>
    b562:	1c05      	adds	r5, r0, #0
	q3 += qDot4 * invSampleFreq;
    b564:	1c21      	adds	r1, r4, #0
    b566:	981a      	ldr	r0, [sp, #104]	; 0x68
    b568:	f7f5 fba8 	bl	cbc <__aeabi_fmul>
    b56c:	6939      	ldr	r1, [r7, #16]
    b56e:	f7f5 f823 	bl	5b8 <__aeabi_fadd>
    b572:	9005      	str	r0, [sp, #20]
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    b574:	9a04      	ldr	r2, [sp, #16]
    b576:	1c11      	adds	r1, r2, #0
    b578:	1c10      	adds	r0, r2, #0
    b57a:	f7f5 fb9f 	bl	cbc <__aeabi_fmul>
    b57e:	1c04      	adds	r4, r0, #0
    b580:	1c31      	adds	r1, r6, #0
    b582:	1c30      	adds	r0, r6, #0
    b584:	f7f5 fb9a 	bl	cbc <__aeabi_fmul>
    b588:	1c01      	adds	r1, r0, #0
    b58a:	1c20      	adds	r0, r4, #0
    b58c:	f7f5 f814 	bl	5b8 <__aeabi_fadd>
    b590:	1c04      	adds	r4, r0, #0
    b592:	1c29      	adds	r1, r5, #0
    b594:	1c28      	adds	r0, r5, #0
    b596:	f7f5 fb91 	bl	cbc <__aeabi_fmul>
    b59a:	1c01      	adds	r1, r0, #0
    b59c:	1c20      	adds	r0, r4, #0
    b59e:	f7f5 f80b 	bl	5b8 <__aeabi_fadd>
    b5a2:	1c04      	adds	r4, r0, #0
    b5a4:	9b05      	ldr	r3, [sp, #20]
    b5a6:	1c19      	adds	r1, r3, #0
    b5a8:	1c18      	adds	r0, r3, #0
    b5aa:	f7f5 fb87 	bl	cbc <__aeabi_fmul>
    b5ae:	1c01      	adds	r1, r0, #0
    b5b0:	1c20      	adds	r0, r4, #0
    b5b2:	f7f5 f801 	bl	5b8 <__aeabi_fadd>
    b5b6:	f7ff f88b 	bl	a6d0 <_ZN8Madgwick7invSqrtEf>
    b5ba:	1c04      	adds	r4, r0, #0
	q0 *= recipNorm;
    b5bc:	1c01      	adds	r1, r0, #0
    b5be:	9804      	ldr	r0, [sp, #16]
    b5c0:	f7f5 fb7c 	bl	cbc <__aeabi_fmul>
    b5c4:	6078      	str	r0, [r7, #4]
	q1 *= recipNorm;
    b5c6:	1c21      	adds	r1, r4, #0
    b5c8:	1c30      	adds	r0, r6, #0
    b5ca:	f7f5 fb77 	bl	cbc <__aeabi_fmul>
    b5ce:	60b8      	str	r0, [r7, #8]
	q2 *= recipNorm;
    b5d0:	1c21      	adds	r1, r4, #0
    b5d2:	1c28      	adds	r0, r5, #0
    b5d4:	f7f5 fb72 	bl	cbc <__aeabi_fmul>
    b5d8:	60f8      	str	r0, [r7, #12]
	q3 *= recipNorm;
    b5da:	1c21      	adds	r1, r4, #0
    b5dc:	9805      	ldr	r0, [sp, #20]
    b5de:	f7f5 fb6d 	bl	cbc <__aeabi_fmul>
    b5e2:	6138      	str	r0, [r7, #16]
	anglesComputed = 0;
    b5e4:	2200      	movs	r2, #0
    b5e6:	2324      	movs	r3, #36	; 0x24
    b5e8:	54fa      	strb	r2, [r7, r3]
}
    b5ea:	b023      	add	sp, #140	; 0x8c
    b5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		updateIMU(gx, gy, gz, ax, ay, az);
    b5ee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    b5f0:	9302      	str	r3, [sp, #8]
    b5f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    b5f4:	9301      	str	r3, [sp, #4]
    b5f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    b5f8:	9300      	str	r3, [sp, #0]
    b5fa:	1c33      	adds	r3, r6, #0
    b5fc:	1c2a      	adds	r2, r5, #0
    b5fe:	1c21      	adds	r1, r4, #0
    b600:	0038      	movs	r0, r7
    b602:	f7ff f895 	bl	a730 <_ZN8Madgwick9updateIMUEffffff>
		return;
    b606:	e7f0      	b.n	b5ea <_ZN8Madgwick6updateEfffffffff+0x98a>
	...

0000b610 <_ZN8Madgwick13computeAnglesEv>:

//-------------------------------------------------------------------------------------------

void Madgwick::computeAngles()
{
    b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b612:	0004      	movs	r4, r0
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
    b614:	6886      	ldr	r6, [r0, #8]
    b616:	68c5      	ldr	r5, [r0, #12]
    b618:	1c31      	adds	r1, r6, #0
    b61a:	1c30      	adds	r0, r6, #0
    b61c:	f7f5 fb4e 	bl	cbc <__aeabi_fmul>
    b620:	1c01      	adds	r1, r0, #0
    b622:	20fc      	movs	r0, #252	; 0xfc
    b624:	0580      	lsls	r0, r0, #22
    b626:	f7f5 fc69 	bl	efc <__aeabi_fsub>
    b62a:	1c07      	adds	r7, r0, #0
    b62c:	1c29      	adds	r1, r5, #0
    b62e:	1c28      	adds	r0, r5, #0
    b630:	f7f5 fb44 	bl	cbc <__aeabi_fmul>
    b634:	1c01      	adds	r1, r0, #0
    b636:	1c38      	adds	r0, r7, #0
    b638:	f7f5 fc60 	bl	efc <__aeabi_fsub>
    b63c:	1c07      	adds	r7, r0, #0
    b63e:	6861      	ldr	r1, [r4, #4]
    b640:	1c30      	adds	r0, r6, #0
    b642:	f7f5 fb3b 	bl	cbc <__aeabi_fmul>
    b646:	1c06      	adds	r6, r0, #0
    b648:	6921      	ldr	r1, [r4, #16]
    b64a:	1c28      	adds	r0, r5, #0
    b64c:	f7f5 fb36 	bl	cbc <__aeabi_fmul>
    b650:	1c01      	adds	r1, r0, #0
    b652:	1c30      	adds	r0, r6, #0
    b654:	f7f4 ffb0 	bl	5b8 <__aeabi_fadd>
    b658:	1c39      	adds	r1, r7, #0
    b65a:	f001 fe6d 	bl	d338 <atan2f>
    b65e:	61a0      	str	r0, [r4, #24]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
    b660:	6921      	ldr	r1, [r4, #16]
    b662:	68a0      	ldr	r0, [r4, #8]
    b664:	f7f5 fb2a 	bl	cbc <__aeabi_fmul>
    b668:	1c05      	adds	r5, r0, #0
    b66a:	68e1      	ldr	r1, [r4, #12]
    b66c:	6860      	ldr	r0, [r4, #4]
    b66e:	f7f5 fb25 	bl	cbc <__aeabi_fmul>
    b672:	1c01      	adds	r1, r0, #0
    b674:	1c28      	adds	r0, r5, #0
    b676:	f7f5 fc41 	bl	efc <__aeabi_fsub>
    b67a:	21c0      	movs	r1, #192	; 0xc0
    b67c:	0609      	lsls	r1, r1, #24
    b67e:	f7f5 fb1d 	bl	cbc <__aeabi_fmul>
    b682:	f001 fe05 	bl	d290 <asinf>
    b686:	61e0      	str	r0, [r4, #28]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
    b688:	68e6      	ldr	r6, [r4, #12]
    b68a:	6925      	ldr	r5, [r4, #16]
    b68c:	1c31      	adds	r1, r6, #0
    b68e:	1c30      	adds	r0, r6, #0
    b690:	f7f5 fb14 	bl	cbc <__aeabi_fmul>
    b694:	1c01      	adds	r1, r0, #0
    b696:	20fc      	movs	r0, #252	; 0xfc
    b698:	0580      	lsls	r0, r0, #22
    b69a:	f7f5 fc2f 	bl	efc <__aeabi_fsub>
    b69e:	1c07      	adds	r7, r0, #0
    b6a0:	1c29      	adds	r1, r5, #0
    b6a2:	1c28      	adds	r0, r5, #0
    b6a4:	f7f5 fb0a 	bl	cbc <__aeabi_fmul>
    b6a8:	1c01      	adds	r1, r0, #0
    b6aa:	1c38      	adds	r0, r7, #0
    b6ac:	f7f5 fc26 	bl	efc <__aeabi_fsub>
    b6b0:	1c07      	adds	r7, r0, #0
    b6b2:	68a1      	ldr	r1, [r4, #8]
    b6b4:	1c30      	adds	r0, r6, #0
    b6b6:	f7f5 fb01 	bl	cbc <__aeabi_fmul>
    b6ba:	1c06      	adds	r6, r0, #0
    b6bc:	6861      	ldr	r1, [r4, #4]
    b6be:	1c28      	adds	r0, r5, #0
    b6c0:	f7f5 fafc 	bl	cbc <__aeabi_fmul>
    b6c4:	1c01      	adds	r1, r0, #0
    b6c6:	1c30      	adds	r0, r6, #0
    b6c8:	f7f4 ff76 	bl	5b8 <__aeabi_fadd>
    b6cc:	1c39      	adds	r1, r7, #0
    b6ce:	f001 fe33 	bl	d338 <atan2f>
    b6d2:	6220      	str	r0, [r4, #32]
	anglesComputed = 1;
    b6d4:	2201      	movs	r2, #1
    b6d6:	2324      	movs	r3, #36	; 0x24
    b6d8:	54e2      	strb	r2, [r4, r3]
}
    b6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b6dc:	0000      	movs	r0, r0
	...

0000b6e0 <uart1_getc>:

unsigned char uart1_getc(void)
{
	uint8_t ch;

	if (console_buffer.rx_read_idx != console_buffer.rx_write_idx)
    b6e0:	4a0e      	ldr	r2, [pc, #56]	; (b71c <uart1_getc+0x3c>)
    b6e2:	4b0f      	ldr	r3, [pc, #60]	; (b720 <uart1_getc+0x40>)
    b6e4:	5ad3      	ldrh	r3, [r2, r3]
    b6e6:	490f      	ldr	r1, [pc, #60]	; (b724 <uart1_getc+0x44>)
    b6e8:	5a52      	ldrh	r2, [r2, r1]
    b6ea:	b29b      	uxth	r3, r3
    b6ec:	4293      	cmp	r3, r2
    b6ee:	d012      	beq.n	b716 <uart1_getc+0x36>
	{
		if (console_buffer.rx_read_idx >= RX_BUFFER_SIZE)
    b6f0:	4b0b      	ldr	r3, [pc, #44]	; (b720 <uart1_getc+0x40>)
    b6f2:	4a0a      	ldr	r2, [pc, #40]	; (b71c <uart1_getc+0x3c>)
    b6f4:	5ad3      	ldrh	r3, [r2, r3]
    b6f6:	b29b      	uxth	r3, r3
    b6f8:	2b7f      	cmp	r3, #127	; 0x7f
    b6fa:	dd02      	ble.n	b702 <uart1_getc+0x22>
			console_buffer.rx_read_idx = 0;
    b6fc:	2100      	movs	r1, #0
    b6fe:	4b08      	ldr	r3, [pc, #32]	; (b720 <uart1_getc+0x40>)
    b700:	52d1      	strh	r1, [r2, r3]

		ch = console_buffer.rx_buffer[console_buffer.rx_read_idx++];
    b702:	4a06      	ldr	r2, [pc, #24]	; (b71c <uart1_getc+0x3c>)
    b704:	4806      	ldr	r0, [pc, #24]	; (b720 <uart1_getc+0x40>)
    b706:	5a13      	ldrh	r3, [r2, r0]
    b708:	b29b      	uxth	r3, r3
    b70a:	1c59      	adds	r1, r3, #1
    b70c:	b289      	uxth	r1, r1
    b70e:	5211      	strh	r1, [r2, r0]
    b710:	5cd0      	ldrb	r0, [r2, r3]
    b712:	b2c0      	uxtb	r0, r0
	else
		return 0;

	return ch;

}
    b714:	4770      	bx	lr
		return 0;
    b716:	2000      	movs	r0, #0
    b718:	e7fc      	b.n	b714 <uart1_getc+0x34>
    b71a:	46c0      	nop			; (mov r8, r8)
    b71c:	20001188 	.word	0x20001188
    b720:	00000486 	.word	0x00000486
    b724:	00000482 	.word	0x00000482
	...

0000b730 <uart1_putc>:
{
    b730:	b570      	push	{r4, r5, r6, lr}
    b732:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    b734:	f7f8 ff1c 	bl	4570 <cpu_irq_enter_critical>
	SercomUsart *const usart_hw = &(usart_console.hw->USART);
    b738:	4b1d      	ldr	r3, [pc, #116]	; (b7b0 <uart1_putc+0x80>)
    b73a:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    b73c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    b73e:	2b00      	cmp	r3, #0
    b740:	d1fc      	bne.n	b73c <uart1_putc+0xc>
	if (console_buffer.tx_write_idx >= TX_BUFFER_SIZE)
    b742:	2390      	movs	r3, #144	; 0x90
    b744:	00db      	lsls	r3, r3, #3
    b746:	491b      	ldr	r1, [pc, #108]	; (b7b4 <uart1_putc+0x84>)
    b748:	5acb      	ldrh	r3, [r1, r3]
    b74a:	b29b      	uxth	r3, r3
    b74c:	491a      	ldr	r1, [pc, #104]	; (b7b8 <uart1_putc+0x88>)
    b74e:	428b      	cmp	r3, r1
    b750:	dd04      	ble.n	b75c <uart1_putc+0x2c>
		console_buffer.tx_write_idx = 0;
    b752:	2000      	movs	r0, #0
    b754:	2390      	movs	r3, #144	; 0x90
    b756:	00db      	lsls	r3, r3, #3
    b758:	4916      	ldr	r1, [pc, #88]	; (b7b4 <uart1_putc+0x84>)
    b75a:	52c8      	strh	r0, [r1, r3]
	console_buffer.tx_buffer[console_buffer.tx_write_idx++] = d;
    b75c:	4b15      	ldr	r3, [pc, #84]	; (b7b4 <uart1_putc+0x84>)
    b75e:	2590      	movs	r5, #144	; 0x90
    b760:	00ed      	lsls	r5, r5, #3
    b762:	5b59      	ldrh	r1, [r3, r5]
    b764:	b289      	uxth	r1, r1
    b766:	1c48      	adds	r0, r1, #1
    b768:	b280      	uxth	r0, r0
    b76a:	5358      	strh	r0, [r3, r5]
    b76c:	185b      	adds	r3, r3, r1
    b76e:	3380      	adds	r3, #128	; 0x80
    b770:	701c      	strb	r4, [r3, #0]
	interrupt_status = usart_hw->INTENSET.reg;
    b772:	7d93      	ldrb	r3, [r2, #22]
	if (!(interrupt_status & SERCOM_USART_INTFLAG_DRE))
    b774:	07db      	lsls	r3, r3, #31
    b776:	d417      	bmi.n	b7a8 <uart1_putc+0x78>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    b778:	2301      	movs	r3, #1
    b77a:	7593      	strb	r3, [r2, #22]
		if (console_buffer.tx_read_idx >= TX_BUFFER_SIZE)
    b77c:	4b0f      	ldr	r3, [pc, #60]	; (b7bc <uart1_putc+0x8c>)
    b77e:	490d      	ldr	r1, [pc, #52]	; (b7b4 <uart1_putc+0x84>)
    b780:	5acb      	ldrh	r3, [r1, r3]
    b782:	b29b      	uxth	r3, r3
    b784:	490c      	ldr	r1, [pc, #48]	; (b7b8 <uart1_putc+0x88>)
    b786:	428b      	cmp	r3, r1
    b788:	dd03      	ble.n	b792 <uart1_putc+0x62>
			console_buffer.tx_read_idx = 0;
    b78a:	2000      	movs	r0, #0
    b78c:	4b0b      	ldr	r3, [pc, #44]	; (b7bc <uart1_putc+0x8c>)
    b78e:	4909      	ldr	r1, [pc, #36]	; (b7b4 <uart1_putc+0x84>)
    b790:	52c8      	strh	r0, [r1, r3]
		usart_hw->DATA.reg = console_buffer.tx_buffer[console_buffer.tx_read_idx++];
    b792:	4b08      	ldr	r3, [pc, #32]	; (b7b4 <uart1_putc+0x84>)
    b794:	4c09      	ldr	r4, [pc, #36]	; (b7bc <uart1_putc+0x8c>)
    b796:	5b19      	ldrh	r1, [r3, r4]
    b798:	b289      	uxth	r1, r1
    b79a:	1c48      	adds	r0, r1, #1
    b79c:	b280      	uxth	r0, r0
    b79e:	5318      	strh	r0, [r3, r4]
    b7a0:	185b      	adds	r3, r3, r1
    b7a2:	3380      	adds	r3, #128	; 0x80
    b7a4:	781b      	ldrb	r3, [r3, #0]
    b7a6:	8513      	strh	r3, [r2, #40]	; 0x28
	cpu_irq_leave_critical();
    b7a8:	f7f8 ff02 	bl	45b0 <cpu_irq_leave_critical>
}
    b7ac:	bd70      	pop	{r4, r5, r6, pc}
    b7ae:	46c0      	nop			; (mov r8, r8)
    b7b0:	20001614 	.word	0x20001614
    b7b4:	20001188 	.word	0x20001188
    b7b8:	000003ff 	.word	0x000003ff
    b7bc:	00000484 	.word	0x00000484

0000b7c0 <_Z23configure_usart_consolev>:
{
    b7c0:	b530      	push	{r4, r5, lr}
    b7c2:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    b7c4:	2380      	movs	r3, #128	; 0x80
    b7c6:	05db      	lsls	r3, r3, #23
    b7c8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    b7ca:	2300      	movs	r3, #0
    b7cc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    b7ce:	22ff      	movs	r2, #255	; 0xff
    b7d0:	4669      	mov	r1, sp
    b7d2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    b7d4:	2200      	movs	r2, #0
    b7d6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    b7d8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    b7da:	2101      	movs	r1, #1
    b7dc:	2024      	movs	r0, #36	; 0x24
    b7de:	466c      	mov	r4, sp
    b7e0:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    b7e2:	3001      	adds	r0, #1
    b7e4:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    b7e6:	3125      	adds	r1, #37	; 0x25
    b7e8:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    b7ea:	3101      	adds	r1, #1
    b7ec:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    b7ee:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    b7f0:	3105      	adds	r1, #5
    b7f2:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    b7f4:	3101      	adds	r1, #1
    b7f6:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    b7f8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    b7fa:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    b7fc:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    b7fe:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    b800:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    b802:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    b804:	2313      	movs	r3, #19
    b806:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    b808:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate = 115200;
    b80a:	23e1      	movs	r3, #225	; 0xe1
    b80c:	025b      	lsls	r3, r3, #9
    b80e:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    b810:	23c4      	movs	r3, #196	; 0xc4
    b812:	039b      	lsls	r3, r3, #14
    b814:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    b816:	2301      	movs	r3, #1
    b818:	425b      	negs	r3, r3
    b81a:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    b81c:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    b81e:	4b13      	ldr	r3, [pc, #76]	; (b86c <_Z23configure_usart_consolev+0xac>)
    b820:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    b822:	4b13      	ldr	r3, [pc, #76]	; (b870 <_Z23configure_usart_consolev+0xb0>)
    b824:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_console, EDBG_CDC_MODULE, &config_usart) != STATUS_OK)
    b826:	4d13      	ldr	r5, [pc, #76]	; (b874 <_Z23configure_usart_consolev+0xb4>)
    b828:	4c13      	ldr	r4, [pc, #76]	; (b878 <_Z23configure_usart_consolev+0xb8>)
    b82a:	466a      	mov	r2, sp
    b82c:	0029      	movs	r1, r5
    b82e:	0020      	movs	r0, r4
    b830:	f7f7 fd66 	bl	3300 <usart_init>
    b834:	2800      	cmp	r0, #0
    b836:	d1f8      	bne.n	b82a <_Z23configure_usart_consolev+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b838:	4b0f      	ldr	r3, [pc, #60]	; (b878 <_Z23configure_usart_consolev+0xb8>)
    b83a:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    b83c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    b83e:	2b00      	cmp	r3, #0
    b840:	d1fc      	bne.n	b83c <_Z23configure_usart_consolev+0x7c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b842:	6813      	ldr	r3, [r2, #0]
    b844:	2102      	movs	r1, #2
    b846:	430b      	orrs	r3, r1
    b848:	6013      	str	r3, [r2, #0]
	xdev_out(uart1_putc);
    b84a:	4a0c      	ldr	r2, [pc, #48]	; (b87c <_Z23configure_usart_consolev+0xbc>)
    b84c:	4b0c      	ldr	r3, [pc, #48]	; (b880 <_Z23configure_usart_consolev+0xc0>)
    b84e:	601a      	str	r2, [r3, #0]
	xdev_in(uart1_getc);
    b850:	4a0c      	ldr	r2, [pc, #48]	; (b884 <_Z23configure_usart_consolev+0xc4>)
    b852:	4b0d      	ldr	r3, [pc, #52]	; (b888 <_Z23configure_usart_consolev+0xc8>)
    b854:	601a      	str	r2, [r3, #0]
	SercomUsart *usart_hw = &(usart_console.hw->USART);
    b856:	4b08      	ldr	r3, [pc, #32]	; (b878 <_Z23configure_usart_consolev+0xb8>)
    b858:	681b      	ldr	r3, [r3, #0]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    b85a:	2204      	movs	r2, #4
    b85c:	759a      	strb	r2, [r3, #22]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b85e:	2280      	movs	r2, #128	; 0x80
    b860:	0112      	lsls	r2, r2, #4
    b862:	4b0a      	ldr	r3, [pc, #40]	; (b88c <_Z23configure_usart_consolev+0xcc>)
    b864:	601a      	str	r2, [r3, #0]
}
    b866:	b011      	add	sp, #68	; 0x44
    b868:	bd30      	pop	{r4, r5, pc}
    b86a:	46c0      	nop			; (mov r8, r8)
    b86c:	000a0003 	.word	0x000a0003
    b870:	000b0003 	.word	0x000b0003
    b874:	42001000 	.word	0x42001000
    b878:	20001614 	.word	0x20001614
    b87c:	0000b731 	.word	0x0000b731
    b880:	20000bdc 	.word	0x20000bdc
    b884:	0000b6e1 	.word	0x0000b6e1
    b888:	20000bd8 	.word	0x20000bd8
    b88c:	e000e100 	.word	0xe000e100

0000b890 <SERCOM2_Handler>:


void SERCOM2_Handler(void)
{
    b890:	b570      	push	{r4, r5, r6, lr}
	uint16_t interrupt_status;
	uint8_t d;

	CH_IRQ_PROLOGUE();
    b892:	4674      	mov	r4, lr

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw	= &(usart_console.hw->USART);
    b894:	4b25      	ldr	r3, [pc, #148]	; (b92c <SERCOM2_Handler+0x9c>)
    b896:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    b898:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    b89a:	2b00      	cmp	r3, #0
    b89c:	d1fc      	bne.n	b898 <SERCOM2_Handler+0x8>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(&usart_console);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    b89e:	7e13      	ldrb	r3, [r2, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    b8a0:	7d91      	ldrb	r1, [r2, #22]
    b8a2:	400b      	ands	r3, r1

	// check for transmit data register ready
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE)
    b8a4:	07d9      	lsls	r1, r3, #31
    b8a6:	d51e      	bpl.n	b8e6 <SERCOM2_Handler+0x56>
	{
		// if no more bytes to send, clear interrupt enable
		if (console_buffer.tx_write_idx == console_buffer.tx_read_idx)
    b8a8:	4821      	ldr	r0, [pc, #132]	; (b930 <SERCOM2_Handler+0xa0>)
    b8aa:	2190      	movs	r1, #144	; 0x90
    b8ac:	00c9      	lsls	r1, r1, #3
    b8ae:	5a41      	ldrh	r1, [r0, r1]
    b8b0:	4d20      	ldr	r5, [pc, #128]	; (b934 <SERCOM2_Handler+0xa4>)
    b8b2:	5b40      	ldrh	r0, [r0, r5]
    b8b4:	b289      	uxth	r1, r1
    b8b6:	4281      	cmp	r1, r0
    b8b8:	d034      	beq.n	b924 <SERCOM2_Handler+0x94>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
		}
		else
		{
			// more to send, get next byte from byffer
			if (console_buffer.tx_read_idx >= TX_BUFFER_SIZE)
    b8ba:	491e      	ldr	r1, [pc, #120]	; (b934 <SERCOM2_Handler+0xa4>)
    b8bc:	481c      	ldr	r0, [pc, #112]	; (b930 <SERCOM2_Handler+0xa0>)
    b8be:	5a41      	ldrh	r1, [r0, r1]
    b8c0:	b289      	uxth	r1, r1
    b8c2:	481d      	ldr	r0, [pc, #116]	; (b938 <SERCOM2_Handler+0xa8>)
    b8c4:	4281      	cmp	r1, r0
    b8c6:	dd03      	ble.n	b8d0 <SERCOM2_Handler+0x40>
				console_buffer.tx_read_idx = 0;
    b8c8:	2500      	movs	r5, #0
    b8ca:	491a      	ldr	r1, [pc, #104]	; (b934 <SERCOM2_Handler+0xa4>)
    b8cc:	4818      	ldr	r0, [pc, #96]	; (b930 <SERCOM2_Handler+0xa0>)
    b8ce:	5245      	strh	r5, [r0, r1]
			d = console_buffer.tx_buffer[console_buffer.tx_read_idx++];
    b8d0:	4917      	ldr	r1, [pc, #92]	; (b930 <SERCOM2_Handler+0xa0>)
    b8d2:	4e18      	ldr	r6, [pc, #96]	; (b934 <SERCOM2_Handler+0xa4>)
    b8d4:	5b88      	ldrh	r0, [r1, r6]
    b8d6:	b280      	uxth	r0, r0
    b8d8:	1c45      	adds	r5, r0, #1
    b8da:	b2ad      	uxth	r5, r5
    b8dc:	538d      	strh	r5, [r1, r6]
    b8de:	1809      	adds	r1, r1, r0
    b8e0:	3180      	adds	r1, #128	; 0x80
    b8e2:	7809      	ldrb	r1, [r1, #0]

			usart_hw->DATA.reg = d;
    b8e4:	8511      	strh	r1, [r2, #40]	; 0x28
		}
	}

	// check for receive characters
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC)
    b8e6:	075b      	lsls	r3, r3, #29
    b8e8:	d518      	bpl.n	b91c <SERCOM2_Handler+0x8c>
	{
		if (console_buffer.rx_write_idx >= RX_BUFFER_SIZE)
    b8ea:	4b14      	ldr	r3, [pc, #80]	; (b93c <SERCOM2_Handler+0xac>)
    b8ec:	4910      	ldr	r1, [pc, #64]	; (b930 <SERCOM2_Handler+0xa0>)
    b8ee:	5acb      	ldrh	r3, [r1, r3]
    b8f0:	b29b      	uxth	r3, r3
    b8f2:	2b7f      	cmp	r3, #127	; 0x7f
    b8f4:	dd02      	ble.n	b8fc <SERCOM2_Handler+0x6c>
			console_buffer.rx_write_idx = 0;
    b8f6:	2000      	movs	r0, #0
    b8f8:	4b10      	ldr	r3, [pc, #64]	; (b93c <SERCOM2_Handler+0xac>)
    b8fa:	52c8      	strh	r0, [r1, r3]

		console_buffer.rx_buffer[console_buffer.rx_write_idx++] = usart_hw->DATA.reg;
    b8fc:	490c      	ldr	r1, [pc, #48]	; (b930 <SERCOM2_Handler+0xa0>)
    b8fe:	4d0f      	ldr	r5, [pc, #60]	; (b93c <SERCOM2_Handler+0xac>)
    b900:	5b4b      	ldrh	r3, [r1, r5]
    b902:	b29b      	uxth	r3, r3
    b904:	1c58      	adds	r0, r3, #1
    b906:	b280      	uxth	r0, r0
    b908:	5348      	strh	r0, [r1, r5]
    b90a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    b90c:	b2d2      	uxtb	r2, r2
    b90e:	54ca      	strb	r2, [r1, r3]
  __ASM volatile ("cpsid i" : : : "memory");
    b910:	b672      	cpsid	i

		chSysLockFromISR();
		chEvtSignalI(&nil.threads[3], 1);
    b912:	2101      	movs	r1, #1
    b914:	480a      	ldr	r0, [pc, #40]	; (b940 <SERCOM2_Handler+0xb0>)
    b916:	f7f7 facb 	bl	2eb0 <chEvtSignalI>
  __ASM volatile ("cpsie i" : : : "memory");
    b91a:	b662      	cpsie	i
		chSysUnlockFromISR();
	}

	CH_IRQ_EPILOGUE();
    b91c:	0020      	movs	r0, r4
    b91e:	f7f7 fb07 	bl	2f30 <_port_irq_epilogue>
}
    b922:	bd70      	pop	{r4, r5, r6, pc}
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    b924:	2101      	movs	r1, #1
    b926:	7511      	strb	r1, [r2, #20]
    b928:	e7dd      	b.n	b8e6 <SERCOM2_Handler+0x56>
    b92a:	46c0      	nop			; (mov r8, r8)
    b92c:	20001614 	.word	0x20001614
    b930:	20001188 	.word	0x20001188
    b934:	00000484 	.word	0x00000484
    b938:	000003ff 	.word	0x000003ff
    b93c:	00000482 	.word	0x00000482
    b940:	20000ac8 	.word	0x20000ac8
	...

0000b950 <_Z13consoleCharRxc>:
extern bool alarm;

extern void uart2_putc(uint8_t);

void consoleCharRx(char temp)
{
    b950:	b5f0      	push	{r4, r5, r6, r7, lr}
    b952:	46de      	mov	lr, fp
    b954:	4657      	mov	r7, sl
    b956:	464e      	mov	r6, r9
    b958:	4645      	mov	r5, r8
    b95a:	b5e0      	push	{r5, r6, r7, lr}
    b95c:	b093      	sub	sp, #76	; 0x4c
	UINT s1, s2;
	char *ptr;

	//xprintf("console ch %d\n", temp);

	if (temp == '\r')
    b95e:	280d      	cmp	r0, #13
    b960:	d00f      	beq.n	b982 <_Z13consoleCharRxc+0x32>
			//
			//			Serial2.write((byte)0x0); // this wakes the GPS
		}
		lineIdx = 0;
	}
	else if (lineIdx < LINE_LEN)
    b962:	4bd1      	ldr	r3, [pc, #836]	; (bca8 <_Z13consoleCharRxc+0x358>)
    b964:	881b      	ldrh	r3, [r3, #0]
    b966:	2b7f      	cmp	r3, #127	; 0x7f
    b968:	dc04      	bgt.n	b974 <_Z13consoleCharRxc+0x24>
	{
		line[lineIdx++] = temp;
    b96a:	1c59      	adds	r1, r3, #1
    b96c:	4ace      	ldr	r2, [pc, #824]	; (bca8 <_Z13consoleCharRxc+0x358>)
    b96e:	8011      	strh	r1, [r2, #0]
    b970:	4ace      	ldr	r2, [pc, #824]	; (bcac <_Z13consoleCharRxc+0x35c>)
    b972:	54d0      	strb	r0, [r2, r3]
	}

}
    b974:	b013      	add	sp, #76	; 0x4c
    b976:	bc3c      	pop	{r2, r3, r4, r5}
    b978:	4690      	mov	r8, r2
    b97a:	4699      	mov	r9, r3
    b97c:	46a2      	mov	sl, r4
    b97e:	46ab      	mov	fp, r5
    b980:	bdf0      	pop	{r4, r5, r6, r7, pc}
		line[lineIdx] = 0;
    b982:	4cca      	ldr	r4, [pc, #808]	; (bcac <_Z13consoleCharRxc+0x35c>)
    b984:	4bc8      	ldr	r3, [pc, #800]	; (bca8 <_Z13consoleCharRxc+0x358>)
    b986:	8819      	ldrh	r1, [r3, #0]
    b988:	2200      	movs	r2, #0
    b98a:	5462      	strb	r2, [r4, r1]
		lineIdx = 0;
    b98c:	801a      	strh	r2, [r3, #0]
		xprintf("\nline : %s\n", line);
    b98e:	0021      	movs	r1, r4
    b990:	48c7      	ldr	r0, [pc, #796]	; (bcb0 <_Z13consoleCharRxc+0x360>)
    b992:	f7f9 fabd 	bl	4f10 <xprintf>
		if (strncmp("dir", line, 3) == 0)
    b996:	2203      	movs	r2, #3
    b998:	0021      	movs	r1, r4
    b99a:	48c6      	ldr	r0, [pc, #792]	; (bcb4 <_Z13consoleCharRxc+0x364>)
    b99c:	f002 f912 	bl	dbc4 <strncmp>
    b9a0:	2800      	cmp	r0, #0
    b9a2:	d000      	beq.n	b9a6 <_Z13consoleCharRxc+0x56>
    b9a4:	e085      	b.n	bab2 <_Z13consoleCharRxc+0x162>
			while (*ptr == ' ') ptr++;
    b9a6:	4bc1      	ldr	r3, [pc, #772]	; (bcac <_Z13consoleCharRxc+0x35c>)
    b9a8:	78db      	ldrb	r3, [r3, #3]
    b9aa:	2b20      	cmp	r3, #32
    b9ac:	d113      	bne.n	b9d6 <_Z13consoleCharRxc+0x86>
    b9ae:	49bf      	ldr	r1, [pc, #764]	; (bcac <_Z13consoleCharRxc+0x35c>)
    b9b0:	3103      	adds	r1, #3
    b9b2:	3101      	adds	r1, #1
    b9b4:	780b      	ldrb	r3, [r1, #0]
    b9b6:	2b20      	cmp	r3, #32
    b9b8:	d0fb      	beq.n	b9b2 <_Z13consoleCharRxc+0x62>
			res = f_opendir(&Dir, ptr);
    b9ba:	48bf      	ldr	r0, [pc, #764]	; (bcb8 <_Z13consoleCharRxc+0x368>)
    b9bc:	f7fe f918 	bl	9bf0 <f_opendir>
			if (res)
    b9c0:	2800      	cmp	r0, #0
    b9c2:	d10b      	bne.n	b9dc <_Z13consoleCharRxc+0x8c>
			p1 = s1 = s2 = 0;
    b9c4:	2300      	movs	r3, #0
    b9c6:	9311      	str	r3, [sp, #68]	; 0x44
    b9c8:	4699      	mov	r9, r3
    b9ca:	4698      	mov	r8, r3
						(Finfo.fdate >> 9) + 1980,
    b9cc:	4cbb      	ldr	r4, [pc, #748]	; (bcbc <_Z13consoleCharRxc+0x36c>)
						Finfo.fsize, Finfo.fname);
    b9ce:	0025      	movs	r5, r4
    b9d0:	3516      	adds	r5, #22
    b9d2:	950b      	str	r5, [sp, #44]	; 0x2c
    b9d4:	e03d      	b.n	ba52 <_Z13consoleCharRxc+0x102>
			while (*ptr == ' ') ptr++;
    b9d6:	49b5      	ldr	r1, [pc, #724]	; (bcac <_Z13consoleCharRxc+0x35c>)
    b9d8:	3103      	adds	r1, #3
    b9da:	e7ee      	b.n	b9ba <_Z13consoleCharRxc+0x6a>
				put_rc(res);
    b9dc:	f001 fbb0 	bl	d140 <_Z6put_rc7FRESULT>
    b9e0:	e7c8      	b.n	b974 <_Z13consoleCharRxc+0x24>
					s1++;
    b9e2:	2301      	movs	r3, #1
    b9e4:	469c      	mov	ip, r3
    b9e6:	44e0      	add	r8, ip
					p1 += Finfo.fsize;
    b9e8:	4bb4      	ldr	r3, [pc, #720]	; (bcbc <_Z13consoleCharRxc+0x36c>)
    b9ea:	681b      	ldr	r3, [r3, #0]
    b9ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b9ee:	4694      	mov	ip, r2
    b9f0:	4463      	add	r3, ip
    b9f2:	9311      	str	r3, [sp, #68]	; 0x44
				xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n",
    b9f4:	212d      	movs	r1, #45	; 0x2d
    b9f6:	2252      	movs	r2, #82	; 0x52
    b9f8:	07c3      	lsls	r3, r0, #31
    b9fa:	d400      	bmi.n	b9fe <_Z13consoleCharRxc+0xae>
    b9fc:	3a25      	subs	r2, #37	; 0x25
    b9fe:	2348      	movs	r3, #72	; 0x48
    ba00:	0785      	lsls	r5, r0, #30
    ba02:	d400      	bmi.n	ba06 <_Z13consoleCharRxc+0xb6>
    ba04:	3b1b      	subs	r3, #27
    ba06:	2653      	movs	r6, #83	; 0x53
    ba08:	0745      	lsls	r5, r0, #29
    ba0a:	d400      	bmi.n	ba0e <_Z13consoleCharRxc+0xbe>
    ba0c:	3e26      	subs	r6, #38	; 0x26
    ba0e:	2741      	movs	r7, #65	; 0x41
    ba10:	0680      	lsls	r0, r0, #26
    ba12:	d400      	bmi.n	ba16 <_Z13consoleCharRxc+0xc6>
    ba14:	3f14      	subs	r7, #20
						(Finfo.fdate >> 9) + 1980,
    ba16:	88a0      	ldrh	r0, [r4, #4]
						(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
    ba18:	88e5      	ldrh	r5, [r4, #6]
    ba1a:	46aa      	mov	sl, r5
						Finfo.fsize, Finfo.fname);
    ba1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ba1e:	9508      	str	r5, [sp, #32]
    ba20:	6825      	ldr	r5, [r4, #0]
    ba22:	9507      	str	r5, [sp, #28]
				xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n",
    ba24:	4655      	mov	r5, sl
    ba26:	056d      	lsls	r5, r5, #21
    ba28:	0ead      	lsrs	r5, r5, #26
						Finfo.fsize, Finfo.fname);
    ba2a:	9506      	str	r5, [sp, #24]
				xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n",
    ba2c:	4655      	mov	r5, sl
    ba2e:	12ed      	asrs	r5, r5, #11
						Finfo.fsize, Finfo.fname);
    ba30:	9505      	str	r5, [sp, #20]
				xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n",
    ba32:	251f      	movs	r5, #31
    ba34:	4005      	ands	r5, r0
    ba36:	9504      	str	r5, [sp, #16]
    ba38:	05c5      	lsls	r5, r0, #23
    ba3a:	0f2d      	lsrs	r5, r5, #28
						Finfo.fsize, Finfo.fname);
    ba3c:	9503      	str	r5, [sp, #12]
						(Finfo.fdate >> 9) + 1980,
    ba3e:	1240      	asrs	r0, r0, #9
				xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n",
    ba40:	4d9f      	ldr	r5, [pc, #636]	; (bcc0 <_Z13consoleCharRxc+0x370>)
    ba42:	46ac      	mov	ip, r5
    ba44:	4460      	add	r0, ip
						Finfo.fsize, Finfo.fname);
    ba46:	9002      	str	r0, [sp, #8]
    ba48:	9701      	str	r7, [sp, #4]
    ba4a:	9600      	str	r6, [sp, #0]
    ba4c:	489d      	ldr	r0, [pc, #628]	; (bcc4 <_Z13consoleCharRxc+0x374>)
    ba4e:	f7f9 fa5f 	bl	4f10 <xprintf>
				res = f_readdir(&Dir, &Finfo);
    ba52:	499a      	ldr	r1, [pc, #616]	; (bcbc <_Z13consoleCharRxc+0x36c>)
    ba54:	4898      	ldr	r0, [pc, #608]	; (bcb8 <_Z13consoleCharRxc+0x368>)
    ba56:	f7fe f90b 	bl	9c70 <f_readdir>
				if ((res != FR_OK) || !Finfo.fname[0])
    ba5a:	2800      	cmp	r0, #0
    ba5c:	d10c      	bne.n	ba78 <_Z13consoleCharRxc+0x128>
    ba5e:	4b97      	ldr	r3, [pc, #604]	; (bcbc <_Z13consoleCharRxc+0x36c>)
    ba60:	7d9b      	ldrb	r3, [r3, #22]
    ba62:	2b00      	cmp	r3, #0
    ba64:	d008      	beq.n	ba78 <_Z13consoleCharRxc+0x128>
				if (Finfo.fattrib & AM_DIR)
    ba66:	4b95      	ldr	r3, [pc, #596]	; (bcbc <_Z13consoleCharRxc+0x36c>)
    ba68:	7a18      	ldrb	r0, [r3, #8]
    ba6a:	06c3      	lsls	r3, r0, #27
    ba6c:	d5b9      	bpl.n	b9e2 <_Z13consoleCharRxc+0x92>
					s2++;
    ba6e:	2301      	movs	r3, #1
    ba70:	469c      	mov	ip, r3
    ba72:	44e1      	add	r9, ip
				xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n",
    ba74:	2144      	movs	r1, #68	; 0x44
    ba76:	e7be      	b.n	b9f6 <_Z13consoleCharRxc+0xa6>
			xprintf("%4u File(s),%10lu bytes total\n%4u Dir(s) ", s1, p1, s2);
    ba78:	464b      	mov	r3, r9
    ba7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ba7c:	4641      	mov	r1, r8
    ba7e:	4892      	ldr	r0, [pc, #584]	; (bcc8 <_Z13consoleCharRxc+0x378>)
    ba80:	f7f9 fa46 	bl	4f10 <xprintf>
			res = f_getfree("0", (DWORD*) &p1, &fs);
    ba84:	4a91      	ldr	r2, [pc, #580]	; (bccc <_Z13consoleCharRxc+0x37c>)
    ba86:	a911      	add	r1, sp, #68	; 0x44
    ba88:	4891      	ldr	r0, [pc, #580]	; (bcd0 <_Z13consoleCharRxc+0x380>)
    ba8a:	f7fe f919 	bl	9cc0 <f_getfree>
			if (res == FR_OK)
    ba8e:	2800      	cmp	r0, #0
    ba90:	d10c      	bne.n	baac <_Z13consoleCharRxc+0x15c>
				xprintf(", %10lu bytes free\n", p1 * fs->csize * 512);
    ba92:	4b8e      	ldr	r3, [pc, #568]	; (bccc <_Z13consoleCharRxc+0x37c>)
    ba94:	681b      	ldr	r3, [r3, #0]
    ba96:	8959      	ldrh	r1, [r3, #10]
    ba98:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ba9a:	4359      	muls	r1, r3
    ba9c:	0249      	lsls	r1, r1, #9
    ba9e:	488d      	ldr	r0, [pc, #564]	; (bcd4 <_Z13consoleCharRxc+0x384>)
    baa0:	f7f9 fa36 	bl	4f10 <xprintf>
		lineIdx = 0;
    baa4:	2200      	movs	r2, #0
    baa6:	4b80      	ldr	r3, [pc, #512]	; (bca8 <_Z13consoleCharRxc+0x358>)
    baa8:	801a      	strh	r2, [r3, #0]
    baaa:	e763      	b.n	b974 <_Z13consoleCharRxc+0x24>
				put_rc(res);
    baac:	f001 fb48 	bl	d140 <_Z6put_rc7FRESULT>
    bab0:	e7f8      	b.n	baa4 <_Z13consoleCharRxc+0x154>
		else if (strncmp("buff", line, 4) == 0)
    bab2:	2204      	movs	r2, #4
    bab4:	497d      	ldr	r1, [pc, #500]	; (bcac <_Z13consoleCharRxc+0x35c>)
    bab6:	4888      	ldr	r0, [pc, #544]	; (bcd8 <_Z13consoleCharRxc+0x388>)
    bab8:	f002 f884 	bl	dbc4 <strncmp>
    babc:	2800      	cmp	r0, #0
    babe:	d012      	beq.n	bae6 <_Z13consoleCharRxc+0x196>
		else if (strncmp("count", line, 5) == 0)
    bac0:	2205      	movs	r2, #5
    bac2:	497a      	ldr	r1, [pc, #488]	; (bcac <_Z13consoleCharRxc+0x35c>)
    bac4:	4885      	ldr	r0, [pc, #532]	; (bcdc <_Z13consoleCharRxc+0x38c>)
    bac6:	f002 f87d 	bl	dbc4 <strncmp>
    baca:	2800      	cmp	r0, #0
    bacc:	d113      	bne.n	baf6 <_Z13consoleCharRxc+0x1a6>
    bace:	4c84      	ldr	r4, [pc, #528]	; (bce0 <_Z13consoleCharRxc+0x390>)
    bad0:	0026      	movs	r6, r4
    bad2:	3610      	adds	r6, #16
				xprintf("count %d\n", writeTypeCount[i]);
    bad4:	4d83      	ldr	r5, [pc, #524]	; (bce4 <_Z13consoleCharRxc+0x394>)
    bad6:	8821      	ldrh	r1, [r4, #0]
    bad8:	0028      	movs	r0, r5
    bada:	f7f9 fa19 	bl	4f10 <xprintf>
    bade:	3402      	adds	r4, #2
			for (int i=0;i<8;i++)
    bae0:	42a6      	cmp	r6, r4
    bae2:	d1f8      	bne.n	bad6 <_Z13consoleCharRxc+0x186>
    bae4:	e7de      	b.n	baa4 <_Z13consoleCharRxc+0x154>
			xprintf("Buffer Read %d Write %d\n", fileBufferReadIdx, fileBufferWriteIdx);
    bae6:	4b80      	ldr	r3, [pc, #512]	; (bce8 <_Z13consoleCharRxc+0x398>)
    bae8:	6819      	ldr	r1, [r3, #0]
    baea:	4b80      	ldr	r3, [pc, #512]	; (bcec <_Z13consoleCharRxc+0x39c>)
    baec:	681a      	ldr	r2, [r3, #0]
    baee:	4880      	ldr	r0, [pc, #512]	; (bcf0 <_Z13consoleCharRxc+0x3a0>)
    baf0:	f7f9 fa0e 	bl	4f10 <xprintf>
    baf4:	e7d6      	b.n	baa4 <_Z13consoleCharRxc+0x154>
		else if (strncmp("flush", line, 5) == 0)
    baf6:	2205      	movs	r2, #5
    baf8:	496c      	ldr	r1, [pc, #432]	; (bcac <_Z13consoleCharRxc+0x35c>)
    bafa:	487e      	ldr	r0, [pc, #504]	; (bcf4 <_Z13consoleCharRxc+0x3a4>)
    bafc:	f002 f862 	bl	dbc4 <strncmp>
    bb00:	2800      	cmp	r0, #0
    bb02:	d115      	bne.n	bb30 <_Z13consoleCharRxc+0x1e0>
			while (writing)
    bb04:	4b7c      	ldr	r3, [pc, #496]	; (bcf8 <_Z13consoleCharRxc+0x3a8>)
    bb06:	781b      	ldrb	r3, [r3, #0]
    bb08:	2b00      	cmp	r3, #0
    bb0a:	d008      	beq.n	bb1e <_Z13consoleCharRxc+0x1ce>
				chThdSleepMilliseconds(1000);
    bb0c:	25fa      	movs	r5, #250	; 0xfa
    bb0e:	00ad      	lsls	r5, r5, #2
			while (writing)
    bb10:	4c79      	ldr	r4, [pc, #484]	; (bcf8 <_Z13consoleCharRxc+0x3a8>)
				chThdSleepMilliseconds(1000);
    bb12:	0028      	movs	r0, r5
    bb14:	f7f7 f9c4 	bl	2ea0 <chThdSleep>
			while (writing)
    bb18:	7823      	ldrb	r3, [r4, #0]
    bb1a:	2b00      	cmp	r3, #0
    bb1c:	d1f9      	bne.n	bb12 <_Z13consoleCharRxc+0x1c2>
			xprintf("sync...\n");
    bb1e:	4877      	ldr	r0, [pc, #476]	; (bcfc <_Z13consoleCharRxc+0x3ac>)
    bb20:	f7f9 f9f6 	bl	4f10 <xprintf>
			put_rc(f_sync(&loggingFile));
    bb24:	4876      	ldr	r0, [pc, #472]	; (bd00 <_Z13consoleCharRxc+0x3b0>)
    bb26:	f7fd fffb 	bl	9b20 <f_sync>
    bb2a:	f001 fb09 	bl	d140 <_Z6put_rc7FRESULT>
    bb2e:	e7b9      	b.n	baa4 <_Z13consoleCharRxc+0x154>
		else if (strncmp("thread", line, 5) == 0)
    bb30:	2205      	movs	r2, #5
    bb32:	495e      	ldr	r1, [pc, #376]	; (bcac <_Z13consoleCharRxc+0x35c>)
    bb34:	4873      	ldr	r0, [pc, #460]	; (bd04 <_Z13consoleCharRxc+0x3b4>)
    bb36:	f002 f845 	bl	dbc4 <strncmp>
    bb3a:	2800      	cmp	r0, #0
    bb3c:	d114      	bne.n	bb68 <_Z13consoleCharRxc+0x218>
    bb3e:	4c72      	ldr	r4, [pc, #456]	; (bd08 <_Z13consoleCharRxc+0x3b8>)
    bb40:	4d72      	ldr	r5, [pc, #456]	; (bd0c <_Z13consoleCharRxc+0x3bc>)
    bb42:	0027      	movs	r7, r4
    bb44:	378c      	adds	r7, #140	; 0x8c
				xprintf("thread %-8s : state %d sp 0x%08lx base 0x%08lx end 0x%08lx used %ld\n", nil_thd_configs[i].namep, nil.threads[i].state,
    bb46:	692b      	ldr	r3, [r5, #16]
						nil_thd_configs[i].wend,
    bb48:	6860      	ldr	r0, [r4, #4]
				xprintf("thread %-8s : state %d sp 0x%08lx base 0x%08lx end 0x%08lx used %ld\n", nil_thd_configs[i].namep, nil.threads[i].state,
    bb4a:	7d2a      	ldrb	r2, [r5, #20]
						(long)nil_thd_configs[i].wend - (long)nil.threads[i].ctx.sp) ;
    bb4c:	68a1      	ldr	r1, [r4, #8]
				xprintf("thread %-8s : state %d sp 0x%08lx base 0x%08lx end 0x%08lx used %ld\n", nil_thd_configs[i].namep, nil.threads[i].state,
    bb4e:	1ac6      	subs	r6, r0, r3
						(long)nil_thd_configs[i].wend - (long)nil.threads[i].ctx.sp) ;
    bb50:	9602      	str	r6, [sp, #8]
    bb52:	9001      	str	r0, [sp, #4]
    bb54:	6820      	ldr	r0, [r4, #0]
    bb56:	9000      	str	r0, [sp, #0]
    bb58:	486d      	ldr	r0, [pc, #436]	; (bd10 <_Z13consoleCharRxc+0x3c0>)
    bb5a:	f7f9 f9d9 	bl	4f10 <xprintf>
    bb5e:	3414      	adds	r4, #20
    bb60:	3518      	adds	r5, #24
			for(int i=0;i<CH_CFG_NUM_THREADS;i++)
    bb62:	42bc      	cmp	r4, r7
    bb64:	d1ef      	bne.n	bb46 <_Z13consoleCharRxc+0x1f6>
    bb66:	e79d      	b.n	baa4 <_Z13consoleCharRxc+0x154>
		else if (strncmp("time", line, 4) == 0)
    bb68:	2204      	movs	r2, #4
    bb6a:	4950      	ldr	r1, [pc, #320]	; (bcac <_Z13consoleCharRxc+0x35c>)
    bb6c:	4869      	ldr	r0, [pc, #420]	; (bd14 <_Z13consoleCharRxc+0x3c4>)
    bb6e:	f002 f829 	bl	dbc4 <strncmp>
    bb72:	2800      	cmp	r0, #0
    bb74:	d000      	beq.n	bb78 <_Z13consoleCharRxc+0x228>
    bb76:	e08b      	b.n	bc90 <_Z13consoleCharRxc+0x340>
			while (*ptr == ' ') ptr++;
    bb78:	4b4c      	ldr	r3, [pc, #304]	; (bcac <_Z13consoleCharRxc+0x35c>)
    bb7a:	791b      	ldrb	r3, [r3, #4]
    bb7c:	2b20      	cmp	r3, #32
    bb7e:	d14a      	bne.n	bc16 <_Z13consoleCharRxc+0x2c6>
    bb80:	4c4a      	ldr	r4, [pc, #296]	; (bcac <_Z13consoleCharRxc+0x35c>)
    bb82:	3404      	adds	r4, #4
    bb84:	3401      	adds	r4, #1
    bb86:	7823      	ldrb	r3, [r4, #0]
    bb88:	2b20      	cmp	r3, #32
    bb8a:	d0fb      	beq.n	bb84 <_Z13consoleCharRxc+0x234>
			if (*ptr != '\0')
    bb8c:	2b00      	cmp	r3, #0
    bb8e:	d145      	bne.n	bc1c <_Z13consoleCharRxc+0x2cc>
			rtc_calendar_get_time(&rtc_instance, &rtc_time);
    bb90:	ac0e      	add	r4, sp, #56	; 0x38
    bb92:	4d61      	ldr	r5, [pc, #388]	; (bd18 <_Z13consoleCharRxc+0x3c8>)
    bb94:	0021      	movs	r1, r4
    bb96:	0028      	movs	r0, r5
    bb98:	f7f8 fc4a 	bl	4430 <rtc_calendar_get_time>
			xprintf("doy %d\n", date2doy(rtc_time.year, rtc_time.month, rtc_time.day));
    bb9c:	7922      	ldrb	r2, [r4, #4]
    bb9e:	7961      	ldrb	r1, [r4, #5]
    bba0:	88e0      	ldrh	r0, [r4, #6]
    bba2:	f001 f815 	bl	cbd0 <_Z8date2doyjjj>
    bba6:	0001      	movs	r1, r0
    bba8:	485c      	ldr	r0, [pc, #368]	; (bd1c <_Z13consoleCharRxc+0x3cc>)
    bbaa:	f7f9 f9b1 	bl	4f10 <xprintf>
			xprintf("rtc time %4d-%02d-%02d %02d:%02d:%02d\n", rtc_time.year, rtc_time.month, rtc_time.day,
    bbae:	7923      	ldrb	r3, [r4, #4]
    bbb0:	7962      	ldrb	r2, [r4, #5]
    bbb2:	88e1      	ldrh	r1, [r4, #6]
    bbb4:	7820      	ldrb	r0, [r4, #0]
    bbb6:	9002      	str	r0, [sp, #8]
    bbb8:	7860      	ldrb	r0, [r4, #1]
    bbba:	9001      	str	r0, [sp, #4]
    bbbc:	78a0      	ldrb	r0, [r4, #2]
    bbbe:	9000      	str	r0, [sp, #0]
					rtc_time.hour, rtc_time.minute, rtc_time.second);
    bbc0:	4857      	ldr	r0, [pc, #348]	; (bd20 <_Z13consoleCharRxc+0x3d0>)
    bbc2:	f7f9 f9a5 	bl	4f10 <xprintf>
			xprintf("gps time %d-%02d-%02d %02d:%02d:%02d\n", tgps.date.year(), tgps.date.month(), tgps.date.day(),
    bbc6:	4c57      	ldr	r4, [pc, #348]	; (bd24 <_Z13consoleCharRxc+0x3d4>)
    bbc8:	0020      	movs	r0, r4
    bbca:	f7fe fb31 	bl	a230 <_ZN11TinyGPSDate4yearEv>
    bbce:	900b      	str	r0, [sp, #44]	; 0x2c
    bbd0:	0020      	movs	r0, r4
    bbd2:	f7fe fb3d 	bl	a250 <_ZN11TinyGPSDate5monthEv>
    bbd6:	900c      	str	r0, [sp, #48]	; 0x30
    bbd8:	0020      	movs	r0, r4
    bbda:	f7fe fb49 	bl	a270 <_ZN11TinyGPSDate3dayEv>
    bbde:	900d      	str	r0, [sp, #52]	; 0x34
					tgps.time.hour(), tgps.time.minute(), tgps.time.second());
    bbe0:	3410      	adds	r4, #16
    bbe2:	0020      	movs	r0, r4
    bbe4:	f7fe fb54 	bl	a290 <_ZN11TinyGPSTime4hourEv>
    bbe8:	0006      	movs	r6, r0
    bbea:	0020      	movs	r0, r4
    bbec:	f7fe fb60 	bl	a2b0 <_ZN11TinyGPSTime6minuteEv>
    bbf0:	0007      	movs	r7, r0
    bbf2:	0020      	movs	r0, r4
    bbf4:	f7fe fb6c 	bl	a2d0 <_ZN11TinyGPSTime6secondEv>
			xprintf("gps time %d-%02d-%02d %02d:%02d:%02d\n", tgps.date.year(), tgps.date.month(), tgps.date.day(),
    bbf8:	9002      	str	r0, [sp, #8]
    bbfa:	9701      	str	r7, [sp, #4]
    bbfc:	9600      	str	r6, [sp, #0]
					tgps.time.hour(), tgps.time.minute(), tgps.time.second());
    bbfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bc00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bc02:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bc04:	4848      	ldr	r0, [pc, #288]	; (bd28 <_Z13consoleCharRxc+0x3d8>)
    bc06:	f7f9 f983 	bl	4f10 <xprintf>
			rtc_calendar_frequency_correction(&rtc_instance, -90);
    bc0a:	215a      	movs	r1, #90	; 0x5a
    bc0c:	4249      	negs	r1, r1
    bc0e:	0028      	movs	r0, r5
    bc10:	f7f8 fc96 	bl	4540 <rtc_calendar_frequency_correction>
    bc14:	e746      	b.n	baa4 <_Z13consoleCharRxc+0x154>
			while (*ptr == ' ') ptr++;
    bc16:	4c25      	ldr	r4, [pc, #148]	; (bcac <_Z13consoleCharRxc+0x35c>)
    bc18:	3404      	adds	r4, #4
    bc1a:	e7b7      	b.n	bb8c <_Z13consoleCharRxc+0x23c>
				time.year   = strtol(ptr, NULL, 10);
    bc1c:	220a      	movs	r2, #10
    bc1e:	2100      	movs	r1, #0
    bc20:	0020      	movs	r0, r4
    bc22:	f002 f87b 	bl	dd1c <strtol>
    bc26:	ad0e      	add	r5, sp, #56	; 0x38
    bc28:	80e8      	strh	r0, [r5, #6]
				time.month  = strtol(&ptr[5], NULL, 10);
    bc2a:	1d60      	adds	r0, r4, #5
    bc2c:	220a      	movs	r2, #10
    bc2e:	2100      	movs	r1, #0
    bc30:	f002 f874 	bl	dd1c <strtol>
    bc34:	7168      	strb	r0, [r5, #5]
				time.day    = strtol(&ptr[8], NULL, 10);
    bc36:	0020      	movs	r0, r4
    bc38:	3008      	adds	r0, #8
    bc3a:	220a      	movs	r2, #10
    bc3c:	2100      	movs	r1, #0
    bc3e:	f002 f86d 	bl	dd1c <strtol>
    bc42:	7128      	strb	r0, [r5, #4]
				time.hour   = strtol(&ptr[11], NULL, 10);
    bc44:	0020      	movs	r0, r4
    bc46:	300b      	adds	r0, #11
    bc48:	220a      	movs	r2, #10
    bc4a:	2100      	movs	r1, #0
    bc4c:	f002 f866 	bl	dd1c <strtol>
    bc50:	70a8      	strb	r0, [r5, #2]
				time.minute = strtol(&ptr[14], NULL, 10);
    bc52:	0020      	movs	r0, r4
    bc54:	300e      	adds	r0, #14
    bc56:	220a      	movs	r2, #10
    bc58:	2100      	movs	r1, #0
    bc5a:	f002 f85f 	bl	dd1c <strtol>
    bc5e:	7068      	strb	r0, [r5, #1]
				time.second = strtol(&ptr[17], NULL, 10);
    bc60:	0020      	movs	r0, r4
    bc62:	3011      	adds	r0, #17
    bc64:	220a      	movs	r2, #10
    bc66:	2100      	movs	r1, #0
    bc68:	f002 f858 	bl	dd1c <strtol>
    bc6c:	7028      	strb	r0, [r5, #0]
				rtc_calendar_set_time(&rtc_instance, &time);
    bc6e:	0029      	movs	r1, r5
    bc70:	4829      	ldr	r0, [pc, #164]	; (bd18 <_Z13consoleCharRxc+0x3c8>)
    bc72:	f7f8 fbcd 	bl	4410 <rtc_calendar_set_time>
				xprintf("set time %d-%02d-%02d %02d:%02d:%02d\n", time.year, time.month, time.day,
    bc76:	792b      	ldrb	r3, [r5, #4]
    bc78:	796a      	ldrb	r2, [r5, #5]
    bc7a:	88e9      	ldrh	r1, [r5, #6]
    bc7c:	7828      	ldrb	r0, [r5, #0]
    bc7e:	9002      	str	r0, [sp, #8]
    bc80:	7868      	ldrb	r0, [r5, #1]
    bc82:	9001      	str	r0, [sp, #4]
    bc84:	78a8      	ldrb	r0, [r5, #2]
    bc86:	9000      	str	r0, [sp, #0]
						time.hour, time.minute, time.second);
    bc88:	4828      	ldr	r0, [pc, #160]	; (bd2c <_Z13consoleCharRxc+0x3dc>)
    bc8a:	f7f9 f941 	bl	4f10 <xprintf>
    bc8e:	e77f      	b.n	bb90 <_Z13consoleCharRxc+0x240>
		else if (strncmp("ubx", line, 3) == 0)
    bc90:	2203      	movs	r2, #3
    bc92:	4906      	ldr	r1, [pc, #24]	; (bcac <_Z13consoleCharRxc+0x35c>)
    bc94:	4826      	ldr	r0, [pc, #152]	; (bd30 <_Z13consoleCharRxc+0x3e0>)
    bc96:	f001 ff95 	bl	dbc4 <strncmp>
    bc9a:	2800      	cmp	r0, #0
    bc9c:	d14c      	bne.n	bd38 <_Z13consoleCharRxc+0x3e8>
			ubxCount = 4;
    bc9e:	2204      	movs	r2, #4
    bca0:	4b24      	ldr	r3, [pc, #144]	; (bd34 <_Z13consoleCharRxc+0x3e4>)
    bca2:	601a      	str	r2, [r3, #0]
    bca4:	e6fe      	b.n	baa4 <_Z13consoleCharRxc+0x154>
    bca6:	46c0      	nop			; (mov r8, r8)
    bca8:	20001184 	.word	0x20001184
    bcac:	20001104 	.word	0x20001104
    bcb0:	0000f3d4 	.word	0x0000f3d4
    bcb4:	0000f3e0 	.word	0x0000f3e0
    bcb8:	20000fb8 	.word	0x20000fb8
    bcbc:	20000fe8 	.word	0x20000fe8
    bcc0:	000007bc 	.word	0x000007bc
    bcc4:	0000f3e4 	.word	0x0000f3e4
    bcc8:	0000f410 	.word	0x0000f410
    bccc:	20001100 	.word	0x20001100
    bcd0:	0000f43c 	.word	0x0000f43c
    bcd4:	0000f440 	.word	0x0000f440
    bcd8:	0000f454 	.word	0x0000f454
    bcdc:	0000f478 	.word	0x0000f478
    bce0:	20006450 	.word	0x20006450
    bce4:	0000f480 	.word	0x0000f480
    bce8:	20006214 	.word	0x20006214
    bcec:	20006218 	.word	0x20006218
    bcf0:	0000f45c 	.word	0x0000f45c
    bcf4:	0000f48c 	.word	0x0000f48c
    bcf8:	20006460 	.word	0x20006460
    bcfc:	0000f494 	.word	0x0000f494
    bd00:	2000621c 	.word	0x2000621c
    bd04:	0000f4a0 	.word	0x0000f4a0
    bd08:	0000f9a8 	.word	0x0000f9a8
    bd0c:	20000a70 	.word	0x20000a70
    bd10:	0000f4a8 	.word	0x0000f4a8
    bd14:	0000f4f0 	.word	0x0000f4f0
    bd18:	20006448 	.word	0x20006448
    bd1c:	0000f520 	.word	0x0000f520
    bd20:	0000f528 	.word	0x0000f528
    bd24:	20001ce8 	.word	0x20001ce8
    bd28:	0000f550 	.word	0x0000f550
    bd2c:	0000f4f8 	.word	0x0000f4f8
    bd30:	0000f578 	.word	0x0000f578
    bd34:	20001d88 	.word	0x20001d88
		else if (strncmp("nmea", line, 4) == 0)
    bd38:	2204      	movs	r2, #4
    bd3a:	492d      	ldr	r1, [pc, #180]	; (bdf0 <_Z13consoleCharRxc+0x4a0>)
    bd3c:	482d      	ldr	r0, [pc, #180]	; (bdf4 <_Z13consoleCharRxc+0x4a4>)
    bd3e:	f001 ff41 	bl	dbc4 <strncmp>
    bd42:	2800      	cmp	r0, #0
    bd44:	d103      	bne.n	bd4e <_Z13consoleCharRxc+0x3fe>
			nmeaCount = 4;
    bd46:	2204      	movs	r2, #4
    bd48:	4b2b      	ldr	r3, [pc, #172]	; (bdf8 <_Z13consoleCharRxc+0x4a8>)
    bd4a:	601a      	str	r2, [r3, #0]
    bd4c:	e6aa      	b.n	baa4 <_Z13consoleCharRxc+0x154>
		else if (strncmp("gps", line, 3) == 0)
    bd4e:	2203      	movs	r2, #3
    bd50:	4927      	ldr	r1, [pc, #156]	; (bdf0 <_Z13consoleCharRxc+0x4a0>)
    bd52:	482a      	ldr	r0, [pc, #168]	; (bdfc <_Z13consoleCharRxc+0x4ac>)
    bd54:	f001 ff36 	bl	dbc4 <strncmp>
    bd58:	2800      	cmp	r0, #0
    bd5a:	d105      	bne.n	bd68 <_Z13consoleCharRxc+0x418>
			nmeaCount = 4;
    bd5c:	2304      	movs	r3, #4
    bd5e:	4a26      	ldr	r2, [pc, #152]	; (bdf8 <_Z13consoleCharRxc+0x4a8>)
    bd60:	6013      	str	r3, [r2, #0]
			ubxCount = 4;
    bd62:	4a27      	ldr	r2, [pc, #156]	; (be00 <_Z13consoleCharRxc+0x4b0>)
    bd64:	6013      	str	r3, [r2, #0]
    bd66:	e69d      	b.n	baa4 <_Z13consoleCharRxc+0x154>
		else if (strncmp("imu", line, 3) == 0)
    bd68:	2203      	movs	r2, #3
    bd6a:	4921      	ldr	r1, [pc, #132]	; (bdf0 <_Z13consoleCharRxc+0x4a0>)
    bd6c:	4825      	ldr	r0, [pc, #148]	; (be04 <_Z13consoleCharRxc+0x4b4>)
    bd6e:	f001 ff29 	bl	dbc4 <strncmp>
    bd72:	2800      	cmp	r0, #0
    bd74:	d103      	bne.n	bd7e <_Z13consoleCharRxc+0x42e>
			imuCount = 4;
    bd76:	2204      	movs	r2, #4
    bd78:	4b23      	ldr	r3, [pc, #140]	; (be08 <_Z13consoleCharRxc+0x4b8>)
    bd7a:	601a      	str	r2, [r3, #0]
    bd7c:	e692      	b.n	baa4 <_Z13consoleCharRxc+0x154>
		else if (strncmp("sleep", line, 5) == 0)
    bd7e:	2205      	movs	r2, #5
    bd80:	491b      	ldr	r1, [pc, #108]	; (bdf0 <_Z13consoleCharRxc+0x4a0>)
    bd82:	4822      	ldr	r0, [pc, #136]	; (be0c <_Z13consoleCharRxc+0x4bc>)
    bd84:	f001 ff1e 	bl	dbc4 <strncmp>
    bd88:	2800      	cmp	r0, #0
    bd8a:	d000      	beq.n	bd8e <_Z13consoleCharRxc+0x43e>
    bd8c:	e68a      	b.n	baa4 <_Z13consoleCharRxc+0x154>
			rtcAlarm.time.year = 2013;
    bd8e:	a90e      	add	r1, sp, #56	; 0x38
    bd90:	4b1f      	ldr	r3, [pc, #124]	; (be10 <_Z13consoleCharRxc+0x4c0>)
    bd92:	80cb      	strh	r3, [r1, #6]
			rtcAlarm.time.month = 1;
    bd94:	2401      	movs	r4, #1
    bd96:	714c      	strb	r4, [r1, #5]
			rtcAlarm.time.day = 1;
    bd98:	710c      	strb	r4, [r1, #4]
			rtcAlarm.time.hour = 0;
    bd9a:	2500      	movs	r5, #0
    bd9c:	708d      	strb	r5, [r1, #2]
			rtcAlarm.time.minute = 0;
    bd9e:	704d      	strb	r5, [r1, #1]
			rtcAlarm.time.second = 0;
    bda0:	700d      	strb	r5, [r1, #0]
			rtcAlarm.mask = RTC_CALENDAR_ALARM_MASK_SEC;
    bda2:	720c      	strb	r4, [r1, #8]
			rtc_calendar_set_alarm(&rtc_instance, &rtcAlarm, RTC_CALENDAR_ALARM_0);
    bda4:	4e1b      	ldr	r6, [pc, #108]	; (be14 <_Z13consoleCharRxc+0x4c4>)
    bda6:	002a      	movs	r2, r5
    bda8:	0030      	movs	r0, r6
    bdaa:	f7f8 fb69 	bl	4480 <rtc_calendar_set_alarm>
    bdae:	2208      	movs	r2, #8
    bdb0:	4b19      	ldr	r3, [pc, #100]	; (be18 <_Z13consoleCharRxc+0x4c8>)
    bdb2:	601a      	str	r2, [r3, #0]
			rtc_instance.hw->MODE2.INTENSET.bit.ALARM0 = 1;
    bdb4:	6833      	ldr	r3, [r6, #0]
    bdb6:	79da      	ldrb	r2, [r3, #7]
    bdb8:	4314      	orrs	r4, r2
    bdba:	71dc      	strb	r4, [r3, #7]
			alarm = false;
    bdbc:	4b17      	ldr	r3, [pc, #92]	; (be1c <_Z13consoleCharRxc+0x4cc>)
    bdbe:	701d      	strb	r5, [r3, #0]
			xprintf("Sleeping...");
    bdc0:	4817      	ldr	r0, [pc, #92]	; (be20 <_Z13consoleCharRxc+0x4d0>)
    bdc2:	f7f9 f8a5 	bl	4f10 <xprintf>
			chThdSleepMilliseconds(1000);
    bdc6:	20fa      	movs	r0, #250	; 0xfa
    bdc8:	0080      	lsls	r0, r0, #2
    bdca:	f7f7 f869 	bl	2ea0 <chThdSleep>
			SCB->SCR |= 1<<2; // Enable deep-sleep mode
    bdce:	4a15      	ldr	r2, [pc, #84]	; (be24 <_Z13consoleCharRxc+0x4d4>)
    bdd0:	6911      	ldr	r1, [r2, #16]
    bdd2:	2304      	movs	r3, #4
    bdd4:	430b      	orrs	r3, r1
    bdd6:	6113      	str	r3, [r2, #16]
			EIC->WAKEUP.reg = EIC_WAKEUP_WAKEUPEN11;
    bdd8:	2280      	movs	r2, #128	; 0x80
    bdda:	0112      	lsls	r2, r2, #4
    bddc:	4b12      	ldr	r3, [pc, #72]	; (be28 <_Z13consoleCharRxc+0x4d8>)
    bdde:	615a      	str	r2, [r3, #20]
  __ASM volatile ("wfi");
    bde0:	bf30      	wfi
			xprintf("Woken...\n");
    bde2:	4812      	ldr	r0, [pc, #72]	; (be2c <_Z13consoleCharRxc+0x4dc>)
    bde4:	f7f9 f894 	bl	4f10 <xprintf>
			chThdSleepMilliseconds(10000);
    bde8:	4811      	ldr	r0, [pc, #68]	; (be30 <_Z13consoleCharRxc+0x4e0>)
    bdea:	f7f7 f859 	bl	2ea0 <chThdSleep>
    bdee:	e659      	b.n	baa4 <_Z13consoleCharRxc+0x154>
    bdf0:	20001104 	.word	0x20001104
    bdf4:	0000f57c 	.word	0x0000f57c
    bdf8:	200018a4 	.word	0x200018a4
    bdfc:	0000f584 	.word	0x0000f584
    be00:	20001d88 	.word	0x20001d88
    be04:	0000f588 	.word	0x0000f588
    be08:	20001e14 	.word	0x20001e14
    be0c:	0000f58c 	.word	0x0000f58c
    be10:	000007dd 	.word	0x000007dd
    be14:	20006448 	.word	0x20006448
    be18:	e000e100 	.word	0xe000e100
    be1c:	20006210 	.word	0x20006210
    be20:	0000f594 	.word	0x0000f594
    be24:	e000ed00 	.word	0xe000ed00
    be28:	40001800 	.word	0x40001800
    be2c:	0000f5a0 	.word	0x0000f5a0
    be30:	00002710 	.word	0x00002710
	...

0000be40 <_Z11ThreadUsartPv>:

THD_FUNCTION(ThreadUsart, arg)
{
    be40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void) arg;

	chThdSleepMilliseconds(100);
    be42:	2064      	movs	r0, #100	; 0x64
    be44:	f7f7 f82c 	bl	2ea0 <chThdSleep>
	xprintf("UsartThread\n");
    be48:	480c      	ldr	r0, [pc, #48]	; (be7c <_Z11ThreadUsartPv+0x3c>)
    be4a:	f7f9 f861 	bl	4f10 <xprintf>
	chThdSleepMilliseconds(500);
    be4e:	20fa      	movs	r0, #250	; 0xfa
    be50:	0040      	lsls	r0, r0, #1
    be52:	f7f7 f825 	bl	2ea0 <chThdSleep>

	int16_t temp;
	while (true)
	{
		chEvtWaitAnyTimeout(ALL_EVENTS, 1000);
    be56:	27fa      	movs	r7, #250	; 0xfa
    be58:	00bf      	lsls	r7, r7, #2
    be5a:	2601      	movs	r6, #1
    be5c:	4276      	negs	r6, r6

		while ((temp = xfunc_in()) != 0)
    be5e:	4d08      	ldr	r5, [pc, #32]	; (be80 <_Z11ThreadUsartPv+0x40>)
		chEvtWaitAnyTimeout(ALL_EVENTS, 1000);
    be60:	0039      	movs	r1, r7
    be62:	0030      	movs	r0, r6
    be64:	f7f7 f834 	bl	2ed0 <chEvtWaitAnyTimeout>
		while ((temp = xfunc_in()) != 0)
    be68:	682b      	ldr	r3, [r5, #0]
    be6a:	4798      	blx	r3
    be6c:	1e04      	subs	r4, r0, #0
    be6e:	d0f7      	beq.n	be60 <_Z11ThreadUsartPv+0x20>
		{
			consoleCharRx(temp);
    be70:	f7ff fd6e 	bl	b950 <_Z13consoleCharRxc>
			uart1_putc(temp);
    be74:	0020      	movs	r0, r4
    be76:	f7ff fc5b 	bl	b730 <uart1_putc>
		while ((temp = xfunc_in()) != 0)
    be7a:	e7f5      	b.n	be68 <_Z11ThreadUsartPv+0x28>
    be7c:	0000f3c4 	.word	0x0000f3c4
    be80:	20000bd8 	.word	0x20000bd8
	...

0000be90 <_Z9ThreadUSBPv>:
}

P_USB_CDC pCdc;

THD_FUNCTION(ThreadUSB, arg)
{
    be90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void) arg;

	chThdSleepMilliseconds(350);
    be92:	20af      	movs	r0, #175	; 0xaf
    be94:	0040      	lsls	r0, r0, #1
    be96:	f7f7 f803 	bl	2ea0 <chThdSleep>
	xprintf("USBThread\n");
    be9a:	482f      	ldr	r0, [pc, #188]	; (bf58 <_Z9ThreadUSBPv+0xc8>)
    be9c:	f7f9 f838 	bl	4f10 <xprintf>
	chThdSleepMilliseconds(450);
    bea0:	20e1      	movs	r0, #225	; 0xe1
    bea2:	0040      	lsls	r0, r0, #1
    bea4:	f7f6 fffc 	bl	2ea0 <chThdSleep>

	pCdc = usb_init();
    bea8:	f7fb fb0a 	bl	74c0 <usb_init>
    beac:	4b2b      	ldr	r3, [pc, #172]	; (bf5c <_Z9ThreadUSBPv+0xcc>)
    beae:	6018      	str	r0, [r3, #0]

	bool connected = false;
	bool configured = false;
    beb0:	2400      	movs	r4, #0
	while (true)
	{
		if (pCdc->IsConfigured(pCdc) != 0)
    beb2:	001e      	movs	r6, r3
				xprintf("USB configured\n");

				configured = true;
			}
			/* Check if a USB enumeration has succeeded and if comm port has been opened */
			while (pCdc->currentConnection != 0)
    beb4:	001d      	movs	r5, r3
    beb6:	e041      	b.n	bf3c <_Z9ThreadUSBPv+0xac>
				xprintf("USB configured\n");
    beb8:	4829      	ldr	r0, [pc, #164]	; (bf60 <_Z9ThreadUSBPv+0xd0>)
    beba:	f7f9 f829 	bl	4f10 <xprintf>
    bebe:	e044      	b.n	bf4a <_Z9ThreadUSBPv+0xba>
			{
				if (!connected)
				{
					xprintf("USB connected\n");
    bec0:	4828      	ldr	r0, [pc, #160]	; (bf64 <_Z9ThreadUSBPv+0xd4>)
    bec2:	f7f9 f825 	bl	4f10 <xprintf>

					cdc_write_buf("USB connected\r\n\n", sizeof("USB connected\r\n\n"));
    bec6:	2111      	movs	r1, #17
    bec8:	4827      	ldr	r0, [pc, #156]	; (bf68 <_Z9ThreadUSBPv+0xd8>)
    beca:	f7fb fad9 	bl	7480 <cdc_write_buf>
					connected = true;

					xdev_out(cdc_putc);
    bece:	4b27      	ldr	r3, [pc, #156]	; (bf6c <_Z9ThreadUSBPv+0xdc>)
    bed0:	603b      	str	r3, [r7, #0]
					chThdSleepMilliseconds(200);
    bed2:	20c8      	movs	r0, #200	; 0xc8
    bed4:	f7f6 ffe4 	bl	2ea0 <chThdSleep>
					xprintf("USB set input\n");
    bed8:	4825      	ldr	r0, [pc, #148]	; (bf70 <_Z9ThreadUSBPv+0xe0>)
    beda:	f7f9 f819 	bl	4f10 <xprintf>
    bede:	e00a      	b.n	bef6 <_Z9ThreadUSBPv+0x66>

						consoleCharRx(ch);
					}
				}

				chThdSleepMilliseconds(10);
    bee0:	200a      	movs	r0, #10
    bee2:	f7f6 ffdd 	bl	2ea0 <chThdSleep>
    bee6:	2301      	movs	r3, #1
			while (pCdc->currentConnection != 0)
    bee8:	4a1c      	ldr	r2, [pc, #112]	; (bf5c <_Z9ThreadUSBPv+0xcc>)
    beea:	6812      	ldr	r2, [r2, #0]
    beec:	7952      	ldrb	r2, [r2, #5]
    beee:	2a00      	cmp	r2, #0
    bef0:	d014      	beq.n	bf1c <_Z9ThreadUSBPv+0x8c>
				if (!connected)
    bef2:	2b00      	cmp	r3, #0
    bef4:	d0e4      	beq.n	bec0 <_Z9ThreadUSBPv+0x30>
				bool rdy = cdc_is_rx_ready();
    bef6:	f7fb faab 	bl	7450 <cdc_is_rx_ready>
    befa:	0004      	movs	r4, r0
				uint16_t ch = cdc_getc();
    befc:	f7fb fa98 	bl	7430 <cdc_getc>
				if (rdy)
    bf00:	2c00      	cmp	r4, #0
    bf02:	d0ed      	beq.n	bee0 <_Z9ThreadUSBPv+0x50>
					if (ch != 0)
    bf04:	b283      	uxth	r3, r0
    bf06:	2b00      	cmp	r3, #0
    bf08:	d0ea      	beq.n	bee0 <_Z9ThreadUSBPv+0x50>
						cdc_putc(ch);
    bf0a:	0004      	movs	r4, r0
    bf0c:	0400      	lsls	r0, r0, #16
    bf0e:	0c00      	lsrs	r0, r0, #16
    bf10:	f7fb fa7e 	bl	7410 <cdc_putc>
						consoleCharRx(ch);
    bf14:	b2e0      	uxtb	r0, r4
    bf16:	f7ff fd1b 	bl	b950 <_Z13consoleCharRxc>
    bf1a:	e7e1      	b.n	bee0 <_Z9ThreadUSBPv+0x50>
			}

			if (connected)
			{
				xdev_out(uart1_putc);
    bf1c:	4a15      	ldr	r2, [pc, #84]	; (bf74 <_Z9ThreadUSBPv+0xe4>)
    bf1e:	4b16      	ldr	r3, [pc, #88]	; (bf78 <_Z9ThreadUSBPv+0xe8>)
    bf20:	601a      	str	r2, [r3, #0]
				xdev_in(uart1_getc);
    bf22:	4a16      	ldr	r2, [pc, #88]	; (bf7c <_Z9ThreadUSBPv+0xec>)
    bf24:	4b16      	ldr	r3, [pc, #88]	; (bf80 <_Z9ThreadUSBPv+0xf0>)
    bf26:	601a      	str	r2, [r3, #0]

				xprintf("USB connection dropped\n");
    bf28:	4816      	ldr	r0, [pc, #88]	; (bf84 <_Z9ThreadUSBPv+0xf4>)
    bf2a:	f7f8 fff1 	bl	4f10 <xprintf>
				connected = false;
			}

			chThdSleepMilliseconds(100);
    bf2e:	2064      	movs	r0, #100	; 0x64
    bf30:	f7f6 ffb6 	bl	2ea0 <chThdSleep>
    bf34:	2401      	movs	r4, #1
		}

		chThdSleepMilliseconds(100);
    bf36:	2064      	movs	r0, #100	; 0x64
    bf38:	f7f6 ffb2 	bl	2ea0 <chThdSleep>
		if (pCdc->IsConfigured(pCdc) != 0)
    bf3c:	6830      	ldr	r0, [r6, #0]
    bf3e:	6883      	ldr	r3, [r0, #8]
    bf40:	4798      	blx	r3
    bf42:	2800      	cmp	r0, #0
    bf44:	d0f7      	beq.n	bf36 <_Z9ThreadUSBPv+0xa6>
			if (!configured)
    bf46:	2c00      	cmp	r4, #0
    bf48:	d0b6      	beq.n	beb8 <_Z9ThreadUSBPv+0x28>
			while (pCdc->currentConnection != 0)
    bf4a:	682b      	ldr	r3, [r5, #0]
    bf4c:	795b      	ldrb	r3, [r3, #5]
    bf4e:	2b00      	cmp	r3, #0
    bf50:	d0ed      	beq.n	bf2e <_Z9ThreadUSBPv+0x9e>
    bf52:	2300      	movs	r3, #0
					xdev_out(cdc_putc);
    bf54:	4f08      	ldr	r7, [pc, #32]	; (bf78 <_Z9ThreadUSBPv+0xe8>)
    bf56:	e7cc      	b.n	bef2 <_Z9ThreadUSBPv+0x62>
    bf58:	0000f5ac 	.word	0x0000f5ac
    bf5c:	20001610 	.word	0x20001610
    bf60:	0000f5b8 	.word	0x0000f5b8
    bf64:	0000f5c8 	.word	0x0000f5c8
    bf68:	0000f5d8 	.word	0x0000f5d8
    bf6c:	00007411 	.word	0x00007411
    bf70:	0000f5ec 	.word	0x0000f5ec
    bf74:	0000b731 	.word	0x0000b731
    bf78:	20000bdc 	.word	0x20000bdc
    bf7c:	0000b6e1 	.word	0x0000b6e1
    bf80:	20000bd8 	.word	0x20000bd8
    bf84:	0000f5fc 	.word	0x0000f5fc
	...

0000bf90 <_ZL28setup_transfer_descriptor_rxP14DmacDescriptorPv>:

	dma_allocate(resource, &config);
}

static void setup_transfer_descriptor_rx(DmacDescriptor *descriptor, void *data)
{
    bf90:	b510      	push	{r4, lr}
    bf92:	b086      	sub	sp, #24
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
    bf94:	2201      	movs	r2, #1
    bf96:	466b      	mov	r3, sp
    bf98:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    bf9a:	2300      	movs	r3, #0
    bf9c:	466c      	mov	r4, sp
    bf9e:	7063      	strb	r3, [r4, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    bfa0:	70a3      	strb	r3, [r4, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    bfa2:	70e3      	strb	r3, [r4, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
	/* Enable destination increment */
	config->dst_increment_enable = true;
    bfa4:	7162      	strb	r2, [r4, #5]
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
    bfa6:	71a3      	strb	r3, [r4, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    bfa8:	71e3      	strb	r3, [r4, #7]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
    bfaa:	9305      	str	r3, [sp, #20]
	struct dma_descriptor_config descriptor_config;

	dma_descriptor_get_config_defaults(&descriptor_config);

	descriptor_config.beat_size = DMA_BEAT_SIZE_BYTE;
	descriptor_config.src_increment_enable = false;
    bfac:	7123      	strb	r3, [r4, #4]
	descriptor_config.block_transfer_count = BUFFER_LEN;
    bfae:	2380      	movs	r3, #128	; 0x80
    bfb0:	009b      	lsls	r3, r3, #2
    bfb2:	8123      	strh	r3, [r4, #8]
	descriptor_config.destination_address =	(uint32_t)data + BUFFER_LEN; // who knows why this is the end of the buffer address
    bfb4:	469c      	mov	ip, r3
    bfb6:	4461      	add	r1, ip
    bfb8:	9104      	str	r1, [sp, #16]
	descriptor_config.source_address = (uint32_t)(&usart_gps.hw->USART.DATA.reg);
    bfba:	4b04      	ldr	r3, [pc, #16]	; (bfcc <_ZL28setup_transfer_descriptor_rxP14DmacDescriptorPv+0x3c>)
    bfbc:	681b      	ldr	r3, [r3, #0]
    bfbe:	3328      	adds	r3, #40	; 0x28
    bfc0:	9303      	str	r3, [sp, #12]

	dma_descriptor_create(descriptor, &descriptor_config);
    bfc2:	4669      	mov	r1, sp
    bfc4:	f7f8 fc94 	bl	48f0 <dma_descriptor_create>
}
    bfc8:	b006      	add	sp, #24
    bfca:	bd10      	pop	{r4, pc}
    bfcc:	20001dac 	.word	0x20001dac

0000bfd0 <_Z19configure_usart_gpsv>:
{
    bfd0:	b530      	push	{r4, r5, lr}
    bfd2:	b093      	sub	sp, #76	; 0x4c
	config->data_order       = USART_DATAORDER_LSB;
    bfd4:	ab02      	add	r3, sp, #8
    bfd6:	2280      	movs	r2, #128	; 0x80
    bfd8:	05d2      	lsls	r2, r2, #23
    bfda:	9202      	str	r2, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    bfdc:	2200      	movs	r2, #0
    bfde:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    bfe0:	21ff      	movs	r1, #255	; 0xff
    bfe2:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    bfe4:	2100      	movs	r1, #0
    bfe6:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    bfe8:	72da      	strb	r2, [r3, #11]
	config->receiver_enable  = true;
    bfea:	2001      	movs	r0, #1
    bfec:	2424      	movs	r4, #36	; 0x24
    bfee:	5518      	strb	r0, [r3, r4]
	config->transmitter_enable = true;
    bff0:	3401      	adds	r4, #1
    bff2:	5518      	strb	r0, [r3, r4]
	config->clock_polarity_inverted = false;
    bff4:	3025      	adds	r0, #37	; 0x25
    bff6:	541a      	strb	r2, [r3, r0]
	config->use_external_clock = false;
    bff8:	3001      	adds	r0, #1
    bffa:	541a      	strb	r2, [r3, r0]
	config->ext_clock_freq   = 0;
    bffc:	629a      	str	r2, [r3, #40]	; 0x28
	config->run_in_standby   = false;
    bffe:	3005      	adds	r0, #5
    c000:	541a      	strb	r2, [r3, r0]
	config->generator_source = GCLK_GENERATOR_0;
    c002:	3001      	adds	r0, #1
    c004:	541a      	strb	r2, [r3, r0]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    c006:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    c008:	821a      	strh	r2, [r3, #16]
	config->lin_slave_enable      = false;
    c00a:	76da      	strb	r2, [r3, #27]
	config->immediate_buffer_overflow_notification  = false;
    c00c:	7619      	strb	r1, [r3, #24]
	config->start_frame_detection_enable            = false;
    c00e:	7719      	strb	r1, [r3, #28]
	config->encoding_format_enable                  = false;
    c010:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                    = 19;
    c012:	2213      	movs	r2, #19
    c014:	769a      	strb	r2, [r3, #26]
	config->collision_detection_enable              = false;
    c016:	7759      	strb	r1, [r3, #29]
	config_usart.baudrate = 115200;
    c018:	22e1      	movs	r2, #225	; 0xe1
    c01a:	0252      	lsls	r2, r2, #9
    c01c:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_0_TX_2_XCK_3;
    c01e:	2280      	movs	r2, #128	; 0x80
    c020:	0252      	lsls	r2, r2, #9
    c022:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    c024:	4a15      	ldr	r2, [pc, #84]	; (c07c <_Z19configure_usart_gpsv+0xac>)
    c026:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    c028:	2201      	movs	r2, #1
    c02a:	4252      	negs	r2, r2
    c02c:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2;
    c02e:	4914      	ldr	r1, [pc, #80]	; (c080 <_Z19configure_usart_gpsv+0xb0>)
    c030:	6399      	str	r1, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    c032:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_gps, SERCOM1, &config_usart) != STATUS_OK)
    c034:	4d13      	ldr	r5, [pc, #76]	; (c084 <_Z19configure_usart_gpsv+0xb4>)
    c036:	4c14      	ldr	r4, [pc, #80]	; (c088 <_Z19configure_usart_gpsv+0xb8>)
    c038:	aa02      	add	r2, sp, #8
    c03a:	0029      	movs	r1, r5
    c03c:	0020      	movs	r0, r4
    c03e:	f7f7 f95f 	bl	3300 <usart_init>
    c042:	2800      	cmp	r0, #0
    c044:	d1f8      	bne.n	c038 <_Z19configure_usart_gpsv+0x68>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    c046:	a901      	add	r1, sp, #4
    c048:	2300      	movs	r3, #0
    c04a:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    c04c:	2201      	movs	r2, #1
    c04e:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    c050:	70cb      	strb	r3, [r1, #3]
	config_pinmux.mux_position = MUX_PA16C_SERCOM1_PAD0;
    c052:	3302      	adds	r3, #2
    c054:	700b      	strb	r3, [r1, #0]
	system_pinmux_pin_set_config(PIN_PA16, &config_pinmux);
    c056:	3010      	adds	r0, #16
    c058:	f7f8 fb1a 	bl	4690 <system_pinmux_pin_set_config>
	SercomUsart *const usart_hw = &(module->hw->USART);
    c05c:	4b0a      	ldr	r3, [pc, #40]	; (c088 <_Z19configure_usart_gpsv+0xb8>)
    c05e:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    c060:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    c062:	2b00      	cmp	r3, #0
    c064:	d1fc      	bne.n	c060 <_Z19configure_usart_gpsv+0x90>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    c066:	6813      	ldr	r3, [r2, #0]
    c068:	2102      	movs	r1, #2
    c06a:	430b      	orrs	r3, r1
    c06c:	6013      	str	r3, [r2, #0]
	SercomUsart *usart_hw = &(usart_gps.hw->USART);
    c06e:	4b06      	ldr	r3, [pc, #24]	; (c088 <_Z19configure_usart_gpsv+0xb8>)
    c070:	681b      	ldr	r3, [r3, #0]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    c072:	2204      	movs	r2, #4
    c074:	759a      	strb	r2, [r3, #22]
}
    c076:	b013      	add	sp, #76	; 0x4c
    c078:	bd30      	pop	{r4, r5, pc}
    c07a:	46c0      	nop			; (mov r8, r8)
    c07c:	00100002 	.word	0x00100002
    c080:	00120002 	.word	0x00120002
    c084:	42000c00 	.word	0x42000c00
    c088:	20001dac 	.word	0x20001dac
    c08c:	00000000 	.word	0x00000000

0000c090 <_Z10uart2_getcv>:
	if (curr_desc == desc_to_send)
    c090:	4b0c      	ldr	r3, [pc, #48]	; (c0c4 <_Z10uart2_getcv+0x34>)
    c092:	681b      	ldr	r3, [r3, #0]
    c094:	4a0c      	ldr	r2, [pc, #48]	; (c0c8 <_Z10uart2_getcv+0x38>)
    c096:	6812      	ldr	r2, [r2, #0]
    c098:	429a      	cmp	r2, r3
    c09a:	d00c      	beq.n	c0b6 <_Z10uart2_getcv+0x26>
		curr_desc = desc_to_send;
    c09c:	4a0a      	ldr	r2, [pc, #40]	; (c0c8 <_Z10uart2_getcv+0x38>)
    c09e:	6013      	str	r3, [r2, #0]
		cur_ptr -= BUFFER_LEN;
    c0a0:	4a0a      	ldr	r2, [pc, #40]	; (c0cc <_Z10uart2_getcv+0x3c>)
    c0a2:	4694      	mov	ip, r2
    c0a4:	4463      	add	r3, ip
    c0a6:	4a0a      	ldr	r2, [pc, #40]	; (c0d0 <_Z10uart2_getcv+0x40>)
    c0a8:	6013      	str	r3, [r2, #0]
	return *cur_ptr++;
    c0aa:	4a09      	ldr	r2, [pc, #36]	; (c0d0 <_Z10uart2_getcv+0x40>)
    c0ac:	6813      	ldr	r3, [r2, #0]
    c0ae:	1c59      	adds	r1, r3, #1
    c0b0:	6011      	str	r1, [r2, #0]
    c0b2:	7818      	ldrb	r0, [r3, #0]
}
    c0b4:	4770      	bx	lr
		if (cur_ptr == desc_to_send)
    c0b6:	4a06      	ldr	r2, [pc, #24]	; (c0d0 <_Z10uart2_getcv+0x40>)
    c0b8:	6812      	ldr	r2, [r2, #0]
    c0ba:	4293      	cmp	r3, r2
    c0bc:	d1f5      	bne.n	c0aa <_Z10uart2_getcv+0x1a>
			return -1;
    c0be:	2001      	movs	r0, #1
    c0c0:	4240      	negs	r0, r0
    c0c2:	e7f7      	b.n	c0b4 <_Z10uart2_getcv+0x24>
    c0c4:	20001628 	.word	0x20001628
    c0c8:	20001624 	.word	0x20001624
    c0cc:	fffffe00 	.word	0xfffffe00
    c0d0:	20001620 	.word	0x20001620
	...

0000c0e0 <SERCOM1_Handler>:
{
    c0e0:	b570      	push	{r4, r5, r6, lr}
	CH_IRQ_PROLOGUE();
    c0e2:	4675      	mov	r5, lr
	SercomUsart *const usart_hw	= &(usart_gps.hw->USART);
    c0e4:	4b29      	ldr	r3, [pc, #164]	; (c18c <SERCOM1_Handler+0xac>)
    c0e6:	681c      	ldr	r4, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    c0e8:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    c0ea:	2b00      	cmp	r3, #0
    c0ec:	d1fc      	bne.n	c0e8 <SERCOM1_Handler+0x8>
	uint16_t status = usart_hw->STATUS.reg;
    c0ee:	8b63      	ldrh	r3, [r4, #26]
    c0f0:	b29b      	uxth	r3, r3
	if ((status & 0x0f) != 0)
    c0f2:	071a      	lsls	r2, r3, #28
    c0f4:	d007      	beq.n	c106 <SERCOM1_Handler+0x26>
		usart_gps_lasterror = status;
    c0f6:	4a26      	ldr	r2, [pc, #152]	; (c190 <SERCOM1_Handler+0xb0>)
    c0f8:	8013      	strh	r3, [r2, #0]
		usart_hw->STATUS.reg = 0xff; // clear any error bits
    c0fa:	23ff      	movs	r3, #255	; 0xff
    c0fc:	8363      	strh	r3, [r4, #26]
		usart_gps_errors ++;
    c0fe:	4a25      	ldr	r2, [pc, #148]	; (c194 <SERCOM1_Handler+0xb4>)
    c100:	6813      	ldr	r3, [r2, #0]
    c102:	3301      	adds	r3, #1
    c104:	6013      	str	r3, [r2, #0]
	rx_desc = (volatile char*)_write_back_section[0].DSTADDR.reg;
    c106:	4b24      	ldr	r3, [pc, #144]	; (c198 <SERCOM1_Handler+0xb8>)
    c108:	689b      	ldr	r3, [r3, #8]
    c10a:	4a24      	ldr	r2, [pc, #144]	; (c19c <SERCOM1_Handler+0xbc>)
    c10c:	6013      	str	r3, [r2, #0]
	if (last_rx_desc != rx_desc)
    c10e:	4a24      	ldr	r2, [pc, #144]	; (c1a0 <SERCOM1_Handler+0xc0>)
    c110:	6812      	ldr	r2, [r2, #0]
    c112:	4293      	cmp	r3, r2
    c114:	d00d      	beq.n	c132 <SERCOM1_Handler+0x52>
		port_base->OUTSET.reg = pin_mask;
    c116:	2080      	movs	r0, #128	; 0x80
    c118:	0280      	lsls	r0, r0, #10
    c11a:	4922      	ldr	r1, [pc, #136]	; (c1a4 <SERCOM1_Handler+0xc4>)
    c11c:	6188      	str	r0, [r1, #24]
		rx_count++;
    c11e:	4822      	ldr	r0, [pc, #136]	; (c1a8 <SERCOM1_Handler+0xc8>)
    c120:	6801      	ldr	r1, [r0, #0]
    c122:	3101      	adds	r1, #1
    c124:	6001      	str	r1, [r0, #0]
		if (last_rx_desc != NULL)
    c126:	2a00      	cmp	r2, #0
    c128:	d001      	beq.n	c12e <SERCOM1_Handler+0x4e>
			desc_to_send = last_rx_desc;
    c12a:	4920      	ldr	r1, [pc, #128]	; (c1ac <SERCOM1_Handler+0xcc>)
    c12c:	600a      	str	r2, [r1, #0]
		last_rx_desc = rx_desc;
    c12e:	4a1c      	ldr	r2, [pc, #112]	; (c1a0 <SERCOM1_Handler+0xc0>)
    c130:	6013      	str	r3, [r2, #0]
	interrupt_status = usart_hw->INTFLAG.reg;
    c132:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    c134:	7da6      	ldrb	r6, [r4, #22]
    c136:	401e      	ands	r6, r3
  __ASM volatile ("cpsid i" : : : "memory");
    c138:	b672      	cpsid	i
		chEvtSignalI(&nil.threads[1], 1);
    c13a:	2101      	movs	r1, #1
    c13c:	481c      	ldr	r0, [pc, #112]	; (c1b0 <SERCOM1_Handler+0xd0>)
    c13e:	f7f6 feb7 	bl	2eb0 <chEvtSignalI>
  __ASM volatile ("cpsie i" : : : "memory");
    c142:	b662      	cpsie	i
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE)
    c144:	07f3      	lsls	r3, r6, #31
    c146:	d51a      	bpl.n	c17e <SERCOM1_Handler+0x9e>
		if (gps_buffer.tx_write_idx == gps_buffer.tx_read_idx)
    c148:	4a1a      	ldr	r2, [pc, #104]	; (c1b4 <SERCOM1_Handler+0xd4>)
    c14a:	2340      	movs	r3, #64	; 0x40
    c14c:	5ad3      	ldrh	r3, [r2, r3]
    c14e:	2142      	movs	r1, #66	; 0x42
    c150:	5a52      	ldrh	r2, [r2, r1]
    c152:	b29b      	uxth	r3, r3
    c154:	4293      	cmp	r3, r2
    c156:	d016      	beq.n	c186 <SERCOM1_Handler+0xa6>
			d = gps_buffer.tx_buffer[gps_buffer.tx_read_idx++];
    c158:	4a16      	ldr	r2, [pc, #88]	; (c1b4 <SERCOM1_Handler+0xd4>)
    c15a:	2142      	movs	r1, #66	; 0x42
    c15c:	5a53      	ldrh	r3, [r2, r1]
    c15e:	b29b      	uxth	r3, r3
    c160:	1c58      	adds	r0, r3, #1
    c162:	b280      	uxth	r0, r0
    c164:	5250      	strh	r0, [r2, r1]
    c166:	5cd3      	ldrb	r3, [r2, r3]
    c168:	b2db      	uxtb	r3, r3
			if (gps_buffer.tx_read_idx >= TX_BUFFER_SIZE)
    c16a:	5a52      	ldrh	r2, [r2, r1]
    c16c:	b292      	uxth	r2, r2
    c16e:	2a3f      	cmp	r2, #63	; 0x3f
    c170:	dd03      	ble.n	c17a <SERCOM1_Handler+0x9a>
				gps_buffer.tx_read_idx = 0;
    c172:	2000      	movs	r0, #0
    c174:	2242      	movs	r2, #66	; 0x42
    c176:	490f      	ldr	r1, [pc, #60]	; (c1b4 <SERCOM1_Handler+0xd4>)
    c178:	5288      	strh	r0, [r1, r2]
			usart_hw->DATA.reg = d;
    c17a:	b29b      	uxth	r3, r3
    c17c:	8523      	strh	r3, [r4, #40]	; 0x28
	CH_IRQ_EPILOGUE();
    c17e:	0028      	movs	r0, r5
    c180:	f7f6 fed6 	bl	2f30 <_port_irq_epilogue>
}
    c184:	bd70      	pop	{r4, r5, r6, pc}
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    c186:	2301      	movs	r3, #1
    c188:	7523      	strb	r3, [r4, #20]
    c18a:	e7f8      	b.n	c17e <SERCOM1_Handler+0x9e>
    c18c:	20001dac 	.word	0x20001dac
    c190:	20001dbc 	.word	0x20001dbc
    c194:	20001db8 	.word	0x20001db8
    c198:	20000b70 	.word	0x20000b70
    c19c:	200018ac 	.word	0x200018ac
    c1a0:	200018a0 	.word	0x200018a0
    c1a4:	41004400 	.word	0x41004400
    c1a8:	200018a8 	.word	0x200018a8
    c1ac:	20001628 	.word	0x20001628
    c1b0:	20000a98 	.word	0x20000a98
    c1b4:	20001834 	.word	0x20001834
	...

0000c1c0 <_Z9ThreadGPSPv>:

THD_FUNCTION(ThreadGPS, arg)
{
    c1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1c2:	46c6      	mov	lr, r8
    c1c4:	b500      	push	{lr}
    c1c6:	b08a      	sub	sp, #40	; 0x28
	(void) arg;

	chThdSleepMilliseconds(300);
    c1c8:	2096      	movs	r0, #150	; 0x96
    c1ca:	0040      	lsls	r0, r0, #1
    c1cc:	f7f6 fe68 	bl	2ea0 <chThdSleep>
	xprintf("GPSThread\n");
    c1d0:	48b9      	ldr	r0, [pc, #740]	; (c4b8 <_Z9ThreadGPSPv+0x2f8>)
    c1d2:	f7f8 fe9d 	bl	4f10 <xprintf>
	chThdSleepMilliseconds(500);
    c1d6:	20fa      	movs	r0, #250	; 0xfa
    c1d8:	0040      	lsls	r0, r0, #1
    c1da:	f7f6 fe61 	bl	2ea0 <chThdSleep>

	configure_usart_gps();
    c1de:	f7ff fef7 	bl	bfd0 <_Z19configure_usart_gpsv>
	dma_get_config_defaults(&config);
    c1e2:	ac08      	add	r4, sp, #32
    c1e4:	0020      	movs	r0, r4
    c1e6:	f7f8 faab 	bl	4740 <dma_get_config_defaults>
	config.peripheral_trigger = SERCOM1_DMAC_ID_RX; // EDBG_CDC_SERCOM_DMAC_ID_RX;
    c1ea:	2303      	movs	r3, #3
    c1ec:	7063      	strb	r3, [r4, #1]
	config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
    c1ee:	3b01      	subs	r3, #1
    c1f0:	70a3      	strb	r3, [r4, #2]
	config.event_config.event_output_enable = true;
    c1f2:	3b01      	subs	r3, #1
    c1f4:	7123      	strb	r3, [r4, #4]
	dma_allocate(resource, &config);
    c1f6:	4db1      	ldr	r5, [pc, #708]	; (c4bc <_Z9ThreadGPSPv+0x2fc>)
    c1f8:	0021      	movs	r1, r4
    c1fa:	0028      	movs	r0, r5
    c1fc:	f7f8 faa8 	bl	4750 <dma_allocate>

	configure_dma_resource_rx(&usart_dma_resource_rx);

	setup_transfer_descriptor_rx(&gps_dma_descriptor_rx1, string1);
    c200:	4eaf      	ldr	r6, [pc, #700]	; (c4c0 <_Z9ThreadGPSPv+0x300>)
    c202:	49b0      	ldr	r1, [pc, #704]	; (c4c4 <_Z9ThreadGPSPv+0x304>)
    c204:	0030      	movs	r0, r6
    c206:	f7ff fec3 	bl	bf90 <_ZL28setup_transfer_descriptor_rxP14DmacDescriptorPv>
	setup_transfer_descriptor_rx(&gps_dma_descriptor_rx2, string2);
    c20a:	4caf      	ldr	r4, [pc, #700]	; (c4c8 <_Z9ThreadGPSPv+0x308>)
    c20c:	49af      	ldr	r1, [pc, #700]	; (c4cc <_Z9ThreadGPSPv+0x30c>)
    c20e:	0020      	movs	r0, r4
    c210:	f7ff febe 	bl	bf90 <_ZL28setup_transfer_descriptor_rxP14DmacDescriptorPv>

	gps_dma_descriptor_rx2.DESCADDR.reg = (uint32_t)&gps_dma_descriptor_rx1; //this creates a circular buffer
    c214:	60e6      	str	r6, [r4, #12]

	dma_add_descriptor(&usart_dma_resource_rx, &gps_dma_descriptor_rx1);
    c216:	0031      	movs	r1, r6
    c218:	0028      	movs	r0, r5
    c21a:	f7f8 fbc1 	bl	49a0 <dma_add_descriptor>
	dma_add_descriptor(&usart_dma_resource_rx, &gps_dma_descriptor_rx2);
    c21e:	0021      	movs	r1, r4
    c220:	0028      	movs	r0, r5
    c222:	f7f8 fbbd 	bl	49a0 <dma_add_descriptor>

	dma_start_transfer_job(&usart_dma_resource_rx);
    c226:	0028      	movs	r0, r5
    c228:	f7f8 fb22 	bl	4870 <dma_start_transfer_job>
    c22c:	2280      	movs	r2, #128	; 0x80
    c22e:	00d2      	lsls	r2, r2, #3
    c230:	4ba7      	ldr	r3, [pc, #668]	; (c4d0 <_Z9ThreadGPSPv+0x310>)
    c232:	601a      	str	r2, [r3, #0]

	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_SERCOM1);

	uint8_t msgType = 0;
    c234:	2400      	movs	r4, #0
			//xprintf("gps %d char %d idx %d\n", msgType, temp, gpsMsgIdx);

			// should just save chars in buffer until buffer is full, or a end character is received
			// then write the buffer to SD card
			// no need for file types NMEA and UBX, just need GPS, would this do for a general serial receiver?
			if (gpsMsgIdx < (sizeof(gpsMessage) - 1))
    c236:	4da7      	ldr	r5, [pc, #668]	; (c4d4 <_Z9ThreadGPSPv+0x314>)
					}

					break;
				default:
					msgType = 0;
					gpsMsgIdx = 0;
    c238:	46a8      	mov	r8, r5
								xprintf("gps date %d-%02d-%02d %02d:%02d:%02d\n", tgps.date.year(), tgps.date.month(), tgps.date.day(),
    c23a:	4ba7      	ldr	r3, [pc, #668]	; (c4d8 <_Z9ThreadGPSPv+0x318>)
    c23c:	3338      	adds	r3, #56	; 0x38
    c23e:	9304      	str	r3, [sp, #16]
		chEvtWaitAnyTimeout(ALL_EVENTS, TIME_INFINITE);
    c240:	2100      	movs	r1, #0
    c242:	2001      	movs	r0, #1
    c244:	4240      	negs	r0, r0
    c246:	f7f6 fe43 	bl	2ed0 <chEvtWaitAnyTimeout>
		port_base->OUTCLR.reg = pin_mask;
    c24a:	2280      	movs	r2, #128	; 0x80
    c24c:	0292      	lsls	r2, r2, #10
    c24e:	4ba3      	ldr	r3, [pc, #652]	; (c4dc <_Z9ThreadGPSPv+0x31c>)
    c250:	615a      	str	r2, [r3, #20]
    c252:	e00c      	b.n	c26e <_Z9ThreadGPSPv+0xae>
				gpsMsgIdx = 0;
    c254:	2200      	movs	r2, #0
    c256:	4b9f      	ldr	r3, [pc, #636]	; (c4d4 <_Z9ThreadGPSPv+0x314>)
    c258:	601a      	str	r2, [r3, #0]
			switch (msgType)
    c25a:	2c01      	cmp	r4, #1
    c25c:	d06c      	beq.n	c338 <_Z9ThreadGPSPv+0x178>
    c25e:	2c00      	cmp	r4, #0
    c260:	d055      	beq.n	c30e <_Z9ThreadGPSPv+0x14e>
    c262:	2c02      	cmp	r4, #2
    c264:	d003      	beq.n	c26e <_Z9ThreadGPSPv+0xae>
					gpsMsgIdx = 0;
    c266:	2300      	movs	r3, #0
    c268:	4642      	mov	r2, r8
    c26a:	6013      	str	r3, [r2, #0]
					msgType = 0;
    c26c:	2400      	movs	r4, #0
		while ((temp = uart2_getc()) != -1)
    c26e:	f7ff ff0f 	bl	c090 <_Z10uart2_getcv>
    c272:	0006      	movs	r6, r0
    c274:	1c43      	adds	r3, r0, #1
    c276:	d0e3      	beq.n	c240 <_Z9ThreadGPSPv+0x80>
			if (gpsMsgIdx < (sizeof(gpsMessage) - 1))
    c278:	682b      	ldr	r3, [r5, #0]
    c27a:	22ff      	movs	r2, #255	; 0xff
    c27c:	0052      	lsls	r2, r2, #1
    c27e:	4293      	cmp	r3, r2
    c280:	d8e8      	bhi.n	c254 <_Z9ThreadGPSPv+0x94>
				gpsMessage[gpsMsgIdx++] = temp;
    c282:	1c59      	adds	r1, r3, #1
    c284:	4a93      	ldr	r2, [pc, #588]	; (c4d4 <_Z9ThreadGPSPv+0x314>)
    c286:	6011      	str	r1, [r2, #0]
    c288:	b2c7      	uxtb	r7, r0
    c28a:	4a95      	ldr	r2, [pc, #596]	; (c4e0 <_Z9ThreadGPSPv+0x320>)
    c28c:	54d7      	strb	r7, [r2, r3]
			switch (msgType)
    c28e:	2c01      	cmp	r4, #1
    c290:	d052      	beq.n	c338 <_Z9ThreadGPSPv+0x178>
    c292:	2c00      	cmp	r4, #0
    c294:	d03b      	beq.n	c30e <_Z9ThreadGPSPv+0x14e>
    c296:	2c02      	cmp	r4, #2
    c298:	d1e5      	bne.n	c266 <_Z9ThreadGPSPv+0xa6>
					if (gpsMsgIdx == 1)
    c29a:	2901      	cmp	r1, #1
    c29c:	d100      	bne.n	c2a0 <_Z9ThreadGPSPv+0xe0>
    c29e:	e0c5      	b.n	c42c <_Z9ThreadGPSPv+0x26c>
						if (gpsMsgIdx <= 6) // store the data until we get the length
    c2a0:	2906      	cmp	r1, #6
    c2a2:	d800      	bhi.n	c2a6 <_Z9ThreadGPSPv+0xe6>
    c2a4:	e0cf      	b.n	c446 <_Z9ThreadGPSPv+0x286>
						else if (gpsMsgIdx >= gpsLen)
    c2a6:	4b8f      	ldr	r3, [pc, #572]	; (c4e4 <_Z9ThreadGPSPv+0x324>)
    c2a8:	681b      	ldr	r3, [r3, #0]
    c2aa:	4299      	cmp	r1, r3
    c2ac:	d3df      	bcc.n	c26e <_Z9ThreadGPSPv+0xae>
							writeFile(0x01, gpsMsgIdx, gpsMessage);
    c2ae:	4a8c      	ldr	r2, [pc, #560]	; (c4e0 <_Z9ThreadGPSPv+0x320>)
    c2b0:	2001      	movs	r0, #1
    c2b2:	f000 fcdd 	bl	cc70 <writeFile>
							for(uint16_t I=2;I<gpsLen-2;I++)
    c2b6:	4b8b      	ldr	r3, [pc, #556]	; (c4e4 <_Z9ThreadGPSPv+0x324>)
    c2b8:	681b      	ldr	r3, [r3, #0]
    c2ba:	1e9c      	subs	r4, r3, #2
    c2bc:	2c02      	cmp	r4, #2
    c2be:	d800      	bhi.n	c2c2 <_Z9ThreadGPSPv+0x102>
    c2c0:	e0e3      	b.n	c48a <_Z9ThreadGPSPv+0x2ca>
    c2c2:	2202      	movs	r2, #2
    c2c4:	2100      	movs	r1, #0
    c2c6:	2700      	movs	r7, #0
							    CK_A = CK_A + gpsMessage[I];
    c2c8:	4e85      	ldr	r6, [pc, #532]	; (c4e0 <_Z9ThreadGPSPv+0x320>)
    c2ca:	5cb0      	ldrb	r0, [r6, r2]
    c2cc:	183f      	adds	r7, r7, r0
    c2ce:	b2ff      	uxtb	r7, r7
							    CK_B = CK_B + CK_A;
    c2d0:	1879      	adds	r1, r7, r1
    c2d2:	b2c9      	uxtb	r1, r1
							for(uint16_t I=2;I<gpsLen-2;I++)
    c2d4:	3201      	adds	r2, #1
    c2d6:	b292      	uxth	r2, r2
    c2d8:	42a2      	cmp	r2, r4
    c2da:	d3f6      	bcc.n	c2ca <_Z9ThreadGPSPv+0x10a>
							if (!(CK_A == gpsMessage[gpsMsgIdx-2]) && (CK_B == gpsMessage[gpsMsgIdx-1]))
    c2dc:	4a7d      	ldr	r2, [pc, #500]	; (c4d4 <_Z9ThreadGPSPv+0x314>)
    c2de:	6810      	ldr	r0, [r2, #0]
    c2e0:	4a7f      	ldr	r2, [pc, #508]	; (c4e0 <_Z9ThreadGPSPv+0x320>)
    c2e2:	1812      	adds	r2, r2, r0
    c2e4:	3a02      	subs	r2, #2
    c2e6:	7812      	ldrb	r2, [r2, #0]
    c2e8:	42ba      	cmp	r2, r7
    c2ea:	d006      	beq.n	c2fa <_Z9ThreadGPSPv+0x13a>
    c2ec:	4a7c      	ldr	r2, [pc, #496]	; (c4e0 <_Z9ThreadGPSPv+0x320>)
    c2ee:	1812      	adds	r2, r2, r0
    c2f0:	3a01      	subs	r2, #1
    c2f2:	7812      	ldrb	r2, [r2, #0]
    c2f4:	428a      	cmp	r2, r1
    c2f6:	d100      	bne.n	c2fa <_Z9ThreadGPSPv+0x13a>
    c2f8:	e0ca      	b.n	c490 <_Z9ThreadGPSPv+0x2d0>
							if (ubxCount > 0)
    c2fa:	4a7b      	ldr	r2, [pc, #492]	; (c4e8 <_Z9ThreadGPSPv+0x328>)
    c2fc:	6812      	ldr	r2, [r2, #0]
    c2fe:	2a00      	cmp	r2, #0
    c300:	d000      	beq.n	c304 <_Z9ThreadGPSPv+0x144>
    c302:	e0ca      	b.n	c49a <_Z9ThreadGPSPv+0x2da>
							gpsMsgIdx = 0;
    c304:	2200      	movs	r2, #0
    c306:	4b73      	ldr	r3, [pc, #460]	; (c4d4 <_Z9ThreadGPSPv+0x314>)
    c308:	601a      	str	r2, [r3, #0]
							msgType = 0;
    c30a:	2400      	movs	r4, #0
    c30c:	e7af      	b.n	c26e <_Z9ThreadGPSPv+0xae>
					if (temp == '$') // NMEA message
    c30e:	2e24      	cmp	r6, #36	; 0x24
    c310:	d00c      	beq.n	c32c <_Z9ThreadGPSPv+0x16c>
						msgType = 2;
    c312:	2402      	movs	r4, #2
					else if (temp == 0xb5) // UBX message
    c314:	2eb5      	cmp	r6, #181	; 0xb5
    c316:	d0aa      	beq.n	c26e <_Z9ThreadGPSPv+0xae>
						xprintf("gps unknown char %d idx %d\n", temp, gpsMsgIdx);
    c318:	4c6e      	ldr	r4, [pc, #440]	; (c4d4 <_Z9ThreadGPSPv+0x314>)
    c31a:	6822      	ldr	r2, [r4, #0]
    c31c:	0001      	movs	r1, r0
    c31e:	4873      	ldr	r0, [pc, #460]	; (c4ec <_Z9ThreadGPSPv+0x32c>)
    c320:	f7f8 fdf6 	bl	4f10 <xprintf>
						gpsMsgIdx = 0;
    c324:	2300      	movs	r3, #0
    c326:	6023      	str	r3, [r4, #0]
						msgType = 0;
    c328:	2400      	movs	r4, #0
    c32a:	e7a0      	b.n	c26e <_Z9ThreadGPSPv+0xae>
						tgps.encode(temp);
    c32c:	2124      	movs	r1, #36	; 0x24
    c32e:	486a      	ldr	r0, [pc, #424]	; (c4d8 <_Z9ThreadGPSPv+0x318>)
    c330:	f7fe f966 	bl	a600 <_ZN11TinyGPSPlus6encodeEc>
						msgType = 1;
    c334:	2401      	movs	r4, #1
    c336:	e79a      	b.n	c26e <_Z9ThreadGPSPv+0xae>
					tgps.encode(temp);
    c338:	b2c1      	uxtb	r1, r0
    c33a:	4867      	ldr	r0, [pc, #412]	; (c4d8 <_Z9ThreadGPSPv+0x318>)
    c33c:	f7fe f960 	bl	a600 <_ZN11TinyGPSPlus6encodeEc>
    c340:	2401      	movs	r4, #1
					if (temp == 10) // LF
    c342:	2e0a      	cmp	r6, #10
    c344:	d193      	bne.n	c26e <_Z9ThreadGPSPv+0xae>
						gpsMessage[gpsMsgIdx] = 0;
    c346:	4b63      	ldr	r3, [pc, #396]	; (c4d4 <_Z9ThreadGPSPv+0x314>)
    c348:	6819      	ldr	r1, [r3, #0]
    c34a:	4c65      	ldr	r4, [pc, #404]	; (c4e0 <_Z9ThreadGPSPv+0x320>)
    c34c:	2600      	movs	r6, #0
    c34e:	5466      	strb	r6, [r4, r1]
						writeFile(0x00, gpsMsgIdx, gpsMessage);
    c350:	0022      	movs	r2, r4
    c352:	2000      	movs	r0, #0
    c354:	f000 fc8c 	bl	cc70 <writeFile>
						gpsMessage[20] = 0; // truncate message for printing
    c358:	7526      	strb	r6, [r4, #20]
						if (nmeaCount > 0)
    c35a:	4b65      	ldr	r3, [pc, #404]	; (c4f0 <_Z9ThreadGPSPv+0x330>)
    c35c:	681b      	ldr	r3, [r3, #0]
    c35e:	2b00      	cmp	r3, #0
    c360:	d10d      	bne.n	c37e <_Z9ThreadGPSPv+0x1be>
   bool isValid() const       { return valid; }
    c362:	2338      	movs	r3, #56	; 0x38
						if (tgps.date.isValid())
    c364:	4a5c      	ldr	r2, [pc, #368]	; (c4d8 <_Z9ThreadGPSPv+0x318>)
    c366:	5cd3      	ldrb	r3, [r2, r3]
    c368:	2b00      	cmp	r3, #0
    c36a:	d003      	beq.n	c374 <_Z9ThreadGPSPv+0x1b4>
							if (setTime)
    c36c:	4b61      	ldr	r3, [pc, #388]	; (c4f4 <_Z9ThreadGPSPv+0x334>)
    c36e:	781b      	ldrb	r3, [r3, #0]
    c370:	2b00      	cmp	r3, #0
    c372:	d115      	bne.n	c3a0 <_Z9ThreadGPSPv+0x1e0>
						gpsMsgIdx = 0;
    c374:	2200      	movs	r2, #0
    c376:	4b57      	ldr	r3, [pc, #348]	; (c4d4 <_Z9ThreadGPSPv+0x314>)
    c378:	601a      	str	r2, [r3, #0]
						msgType = 0;
    c37a:	2400      	movs	r4, #0
    c37c:	e777      	b.n	c26e <_Z9ThreadGPSPv+0xae>
  static int32_t parseDecimal(const char *term);
  static void parseDegrees(const char *term, RawDegrees &deg);

  uint32_t charsProcessed()   const { return encodedCharCount; }
  uint32_t sentencesWithFix() const { return sentencesWithFixCount; }
  uint32_t failedChecksum()   const { return failedChecksumCount; }
    c37e:	23d0      	movs	r3, #208	; 0xd0
							xprintf("NMEA %d %-20s failed %d usart errors %d\n", gpsMsgIdx, gpsMessage, tgps.failedChecksum(), usart_gps_errors);
    c380:	4a55      	ldr	r2, [pc, #340]	; (c4d8 <_Z9ThreadGPSPv+0x318>)
    c382:	58d3      	ldr	r3, [r2, r3]
    c384:	4a53      	ldr	r2, [pc, #332]	; (c4d4 <_Z9ThreadGPSPv+0x314>)
    c386:	6811      	ldr	r1, [r2, #0]
    c388:	4a5b      	ldr	r2, [pc, #364]	; (c4f8 <_Z9ThreadGPSPv+0x338>)
    c38a:	6812      	ldr	r2, [r2, #0]
    c38c:	9200      	str	r2, [sp, #0]
    c38e:	4a54      	ldr	r2, [pc, #336]	; (c4e0 <_Z9ThreadGPSPv+0x320>)
    c390:	485a      	ldr	r0, [pc, #360]	; (c4fc <_Z9ThreadGPSPv+0x33c>)
    c392:	f7f8 fdbd 	bl	4f10 <xprintf>
							nmeaCount--;
    c396:	4a56      	ldr	r2, [pc, #344]	; (c4f0 <_Z9ThreadGPSPv+0x330>)
    c398:	6813      	ldr	r3, [r2, #0]
    c39a:	3b01      	subs	r3, #1
    c39c:	6013      	str	r3, [r2, #0]
    c39e:	e7e0      	b.n	c362 <_Z9ThreadGPSPv+0x1a2>
								xprintf("gps date %d-%02d-%02d %02d:%02d:%02d\n", tgps.date.year(), tgps.date.month(), tgps.date.day(),
    c3a0:	9f04      	ldr	r7, [sp, #16]
    c3a2:	0038      	movs	r0, r7
    c3a4:	f7fd ff44 	bl	a230 <_ZN11TinyGPSDate4yearEv>
    c3a8:	9005      	str	r0, [sp, #20]
    c3aa:	0038      	movs	r0, r7
    c3ac:	f7fd ff50 	bl	a250 <_ZN11TinyGPSDate5monthEv>
    c3b0:	9006      	str	r0, [sp, #24]
    c3b2:	9704      	str	r7, [sp, #16]
    c3b4:	0038      	movs	r0, r7
    c3b6:	f7fd ff5b 	bl	a270 <_ZN11TinyGPSDate3dayEv>
    c3ba:	9007      	str	r0, [sp, #28]
										tgps.time.hour(), tgps.time.minute(), tgps.time.second());
    c3bc:	4c46      	ldr	r4, [pc, #280]	; (c4d8 <_Z9ThreadGPSPv+0x318>)
    c3be:	3448      	adds	r4, #72	; 0x48
    c3c0:	0020      	movs	r0, r4
    c3c2:	f7fd ff65 	bl	a290 <_ZN11TinyGPSTime4hourEv>
    c3c6:	0006      	movs	r6, r0
    c3c8:	0020      	movs	r0, r4
    c3ca:	f7fd ff71 	bl	a2b0 <_ZN11TinyGPSTime6minuteEv>
    c3ce:	0007      	movs	r7, r0
    c3d0:	0020      	movs	r0, r4
    c3d2:	f7fd ff7d 	bl	a2d0 <_ZN11TinyGPSTime6secondEv>
								xprintf("gps date %d-%02d-%02d %02d:%02d:%02d\n", tgps.date.year(), tgps.date.month(), tgps.date.day(),
    c3d6:	9002      	str	r0, [sp, #8]
    c3d8:	9701      	str	r7, [sp, #4]
    c3da:	9600      	str	r6, [sp, #0]
										tgps.time.hour(), tgps.time.minute(), tgps.time.second());
    c3dc:	9b07      	ldr	r3, [sp, #28]
    c3de:	9a06      	ldr	r2, [sp, #24]
    c3e0:	9905      	ldr	r1, [sp, #20]
    c3e2:	4847      	ldr	r0, [pc, #284]	; (c500 <_Z9ThreadGPSPv+0x340>)
    c3e4:	f7f8 fd94 	bl	4f10 <xprintf>
								time.year   = tgps.date.year();
    c3e8:	9f04      	ldr	r7, [sp, #16]
    c3ea:	0038      	movs	r0, r7
    c3ec:	f7fd ff20 	bl	a230 <_ZN11TinyGPSDate4yearEv>
    c3f0:	ae08      	add	r6, sp, #32
    c3f2:	80f0      	strh	r0, [r6, #6]
								time.month  = tgps.date.month();
    c3f4:	0038      	movs	r0, r7
    c3f6:	f7fd ff2b 	bl	a250 <_ZN11TinyGPSDate5monthEv>
    c3fa:	7170      	strb	r0, [r6, #5]
								time.day    = tgps.date.day();
    c3fc:	0038      	movs	r0, r7
    c3fe:	f7fd ff37 	bl	a270 <_ZN11TinyGPSDate3dayEv>
    c402:	7130      	strb	r0, [r6, #4]
								time.hour   = tgps.time.hour();
    c404:	0020      	movs	r0, r4
    c406:	f7fd ff43 	bl	a290 <_ZN11TinyGPSTime4hourEv>
    c40a:	70b0      	strb	r0, [r6, #2]
								time.minute = tgps.time.minute();
    c40c:	0020      	movs	r0, r4
    c40e:	f7fd ff4f 	bl	a2b0 <_ZN11TinyGPSTime6minuteEv>
    c412:	7070      	strb	r0, [r6, #1]
								time.second = tgps.time.second();
    c414:	0020      	movs	r0, r4
    c416:	f7fd ff5b 	bl	a2d0 <_ZN11TinyGPSTime6secondEv>
    c41a:	7030      	strb	r0, [r6, #0]
								rtc_calendar_set_time(&rtc_instance, &time);
    c41c:	0031      	movs	r1, r6
    c41e:	4839      	ldr	r0, [pc, #228]	; (c504 <_Z9ThreadGPSPv+0x344>)
    c420:	f7f7 fff6 	bl	4410 <rtc_calendar_set_time>
								setTime = false;
    c424:	2200      	movs	r2, #0
    c426:	4b33      	ldr	r3, [pc, #204]	; (c4f4 <_Z9ThreadGPSPv+0x334>)
    c428:	701a      	strb	r2, [r3, #0]
    c42a:	e7a3      	b.n	c374 <_Z9ThreadGPSPv+0x1b4>
						xprintf("UBX Msg Error\n");
    c42c:	4836      	ldr	r0, [pc, #216]	; (c508 <_Z9ThreadGPSPv+0x348>)
    c42e:	f7f8 fd6f 	bl	4f10 <xprintf>
						if (temp != 0x62)
    c432:	2e62      	cmp	r6, #98	; 0x62
    c434:	d100      	bne.n	c438 <_Z9ThreadGPSPv+0x278>
    c436:	e71a      	b.n	c26e <_Z9ThreadGPSPv+0xae>
							gpsMessage[gpsMsgIdx++] = temp;
    c438:	2201      	movs	r2, #1
    c43a:	4b26      	ldr	r3, [pc, #152]	; (c4d4 <_Z9ThreadGPSPv+0x314>)
    c43c:	601a      	str	r2, [r3, #0]
    c43e:	4b28      	ldr	r3, [pc, #160]	; (c4e0 <_Z9ThreadGPSPv+0x320>)
    c440:	701f      	strb	r7, [r3, #0]
							msgType = 0;
    c442:	2400      	movs	r4, #0
    c444:	e713      	b.n	c26e <_Z9ThreadGPSPv+0xae>
							if (gpsMsgIdx == 6)
    c446:	2906      	cmp	r1, #6
    c448:	d000      	beq.n	c44c <_Z9ThreadGPSPv+0x28c>
    c44a:	e710      	b.n	c26e <_Z9ThreadGPSPv+0xae>
								gpsLen = (int) gpsMessage[4] + (((int) gpsMessage[5]) * (int) 256) + 8; // including SYNC(2) CLASS ID LEN(2) CK(2)
    c44c:	4b24      	ldr	r3, [pc, #144]	; (c4e0 <_Z9ThreadGPSPv+0x320>)
    c44e:	7959      	ldrb	r1, [r3, #5]
    c450:	0209      	lsls	r1, r1, #8
    c452:	791b      	ldrb	r3, [r3, #4]
    c454:	18c9      	adds	r1, r1, r3
    c456:	3108      	adds	r1, #8
    c458:	4b22      	ldr	r3, [pc, #136]	; (c4e4 <_Z9ThreadGPSPv+0x324>)
    c45a:	6019      	str	r1, [r3, #0]
								if (ubxCount > 0)
    c45c:	4b22      	ldr	r3, [pc, #136]	; (c4e8 <_Z9ThreadGPSPv+0x328>)
    c45e:	681b      	ldr	r3, [r3, #0]
    c460:	2b00      	cmp	r3, #0
    c462:	d10e      	bne.n	c482 <_Z9ThreadGPSPv+0x2c2>
								if (gpsLen > sizeof(gpsMessage))
    c464:	4b1f      	ldr	r3, [pc, #124]	; (c4e4 <_Z9ThreadGPSPv+0x324>)
    c466:	6819      	ldr	r1, [r3, #0]
    c468:	2380      	movs	r3, #128	; 0x80
    c46a:	009b      	lsls	r3, r3, #2
    c46c:	4299      	cmp	r1, r3
    c46e:	d800      	bhi.n	c472 <_Z9ThreadGPSPv+0x2b2>
    c470:	e6fd      	b.n	c26e <_Z9ThreadGPSPv+0xae>
									xprintf("UBX msg too long : Len %d\n", gpsLen);
    c472:	4826      	ldr	r0, [pc, #152]	; (c50c <_Z9ThreadGPSPv+0x34c>)
    c474:	f7f8 fd4c 	bl	4f10 <xprintf>
									gpsMsgIdx = 0;
    c478:	2200      	movs	r2, #0
    c47a:	4b16      	ldr	r3, [pc, #88]	; (c4d4 <_Z9ThreadGPSPv+0x314>)
    c47c:	601a      	str	r2, [r3, #0]
									msgType = 0;
    c47e:	2400      	movs	r4, #0
    c480:	e6f5      	b.n	c26e <_Z9ThreadGPSPv+0xae>
									xprintf("UBX msg Len %d\n", gpsLen);
    c482:	4823      	ldr	r0, [pc, #140]	; (c510 <_Z9ThreadGPSPv+0x350>)
    c484:	f7f8 fd44 	bl	4f10 <xprintf>
    c488:	e7ec      	b.n	c464 <_Z9ThreadGPSPv+0x2a4>
							uint8_t CK_A = 0, CK_B = 0;
    c48a:	2100      	movs	r1, #0
    c48c:	2700      	movs	r7, #0
    c48e:	e725      	b.n	c2dc <_Z9ThreadGPSPv+0x11c>
								ubxSumError++;
    c490:	4920      	ldr	r1, [pc, #128]	; (c514 <_Z9ThreadGPSPv+0x354>)
    c492:	680a      	ldr	r2, [r1, #0]
    c494:	3201      	adds	r2, #1
    c496:	600a      	str	r2, [r1, #0]
    c498:	e72f      	b.n	c2fa <_Z9ThreadGPSPv+0x13a>
								xprintf("UBX %d ID %d len %d CH errors %d\n", gpsMessage[2], gpsMessage[3], gpsLen, ubxSumError);
    c49a:	4911      	ldr	r1, [pc, #68]	; (c4e0 <_Z9ThreadGPSPv+0x320>)
    c49c:	78ca      	ldrb	r2, [r1, #3]
    c49e:	7889      	ldrb	r1, [r1, #2]
    c4a0:	481c      	ldr	r0, [pc, #112]	; (c514 <_Z9ThreadGPSPv+0x354>)
    c4a2:	6800      	ldr	r0, [r0, #0]
    c4a4:	9000      	str	r0, [sp, #0]
    c4a6:	481c      	ldr	r0, [pc, #112]	; (c518 <_Z9ThreadGPSPv+0x358>)
    c4a8:	f7f8 fd32 	bl	4f10 <xprintf>
								ubxCount--;
    c4ac:	4a0e      	ldr	r2, [pc, #56]	; (c4e8 <_Z9ThreadGPSPv+0x328>)
    c4ae:	6813      	ldr	r3, [r2, #0]
    c4b0:	3b01      	subs	r3, #1
    c4b2:	6013      	str	r3, [r2, #0]
    c4b4:	e726      	b.n	c304 <_Z9ThreadGPSPv+0x144>
    c4b6:	46c0      	nop			; (mov r8, r8)
    c4b8:	0000f614 	.word	0x0000f614
    c4bc:	20001d90 	.word	0x20001d90
    c4c0:	20001880 	.word	0x20001880
    c4c4:	200018b0 	.word	0x200018b0
    c4c8:	20001890 	.word	0x20001890
    c4cc:	20001ab0 	.word	0x20001ab0
    c4d0:	e000e100 	.word	0xe000e100
    c4d4:	20001830 	.word	0x20001830
    c4d8:	20001cb0 	.word	0x20001cb0
    c4dc:	41004400 	.word	0x41004400
    c4e0:	20001630 	.word	0x20001630
    c4e4:	2000162c 	.word	0x2000162c
    c4e8:	20001d88 	.word	0x20001d88
    c4ec:	0000f620 	.word	0x0000f620
    c4f0:	200018a4 	.word	0x200018a4
    c4f4:	20000897 	.word	0x20000897
    c4f8:	20001db8 	.word	0x20001db8
    c4fc:	0000f63c 	.word	0x0000f63c
    c500:	0000f668 	.word	0x0000f668
    c504:	20006448 	.word	0x20006448
    c508:	0000f690 	.word	0x0000f690
    c50c:	0000f6b0 	.word	0x0000f6b0
    c510:	0000f6a0 	.word	0x0000f6a0
    c514:	20001d8c 	.word	0x20001d8c
    c518:	0000f6cc 	.word	0x0000f6cc
    c51c:	00000000 	.word	0x00000000

0000c520 <_GLOBAL__sub_I_usart_gps>:
					break;
			} // switch
		} // while chars in buffer
	}
}
    c520:	b510      	push	{r4, lr}
TinyGPSPlus tgps;
    c522:	4802      	ldr	r0, [pc, #8]	; (c52c <_GLOBAL__sub_I_usart_gps+0xc>)
    c524:	f7fd fd6c 	bl	a000 <_ZN11TinyGPSPlusC1Ev>
}
    c528:	bd10      	pop	{r4, pc}
    c52a:	46c0      	nop			; (mov r8, r8)
    c52c:	20001cb0 	.word	0x20001cb0

0000c530 <_Z3taphh>:
}

typedef int inv_error_t;

void tap(unsigned char dir, unsigned char count)
{
    c530:	b530      	push	{r4, r5, lr}
    c532:	b083      	sub	sp, #12
    c534:	0005      	movs	r5, r0
    c536:	000c      	movs	r4, r1
	unsigned char data[2];
	data[0] = dir;
    c538:	aa01      	add	r2, sp, #4
    c53a:	7010      	strb	r0, [r2, #0]
	data[1] = count;
    c53c:	7051      	strb	r1, [r2, #1]

	writeFile(0x02, 2, data);
    c53e:	2102      	movs	r1, #2
    c540:	2002      	movs	r0, #2
    c542:	f000 fb95 	bl	cc70 <writeFile>

	xprintf("tap count %d dir %d\n", count, dir);
    c546:	002a      	movs	r2, r5
    c548:	0021      	movs	r1, r4
    c54a:	4802      	ldr	r0, [pc, #8]	; (c554 <_Z3taphh+0x24>)
    c54c:	f7f8 fce0 	bl	4f10 <xprintf>
}
    c550:	b003      	add	sp, #12
    c552:	bd30      	pop	{r4, r5, pc}
    c554:	0000f728 	.word	0x0000f728
	...

0000c560 <NMI_Handler>:
static inline void extint_nmi_clear_detected(
		const uint8_t nmi_channel)
{
	Eic *const eic_module = _extint_get_eic_from_nmi(nmi_channel);

	eic_module->NMIFLAG.reg = EIC_NMIFLAG_NMI;
    c560:	2201      	movs	r2, #1
    c562:	4b06      	ldr	r3, [pc, #24]	; (c57c <NMI_Handler+0x1c>)
    c564:	70da      	strb	r2, [r3, #3]
		port_base->OUTSET.reg = pin_mask;
    c566:	2280      	movs	r2, #128	; 0x80
    c568:	0292      	lsls	r2, r2, #10
    c56a:	4b05      	ldr	r3, [pc, #20]	; (c580 <NMI_Handler+0x20>)
    c56c:	619a      	str	r2, [r3, #24]
	nmiCount++;
    c56e:	4a05      	ldr	r2, [pc, #20]	; (c584 <NMI_Handler+0x24>)
    c570:	8813      	ldrh	r3, [r2, #0]
    c572:	3301      	adds	r3, #1
    c574:	b29b      	uxth	r3, r3
    c576:	8013      	strh	r3, [r2, #0]
}
    c578:	4770      	bx	lr
    c57a:	46c0      	nop			; (mov r8, r8)
    c57c:	40001800 	.word	0x40001800
    c580:	41004400 	.word	0x41004400
    c584:	20001e50 	.word	0x20001e50
	...

0000c590 <i2c_write>:
{
    c590:	b5f0      	push	{r4, r5, r6, r7, lr}
    c592:	b083      	sub	sp, #12
    c594:	0016      	movs	r6, r2
    c596:	001f      	movs	r7, r3
    c598:	466b      	mov	r3, sp
    c59a:	71d9      	strb	r1, [r3, #7]
    c59c:	3307      	adds	r3, #7
	packet.address = slave_addr;
    c59e:	490e      	ldr	r1, [pc, #56]	; (c5d8 <i2c_write+0x48>)
    c5a0:	8008      	strh	r0, [r1, #0]
	packet.data_length = 1;
    c5a2:	2201      	movs	r2, #1
    c5a4:	804a      	strh	r2, [r1, #2]
	packet.data = &reg_addr;
    c5a6:	604b      	str	r3, [r1, #4]
	status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance,	&packet);
    c5a8:	480c      	ldr	r0, [pc, #48]	; (c5dc <i2c_write+0x4c>)
    c5aa:	f7f7 fb69 	bl	3c80 <i2c_master_write_packet_wait_no_stop>
	for (int i = 0; i < length; i++)
    c5ae:	2400      	movs	r4, #0
    c5b0:	2e00      	cmp	r6, #0
    c5b2:	dd0e      	ble.n	c5d2 <i2c_write+0x42>
		status = i2c_master_write_byte(&i2c_master_instance, data[i]);
    c5b4:	4d09      	ldr	r5, [pc, #36]	; (c5dc <i2c_write+0x4c>)
    c5b6:	5d39      	ldrb	r1, [r7, r4]
    c5b8:	0028      	movs	r0, r5
    c5ba:	f7f7 fb79 	bl	3cb0 <i2c_master_write_byte>
	for (int i = 0; i < length; i++)
    c5be:	3401      	adds	r4, #1
    c5c0:	42b4      	cmp	r4, r6
    c5c2:	dbf8      	blt.n	c5b6 <i2c_write+0x26>
		status = i2c_master_write_byte(&i2c_master_instance, data[i]);
    c5c4:	0004      	movs	r4, r0
	i2c_master_send_stop(&i2c_master_instance);
    c5c6:	4805      	ldr	r0, [pc, #20]	; (c5dc <i2c_write+0x4c>)
    c5c8:	f7f7 fb62 	bl	3c90 <i2c_master_send_stop>
}
    c5cc:	0020      	movs	r0, r4
    c5ce:	b003      	add	sp, #12
    c5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance,	&packet);
    c5d2:	0004      	movs	r4, r0
    c5d4:	e7f7      	b.n	c5c6 <i2c_write+0x36>
    c5d6:	46c0      	nop			; (mov r8, r8)
    c5d8:	20001e54 	.word	0x20001e54
    c5dc:	20001e08 	.word	0x20001e08

0000c5e0 <i2c_read>:
{
    c5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5e2:	b083      	sub	sp, #12
    c5e4:	0016      	movs	r6, r2
    c5e6:	001d      	movs	r5, r3
    c5e8:	466b      	mov	r3, sp
    c5ea:	71d9      	strb	r1, [r3, #7]
    c5ec:	3307      	adds	r3, #7
	packet.address = slave_addr;
    c5ee:	b287      	uxth	r7, r0
    c5f0:	490c      	ldr	r1, [pc, #48]	; (c624 <i2c_read+0x44>)
    c5f2:	800f      	strh	r7, [r1, #0]
	packet.data_length = 1;
    c5f4:	2201      	movs	r2, #1
    c5f6:	804a      	strh	r2, [r1, #2]
	packet.data = &reg_addr;
    c5f8:	604b      	str	r3, [r1, #4]
	status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance,	&packet);
    c5fa:	480b      	ldr	r0, [pc, #44]	; (c628 <i2c_read+0x48>)
    c5fc:	f7f7 fb40 	bl	3c80 <i2c_master_write_packet_wait_no_stop>
    c600:	1e04      	subs	r4, r0, #0
	if (status == STATUS_OK)
    c602:	d005      	beq.n	c610 <i2c_read+0x30>
		i2c_master_send_stop(&i2c_master_instance);
    c604:	4808      	ldr	r0, [pc, #32]	; (c628 <i2c_read+0x48>)
    c606:	f7f7 fb43 	bl	3c90 <i2c_master_send_stop>
}
    c60a:	0020      	movs	r0, r4
    c60c:	b003      	add	sp, #12
    c60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		packet.address = slave_addr;
    c610:	4904      	ldr	r1, [pc, #16]	; (c624 <i2c_read+0x44>)
    c612:	800f      	strh	r7, [r1, #0]
		packet.data_length = length;
    c614:	804e      	strh	r6, [r1, #2]
		packet.data = data;
    c616:	604d      	str	r5, [r1, #4]
		status = i2c_master_read_packet_wait(&i2c_master_instance, &packet);
    c618:	4803      	ldr	r0, [pc, #12]	; (c628 <i2c_read+0x48>)
    c61a:	f7f7 fb29 	bl	3c70 <i2c_master_read_packet_wait>
    c61e:	0004      	movs	r4, r0
    c620:	e7f3      	b.n	c60a <i2c_read+0x2a>
    c622:	46c0      	nop			; (mov r8, r8)
    c624:	20001e54 	.word	0x20001e54
    c628:	20001e08 	.word	0x20001e08
    c62c:	00000000 	.word	0x00000000

0000c630 <_Z20configure_i2c_masterv>:
{
    c630:	b510      	push	{r4, lr}
    c632:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    c634:	aa01      	add	r2, sp, #4
    c636:	2364      	movs	r3, #100	; 0x64
    c638:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    c63a:	4b1c      	ldr	r3, [pc, #112]	; (c6ac <_Z20configure_i2c_masterv+0x7c>)
    c63c:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    c63e:	2300      	movs	r3, #0
    c640:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    c642:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    c644:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    c646:	2180      	movs	r1, #128	; 0x80
    c648:	0389      	lsls	r1, r1, #14
    c64a:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    c64c:	2101      	movs	r1, #1
    c64e:	4249      	negs	r1, r1
    c650:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    c652:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    c654:	3125      	adds	r1, #37	; 0x25
    c656:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    c658:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    c65a:	3108      	adds	r1, #8
    c65c:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    c65e:	3101      	adds	r1, #1
    c660:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    c662:	3101      	adds	r1, #1
    c664:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    c666:	33d7      	adds	r3, #215	; 0xd7
    c668:	8613      	strh	r3, [r2, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    c66a:	4b11      	ldr	r3, [pc, #68]	; (c6b0 <_Z20configure_i2c_masterv+0x80>)
    c66c:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    c66e:	4b11      	ldr	r3, [pc, #68]	; (c6b4 <_Z20configure_i2c_masterv+0x84>)
    c670:	6213      	str	r3, [r2, #32]
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    c672:	4c11      	ldr	r4, [pc, #68]	; (c6b8 <_Z20configure_i2c_masterv+0x88>)
    c674:	4911      	ldr	r1, [pc, #68]	; (c6bc <_Z20configure_i2c_masterv+0x8c>)
    c676:	0020      	movs	r0, r4
    c678:	f7f7 fa5a 	bl	3b30 <i2c_master_init>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    c67c:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    c67e:	2107      	movs	r1, #7
    c680:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    c682:	4219      	tst	r1, r3
    c684:	d1fc      	bne.n	c680 <_Z20configure_i2c_masterv+0x50>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    c686:	6813      	ldr	r3, [r2, #0]
    c688:	2102      	movs	r1, #2
    c68a:	430b      	orrs	r3, r1
    c68c:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    c68e:	4b0a      	ldr	r3, [pc, #40]	; (c6b8 <_Z20configure_i2c_masterv+0x88>)
    c690:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    c692:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    c694:	2010      	movs	r0, #16
    c696:	8b51      	ldrh	r1, [r2, #26]
    c698:	4201      	tst	r1, r0
    c69a:	d104      	bne.n	c6a6 <_Z20configure_i2c_masterv+0x76>
		timeout_counter++;
    c69c:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    c69e:	42a3      	cmp	r3, r4
    c6a0:	d3f9      	bcc.n	c696 <_Z20configure_i2c_masterv+0x66>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    c6a2:	2310      	movs	r3, #16
    c6a4:	8353      	strh	r3, [r2, #26]
}
    c6a6:	b00e      	add	sp, #56	; 0x38
    c6a8:	bd10      	pop	{r4, pc}
    c6aa:	46c0      	nop			; (mov r8, r8)
    c6ac:	00000d48 	.word	0x00000d48
    c6b0:	00160002 	.word	0x00160002
    c6b4:	00170002 	.word	0x00170002
    c6b8:	20001e08 	.word	0x20001e08
    c6bc:	42001400 	.word	0x42001400

0000c6c0 <_Z13configure_imuv>:

int8_t configure_imu(void)
{
    c6c0:	b510      	push	{r4, lr}
    c6c2:	b086      	sub	sp, #24
	//	config_pinmux.input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	//
	//	system_pinmux_pin_set_config(PIN_PA08, &config_pinmux);

	// INT pin
	pin_conf.direction = PORT_PIN_DIR_INPUT;
    c6c4:	ac04      	add	r4, sp, #16
    c6c6:	2300      	movs	r3, #0
    c6c8:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(PIN_PA08, &pin_conf);
    c6ca:	0021      	movs	r1, r4
    c6cc:	2008      	movs	r0, #8
    c6ce:	f7f8 f827 	bl	4720 <port_pin_set_config>

	// FSYNC pin
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c6d2:	2301      	movs	r3, #1
    c6d4:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(PIN_PA09, &pin_conf);
    c6d6:	0021      	movs	r1, r4
    c6d8:	2009      	movs	r0, #9
    c6da:	f7f8 f821 	bl	4720 <port_pin_set_config>
		port_base->OUTCLR.reg = pin_mask;
    c6de:	2280      	movs	r2, #128	; 0x80
    c6e0:	0092      	lsls	r2, r2, #2
    c6e2:	4b3e      	ldr	r3, [pc, #248]	; (c7dc <_Z13configure_imuv+0x11c>)
    c6e4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA09, 0);

	result = mpu_init(&int_param);
    c6e6:	a805      	add	r0, sp, #20
    c6e8:	f7f9 fafa 	bl	5ce0 <mpu_init>
	if (result != 0)
    c6ec:	2800      	cmp	r0, #0
    c6ee:	d000      	beq.n	c6f2 <_Z13configure_imuv+0x32>
    c6f0:	e06d      	b.n	c7ce <_Z13configure_imuv+0x10e>
		xprintf("mpu init failed\n");

		return -1;
	}

	mpu_set_bypass(1); // Place all slaves (including compass) on primary bus
    c6f2:	2001      	movs	r0, #1
    c6f4:	f7f9 f824 	bl	5740 <mpu_set_bypass>

	mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
    c6f8:	2079      	movs	r0, #121	; 0x79
    c6fa:	f7f9 fa01 	bl	5b00 <mpu_set_sensors>

	// Set up MPU-9250 interrupt:
	//set_int_enable(1); // Enable interrupt output
	set_int_enable(0x02); // Data READY (0x01) and DMP (0x02)
    c6fe:	2002      	movs	r0, #2
    c700:	f7f8 fc2e 	bl	4f60 <set_int_enable>

	mpu_set_int_level(1);    // Set interrupt to active-low
    c704:	2001      	movs	r0, #1
    c706:	f7f9 f8d3 	bl	58b0 <mpu_set_int_level>
	mpu_set_int_latched(0);  // Latch interrupt output
    c70a:	2000      	movs	r0, #0
    c70c:	f7f9 f8d8 	bl	58c0 <mpu_set_int_latched>

	// Configure sensors:
	// Set gyro full-scale range: options are 250, 500, 1000, or 2000:
	mpu_set_gyro_fsr(2000);
    c710:	20fa      	movs	r0, #250	; 0xfa
    c712:	00c0      	lsls	r0, r0, #3
    c714:	f7f8 fda4 	bl	5260 <mpu_set_gyro_fsr>
	// Set accel full-scale range: options are 2, 4, 8, or 16 g
	mpu_set_accel_fsr(4);
    c718:	2004      	movs	r0, #4
    c71a:	f7f8 fe19 	bl	5350 <mpu_set_accel_fsr>
	// Set gyro/accel LPF: options are 5, 10, 20, 42, 98, 188 Hz
	mpu_set_lpf(20);
    c71e:	2014      	movs	r0, #20
    c720:	f7f8 fe5e 	bl	53e0 <mpu_set_lpf>
	// Set gyro/accel sample rate: must be between 4-1000Hz
	// (note: this value will be overridden by the DMP sample rate)
	mpu_set_sample_rate(120);
    c724:	2078      	movs	r0, #120	; 0x78
    c726:	f7f9 f983 	bl	5a30 <mpu_set_sample_rate>
	// Set compass sample rate: between 4-100Hz
	mpu_set_compass_sample_rate(10);
    c72a:	200a      	movs	r0, #10
    c72c:	f7f8 feb0 	bl	5490 <mpu_set_compass_sample_rate>

	uint16_t rate;
	int res;
	res = mpu_get_compass_sample_rate(&rate);
    c730:	240e      	movs	r4, #14
    c732:	446c      	add	r4, sp
    c734:	0020      	movs	r0, r4
    c736:	f7f8 fea3 	bl	5480 <mpu_get_compass_sample_rate>
    c73a:	0001      	movs	r1, r0
	xprintf("compass %d rate %d\n", res, rate);
    c73c:	8822      	ldrh	r2, [r4, #0]
    c73e:	4828      	ldr	r0, [pc, #160]	; (c7e0 <_Z13configure_imuv+0x120>)
    c740:	f7f8 fbe6 	bl	4f10 <xprintf>
	mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
    c744:	2079      	movs	r0, #121	; 0x79
    c746:	f7f9 f9db 	bl	5b00 <mpu_set_sensors>
	// Add accel and quaternion's to the DMP
	dmpFeatureMask |= DMP_FEATURE_SEND_RAW_ACCEL;
	dmpFeatureMask |= DMP_FEATURE_6X_LP_QUAT;

	// Initialize the DMP, and set the FIFO's update rate:
	dmp_load_motion_driver_firmware();
    c74a:	f7f9 fdd1 	bl	62f0 <dmp_load_motion_driver_firmware>
	dmp_enable_6x_lp_quat(1);
    c74e:	2001      	movs	r0, #1
    c750:	f7f9 ffee 	bl	6730 <dmp_enable_6x_lp_quat>
	dmp_set_fifo_rate(40);
    c754:	2028      	movs	r0, #40	; 0x28
    c756:	f7f9 fddb 	bl	6310 <dmp_set_fifo_rate>
	dmp_get_fifo_rate(&rate);
    c75a:	0020      	movs	r0, r4
    c75c:	f7f9 fe10 	bl	6380 <dmp_get_fifo_rate>
	xprintf("FiFo Rate %d\n", rate);
    c760:	8821      	ldrh	r1, [r4, #0]
    c762:	4820      	ldr	r0, [pc, #128]	; (c7e4 <_Z13configure_imuv+0x124>)
    c764:	f7f8 fbd4 	bl	4f10 <xprintf>
		dmp_set_tap_thresh(1<<Y_AXIS, yThresh);
	}
	if (zThresh > 0)
	{
		axes |= TAP_Z;
		dmp_set_tap_thresh(1<<Z_AXIS, zThresh);
    c768:	2164      	movs	r1, #100	; 0x64
    c76a:	2004      	movs	r0, #4
    c76c:	f7f9 fe10 	bl	6390 <dmp_set_tap_thresh>
	}
	dmp_set_tap_axes(axes);
    c770:	2004      	movs	r0, #4
    c772:	f7f9 fedd 	bl	6530 <dmp_set_tap_axes>
	dmp_set_tap_count(taps);
    c776:	2001      	movs	r0, #1
    c778:	f7f9 ff02 	bl	6580 <dmp_set_tap_count>
	dmp_set_tap_time(tapTime);
    c77c:	2064      	movs	r0, #100	; 0x64
    c77e:	f7f9 ff17 	bl	65b0 <dmp_set_tap_time>
	dmp_set_tap_time_multi(tapMulti);
    c782:	20fa      	movs	r0, #250	; 0xfa
    c784:	0080      	lsls	r0, r0, #2
    c786:	f7f9 ff2b 	bl	65e0 <dmp_set_tap_time_multi>

	dmp_register_tap_cb(tap);
    c78a:	4817      	ldr	r0, [pc, #92]	; (c7e8 <_Z13configure_imuv+0x128>)
    c78c:	f7fa f9e0 	bl	6b50 <dmp_register_tap_cb>

	dmp_enable_feature(dmpFeatureMask |= DMP_FEATURE_TAP);
    c790:	2052      	movs	r0, #82	; 0x52
    c792:	30ff      	adds	r0, #255	; 0xff
    c794:	f7f9 ffec 	bl	6770 <dmp_enable_feature>
	mpu_set_dmp_state(1);
    c798:	2001      	movs	r0, #1
    c79a:	f7f9 fd09 	bl	61b0 <mpu_set_dmp_state>

	// Enable NMI interrupt
	/* Initialize EIC for NMI */
	struct extint_nmi_conf eint_nmi_conf;

	eint_nmi_conf.gpio_pin            = PIN_PA08A_EIC_NMI;
    c79e:	2308      	movs	r3, #8
    c7a0:	9300      	str	r3, [sp, #0]
	eint_nmi_conf.gpio_pin_mux        = PINMUX_PA08A_EIC_NMI;
    c7a2:	2380      	movs	r3, #128	; 0x80
    c7a4:	031b      	lsls	r3, r3, #12
    c7a6:	9301      	str	r3, [sp, #4]
	eint_nmi_conf.detection_criteria  = EXTINT_DETECT_FALLING;
    c7a8:	2302      	movs	r3, #2
    c7aa:	466a      	mov	r2, sp
    c7ac:	7293      	strb	r3, [r2, #10]
	eint_nmi_conf.filter_input_signal = false;
    c7ae:	2400      	movs	r4, #0
    c7b0:	7254      	strb	r4, [r2, #9]

	extint_nmi_set_config(0, &eint_nmi_conf);
    c7b2:	4669      	mov	r1, sp
    c7b4:	2000      	movs	r0, #0
    c7b6:	f7f8 fa03 	bl	4bc0 <extint_nmi_set_config>

	pin_conf.direction = PORT_PIN_DIR_INPUT;
    c7ba:	a904      	add	r1, sp, #16
    c7bc:	700c      	strb	r4, [r1, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    c7be:	2301      	movs	r3, #1
    c7c0:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(PIN_PA08, &pin_conf);
    c7c2:	2008      	movs	r0, #8
    c7c4:	f7f7 ffac 	bl	4720 <port_pin_set_config>

	return 0;
    c7c8:	2000      	movs	r0, #0
}
    c7ca:	b006      	add	sp, #24
    c7cc:	bd10      	pop	{r4, pc}
		xprintf("mpu init failed\n");
    c7ce:	4807      	ldr	r0, [pc, #28]	; (c7ec <_Z13configure_imuv+0x12c>)
    c7d0:	f7f8 fb9e 	bl	4f10 <xprintf>
		return -1;
    c7d4:	2001      	movs	r0, #1
    c7d6:	4240      	negs	r0, r0
    c7d8:	e7f7      	b.n	c7ca <_Z13configure_imuv+0x10a>
    c7da:	46c0      	nop			; (mov r8, r8)
    c7dc:	41004400 	.word	0x41004400
    c7e0:	0000f704 	.word	0x0000f704
    c7e4:	0000f718 	.word	0x0000f718
    c7e8:	0000c531 	.word	0x0000c531
    c7ec:	0000f6f0 	.word	0x0000f6f0

0000c7f0 <_Z9ThreadMPUPv>:
float ax, ay, az;
float gx, gy, gz;
float mx, my, mz;

THD_FUNCTION(ThreadMPU, arg)
{
    c7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7f2:	46de      	mov	lr, fp
    c7f4:	4657      	mov	r7, sl
    c7f6:	464e      	mov	r6, r9
    c7f8:	4645      	mov	r5, r8
    c7fa:	b5e0      	push	{r5, r6, r7, lr}
    c7fc:	b091      	sub	sp, #68	; 0x44
	(void) arg;
	int result;

	configure_i2c_master();
    c7fe:	f7ff ff17 	bl	c630 <_Z20configure_i2c_masterv>

	chThdSleepMilliseconds(400);
    c802:	20c8      	movs	r0, #200	; 0xc8
    c804:	0040      	lsls	r0, r0, #1
    c806:	f7f6 fb4b 	bl	2ea0 <chThdSleep>
	xprintf("mpuThread\n");
    c80a:	48d0      	ldr	r0, [pc, #832]	; (cb4c <_Z9ThreadMPUPv+0x35c>)
    c80c:	f7f8 fb80 	bl	4f10 <xprintf>
	chThdSleepMilliseconds(500);
    c810:	20fa      	movs	r0, #250	; 0xfa
    c812:	0040      	lsls	r0, r0, #1
    c814:	f7f6 fb44 	bl	2ea0 <chThdSleep>

	if (configure_imu() < 0)
    c818:	f7ff ff52 	bl	c6c0 <_Z13configure_imuv>
    c81c:	2800      	cmp	r0, #0
    c81e:	da05      	bge.n	c82c <_Z9ThreadMPUPv+0x3c>
	{
		while(1)
		{
			chThdSleepMilliseconds(1000);
    c820:	24fa      	movs	r4, #250	; 0xfa
    c822:	00a4      	lsls	r4, r4, #2
    c824:	0020      	movs	r0, r4
    c826:	f7f6 fb3b 	bl	2ea0 <chThdSleep>
    c82a:	e7fb      	b.n	c824 <_Z9ThreadMPUPv+0x34>
		}
	}

	mpu_get_accel_sens(&_aSense);
    c82c:	48c8      	ldr	r0, [pc, #800]	; (cb50 <_Z9ThreadMPUPv+0x360>)
    c82e:	f7f8 fe8f 	bl	5550 <mpu_get_accel_sens>
	mpu_get_gyro_sens(&_gSense);
    c832:	48c8      	ldr	r0, [pc, #800]	; (cb54 <_Z9ThreadMPUPv+0x364>)
    c834:	f7f8 fe64 	bl	5500 <mpu_get_gyro_sens>
	_mSense = 6.665f; // Constant - 4915 / 32760
    c838:	4ac7      	ldr	r2, [pc, #796]	; (cb58 <_Z9ThreadMPUPv+0x368>)
    c83a:	4bc8      	ldr	r3, [pc, #800]	; (cb5c <_Z9ThreadMPUPv+0x36c>)
    c83c:	601a      	str	r2, [r3, #0]

		if ((imuStatus & 0x02) != 0)
		{
			//xprintf("IMU status 0x%02x\n", imuStatus);

			result = mpu_get_temperature(&imuData.temp, NULL);
    c83e:	4bc8      	ldr	r3, [pc, #800]	; (cb60 <_Z9ThreadMPUPv+0x370>)
    c840:	3324      	adds	r3, #36	; 0x24
    c842:	930d      	str	r3, [sp, #52]	; 0x34

			result = 0;
			more = 1;
			for (int i = 0; ((i < fifo) & (result == 0) & (more > 0)); i++)
			{
				result = dmp_read_fifo(imuData.gyro, imuData.accel, imuData.quat, NULL, &sensors, &more);
    c844:	4fc6      	ldr	r7, [pc, #792]	; (cb60 <_Z9ThreadMPUPv+0x370>)
    c846:	2314      	movs	r3, #20
    c848:	469c      	mov	ip, r3
    c84a:	44bc      	add	ip, r7
    c84c:	4663      	mov	r3, ip
    c84e:	930c      	str	r3, [sp, #48]	; 0x30
    c850:	e003      	b.n	c85a <_Z9ThreadMPUPv+0x6a>
		if ((imuStatus & 0x100) != 0)
    c852:	4bc4      	ldr	r3, [pc, #784]	; (cb64 <_Z9ThreadMPUPv+0x374>)
    c854:	881b      	ldrh	r3, [r3, #0]
    c856:	05db      	lsls	r3, r3, #23
    c858:	d418      	bmi.n	c88c <_Z9ThreadMPUPv+0x9c>
		chEvtWaitAnyTimeout(ALL_EVENTS, TIME_INFINITE);
    c85a:	2100      	movs	r1, #0
    c85c:	2001      	movs	r0, #1
    c85e:	4240      	negs	r0, r0
    c860:	f7f6 fb36 	bl	2ed0 <chEvtWaitAnyTimeout>
    c864:	2280      	movs	r2, #128	; 0x80
    c866:	0292      	lsls	r2, r2, #10
    c868:	4bbf      	ldr	r3, [pc, #764]	; (cb68 <_Z9ThreadMPUPv+0x378>)
    c86a:	615a      	str	r2, [r3, #20]
		mpu_get_int_status(&imuStatus);
    c86c:	48bd      	ldr	r0, [pc, #756]	; (cb64 <_Z9ThreadMPUPv+0x374>)
    c86e:	f7f8 fed7 	bl	5620 <mpu_get_int_status>
		if ((imuStatus & 0x02) != 0)
    c872:	4bbc      	ldr	r3, [pc, #752]	; (cb64 <_Z9ThreadMPUPv+0x374>)
    c874:	881b      	ldrh	r3, [r3, #0]
    c876:	079b      	lsls	r3, r3, #30
    c878:	d5eb      	bpl.n	c852 <_Z9ThreadMPUPv+0x62>
			result = mpu_get_temperature(&imuData.temp, NULL);
    c87a:	2100      	movs	r1, #0
    c87c:	980d      	ldr	r0, [sp, #52]	; 0x34
    c87e:	f7f8 fbb7 	bl	4ff0 <mpu_get_temperature>
			result = mpu_get_compass_reg(imuData.compass, NULL);
    c882:	2100      	movs	r1, #0
    c884:	48b6      	ldr	r0, [pc, #728]	; (cb60 <_Z9ThreadMPUPv+0x370>)
    c886:	f7f9 fcdb 	bl	6240 <mpu_get_compass_reg>
    c88a:	e7e2      	b.n	c852 <_Z9ThreadMPUPv+0x62>
			mpu_read_reg(MPU9250_FIFO_COUNTH, &fifoH);
    c88c:	251b      	movs	r5, #27
    c88e:	ab08      	add	r3, sp, #32
    c890:	469c      	mov	ip, r3
    c892:	4465      	add	r5, ip
    c894:	0029      	movs	r1, r5
    c896:	2072      	movs	r0, #114	; 0x72
    c898:	f7f8 fb82 	bl	4fa0 <mpu_read_reg>
			mpu_read_reg(MPU9250_FIFO_COUNTL, &fifoL);
    c89c:	ac0f      	add	r4, sp, #60	; 0x3c
    c89e:	0021      	movs	r1, r4
    c8a0:	2073      	movs	r0, #115	; 0x73
    c8a2:	f7f8 fb7d 	bl	4fa0 <mpu_read_reg>
			int fifo = (fifoH << 8) | fifoL;
    c8a6:	782b      	ldrb	r3, [r5, #0]
    c8a8:	021b      	lsls	r3, r3, #8
    c8aa:	7822      	ldrb	r2, [r4, #0]
    c8ac:	4313      	orrs	r3, r2
    c8ae:	0019      	movs	r1, r3
    c8b0:	469a      	mov	sl, r3
			more = 1;
    c8b2:	2201      	movs	r2, #1
    c8b4:	231d      	movs	r3, #29
    c8b6:	a808      	add	r0, sp, #32
    c8b8:	4684      	mov	ip, r0
    c8ba:	4463      	add	r3, ip
    c8bc:	701a      	strb	r2, [r3, #0]
			for (int i = 0; ((i < fifo) & (result == 0) & (more > 0)); i++)
    c8be:	2900      	cmp	r1, #0
    c8c0:	dc00      	bgt.n	c8c4 <_Z9ThreadMPUPv+0xd4>
    c8c2:	e133      	b.n	cb2c <_Z9ThreadMPUPv+0x33c>
    c8c4:	2300      	movs	r3, #0
    c8c6:	4698      	mov	r8, r3
				result = dmp_read_fifo(imuData.gyro, imuData.accel, imuData.quat, NULL, &sensors, &more);
    c8c8:	251d      	movs	r5, #29
    c8ca:	4465      	add	r5, ip
					xprintf(" quant : %11d %11d %11d %11d", imuData.quat[0], imuData.quat[1], imuData.quat[2], imuData.quat[3]);
					xprintf(" gryo : %5d %5d %5d\n", imuData.gyro[0], imuData.gyro[1], imuData.gyro[2]);

					int h, p, r;

					h = filter.getYaw() * 100.0f;
    c8cc:	4646      	mov	r6, r8
    c8ce:	e096      	b.n	c9fe <_Z9ThreadMPUPv+0x20e>
					xprintf("fifo %d more %2d", result, more);
    c8d0:	782a      	ldrb	r2, [r5, #0]
    c8d2:	9907      	ldr	r1, [sp, #28]
    c8d4:	48a5      	ldr	r0, [pc, #660]	; (cb6c <_Z9ThreadMPUPv+0x37c>)
    c8d6:	f7f8 fb1b 	bl	4f10 <xprintf>
					xprintf(" compass : %5d %5d %5d", imuData.compass[0], imuData.compass[1], imuData.compass[2]);
    c8da:	4ca1      	ldr	r4, [pc, #644]	; (cb60 <_Z9ThreadMPUPv+0x370>)
    c8dc:	2204      	movs	r2, #4
    c8de:	5ea3      	ldrsh	r3, [r4, r2]
    c8e0:	2102      	movs	r1, #2
    c8e2:	5e62      	ldrsh	r2, [r4, r1]
    c8e4:	2000      	movs	r0, #0
    c8e6:	5e21      	ldrsh	r1, [r4, r0]
    c8e8:	48a1      	ldr	r0, [pc, #644]	; (cb70 <_Z9ThreadMPUPv+0x380>)
    c8ea:	f7f8 fb11 	bl	4f10 <xprintf>
					xprintf(" sensors 0x%02x", sensors);
    c8ee:	231e      	movs	r3, #30
    c8f0:	aa08      	add	r2, sp, #32
    c8f2:	4694      	mov	ip, r2
    c8f4:	4463      	add	r3, ip
    c8f6:	2100      	movs	r1, #0
    c8f8:	5e59      	ldrsh	r1, [r3, r1]
    c8fa:	489e      	ldr	r0, [pc, #632]	; (cb74 <_Z9ThreadMPUPv+0x384>)
    c8fc:	f7f8 fb08 	bl	4f10 <xprintf>
					xprintf(" accel : %5d %5d %5d", imuData.accel[0], imuData.accel[1], imuData.accel[2]);
    c900:	2210      	movs	r2, #16
    c902:	5ea3      	ldrsh	r3, [r4, r2]
    c904:	210e      	movs	r1, #14
    c906:	5e62      	ldrsh	r2, [r4, r1]
    c908:	200c      	movs	r0, #12
    c90a:	5e21      	ldrsh	r1, [r4, r0]
    c90c:	489a      	ldr	r0, [pc, #616]	; (cb78 <_Z9ThreadMPUPv+0x388>)
    c90e:	f7f8 faff 	bl	4f10 <xprintf>
					xprintf(" quant : %11d %11d %11d %11d", imuData.quat[0], imuData.quat[1], imuData.quat[2], imuData.quat[3]);
    c912:	69e3      	ldr	r3, [r4, #28]
    c914:	69a2      	ldr	r2, [r4, #24]
    c916:	6961      	ldr	r1, [r4, #20]
    c918:	6a20      	ldr	r0, [r4, #32]
    c91a:	9000      	str	r0, [sp, #0]
    c91c:	4897      	ldr	r0, [pc, #604]	; (cb7c <_Z9ThreadMPUPv+0x38c>)
    c91e:	f7f8 faf7 	bl	4f10 <xprintf>
					xprintf(" gryo : %5d %5d %5d\n", imuData.gyro[0], imuData.gyro[1], imuData.gyro[2]);
    c922:	220a      	movs	r2, #10
    c924:	5ea3      	ldrsh	r3, [r4, r2]
    c926:	2108      	movs	r1, #8
    c928:	5e62      	ldrsh	r2, [r4, r1]
    c92a:	2006      	movs	r0, #6
    c92c:	5e21      	ldrsh	r1, [r4, r0]
    c92e:	4894      	ldr	r0, [pc, #592]	; (cb80 <_Z9ThreadMPUPv+0x390>)
    c930:	f7f8 faee 	bl	4f10 <xprintf>
        if (!anglesComputed) computeAngles();
        return pitch * 57.29578f;
    }
    float getYaw()
    {
        if (!anglesComputed) computeAngles();
    c934:	2324      	movs	r3, #36	; 0x24
    c936:	4a93      	ldr	r2, [pc, #588]	; (cb84 <_Z9ThreadMPUPv+0x394>)
    c938:	5cd3      	ldrb	r3, [r2, r3]
    c93a:	2b00      	cmp	r3, #0
    c93c:	d02c      	beq.n	c998 <_Z9ThreadMPUPv+0x1a8>
        return yaw * 57.29578f + 180.0f;
    c93e:	4c91      	ldr	r4, [pc, #580]	; (cb84 <_Z9ThreadMPUPv+0x394>)
    c940:	4991      	ldr	r1, [pc, #580]	; (cb88 <_Z9ThreadMPUPv+0x398>)
    c942:	6a20      	ldr	r0, [r4, #32]
    c944:	f7f4 f9ba 	bl	cbc <__aeabi_fmul>
    c948:	4990      	ldr	r1, [pc, #576]	; (cb8c <_Z9ThreadMPUPv+0x39c>)
    c94a:	f7f3 fe35 	bl	5b8 <__aeabi_fadd>
					h = filter.getYaw() * 100.0f;
    c94e:	4990      	ldr	r1, [pc, #576]	; (cb90 <_Z9ThreadMPUPv+0x3a0>)
    c950:	f7f4 f9b4 	bl	cbc <__aeabi_fmul>
    c954:	f7f4 fc86 	bl	1264 <__aeabi_f2iz>
    c958:	9008      	str	r0, [sp, #32]
        return pitch * 57.29578f;
    c95a:	498b      	ldr	r1, [pc, #556]	; (cb88 <_Z9ThreadMPUPv+0x398>)
    c95c:	69e0      	ldr	r0, [r4, #28]
    c95e:	f7f4 f9ad 	bl	cbc <__aeabi_fmul>
					p = filter.getPitch() * 100.0f;
    c962:	498b      	ldr	r1, [pc, #556]	; (cb90 <_Z9ThreadMPUPv+0x3a0>)
    c964:	f7f4 f9aa 	bl	cbc <__aeabi_fmul>
    c968:	f7f4 fc7c 	bl	1264 <__aeabi_f2iz>
    c96c:	9006      	str	r0, [sp, #24]
        return roll * 57.29578f;
    c96e:	4986      	ldr	r1, [pc, #536]	; (cb88 <_Z9ThreadMPUPv+0x398>)
    c970:	4b84      	ldr	r3, [pc, #528]	; (cb84 <_Z9ThreadMPUPv+0x394>)
    c972:	6998      	ldr	r0, [r3, #24]
    c974:	f7f4 f9a2 	bl	cbc <__aeabi_fmul>
					r = filter.getRoll() * 100.0f;
    c978:	4985      	ldr	r1, [pc, #532]	; (cb90 <_Z9ThreadMPUPv+0x3a0>)
    c97a:	f7f4 f99f 	bl	cbc <__aeabi_fmul>
    c97e:	f7f4 fc71 	bl	1264 <__aeabi_f2iz>
    c982:	0003      	movs	r3, r0

					xprintf(" HPR : %5d %5d %5d\n", h, p, r);
    c984:	9a06      	ldr	r2, [sp, #24]
    c986:	9908      	ldr	r1, [sp, #32]
    c988:	4882      	ldr	r0, [pc, #520]	; (cb94 <_Z9ThreadMPUPv+0x3a4>)
    c98a:	f7f8 fac1 	bl	4f10 <xprintf>

					imuCount--;
    c98e:	4a82      	ldr	r2, [pc, #520]	; (cb98 <_Z9ThreadMPUPv+0x3a8>)
    c990:	6813      	ldr	r3, [r2, #0]
    c992:	3b01      	subs	r3, #1
    c994:	6013      	str	r3, [r2, #0]
    c996:	e0b9      	b.n	cb0c <_Z9ThreadMPUPv+0x31c>
        if (!anglesComputed) computeAngles();
    c998:	0014      	movs	r4, r2
    c99a:	0010      	movs	r0, r2
    c99c:	f7fe fe38 	bl	b610 <_ZN8Madgwick13computeAnglesEv>
        return yaw * 57.29578f + 180.0f;
    c9a0:	4979      	ldr	r1, [pc, #484]	; (cb88 <_Z9ThreadMPUPv+0x398>)
    c9a2:	6a20      	ldr	r0, [r4, #32]
    c9a4:	f7f4 f98a 	bl	cbc <__aeabi_fmul>
    c9a8:	4978      	ldr	r1, [pc, #480]	; (cb8c <_Z9ThreadMPUPv+0x39c>)
    c9aa:	f7f3 fe05 	bl	5b8 <__aeabi_fadd>
					h = filter.getYaw() * 100.0f;
    c9ae:	4978      	ldr	r1, [pc, #480]	; (cb90 <_Z9ThreadMPUPv+0x3a0>)
    c9b0:	f7f4 f984 	bl	cbc <__aeabi_fmul>
    c9b4:	f7f4 fc56 	bl	1264 <__aeabi_f2iz>
    c9b8:	9008      	str	r0, [sp, #32]
        if (!anglesComputed) computeAngles();
    c9ba:	2324      	movs	r3, #36	; 0x24
    c9bc:	5ce3      	ldrb	r3, [r4, r3]
    c9be:	2b00      	cmp	r3, #0
    c9c0:	d000      	beq.n	c9c4 <_Z9ThreadMPUPv+0x1d4>
    c9c2:	e0b7      	b.n	cb34 <_Z9ThreadMPUPv+0x344>
    c9c4:	4c6f      	ldr	r4, [pc, #444]	; (cb84 <_Z9ThreadMPUPv+0x394>)
    c9c6:	0020      	movs	r0, r4
    c9c8:	f7fe fe22 	bl	b610 <_ZN8Madgwick13computeAnglesEv>
        return pitch * 57.29578f;
    c9cc:	496e      	ldr	r1, [pc, #440]	; (cb88 <_Z9ThreadMPUPv+0x398>)
    c9ce:	69e0      	ldr	r0, [r4, #28]
    c9d0:	f7f4 f974 	bl	cbc <__aeabi_fmul>
					p = filter.getPitch() * 100.0f;
    c9d4:	496e      	ldr	r1, [pc, #440]	; (cb90 <_Z9ThreadMPUPv+0x3a0>)
    c9d6:	f7f4 f971 	bl	cbc <__aeabi_fmul>
    c9da:	f7f4 fc43 	bl	1264 <__aeabi_f2iz>
    c9de:	9006      	str	r0, [sp, #24]
        if (!anglesComputed) computeAngles();
    c9e0:	2324      	movs	r3, #36	; 0x24
    c9e2:	5ce3      	ldrb	r3, [r4, r3]
    c9e4:	2b00      	cmp	r3, #0
    c9e6:	d1c2      	bne.n	c96e <_Z9ThreadMPUPv+0x17e>
    c9e8:	4866      	ldr	r0, [pc, #408]	; (cb84 <_Z9ThreadMPUPv+0x394>)
    c9ea:	f7fe fe11 	bl	b610 <_ZN8Madgwick13computeAnglesEv>
    c9ee:	e7be      	b.n	c96e <_Z9ThreadMPUPv+0x17e>
			for (int i = 0; ((i < fifo) & (result == 0) & (more > 0)); i++)
    c9f0:	4213      	tst	r3, r2
    c9f2:	d100      	bne.n	c9f6 <_Z9ThreadMPUPv+0x206>
    c9f4:	e09a      	b.n	cb2c <_Z9ThreadMPUPv+0x33c>
    c9f6:	9b07      	ldr	r3, [sp, #28]
    c9f8:	2b00      	cmp	r3, #0
    c9fa:	d000      	beq.n	c9fe <_Z9ThreadMPUPv+0x20e>
    c9fc:	e096      	b.n	cb2c <_Z9ThreadMPUPv+0x33c>
				result = dmp_read_fifo(imuData.gyro, imuData.accel, imuData.quat, NULL, &sensors, &more);
    c9fe:	0039      	movs	r1, r7
    ca00:	310c      	adds	r1, #12
    ca02:	1db8      	adds	r0, r7, #6
    ca04:	9501      	str	r5, [sp, #4]
    ca06:	231e      	movs	r3, #30
    ca08:	aa08      	add	r2, sp, #32
    ca0a:	4694      	mov	ip, r2
    ca0c:	4463      	add	r3, ip
    ca0e:	9300      	str	r3, [sp, #0]
    ca10:	2300      	movs	r3, #0
    ca12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca14:	f7f9 ffa4 	bl	6960 <dmp_read_fifo>
    ca18:	9007      	str	r0, [sp, #28]
				ax = (float)imuData.accel[0] / (float)_aSense;
    ca1a:	4b4d      	ldr	r3, [pc, #308]	; (cb50 <_Z9ThreadMPUPv+0x360>)
    ca1c:	8818      	ldrh	r0, [r3, #0]
    ca1e:	f7f4 fc91 	bl	1344 <__aeabi_ui2f>
    ca22:	1c04      	adds	r4, r0, #0
    ca24:	230c      	movs	r3, #12
    ca26:	5ef8      	ldrsh	r0, [r7, r3]
    ca28:	f7f4 fc3c 	bl	12a4 <__aeabi_i2f>
    ca2c:	1c21      	adds	r1, r4, #0
    ca2e:	f7f3 ff55 	bl	8dc <__aeabi_fdiv>
    ca32:	4b5a      	ldr	r3, [pc, #360]	; (cb9c <_Z9ThreadMPUPv+0x3ac>)
    ca34:	9008      	str	r0, [sp, #32]
    ca36:	6018      	str	r0, [r3, #0]
				ay = (float)imuData.accel[1] / (float)_aSense;
    ca38:	230e      	movs	r3, #14
    ca3a:	5ef8      	ldrsh	r0, [r7, r3]
    ca3c:	f7f4 fc32 	bl	12a4 <__aeabi_i2f>
    ca40:	1c21      	adds	r1, r4, #0
    ca42:	f7f3 ff4b 	bl	8dc <__aeabi_fdiv>
    ca46:	4680      	mov	r8, r0
    ca48:	4b55      	ldr	r3, [pc, #340]	; (cba0 <_Z9ThreadMPUPv+0x3b0>)
    ca4a:	6018      	str	r0, [r3, #0]
				az = (float)imuData.accel[2] / (float)_aSense;
    ca4c:	2310      	movs	r3, #16
    ca4e:	5ef8      	ldrsh	r0, [r7, r3]
    ca50:	f7f4 fc28 	bl	12a4 <__aeabi_i2f>
    ca54:	1c21      	adds	r1, r4, #0
    ca56:	f7f3 ff41 	bl	8dc <__aeabi_fdiv>
    ca5a:	4681      	mov	r9, r0
    ca5c:	4b51      	ldr	r3, [pc, #324]	; (cba4 <_Z9ThreadMPUPv+0x3b4>)
    ca5e:	6018      	str	r0, [r3, #0]
				gx = (float)imuData.gyro[0] / _gSense;
    ca60:	4b3c      	ldr	r3, [pc, #240]	; (cb54 <_Z9ThreadMPUPv+0x364>)
    ca62:	681c      	ldr	r4, [r3, #0]
    ca64:	2306      	movs	r3, #6
    ca66:	5ef8      	ldrsh	r0, [r7, r3]
    ca68:	f7f4 fc1c 	bl	12a4 <__aeabi_i2f>
    ca6c:	1c21      	adds	r1, r4, #0
    ca6e:	f7f3 ff35 	bl	8dc <__aeabi_fdiv>
    ca72:	4b4d      	ldr	r3, [pc, #308]	; (cba8 <_Z9ThreadMPUPv+0x3b8>)
    ca74:	9009      	str	r0, [sp, #36]	; 0x24
    ca76:	6018      	str	r0, [r3, #0]
				gy = (float)imuData.gyro[1] / _gSense;
    ca78:	2308      	movs	r3, #8
    ca7a:	5ef8      	ldrsh	r0, [r7, r3]
    ca7c:	f7f4 fc12 	bl	12a4 <__aeabi_i2f>
    ca80:	1c21      	adds	r1, r4, #0
    ca82:	f7f3 ff2b 	bl	8dc <__aeabi_fdiv>
    ca86:	4b49      	ldr	r3, [pc, #292]	; (cbac <_Z9ThreadMPUPv+0x3bc>)
    ca88:	900a      	str	r0, [sp, #40]	; 0x28
    ca8a:	6018      	str	r0, [r3, #0]
				gz = (float)imuData.gyro[2] / _gSense;
    ca8c:	230a      	movs	r3, #10
    ca8e:	5ef8      	ldrsh	r0, [r7, r3]
    ca90:	f7f4 fc08 	bl	12a4 <__aeabi_i2f>
    ca94:	1c21      	adds	r1, r4, #0
    ca96:	f7f3 ff21 	bl	8dc <__aeabi_fdiv>
    ca9a:	4b45      	ldr	r3, [pc, #276]	; (cbb0 <_Z9ThreadMPUPv+0x3c0>)
    ca9c:	900b      	str	r0, [sp, #44]	; 0x2c
    ca9e:	6018      	str	r0, [r3, #0]
				mx = (float)imuData.compass[0] / _mSense;
    caa0:	4b2e      	ldr	r3, [pc, #184]	; (cb5c <_Z9ThreadMPUPv+0x36c>)
    caa2:	6818      	ldr	r0, [r3, #0]
    caa4:	1c04      	adds	r4, r0, #0
    caa6:	2300      	movs	r3, #0
    caa8:	5ef8      	ldrsh	r0, [r7, r3]
    caaa:	f7f4 fbfb 	bl	12a4 <__aeabi_i2f>
    caae:	9406      	str	r4, [sp, #24]
    cab0:	1c21      	adds	r1, r4, #0
    cab2:	f7f3 ff13 	bl	8dc <__aeabi_fdiv>
    cab6:	1c04      	adds	r4, r0, #0
    cab8:	4b3e      	ldr	r3, [pc, #248]	; (cbb4 <_Z9ThreadMPUPv+0x3c4>)
    caba:	6018      	str	r0, [r3, #0]
				my = (float)imuData.compass[1] / _mSense;
    cabc:	2302      	movs	r3, #2
    cabe:	5ef8      	ldrsh	r0, [r7, r3]
    cac0:	f7f4 fbf0 	bl	12a4 <__aeabi_i2f>
    cac4:	9906      	ldr	r1, [sp, #24]
    cac6:	f7f3 ff09 	bl	8dc <__aeabi_fdiv>
    caca:	4683      	mov	fp, r0
    cacc:	4b3a      	ldr	r3, [pc, #232]	; (cbb8 <_Z9ThreadMPUPv+0x3c8>)
    cace:	6018      	str	r0, [r3, #0]
				mz = (float)imuData.compass[2] / _mSense;
    cad0:	2304      	movs	r3, #4
    cad2:	5ef8      	ldrsh	r0, [r7, r3]
    cad4:	f7f4 fbe6 	bl	12a4 <__aeabi_i2f>
    cad8:	9906      	ldr	r1, [sp, #24]
    cada:	f7f3 feff 	bl	8dc <__aeabi_fdiv>
    cade:	4b37      	ldr	r3, [pc, #220]	; (cbbc <_Z9ThreadMPUPv+0x3cc>)
    cae0:	6018      	str	r0, [r3, #0]
				filter.update(gx, gy, gz, ax, ay, az, mx, my, mz);
    cae2:	9005      	str	r0, [sp, #20]
    cae4:	465b      	mov	r3, fp
    cae6:	9304      	str	r3, [sp, #16]
    cae8:	9403      	str	r4, [sp, #12]
    caea:	464b      	mov	r3, r9
    caec:	9302      	str	r3, [sp, #8]
    caee:	4643      	mov	r3, r8
    caf0:	9301      	str	r3, [sp, #4]
    caf2:	9808      	ldr	r0, [sp, #32]
    caf4:	9000      	str	r0, [sp, #0]
    caf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cafa:	9909      	ldr	r1, [sp, #36]	; 0x24
    cafc:	4821      	ldr	r0, [pc, #132]	; (cb84 <_Z9ThreadMPUPv+0x394>)
    cafe:	f7fe f8af 	bl	ac60 <_ZN8Madgwick6updateEfffffffff>
				if (imuCount > 0)
    cb02:	4b25      	ldr	r3, [pc, #148]	; (cb98 <_Z9ThreadMPUPv+0x3a8>)
    cb04:	681b      	ldr	r3, [r3, #0]
    cb06:	2b00      	cmp	r3, #0
    cb08:	d000      	beq.n	cb0c <_Z9ThreadMPUPv+0x31c>
    cb0a:	e6e1      	b.n	c8d0 <_Z9ThreadMPUPv+0xe0>
				}

				writeFile(0x03, sizeof(imuData), &imuData);
    cb0c:	4a14      	ldr	r2, [pc, #80]	; (cb60 <_Z9ThreadMPUPv+0x370>)
    cb0e:	2128      	movs	r1, #40	; 0x28
    cb10:	2003      	movs	r0, #3
    cb12:	f000 f8ad 	bl	cc70 <writeFile>
			for (int i = 0; ((i < fifo) & (result == 0) & (more > 0)); i++)
    cb16:	3601      	adds	r6, #1
    cb18:	782b      	ldrb	r3, [r5, #0]
    cb1a:	425b      	negs	r3, r3
    cb1c:	0fdb      	lsrs	r3, r3, #31
    cb1e:	2201      	movs	r2, #1
    cb20:	4651      	mov	r1, sl
    cb22:	42b1      	cmp	r1, r6
    cb24:	dd00      	ble.n	cb28 <_Z9ThreadMPUPv+0x338>
    cb26:	e763      	b.n	c9f0 <_Z9ThreadMPUPv+0x200>
    cb28:	2200      	movs	r2, #0
    cb2a:	e761      	b.n	c9f0 <_Z9ThreadMPUPv+0x200>
			}
			chThdSleepMilliseconds(10);
    cb2c:	200a      	movs	r0, #10
    cb2e:	f7f6 f9b7 	bl	2ea0 <chThdSleep>
    cb32:	e692      	b.n	c85a <_Z9ThreadMPUPv+0x6a>
        return pitch * 57.29578f;
    cb34:	4914      	ldr	r1, [pc, #80]	; (cb88 <_Z9ThreadMPUPv+0x398>)
    cb36:	4b13      	ldr	r3, [pc, #76]	; (cb84 <_Z9ThreadMPUPv+0x394>)
    cb38:	69d8      	ldr	r0, [r3, #28]
    cb3a:	f7f4 f8bf 	bl	cbc <__aeabi_fmul>
					p = filter.getPitch() * 100.0f;
    cb3e:	4914      	ldr	r1, [pc, #80]	; (cb90 <_Z9ThreadMPUPv+0x3a0>)
    cb40:	f7f4 f8bc 	bl	cbc <__aeabi_fmul>
    cb44:	f7f4 fb8e 	bl	1264 <__aeabi_f2iz>
    cb48:	9006      	str	r0, [sp, #24]
    cb4a:	e710      	b.n	c96e <_Z9ThreadMPUPv+0x17e>
    cb4c:	0000f740 	.word	0x0000f740
    cb50:	20001dbe 	.word	0x20001dbe
    cb54:	20001dc0 	.word	0x20001dc0
    cb58:	40d547ae 	.word	0x40d547ae
    cb5c:	20001dc4 	.word	0x20001dc4
    cb60:	20001e18 	.word	0x20001e18
    cb64:	20001e40 	.word	0x20001e40
    cb68:	41004400 	.word	0x41004400
    cb6c:	0000f74c 	.word	0x0000f74c
    cb70:	0000f760 	.word	0x0000f760
    cb74:	0000f778 	.word	0x0000f778
    cb78:	0000f788 	.word	0x0000f788
    cb7c:	0000f7a0 	.word	0x0000f7a0
    cb80:	0000f7c0 	.word	0x0000f7c0
    cb84:	20001dd4 	.word	0x20001dd4
    cb88:	42652ee1 	.word	0x42652ee1
    cb8c:	43340000 	.word	0x43340000
    cb90:	42c80000 	.word	0x42c80000
    cb94:	0000f7d8 	.word	0x0000f7d8
    cb98:	20001e14 	.word	0x20001e14
    cb9c:	20001dc8 	.word	0x20001dc8
    cba0:	20001dcc 	.word	0x20001dcc
    cba4:	20001dd0 	.word	0x20001dd0
    cba8:	20001dfc 	.word	0x20001dfc
    cbac:	20001e00 	.word	0x20001e00
    cbb0:	20001e04 	.word	0x20001e04
    cbb4:	20001e44 	.word	0x20001e44
    cbb8:	20001e48 	.word	0x20001e48
    cbbc:	20001e4c 	.word	0x20001e4c

0000cbc0 <_GLOBAL__sub_I_imuStatus>:
		}
	}
}
    cbc0:	b510      	push	{r4, lr}
Madgwick filter;
    cbc2:	4802      	ldr	r0, [pc, #8]	; (cbcc <_GLOBAL__sub_I_imuStatus+0xc>)
    cbc4:	f7fd fd74 	bl	a6b0 <_ZN8MadgwickC1Ev>
}
    cbc8:	bd10      	pop	{r4, pc}
    cbca:	46c0      	nop			; (mov r8, r8)
    cbcc:	20001dd4 	.word	0x20001dd4

0000cbd0 <_Z8date2doyjjj>:
//static uint8_t ibuf[SERIAL_BUFFERS_SIZE];
//static volatile uint8_t iRxInIdx;
//static volatile uint8_t iRxOutIdx;

unsigned int date2doy(unsigned int year, unsigned int month, unsigned int day)
{
    cbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbd2:	b08d      	sub	sp, #52	; 0x34
    cbd4:	0004      	movs	r4, r0
    cbd6:	000d      	movs	r5, r1
    cbd8:	0016      	movs	r6, r2
	unsigned int doy = day;

	int daysMonth[12] = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};
    cbda:	4b11      	ldr	r3, [pc, #68]	; (cc20 <_Z8date2doyjjj+0x50>)
    cbdc:	466a      	mov	r2, sp
    cbde:	cb83      	ldmia	r3!, {r0, r1, r7}
    cbe0:	c283      	stmia	r2!, {r0, r1, r7}
    cbe2:	cb83      	ldmia	r3!, {r0, r1, r7}
    cbe4:	c283      	stmia	r2!, {r0, r1, r7}
    cbe6:	cb83      	ldmia	r3!, {r0, r1, r7}
    cbe8:	c283      	stmia	r2!, {r0, r1, r7}
    cbea:	cb83      	ldmia	r3!, {r0, r1, r7}
    cbec:	c283      	stmia	r2!, {r0, r1, r7}

	if( month >= 3 && ((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0)) ))
    cbee:	2d02      	cmp	r5, #2
    cbf0:	d90f      	bls.n	cc12 <_Z8date2doyjjj+0x42>
    cbf2:	21c8      	movs	r1, #200	; 0xc8
    cbf4:	0049      	lsls	r1, r1, #1
    cbf6:	0020      	movs	r0, r4
    cbf8:	f7f3 fb72 	bl	2e0 <__aeabi_uidivmod>
    cbfc:	2900      	cmp	r1, #0
    cbfe:	d007      	beq.n	cc10 <_Z8date2doyjjj+0x40>
    cc00:	07a3      	lsls	r3, r4, #30
    cc02:	d106      	bne.n	cc12 <_Z8date2doyjjj+0x42>
    cc04:	2164      	movs	r1, #100	; 0x64
    cc06:	0020      	movs	r0, r4
    cc08:	f7f3 fb6a 	bl	2e0 <__aeabi_uidivmod>
    cc0c:	2900      	cmp	r1, #0
    cc0e:	d000      	beq.n	cc12 <_Z8date2doyjjj+0x42>
	  doy++;
    cc10:	3601      	adds	r6, #1

	doy += daysMonth[month-1];
    cc12:	3d01      	subs	r5, #1
    cc14:	00ad      	lsls	r5, r5, #2
    cc16:	466b      	mov	r3, sp
    cc18:	58e8      	ldr	r0, [r5, r3]
    cc1a:	1830      	adds	r0, r6, r0

	return doy;
}
    cc1c:	b00d      	add	sp, #52	; 0x34
    cc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc20:	0000dde0 	.word	0x0000dde0
	...

0000cc30 <SERCOM0_Handler>:


void SERCOM0_Handler(void)
{
}
    cc30:	4770      	bx	lr
    cc32:	46c0      	nop			; (mov r8, r8)
	...

0000cc40 <_Z13writeFileCharc>:
volatile int fileBufferReadIdx = 0;
volatile char writing = 0;

void writeFileChar(char c)
{
	fileBuffer[fileBufferWriteIdx++] = c;
    cc40:	4b06      	ldr	r3, [pc, #24]	; (cc5c <_Z13writeFileCharc+0x1c>)
    cc42:	681a      	ldr	r2, [r3, #0]
    cc44:	1c51      	adds	r1, r2, #1
    cc46:	6019      	str	r1, [r3, #0]
    cc48:	4905      	ldr	r1, [pc, #20]	; (cc60 <_Z13writeFileCharc+0x20>)
    cc4a:	5488      	strb	r0, [r1, r2]
	if (fileBufferWriteIdx >= FILE_BUFFER_SIZE)
    cc4c:	681a      	ldr	r2, [r3, #0]
    cc4e:	4b05      	ldr	r3, [pc, #20]	; (cc64 <_Z13writeFileCharc+0x24>)
    cc50:	429a      	cmp	r2, r3
    cc52:	dd02      	ble.n	cc5a <_Z13writeFileCharc+0x1a>
		fileBufferWriteIdx = 0;
    cc54:	2200      	movs	r2, #0
    cc56:	4b01      	ldr	r3, [pc, #4]	; (cc5c <_Z13writeFileCharc+0x1c>)
    cc58:	601a      	str	r2, [r3, #0]
}
    cc5a:	4770      	bx	lr
    cc5c:	20006218 	.word	0x20006218
    cc60:	20001e60 	.word	0x20001e60
    cc64:	00001fff 	.word	0x00001fff
	...

0000cc70 <writeFile>:
#define TYPE_COUNT 8
uint16_t writeTypeCount[TYPE_COUNT];
extern "C" void writeFile(uint8_t type, int len, const void *data);

void writeFile(uint8_t type, int len, const void *data)
{
    cc70:	b570      	push	{r4, r5, r6, lr}
    cc72:	0005      	movs	r5, r0
    cc74:	000e      	movs	r6, r1
    cc76:	0014      	movs	r4, r2
	cpu_irq_enter_critical();
    cc78:	f7f7 fc7a 	bl	4570 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	uint8_t *p = (uint8_t *)data;
	uint8_t sum = 0;

	if (type < TYPE_COUNT)
    cc7c:	2d07      	cmp	r5, #7
    cc7e:	dc04      	bgt.n	cc8a <writeFile+0x1a>
		writeTypeCount[type]++;
    cc80:	4a11      	ldr	r2, [pc, #68]	; (ccc8 <writeFile+0x58>)
    cc82:	0069      	lsls	r1, r5, #1
    cc84:	5a8b      	ldrh	r3, [r1, r2]
    cc86:	3301      	adds	r3, #1
    cc88:	528b      	strh	r3, [r1, r2]

	writeFileChar(type);
    cc8a:	0028      	movs	r0, r5
    cc8c:	f7ff ffd8 	bl	cc40 <_Z13writeFileCharc>
	writeFileChar(len & 0xff); // samd21 is little endian
    cc90:	b2f0      	uxtb	r0, r6
    cc92:	f7ff ffd5 	bl	cc40 <_Z13writeFileCharc>
	writeFileChar(len >> 8);
    cc96:	1230      	asrs	r0, r6, #8
    cc98:	b2c0      	uxtb	r0, r0
    cc9a:	f7ff ffd1 	bl	cc40 <_Z13writeFileCharc>

	while (len > 0)
    cc9e:	2e00      	cmp	r6, #0
    cca0:	dd0f      	ble.n	ccc2 <writeFile+0x52>
    cca2:	19a6      	adds	r6, r4, r6
    cca4:	2500      	movs	r5, #0
	{
		sum += *p;
    cca6:	7820      	ldrb	r0, [r4, #0]
    cca8:	1945      	adds	r5, r0, r5
    ccaa:	b2ed      	uxtb	r5, r5
		writeFileChar(*p++);
    ccac:	3401      	adds	r4, #1
    ccae:	f7ff ffc7 	bl	cc40 <_Z13writeFileCharc>
	while (len > 0)
    ccb2:	42a6      	cmp	r6, r4
    ccb4:	d1f7      	bne.n	cca6 <writeFile+0x36>
		len--;
	}
	writeFileChar(sum);
    ccb6:	0028      	movs	r0, r5
    ccb8:	f7ff ffc2 	bl	cc40 <_Z13writeFileCharc>
	cpu_irq_leave_critical();
    ccbc:	f7f7 fc78 	bl	45b0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    ccc0:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t sum = 0;
    ccc2:	2500      	movs	r5, #0
    ccc4:	e7f7      	b.n	ccb6 <writeFile+0x46>
    ccc6:	46c0      	nop			; (mov r8, r8)
    ccc8:	20006450 	.word	0x20006450
    cccc:	00000000 	.word	0x00000000

0000ccd0 <_ZL8ThreadSDPv>:
static const char newFileString[] = "newFile";

extern bool setTime;
static THD_WORKING_AREA(waThreadSD, TASK_STACK);
static THD_FUNCTION(ThreadSD, arg)
{
    ccd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccd2:	46de      	mov	lr, fp
    ccd4:	4657      	mov	r7, sl
    ccd6:	464e      	mov	r6, r9
    ccd8:	4645      	mov	r5, r8
    ccda:	b5e0      	push	{r5, r6, r7, lr}
    ccdc:	b09d      	sub	sp, #116	; 0x74
	int lastHour = -1;

	//DRESULT dr;
	//uint16_t ioctrldata[8];

	writeFile(0x07, sizeof(startString), startString);
    ccde:	4a9d      	ldr	r2, [pc, #628]	; (cf54 <_ZL8ThreadSDPv+0x284>)
    cce0:	2108      	movs	r1, #8
    cce2:	2007      	movs	r0, #7
    cce4:	f7ff ffc4 	bl	cc70 <writeFile>

	chThdSleepMilliseconds(400);
    cce8:	20c8      	movs	r0, #200	; 0xc8
    ccea:	0040      	lsls	r0, r0, #1
    ccec:	f7f6 f8d8 	bl	2ea0 <chThdSleep>
	xprintf("SD Thread\n");
    ccf0:	4899      	ldr	r0, [pc, #612]	; (cf58 <_ZL8ThreadSDPv+0x288>)
    ccf2:	f7f8 f90d 	bl	4f10 <xprintf>
	chThdSleepMilliseconds(500);
    ccf6:	20fa      	movs	r0, #250	; 0xfa
    ccf8:	0040      	lsls	r0, r0, #1
    ccfa:	f7f6 f8d1 	bl	2ea0 <chThdSleep>
	//DSTATUS ds;
	unsigned int s2;

    /* Initialization */

	xprintf("-I- Mount disk %d\n\r", (int)0);
    ccfe:	2100      	movs	r1, #0
    cd00:	4896      	ldr	r0, [pc, #600]	; (cf5c <_ZL8ThreadSDPv+0x28c>)
    cd02:	f7f8 f905 	bl	4f10 <xprintf>

	/* Clear file system object */
	memset(&fatFS, 0, sizeof(FATFS));
    cd06:	4c96      	ldr	r4, [pc, #600]	; (cf60 <_ZL8ThreadSDPv+0x290>)
    cd08:	228d      	movs	r2, #141	; 0x8d
    cd0a:	0092      	lsls	r2, r2, #2
    cd0c:	2100      	movs	r1, #0
    cd0e:	0020      	movs	r0, r4
    cd10:	f000 fefe 	bl	db10 <memset>
	res = f_mount(&fatFS, "", 1);
    cd14:	2201      	movs	r2, #1
    cd16:	4993      	ldr	r1, [pc, #588]	; (cf64 <_ZL8ThreadSDPv+0x294>)
    cd18:	0020      	movs	r0, r4
    cd1a:	f7fc fcd1 	bl	96c0 <f_mount>
    cd1e:	1e01      	subs	r1, r0, #0
	if (res != FR_OK)
    cd20:	d002      	beq.n	cd28 <_ZL8ThreadSDPv+0x58>
	{
		xprintf("-E- f_mount pb: 0x%X\n\r", res);
    cd22:	4891      	ldr	r0, [pc, #580]	; (cf68 <_ZL8ThreadSDPv+0x298>)
    cd24:	f7f8 f8f4 	bl	4f10 <xprintf>
	}
	chThdSleepMilliseconds(2000);
    cd28:	20fa      	movs	r0, #250	; 0xfa
    cd2a:	00c0      	lsls	r0, r0, #3
    cd2c:	f7f6 f8b8 	bl	2ea0 <chThdSleep>

	rtc_calendar_get_time(&rtc_instance, &time);
    cd30:	ac1a      	add	r4, sp, #104	; 0x68
    cd32:	0021      	movs	r1, r4
    cd34:	488d      	ldr	r0, [pc, #564]	; (cf6c <_ZL8ThreadSDPv+0x29c>)
    cd36:	f7f7 fb7b 	bl	4430 <rtc_calendar_get_time>

	// Create file name from this time??, wait 1 second for GPS?

	int doy = date2doy(time.year, time.month, time.day);
    cd3a:	88e5      	ldrh	r5, [r4, #6]
    cd3c:	7922      	ldrb	r2, [r4, #4]
    cd3e:	7961      	ldrb	r1, [r4, #5]
    cd40:	0028      	movs	r0, r5
    cd42:	f7ff ff45 	bl	cbd0 <_Z8date2doyjjj>
    cd46:	0003      	movs	r3, r0
	xsprintf(dirName, "%04d-%03d", time.year, doy);
    cd48:	002a      	movs	r2, r5
    cd4a:	4989      	ldr	r1, [pc, #548]	; (cf70 <_ZL8ThreadSDPv+0x2a0>)
    cd4c:	a808      	add	r0, sp, #32
    cd4e:	f7f8 f8ef 	bl	4f30 <xsprintf>
	xsprintf(fileName, "%s/DATA %04d-%02d-%02d H%02d.TXT", dirName, time.year, time.month, time.day, time.hour);
    cd52:	88e3      	ldrh	r3, [r4, #6]
    cd54:	78a2      	ldrb	r2, [r4, #2]
    cd56:	9202      	str	r2, [sp, #8]
    cd58:	7922      	ldrb	r2, [r4, #4]
    cd5a:	9201      	str	r2, [sp, #4]
    cd5c:	7962      	ldrb	r2, [r4, #5]
    cd5e:	9200      	str	r2, [sp, #0]
    cd60:	aa08      	add	r2, sp, #32
    cd62:	4984      	ldr	r1, [pc, #528]	; (cf74 <_ZL8ThreadSDPv+0x2a4>)
    cd64:	a811      	add	r0, sp, #68	; 0x44
    cd66:	f7f8 f8e3 	bl	4f30 <xsprintf>

	res = f_mkdir(dirName);
    cd6a:	a808      	add	r0, sp, #32
    cd6c:	f7fd f820 	bl	9db0 <f_mkdir>
    cd70:	0002      	movs	r2, r0
	xprintf("mkdir... %s rc=%d\n", dirName, res);
    cd72:	a908      	add	r1, sp, #32
    cd74:	4880      	ldr	r0, [pc, #512]	; (cf78 <_ZL8ThreadSDPv+0x2a8>)
    cd76:	f7f8 f8cb 	bl	4f10 <xprintf>

	lastMin = time.minute;
    cd7a:	7863      	ldrb	r3, [r4, #1]
    cd7c:	9304      	str	r3, [sp, #16]
	lastHour = time.hour;
    cd7e:	78a3      	ldrb	r3, [r4, #2]
    cd80:	9305      	str	r3, [sp, #20]

	res = f_open(&loggingFile, fileName, FA_OPEN_APPEND | FA_WRITE);
    cd82:	2232      	movs	r2, #50	; 0x32
    cd84:	a911      	add	r1, sp, #68	; 0x44
    cd86:	487d      	ldr	r0, [pc, #500]	; (cf7c <_ZL8ThreadSDPv+0x2ac>)
    cd88:	f7fc fcca 	bl	9720 <f_open>
    cd8c:	0002      	movs	r2, r0
	xprintf("Open... %s rc=%d\n", fileName, res);
    cd8e:	a911      	add	r1, sp, #68	; 0x44
    cd90:	487b      	ldr	r0, [pc, #492]	; (cf80 <_ZL8ThreadSDPv+0x2b0>)
    cd92:	f7f8 f8bd 	bl	4f10 <xprintf>

	int bytesInBuffer;
	while (true)
	{
		bytesInBuffer = fileBufferWriteIdx - fileBufferReadIdx;
    cd96:	4b7b      	ldr	r3, [pc, #492]	; (cf84 <_ZL8ThreadSDPv+0x2b4>)
    cd98:	469b      	mov	fp, r3
    cd9a:	4b7b      	ldr	r3, [pc, #492]	; (cf88 <_ZL8ThreadSDPv+0x2b8>)
    cd9c:	2210      	movs	r2, #16
    cd9e:	4694      	mov	ip, r2
    cda0:	4463      	add	r3, ip
    cda2:	469a      	mov	sl, r3
    cda4:	e0b2      	b.n	cf0c <_ZL8ThreadSDPv+0x23c>

		if (bytesInBuffer <= 0)
			bytesInBuffer += FILE_BUFFER_SIZE;
    cda6:	2380      	movs	r3, #128	; 0x80
    cda8:	019b      	lsls	r3, r3, #6
    cdaa:	469c      	mov	ip, r3
    cdac:	4464      	add	r4, ip
    cdae:	e0b5      	b.n	cf1c <_ZL8ThreadSDPv+0x24c>
			port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

			res = f_write(&loggingFile, &fileBuffer[fileBufferReadIdx], BUFFER_TO_WRITE, &s2);
			if (res != FR_OK) // count these
			{
				xprintf("Write error %d\n", res);
    cdb0:	0001      	movs	r1, r0
    cdb2:	4876      	ldr	r0, [pc, #472]	; (cf8c <_ZL8ThreadSDPv+0x2bc>)
    cdb4:	f7f8 f8ac 	bl	4f10 <xprintf>
    cdb8:	e018      	b.n	cdec <_ZL8ThreadSDPv+0x11c>
			writing = 0;
			fileBufferReadIdx += BUFFER_TO_WRITE;
			if (fileBufferReadIdx >= FILE_BUFFER_SIZE)
				fileBufferReadIdx = 0;

			bytesInBuffer -= BUFFER_TO_WRITE;
    cdba:	4b75      	ldr	r3, [pc, #468]	; (cf90 <_ZL8ThreadSDPv+0x2c0>)
    cdbc:	469c      	mov	ip, r3
    cdbe:	4464      	add	r4, ip

			//xprintf("Write Remaining %d\n", bytesInBuffer);

			chThdSleepMilliseconds(10);
    cdc0:	200a      	movs	r0, #10
    cdc2:	f7f6 f86d 	bl	2ea0 <chThdSleep>
		while (bytesInBuffer > BUFFER_TO_WRITE)
    cdc6:	2380      	movs	r3, #128	; 0x80
    cdc8:	00db      	lsls	r3, r3, #3
    cdca:	429c      	cmp	r4, r3
    cdcc:	dd20      	ble.n	ce10 <_ZL8ThreadSDPv+0x140>
			writing = 1;
    cdce:	464b      	mov	r3, r9
    cdd0:	4642      	mov	r2, r8
    cdd2:	701a      	strb	r2, [r3, #0]
    cdd4:	617e      	str	r6, [r7, #20]
			res = f_write(&loggingFile, &fileBuffer[fileBufferReadIdx], BUFFER_TO_WRITE, &s2);
    cdd6:	682b      	ldr	r3, [r5, #0]
    cdd8:	496e      	ldr	r1, [pc, #440]	; (cf94 <_ZL8ThreadSDPv+0x2c4>)
    cdda:	18c9      	adds	r1, r1, r3
    cddc:	ab07      	add	r3, sp, #28
    cdde:	2280      	movs	r2, #128	; 0x80
    cde0:	00d2      	lsls	r2, r2, #3
    cde2:	4866      	ldr	r0, [pc, #408]	; (cf7c <_ZL8ThreadSDPv+0x2ac>)
    cde4:	f7fc fdac 	bl	9940 <f_write>
			if (res != FR_OK) // count these
    cde8:	2800      	cmp	r0, #0
    cdea:	d1e1      	bne.n	cdb0 <_ZL8ThreadSDPv+0xe0>
			writing = 0;
    cdec:	2200      	movs	r2, #0
    cdee:	4b6a      	ldr	r3, [pc, #424]	; (cf98 <_ZL8ThreadSDPv+0x2c8>)
    cdf0:	701a      	strb	r2, [r3, #0]
			fileBufferReadIdx += BUFFER_TO_WRITE;
    cdf2:	4b6a      	ldr	r3, [pc, #424]	; (cf9c <_ZL8ThreadSDPv+0x2cc>)
    cdf4:	681a      	ldr	r2, [r3, #0]
    cdf6:	2180      	movs	r1, #128	; 0x80
    cdf8:	00c9      	lsls	r1, r1, #3
    cdfa:	468c      	mov	ip, r1
    cdfc:	4462      	add	r2, ip
    cdfe:	601a      	str	r2, [r3, #0]
			if (fileBufferReadIdx >= FILE_BUFFER_SIZE)
    ce00:	681a      	ldr	r2, [r3, #0]
    ce02:	4b67      	ldr	r3, [pc, #412]	; (cfa0 <_ZL8ThreadSDPv+0x2d0>)
    ce04:	429a      	cmp	r2, r3
    ce06:	ddd8      	ble.n	cdba <_ZL8ThreadSDPv+0xea>
				fileBufferReadIdx = 0;
    ce08:	2200      	movs	r2, #0
    ce0a:	4b64      	ldr	r3, [pc, #400]	; (cf9c <_ZL8ThreadSDPv+0x2cc>)
    ce0c:	601a      	str	r2, [r3, #0]
    ce0e:	e7d4      	b.n	cdba <_ZL8ThreadSDPv+0xea>
		}

		rtc_calendar_get_time(&rtc_instance, &time);
    ce10:	ac1a      	add	r4, sp, #104	; 0x68
    ce12:	0021      	movs	r1, r4
    ce14:	4855      	ldr	r0, [pc, #340]	; (cf6c <_ZL8ThreadSDPv+0x29c>)
    ce16:	f7f7 fb0b 	bl	4430 <rtc_calendar_get_time>

		if (time.minute != lastMin)
    ce1a:	7863      	ldrb	r3, [r4, #1]
    ce1c:	9a04      	ldr	r2, [sp, #16]
    ce1e:	429a      	cmp	r2, r3
    ce20:	d100      	bne.n	ce24 <_ZL8ThreadSDPv+0x154>
    ce22:	e095      	b.n	cf50 <_ZL8ThreadSDPv+0x280>
		{
			// TODO: how to break file at packet?
			// can we just write the last of the buffer to the file,
			// then have to write rest to align to 512 byte boundary, or reset the pointers
			doy = date2doy(time.year, time.month, time.day);
    ce24:	ac1a      	add	r4, sp, #104	; 0x68
    ce26:	88e5      	ldrh	r5, [r4, #6]
    ce28:	7922      	ldrb	r2, [r4, #4]
    ce2a:	7961      	ldrb	r1, [r4, #5]
    ce2c:	0028      	movs	r0, r5
    ce2e:	f7ff fecf 	bl	cbd0 <_Z8date2doyjjj>
    ce32:	0003      	movs	r3, r0
			xsprintf(dirName, "%04d-%03d", time.year, doy);
    ce34:	002a      	movs	r2, r5
    ce36:	494e      	ldr	r1, [pc, #312]	; (cf70 <_ZL8ThreadSDPv+0x2a0>)
    ce38:	a808      	add	r0, sp, #32
    ce3a:	f7f8 f879 	bl	4f30 <xsprintf>
			xsprintf(fileName, "%s/DATA %04d-%02d-%02d H%02d.TXT", dirName, time.year, time.month, time.day, time.hour);
    ce3e:	88e3      	ldrh	r3, [r4, #6]
    ce40:	78a2      	ldrb	r2, [r4, #2]
    ce42:	9202      	str	r2, [sp, #8]
    ce44:	7922      	ldrb	r2, [r4, #4]
    ce46:	9201      	str	r2, [sp, #4]
    ce48:	7962      	ldrb	r2, [r4, #5]
    ce4a:	9200      	str	r2, [sp, #0]
    ce4c:	aa08      	add	r2, sp, #32
    ce4e:	4949      	ldr	r1, [pc, #292]	; (cf74 <_ZL8ThreadSDPv+0x2a4>)
    ce50:	a811      	add	r0, sp, #68	; 0x44
    ce52:	f7f8 f86d 	bl	4f30 <xsprintf>
			if ((lastHour != time.hour))
    ce56:	78a3      	ldrb	r3, [r4, #2]
    ce58:	9a05      	ldr	r2, [sp, #20]
    ce5a:	429a      	cmp	r2, r3
    ce5c:	d076      	beq.n	cf4c <_ZL8ThreadSDPv+0x27c>
			{
				writeFile(0x06, sizeof(writeTypeCount), &writeTypeCount);
    ce5e:	4a4a      	ldr	r2, [pc, #296]	; (cf88 <_ZL8ThreadSDPv+0x2b8>)
    ce60:	2110      	movs	r1, #16
    ce62:	2006      	movs	r0, #6
    ce64:	f7ff ff04 	bl	cc70 <writeFile>
    ce68:	4b47      	ldr	r3, [pc, #284]	; (cf88 <_ZL8ThreadSDPv+0x2b8>)
				for(int i=0;i<TYPE_COUNT;i++)
				{
					writeTypeCount[i] = 0;
    ce6a:	2200      	movs	r2, #0
    ce6c:	4651      	mov	r1, sl
    ce6e:	801a      	strh	r2, [r3, #0]
    ce70:	3302      	adds	r3, #2
				for(int i=0;i<TYPE_COUNT;i++)
    ce72:	4299      	cmp	r1, r3
    ce74:	d1fb      	bne.n	ce6e <_ZL8ThreadSDPv+0x19e>
    ce76:	468a      	mov	sl, r1
				}

				bytesInBuffer = fileBufferWriteIdx - fileBufferReadIdx;
    ce78:	4b42      	ldr	r3, [pc, #264]	; (cf84 <_ZL8ThreadSDPv+0x2b4>)
    ce7a:	681a      	ldr	r2, [r3, #0]
    ce7c:	4b47      	ldr	r3, [pc, #284]	; (cf9c <_ZL8ThreadSDPv+0x2cc>)
    ce7e:	681b      	ldr	r3, [r3, #0]
    ce80:	1ad2      	subs	r2, r2, r3

				if (bytesInBuffer <= 0)
    ce82:	2a00      	cmp	r2, #0
    ce84:	dd58      	ble.n	cf38 <_ZL8ThreadSDPv+0x268>
					bytesInBuffer += FILE_BUFFER_SIZE;

				lastHour = time.hour;
    ce86:	ab1a      	add	r3, sp, #104	; 0x68
    ce88:	789b      	ldrb	r3, [r3, #2]
    ce8a:	9305      	str	r3, [sp, #20]

				// write the remaining buffer
				res = f_write(&loggingFile, &fileBuffer[fileBufferReadIdx], bytesInBuffer, &s2);
    ce8c:	4b43      	ldr	r3, [pc, #268]	; (cf9c <_ZL8ThreadSDPv+0x2cc>)
    ce8e:	681b      	ldr	r3, [r3, #0]
    ce90:	4940      	ldr	r1, [pc, #256]	; (cf94 <_ZL8ThreadSDPv+0x2c4>)
    ce92:	18c9      	adds	r1, r1, r3
    ce94:	ab07      	add	r3, sp, #28
    ce96:	4839      	ldr	r0, [pc, #228]	; (cf7c <_ZL8ThreadSDPv+0x2ac>)
    ce98:	f7fc fd52 	bl	9940 <f_write>
				if (res != FR_OK)
    ce9c:	2800      	cmp	r0, #0
    ce9e:	d150      	bne.n	cf42 <_ZL8ThreadSDPv+0x272>
				}
				else
				{
					//port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
				}
				xprintf("Write remaining %d\n", s2);
    cea0:	9907      	ldr	r1, [sp, #28]
    cea2:	4840      	ldr	r0, [pc, #256]	; (cfa4 <_ZL8ThreadSDPv+0x2d4>)
    cea4:	f7f8 f834 	bl	4f10 <xprintf>

				xprintf("Open new file : %s\n", fileName);
    cea8:	a911      	add	r1, sp, #68	; 0x44
    ceaa:	483f      	ldr	r0, [pc, #252]	; (cfa8 <_ZL8ThreadSDPv+0x2d8>)
    ceac:	f7f8 f830 	bl	4f10 <xprintf>

				// restart buffers
				fileBufferReadIdx = 0;
    ceb0:	2300      	movs	r3, #0
    ceb2:	4a3a      	ldr	r2, [pc, #232]	; (cf9c <_ZL8ThreadSDPv+0x2cc>)
    ceb4:	6013      	str	r3, [r2, #0]
				fileBufferWriteIdx = 0;
    ceb6:	4a33      	ldr	r2, [pc, #204]	; (cf84 <_ZL8ThreadSDPv+0x2b4>)
    ceb8:	6013      	str	r3, [r2, #0]
				writeFile(0x07, sizeof(newFileString), newFileString);
    ceba:	4a3c      	ldr	r2, [pc, #240]	; (cfac <_ZL8ThreadSDPv+0x2dc>)
    cebc:	2108      	movs	r1, #8
    cebe:	2007      	movs	r0, #7
    cec0:	f7ff fed6 	bl	cc70 <writeFile>

				// reset the time from GPS
				//if (time.hour == 0)
				//	setTime = true;
			}
			res = f_close(&loggingFile);
    cec4:	4c2d      	ldr	r4, [pc, #180]	; (cf7c <_ZL8ThreadSDPv+0x2ac>)
    cec6:	0020      	movs	r0, r4
    cec8:	f7fc fe7a 	bl	9bc0 <f_close>
    cecc:	0001      	movs	r1, r0
			xprintf("Close.. rc=%d\n", res);
    cece:	4838      	ldr	r0, [pc, #224]	; (cfb0 <_ZL8ThreadSDPv+0x2e0>)
    ced0:	f7f8 f81e 	bl	4f10 <xprintf>

			res = f_mkdir(dirName);
    ced4:	a808      	add	r0, sp, #32
    ced6:	f7fc ff6b 	bl	9db0 <f_mkdir>
    ceda:	0002      	movs	r2, r0
			xprintf("mkdir... %s rc=%d\n", dirName, res);
    cedc:	a908      	add	r1, sp, #32
    cede:	4826      	ldr	r0, [pc, #152]	; (cf78 <_ZL8ThreadSDPv+0x2a8>)
    cee0:	f7f8 f816 	bl	4f10 <xprintf>
			res = f_open(&loggingFile, fileName, FA_OPEN_APPEND | FA_WRITE);
    cee4:	2232      	movs	r2, #50	; 0x32
    cee6:	a911      	add	r1, sp, #68	; 0x44
    cee8:	0020      	movs	r0, r4
    ceea:	f7fc fc19 	bl	9720 <f_open>
    ceee:	0002      	movs	r2, r0
			xprintf("Open... %s rc=%d\n", fileName, res);
    cef0:	a911      	add	r1, sp, #68	; 0x44
    cef2:	4823      	ldr	r0, [pc, #140]	; (cf80 <_ZL8ThreadSDPv+0x2b0>)
    cef4:	f7f8 f80c 	bl	4f10 <xprintf>

			xprintf("file pointer %d\n", loggingFile.fptr);
    cef8:	6961      	ldr	r1, [r4, #20]
    cefa:	482e      	ldr	r0, [pc, #184]	; (cfb4 <_ZL8ThreadSDPv+0x2e4>)
    cefc:	f7f8 f808 	bl	4f10 <xprintf>

			lastMin = time.minute;
    cf00:	ab1a      	add	r3, sp, #104	; 0x68
    cf02:	785b      	ldrb	r3, [r3, #1]
    cf04:	9304      	str	r3, [sp, #16]
		}

		chThdSleepMilliseconds(10);
    cf06:	200a      	movs	r0, #10
    cf08:	f7f5 ffca 	bl	2ea0 <chThdSleep>
		bytesInBuffer = fileBufferWriteIdx - fileBufferReadIdx;
    cf0c:	465b      	mov	r3, fp
    cf0e:	681c      	ldr	r4, [r3, #0]
    cf10:	4b22      	ldr	r3, [pc, #136]	; (cf9c <_ZL8ThreadSDPv+0x2cc>)
    cf12:	681b      	ldr	r3, [r3, #0]
    cf14:	1ae4      	subs	r4, r4, r3
		if (bytesInBuffer <= 0)
    cf16:	2c00      	cmp	r4, #0
    cf18:	dc00      	bgt.n	cf1c <_ZL8ThreadSDPv+0x24c>
    cf1a:	e744      	b.n	cda6 <_ZL8ThreadSDPv+0xd6>
		while (bytesInBuffer > BUFFER_TO_WRITE)
    cf1c:	2380      	movs	r3, #128	; 0x80
    cf1e:	00db      	lsls	r3, r3, #3
    cf20:	429c      	cmp	r4, r3
    cf22:	dc00      	bgt.n	cf26 <_ZL8ThreadSDPv+0x256>
    cf24:	e774      	b.n	ce10 <_ZL8ThreadSDPv+0x140>
			writing = 1;
    cf26:	4b1c      	ldr	r3, [pc, #112]	; (cf98 <_ZL8ThreadSDPv+0x2c8>)
    cf28:	4699      	mov	r9, r3
    cf2a:	2301      	movs	r3, #1
    cf2c:	4698      	mov	r8, r3
    cf2e:	4f22      	ldr	r7, [pc, #136]	; (cfb8 <_ZL8ThreadSDPv+0x2e8>)
    cf30:	2680      	movs	r6, #128	; 0x80
    cf32:	02b6      	lsls	r6, r6, #10
			res = f_write(&loggingFile, &fileBuffer[fileBufferReadIdx], BUFFER_TO_WRITE, &s2);
    cf34:	4d19      	ldr	r5, [pc, #100]	; (cf9c <_ZL8ThreadSDPv+0x2cc>)
    cf36:	e74a      	b.n	cdce <_ZL8ThreadSDPv+0xfe>
					bytesInBuffer += FILE_BUFFER_SIZE;
    cf38:	2380      	movs	r3, #128	; 0x80
    cf3a:	019b      	lsls	r3, r3, #6
    cf3c:	469c      	mov	ip, r3
    cf3e:	4462      	add	r2, ip
    cf40:	e7a1      	b.n	ce86 <_ZL8ThreadSDPv+0x1b6>
					xprintf("Write Remaining Error %d\n", res);
    cf42:	0001      	movs	r1, r0
    cf44:	481d      	ldr	r0, [pc, #116]	; (cfbc <_ZL8ThreadSDPv+0x2ec>)
    cf46:	f7f7 ffe3 	bl	4f10 <xprintf>
    cf4a:	e7a9      	b.n	cea0 <_ZL8ThreadSDPv+0x1d0>
    cf4c:	9305      	str	r3, [sp, #20]
    cf4e:	e7b9      	b.n	cec4 <_ZL8ThreadSDPv+0x1f4>
    cf50:	9304      	str	r3, [sp, #16]
    cf52:	e7d8      	b.n	cf06 <_ZL8ThreadSDPv+0x236>
    cf54:	0000f80c 	.word	0x0000f80c
    cf58:	0000f82c 	.word	0x0000f82c
    cf5c:	0000f838 	.word	0x0000f838
    cf60:	20005fdc 	.word	0x20005fdc
    cf64:	0000f5e8 	.word	0x0000f5e8
    cf68:	0000f84c 	.word	0x0000f84c
    cf6c:	20006448 	.word	0x20006448
    cf70:	0000f864 	.word	0x0000f864
    cf74:	0000f870 	.word	0x0000f870
    cf78:	0000f894 	.word	0x0000f894
    cf7c:	2000621c 	.word	0x2000621c
    cf80:	0000f8a8 	.word	0x0000f8a8
    cf84:	20006218 	.word	0x20006218
    cf88:	20006450 	.word	0x20006450
    cf8c:	0000f8bc 	.word	0x0000f8bc
    cf90:	fffffc00 	.word	0xfffffc00
    cf94:	20001e60 	.word	0x20001e60
    cf98:	20006460 	.word	0x20006460
    cf9c:	20006214 	.word	0x20006214
    cfa0:	00001fff 	.word	0x00001fff
    cfa4:	0000f8e8 	.word	0x0000f8e8
    cfa8:	0000f8fc 	.word	0x0000f8fc
    cfac:	0000f824 	.word	0x0000f824
    cfb0:	0000f910 	.word	0x0000f910
    cfb4:	0000f920 	.word	0x0000f920
    cfb8:	41004400 	.word	0x41004400
    cfbc:	0000f8cc 	.word	0x0000f8cc

0000cfc0 <_ZL12ThreadMinutePv>:
{
    cfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfc2:	b087      	sub	sp, #28
	chThdSleepMilliseconds(200);
    cfc4:	20c8      	movs	r0, #200	; 0xc8
    cfc6:	f7f5 ff6b 	bl	2ea0 <chThdSleep>
	xprintf("MinuteThread\n");
    cfca:	4813      	ldr	r0, [pc, #76]	; (d018 <_ZL12ThreadMinutePv+0x58>)
    cfcc:	f7f7 ffa0 	bl	4f10 <xprintf>
	chThdSleepMilliseconds(500);
    cfd0:	20fa      	movs	r0, #250	; 0xfa
    cfd2:	0040      	lsls	r0, r0, #1
    cfd4:	f7f5 ff64 	bl	2ea0 <chThdSleep>
		rtc_calendar_get_time(&rtc_instance, &time);
    cfd8:	4e10      	ldr	r6, [pc, #64]	; (d01c <_ZL12ThreadMinutePv+0x5c>)
		xprintf("time %4d-%02d-%02d %02d:%02d:%02d\n", time.year, time.month, time.day, time.hour, time.minute, time.second);
    cfda:	4d11      	ldr	r5, [pc, #68]	; (d020 <_ZL12ThreadMinutePv+0x60>)
		minutes_counter++;
    cfdc:	4f11      	ldr	r7, [pc, #68]	; (d024 <_ZL12ThreadMinutePv+0x64>)
		rtc_calendar_get_time(&rtc_instance, &time);
    cfde:	ac04      	add	r4, sp, #16
    cfe0:	0021      	movs	r1, r4
    cfe2:	0030      	movs	r0, r6
    cfe4:	f7f7 fa24 	bl	4430 <rtc_calendar_get_time>
		xprintf("time %4d-%02d-%02d %02d:%02d:%02d\n", time.year, time.month, time.day, time.hour, time.minute, time.second);
    cfe8:	7923      	ldrb	r3, [r4, #4]
    cfea:	7962      	ldrb	r2, [r4, #5]
    cfec:	88e1      	ldrh	r1, [r4, #6]
    cfee:	7820      	ldrb	r0, [r4, #0]
    cff0:	9002      	str	r0, [sp, #8]
    cff2:	7860      	ldrb	r0, [r4, #1]
    cff4:	9001      	str	r0, [sp, #4]
    cff6:	78a0      	ldrb	r0, [r4, #2]
    cff8:	9000      	str	r0, [sp, #0]
    cffa:	0028      	movs	r0, r5
    cffc:	f7f7 ff88 	bl	4f10 <xprintf>
		writeFile(0x04, sizeof(time), &time);
    d000:	0022      	movs	r2, r4
    d002:	2108      	movs	r1, #8
    d004:	2004      	movs	r0, #4
    d006:	f7ff fe33 	bl	cc70 <writeFile>
		chThdSleepSeconds(60);
    d00a:	4807      	ldr	r0, [pc, #28]	; (d028 <_ZL12ThreadMinutePv+0x68>)
    d00c:	f7f5 ff48 	bl	2ea0 <chThdSleep>
		minutes_counter++;
    d010:	683b      	ldr	r3, [r7, #0]
    d012:	3301      	adds	r3, #1
    d014:	603b      	str	r3, [r7, #0]
    d016:	e7e2      	b.n	cfde <_ZL12ThreadMinutePv+0x1e>
    d018:	0000f814 	.word	0x0000f814
    d01c:	20006448 	.word	0x20006448
    d020:	0000f52c 	.word	0x0000f52c
    d024:	20005fd8 	.word	0x20005fd8
    d028:	0000ea60 	.word	0x0000ea60
    d02c:	00000000 	.word	0x00000000

0000d030 <delay_ms>:
{
    d030:	b510      	push	{r4, lr}
	chThdSleepMilliseconds(num_ms);
    d032:	21fa      	movs	r1, #250	; 0xfa
    d034:	0089      	lsls	r1, r1, #2
    d036:	4348      	muls	r0, r1
    d038:	4b03      	ldr	r3, [pc, #12]	; (d048 <delay_ms+0x18>)
    d03a:	469c      	mov	ip, r3
    d03c:	4460      	add	r0, ip
    d03e:	f7f3 f8c9 	bl	1d4 <__udivsi3>
    d042:	f7f5 ff2d 	bl	2ea0 <chThdSleep>
}
    d046:	bd10      	pop	{r4, pc}
    d048:	000003e7 	.word	0x000003e7
    d04c:	00000000 	.word	0x00000000

0000d050 <_Z22configure_rtc_calendarv>:
{
    d050:	b510      	push	{r4, lr}
    d052:	b086      	sub	sp, #24
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    d054:	aa01      	add	r2, sp, #4
    d056:	23a0      	movs	r3, #160	; 0xa0
    d058:	011b      	lsls	r3, r3, #4
    d05a:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    d05c:	2300      	movs	r3, #0
    d05e:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    d060:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    d062:	21fa      	movs	r1, #250	; 0xfa
    d064:	00c9      	lsls	r1, r1, #3
    d066:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.alarm[0].time = alarm;
    d068:	7213      	strb	r3, [r2, #8]
    d06a:	7253      	strb	r3, [r2, #9]
    d06c:	7293      	strb	r3, [r2, #10]
    d06e:	72d3      	strb	r3, [r2, #11]
    d070:	3302      	adds	r3, #2
    d072:	7313      	strb	r3, [r2, #12]
    d074:	3b01      	subs	r3, #1
    d076:	7353      	strb	r3, [r2, #13]
    d078:	4907      	ldr	r1, [pc, #28]	; (d098 <_Z22configure_rtc_calendarv+0x48>)
    d07a:	81d1      	strh	r1, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    d07c:	2106      	movs	r1, #6
    d07e:	7411      	strb	r1, [r2, #16]
	config_rtc_calendar.clock_24h 	  = true;
    d080:	7113      	strb	r3, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    d082:	4c06      	ldr	r4, [pc, #24]	; (d09c <_Z22configure_rtc_calendarv+0x4c>)
    d084:	4906      	ldr	r1, [pc, #24]	; (d0a0 <_Z22configure_rtc_calendarv+0x50>)
    d086:	0020      	movs	r0, r4
    d088:	f7f7 fa12 	bl	44b0 <rtc_calendar_init>
	rtc_calendar_enable(&rtc_instance);
    d08c:	0020      	movs	r0, r4
    d08e:	f7f7 f94f 	bl	4330 <rtc_calendar_enable>
}
    d092:	b006      	add	sp, #24
    d094:	bd10      	pop	{r4, pc}
    d096:	46c0      	nop			; (mov r8, r8)
    d098:	000007e1 	.word	0x000007e1
    d09c:	20006448 	.word	0x20006448
    d0a0:	40001400 	.word	0x40001400
	...

0000d0b0 <get_fattime>:
{
    d0b0:	b500      	push	{lr}
    d0b2:	b083      	sub	sp, #12
	rtc_calendar_get_time(&rtc_instance, &current_time);
    d0b4:	4669      	mov	r1, sp
    d0b6:	480f      	ldr	r0, [pc, #60]	; (d0f4 <get_fattime+0x44>)
    d0b8:	f7f7 f9ba 	bl	4430 <rtc_calendar_get_time>
 			 | (current_time.month << 21)
    d0bc:	466b      	mov	r3, sp
    d0be:	7958      	ldrb	r0, [r3, #5]
    d0c0:	0540      	lsls	r0, r0, #21
			 | (current_time.day << 16)
    d0c2:	791b      	ldrb	r3, [r3, #4]
    d0c4:	041b      	lsls	r3, r3, #16
		    | ((current_time.second >> 1) << 0);
    d0c6:	4318      	orrs	r0, r3
			 | (current_time.hour << 11)
    d0c8:	466b      	mov	r3, sp
    d0ca:	789b      	ldrb	r3, [r3, #2]
    d0cc:	02db      	lsls	r3, r3, #11
		    | ((current_time.second >> 1) << 0);
    d0ce:	4318      	orrs	r0, r3
			 | (current_time.minute << 5)
    d0d0:	466b      	mov	r3, sp
    d0d2:	785b      	ldrb	r3, [r3, #1]
    d0d4:	015b      	lsls	r3, r3, #5
		    | ((current_time.second >> 1) << 0);
    d0d6:	4318      	orrs	r0, r3
    d0d8:	466b      	mov	r3, sp
    d0da:	781b      	ldrb	r3, [r3, #0]
    d0dc:	105b      	asrs	r3, r3, #1
    d0de:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    d0e0:	466b      	mov	r3, sp
    d0e2:	88db      	ldrh	r3, [r3, #6]
    d0e4:	4a04      	ldr	r2, [pc, #16]	; (d0f8 <get_fattime+0x48>)
    d0e6:	4694      	mov	ip, r2
    d0e8:	4463      	add	r3, ip
    d0ea:	065b      	lsls	r3, r3, #25
		    | ((current_time.second >> 1) << 0);
    d0ec:	4318      	orrs	r0, r3
}
    d0ee:	b003      	add	sp, #12
    d0f0:	bd00      	pop	{pc}
    d0f2:	46c0      	nop			; (mov r8, r8)
    d0f4:	20006448 	.word	0x20006448
    d0f8:	fffff844 	.word	0xfffff844
    d0fc:	00000000 	.word	0x00000000

0000d100 <SysTick_Handler>:
{
    d100:	b510      	push	{r4, lr}
	CH_IRQ_PROLOGUE();
    d102:	4674      	mov	r4, lr
	disk_timerproc();
    d104:	f7fa f954 	bl	73b0 <disk_timerproc>
  __ASM volatile ("cpsid i" : : : "memory");
    d108:	b672      	cpsid	i
	if (nmiCount > 0)
    d10a:	4b09      	ldr	r3, [pc, #36]	; (d130 <SysTick_Handler+0x30>)
    d10c:	881b      	ldrh	r3, [r3, #0]
    d10e:	2b00      	cmp	r3, #0
    d110:	dd06      	ble.n	d120 <SysTick_Handler+0x20>
		chEvtSignalI(&nil.threads[0], 1);
    d112:	2101      	movs	r1, #1
    d114:	4807      	ldr	r0, [pc, #28]	; (d134 <SysTick_Handler+0x34>)
    d116:	f7f5 fecb 	bl	2eb0 <chEvtSignalI>
		nmiCount = 0;
    d11a:	2200      	movs	r2, #0
    d11c:	4b04      	ldr	r3, [pc, #16]	; (d130 <SysTick_Handler+0x30>)
    d11e:	801a      	strh	r2, [r3, #0]
	chSysTimerHandlerI();
    d120:	f7f5 fe3e 	bl	2da0 <chSysTimerHandlerI>
  __ASM volatile ("cpsie i" : : : "memory");
    d124:	b662      	cpsie	i
	CH_IRQ_EPILOGUE();
    d126:	0020      	movs	r0, r4
    d128:	f7f5 ff02 	bl	2f30 <_port_irq_epilogue>
}
    d12c:	bd10      	pop	{r4, pc}
    d12e:	46c0      	nop			; (mov r8, r8)
    d130:	20001e50 	.word	0x20001e50
    d134:	20000a80 	.word	0x20000a80
	...

0000d140 <_Z6put_rc7FRESULT>:
{
    d140:	b570      	push	{r4, r5, r6, lr}
    d142:	1e01      	subs	r1, r0, #0
	for (i = 0; i != (UINT)rc && *str; i++)
    d144:	d014      	beq.n	d170 <_Z6put_rc7FRESULT+0x30>
    d146:	2500      	movs	r5, #0
    d148:	4a0b      	ldr	r2, [pc, #44]	; (d178 <_Z6put_rc7FRESULT+0x38>)
    d14a:	3230      	adds	r2, #48	; 0x30
    d14c:	0013      	movs	r3, r2
		while (*str++) ;
    d14e:	1c5a      	adds	r2, r3, #1
    d150:	781c      	ldrb	r4, [r3, #0]
    d152:	0013      	movs	r3, r2
    d154:	2c00      	cmp	r4, #0
    d156:	d1fa      	bne.n	d14e <_Z6put_rc7FRESULT+0xe>
	for (i = 0; i != (UINT)rc && *str; i++)
    d158:	3501      	adds	r5, #1
    d15a:	428d      	cmp	r5, r1
    d15c:	d003      	beq.n	d166 <_Z6put_rc7FRESULT+0x26>
    d15e:	7813      	ldrb	r3, [r2, #0]
    d160:	2b00      	cmp	r3, #0
    d162:	d1f3      	bne.n	d14c <_Z6put_rc7FRESULT+0xc>
    d164:	e000      	b.n	d168 <_Z6put_rc7FRESULT+0x28>
    d166:	0029      	movs	r1, r5
	xprintf("rc=%u FR_%s\n", (UINT)rc, str);
    d168:	4804      	ldr	r0, [pc, #16]	; (d17c <_Z6put_rc7FRESULT+0x3c>)
    d16a:	f7f7 fed1 	bl	4f10 <xprintf>
}
    d16e:	bd70      	pop	{r4, r5, r6, pc}
		"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0" "INVALID_PARAMETER\0";
    d170:	4a01      	ldr	r2, [pc, #4]	; (d178 <_Z6put_rc7FRESULT+0x38>)
    d172:	3230      	adds	r2, #48	; 0x30
    d174:	e7f8      	b.n	d168 <_Z6put_rc7FRESULT+0x28>
    d176:	46c0      	nop			; (mov r8, r8)
    d178:	0000dde0 	.word	0x0000dde0
    d17c:	0000f7fc 	.word	0x0000f7fc

0000d180 <RTC_Handler>:

extern void 	configure_usart_console();

bool alarm = false;
void RTC_Handler(void)
{
    d180:	b510      	push	{r4, lr}
	rtc_instance.hw->MODE2.INTENCLR.bit.ALARM0 = 1;
    d182:	4b06      	ldr	r3, [pc, #24]	; (d19c <RTC_Handler+0x1c>)
    d184:	681a      	ldr	r2, [r3, #0]
    d186:	7993      	ldrb	r3, [r2, #6]
    d188:	2101      	movs	r1, #1
    d18a:	430b      	orrs	r3, r1
    d18c:	7193      	strb	r3, [r2, #6]
	alarm = true;
    d18e:	4b04      	ldr	r3, [pc, #16]	; (d1a0 <RTC_Handler+0x20>)
    d190:	2201      	movs	r2, #1
    d192:	701a      	strb	r2, [r3, #0]
	xprintf("RTC Interrupt\n");
    d194:	4803      	ldr	r0, [pc, #12]	; (d1a4 <RTC_Handler+0x24>)
    d196:	f7f7 febb 	bl	4f10 <xprintf>
}
    d19a:	bd10      	pop	{r4, pc}
    d19c:	20006448 	.word	0x20006448
    d1a0:	20006210 	.word	0x20006210
    d1a4:	0000f7ec 	.word	0x0000f7ec
	...

0000d1b0 <main>:

/*
 * Application entry point.
 */
int main(void)
{
    d1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1b2:	b089      	sub	sp, #36	; 0x24
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    d1b4:	a803      	add	r0, sp, #12
    d1b6:	2400      	movs	r4, #0
    d1b8:	7004      	strb	r4, [r0, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    d1ba:	2500      	movs	r5, #0
    d1bc:	8044      	strh	r4, [r0, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    d1be:	8084      	strh	r4, [r0, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    d1c0:	7185      	strb	r5, [r0, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    d1c2:	71c5      	strb	r5, [r0, #7]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    d1c4:	2707      	movs	r7, #7
    d1c6:	7207      	strb	r7, [r0, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    d1c8:	233f      	movs	r3, #63	; 0x3f
    d1ca:	8143      	strh	r3, [r0, #10]
	config->coarse_max_step = 1;
    d1cc:	3b3e      	subs	r3, #62	; 0x3e
    d1ce:	2601      	movs	r6, #1
    d1d0:	7303      	strb	r3, [r0, #12]
	config->fine_max_step   = 1;
    d1d2:	81c3      	strh	r3, [r0, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    d1d4:	3305      	adds	r3, #5
    d1d6:	8203      	strh	r3, [r0, #16]
	struct system_clock_source_dfll_config config_dfll;
	system_clock_source_dfll_get_config_defaults(&config_dfll);
	config_dfll.on_demand       = false; // this is a bug in SAMD21, Errata reference: 9905
    d1d8:	7045      	strb	r5, [r0, #1]
	system_clock_source_dfll_set_config(&config_dfll);
    d1da:	f7f6 fe41 	bl	3e60 <system_clock_source_dfll_set_config>

	system_init();
    d1de:	f7f7 fa8f 	bl	4700 <system_init>

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    d1e2:	4920      	ldr	r1, [pc, #128]	; (d264 <main+0xb4>)
    d1e4:	2301      	movs	r3, #1
    d1e6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    d1e8:	2011      	movs	r0, #17
    d1ea:	f7f7 fa99 	bl	4720 <port_pin_set_config>
    d1ee:	2280      	movs	r2, #128	; 0x80
    d1f0:	0292      	lsls	r2, r2, #10
    d1f2:	4b1d      	ldr	r3, [pc, #116]	; (d268 <main+0xb8>)
    d1f4:	615a      	str	r2, [r3, #20]
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    d1f6:	2000      	movs	r0, #0
    d1f8:	f7f6 ffea 	bl	41d0 <system_gclk_gen_get_hz>
    d1fc:	4b1b      	ldr	r3, [pc, #108]	; (d26c <main+0xbc>)
    d1fe:	7a1b      	ldrb	r3, [r3, #8]
    d200:	b2db      	uxtb	r3, r3
    d202:	40d8      	lsrs	r0, r3
	/*
	 * Hardware initialization, in this simple demo just the systick timer is
	 * initialized.
	 */
	uint32_t sysclock = system_cpu_clock_get_hz();
	SysTick->LOAD = sysclock / CH_CFG_ST_FREQUENCY - (systime_t)1;
    d204:	21fa      	movs	r1, #250	; 0xfa
    d206:	0089      	lsls	r1, r1, #2
    d208:	f7f2 ffe4 	bl	1d4 <__udivsi3>
    d20c:	3801      	subs	r0, #1
    d20e:	4b18      	ldr	r3, [pc, #96]	; (d270 <main+0xc0>)
    d210:	6058      	str	r0, [r3, #4]
	//SysTick->LOAD = SYSTEM_CLOCK / CH_CFG_ST_FREQUENCY - (systime_t)1;
	SysTick->VAL = (uint32_t)0;
    d212:	609c      	str	r4, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk;
    d214:	601f      	str	r7, [r3, #0]

	// how to detect if clock is already set, recovery from reset vs power on?
	struct rtc_calendar_time time;
	time.year   = 2000;
    d216:	ac01      	add	r4, sp, #4
    d218:	23fa      	movs	r3, #250	; 0xfa
    d21a:	00db      	lsls	r3, r3, #3
    d21c:	80e3      	strh	r3, [r4, #6]
	time.month  = 01;
    d21e:	7166      	strb	r6, [r4, #5]
	time.day    = 01;
    d220:	7126      	strb	r6, [r4, #4]
	time.hour   = 00;
    d222:	70a5      	strb	r5, [r4, #2]
	time.minute = 00;
    d224:	7065      	strb	r5, [r4, #1]
	time.second = 00;
    d226:	7025      	strb	r5, [r4, #0]

	configure_rtc_calendar();
    d228:	f7ff ff12 	bl	d050 <_Z22configure_rtc_calendarv>

	/* Set current time. */
	rtc_calendar_set_time(&rtc_instance, &time);
    d22c:	0021      	movs	r1, r4
    d22e:	4811      	ldr	r0, [pc, #68]	; (d274 <main+0xc4>)
    d230:	f7f7 f8ee 	bl	4410 <rtc_calendar_set_time>
	cpu_irq_enable();
    d234:	4b10      	ldr	r3, [pc, #64]	; (d278 <main+0xc8>)
    d236:	701e      	strb	r6, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    d238:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d23c:	b662      	cpsie	i

	system_interrupt_enable_global();

	configure_usart_console();
    d23e:	f7fe fabf 	bl	b7c0 <_Z23configure_usart_consolev>
	//  uint8_t string[] = "Hello World!\r\n";
	//  usart_write_buffer_wait(&usart_console, string, sizeof(string));
#ifdef ADA_FEATHER_M0
	xprintf("\nAdalogger Feather M0 ChibiOS NIL v" CH_KERNEL_VERSION "\r\n");
#else
	xprintf("\n9DOF IMU, GPS logger ChibiOS NIL v" CH_KERNEL_VERSION "\r\n");
    d242:	480e      	ldr	r0, [pc, #56]	; (d27c <main+0xcc>)
    d244:	f7f7 fe64 	bl	4f10 <xprintf>
 *
 * \return Device ID signature as a 32-bit integer.
 */
static inline uint32_t system_get_device_id(void)
{
	return DSU->DID.reg;
    d248:	4b0d      	ldr	r3, [pc, #52]	; (d280 <main+0xd0>)
    d24a:	6999      	ldr	r1, [r3, #24]
#endif
	xprintf("Device ID %d\r\n", system_get_device_id());
    d24c:	480d      	ldr	r0, [pc, #52]	; (d284 <main+0xd4>)
    d24e:	f7f7 fe5f 	bl	4f10 <xprintf>
	xprintf("ATMEL xdk-asf-3.34.2\n");
    d252:	480d      	ldr	r0, [pc, #52]	; (d288 <main+0xd8>)
    d254:	f7f7 fe5c 	bl	4f10 <xprintf>

	xprintf("Build " __DATE__ " " __TIME__ "\n\n");
    d258:	480c      	ldr	r0, [pc, #48]	; (d28c <main+0xdc>)
    d25a:	f7f7 fe59 	bl	4f10 <xprintf>
	/*
	 * System initializations.
	 * - Kernel initialization, the main() function becomes a thread and the
	 *   RTOS is active.
	 */
	chSysInit();
    d25e:	f7f5 fd47 	bl	2cf0 <chSysInit>
    d262:	e7fe      	b.n	d262 <main+0xb2>
    d264:	20006444 	.word	0x20006444
    d268:	41004400 	.word	0x41004400
    d26c:	40000400 	.word	0x40000400
    d270:	e000e010 	.word	0xe000e010
    d274:	20006448 	.word	0x20006448
    d278:	20000800 	.word	0x20000800
    d27c:	0000f934 	.word	0x0000f934
    d280:	41002000 	.word	0x41002000
    d284:	0000f960 	.word	0x0000f960
    d288:	0000f970 	.word	0x0000f970
    d28c:	0000f988 	.word	0x0000f988

0000d290 <asinf>:
    d290:	b5f0      	push	{r4, r5, r6, r7, lr}
    d292:	b08d      	sub	sp, #52	; 0x34
    d294:	1c04      	adds	r4, r0, #0
    d296:	f000 f8a5 	bl	d3e4 <__ieee754_asinf>
    d29a:	2300      	movs	r3, #0
    d29c:	4e23      	ldr	r6, [pc, #140]	; (d32c <asinf+0x9c>)
    d29e:	1c05      	adds	r5, r0, #0
    d2a0:	56f3      	ldrsb	r3, [r6, r3]
    d2a2:	3301      	adds	r3, #1
    d2a4:	d031      	beq.n	d30a <asinf+0x7a>
    d2a6:	1c21      	adds	r1, r4, #0
    d2a8:	1c20      	adds	r0, r4, #0
    d2aa:	f7f3 ffc3 	bl	1234 <__aeabi_fcmpun>
    d2ae:	1e07      	subs	r7, r0, #0
    d2b0:	d12b      	bne.n	d30a <asinf+0x7a>
    d2b2:	1c20      	adds	r0, r4, #0
    d2b4:	f000 fbfc 	bl	dab0 <fabsf>
    d2b8:	21fe      	movs	r1, #254	; 0xfe
    d2ba:	0589      	lsls	r1, r1, #22
    d2bc:	f7f3 f926 	bl	50c <__aeabi_fcmpgt>
    d2c0:	2800      	cmp	r0, #0
    d2c2:	d022      	beq.n	d30a <asinf+0x7a>
    d2c4:	2301      	movs	r3, #1
    d2c6:	9302      	str	r3, [sp, #8]
    d2c8:	4b19      	ldr	r3, [pc, #100]	; (d330 <asinf+0xa0>)
    d2ca:	1c20      	adds	r0, r4, #0
    d2cc:	9303      	str	r3, [sp, #12]
    d2ce:	970a      	str	r7, [sp, #40]	; 0x28
    d2d0:	f7f4 fbb2 	bl	1a38 <__aeabi_f2d>
    d2d4:	9006      	str	r0, [sp, #24]
    d2d6:	9107      	str	r1, [sp, #28]
    d2d8:	9004      	str	r0, [sp, #16]
    d2da:	9105      	str	r1, [sp, #20]
    d2dc:	4815      	ldr	r0, [pc, #84]	; (d334 <asinf+0xa4>)
    d2de:	f000 fac5 	bl	d86c <nan>
    d2e2:	2300      	movs	r3, #0
    d2e4:	56f3      	ldrsb	r3, [r6, r3]
    d2e6:	9008      	str	r0, [sp, #32]
    d2e8:	9109      	str	r1, [sp, #36]	; 0x24
    d2ea:	2b02      	cmp	r3, #2
    d2ec:	d010      	beq.n	d310 <asinf+0x80>
    d2ee:	a802      	add	r0, sp, #8
    d2f0:	f000 faba 	bl	d868 <matherr>
    d2f4:	2800      	cmp	r0, #0
    d2f6:	d00b      	beq.n	d310 <asinf+0x80>
    d2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d2fa:	9301      	str	r3, [sp, #4]
    d2fc:	2b00      	cmp	r3, #0
    d2fe:	d10f      	bne.n	d320 <asinf+0x90>
    d300:	9808      	ldr	r0, [sp, #32]
    d302:	9909      	ldr	r1, [sp, #36]	; 0x24
    d304:	f7f4 fbea 	bl	1adc <__aeabi_d2f>
    d308:	1c05      	adds	r5, r0, #0
    d30a:	1c28      	adds	r0, r5, #0
    d30c:	b00d      	add	sp, #52	; 0x34
    d30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d310:	f000 fbe0 	bl	dad4 <__errno>
    d314:	2321      	movs	r3, #33	; 0x21
    d316:	6003      	str	r3, [r0, #0]
    d318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d31a:	9301      	str	r3, [sp, #4]
    d31c:	2b00      	cmp	r3, #0
    d31e:	d0ef      	beq.n	d300 <asinf+0x70>
    d320:	f000 fbd8 	bl	dad4 <__errno>
    d324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d326:	9301      	str	r3, [sp, #4]
    d328:	6003      	str	r3, [r0, #0]
    d32a:	e7e9      	b.n	d300 <asinf+0x70>
    d32c:	20000898 	.word	0x20000898
    d330:	0000fa74 	.word	0x0000fa74
    d334:	0000f5e8 	.word	0x0000f5e8

0000d338 <atan2f>:
    d338:	b510      	push	{r4, lr}
    d33a:	f000 f9a5 	bl	d688 <__ieee754_atan2f>
    d33e:	bd10      	pop	{r4, pc}

0000d340 <sqrtf>:
    d340:	b5f0      	push	{r4, r5, r6, r7, lr}
    d342:	2500      	movs	r5, #0
    d344:	b08d      	sub	sp, #52	; 0x34
    d346:	1c04      	adds	r4, r0, #0
    d348:	f000 fa32 	bl	d7b0 <__ieee754_sqrtf>
    d34c:	4b23      	ldr	r3, [pc, #140]	; (d3dc <sqrtf+0x9c>)
    d34e:	1c06      	adds	r6, r0, #0
    d350:	575d      	ldrsb	r5, [r3, r5]
    d352:	1c6b      	adds	r3, r5, #1
    d354:	d00b      	beq.n	d36e <sqrtf+0x2e>
    d356:	1c21      	adds	r1, r4, #0
    d358:	1c20      	adds	r0, r4, #0
    d35a:	f7f3 ff6b 	bl	1234 <__aeabi_fcmpun>
    d35e:	1e07      	subs	r7, r0, #0
    d360:	d105      	bne.n	d36e <sqrtf+0x2e>
    d362:	2100      	movs	r1, #0
    d364:	1c20      	adds	r0, r4, #0
    d366:	f7f3 f8bd 	bl	4e4 <__aeabi_fcmplt>
    d36a:	2800      	cmp	r0, #0
    d36c:	d102      	bne.n	d374 <sqrtf+0x34>
    d36e:	1c30      	adds	r0, r6, #0
    d370:	b00d      	add	sp, #52	; 0x34
    d372:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d374:	2301      	movs	r3, #1
    d376:	9302      	str	r3, [sp, #8]
    d378:	4b19      	ldr	r3, [pc, #100]	; (d3e0 <sqrtf+0xa0>)
    d37a:	1c20      	adds	r0, r4, #0
    d37c:	9303      	str	r3, [sp, #12]
    d37e:	970a      	str	r7, [sp, #40]	; 0x28
    d380:	f7f4 fb5a 	bl	1a38 <__aeabi_f2d>
    d384:	2200      	movs	r2, #0
    d386:	9006      	str	r0, [sp, #24]
    d388:	9107      	str	r1, [sp, #28]
    d38a:	9004      	str	r0, [sp, #16]
    d38c:	9105      	str	r1, [sp, #20]
    d38e:	2300      	movs	r3, #0
    d390:	2d00      	cmp	r5, #0
    d392:	d015      	beq.n	d3c0 <sqrtf+0x80>
    d394:	0010      	movs	r0, r2
    d396:	0019      	movs	r1, r3
    d398:	f7f4 f81a 	bl	13d0 <__aeabi_ddiv>
    d39c:	9008      	str	r0, [sp, #32]
    d39e:	9109      	str	r1, [sp, #36]	; 0x24
    d3a0:	2d02      	cmp	r5, #2
    d3a2:	d10f      	bne.n	d3c4 <sqrtf+0x84>
    d3a4:	f000 fb96 	bl	dad4 <__errno>
    d3a8:	2321      	movs	r3, #33	; 0x21
    d3aa:	6003      	str	r3, [r0, #0]
    d3ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d3ae:	9301      	str	r3, [sp, #4]
    d3b0:	2b00      	cmp	r3, #0
    d3b2:	d10d      	bne.n	d3d0 <sqrtf+0x90>
    d3b4:	9808      	ldr	r0, [sp, #32]
    d3b6:	9909      	ldr	r1, [sp, #36]	; 0x24
    d3b8:	f7f4 fb90 	bl	1adc <__aeabi_d2f>
    d3bc:	1c06      	adds	r6, r0, #0
    d3be:	e7d6      	b.n	d36e <sqrtf+0x2e>
    d3c0:	9208      	str	r2, [sp, #32]
    d3c2:	9309      	str	r3, [sp, #36]	; 0x24
    d3c4:	a802      	add	r0, sp, #8
    d3c6:	f000 fa4f 	bl	d868 <matherr>
    d3ca:	2800      	cmp	r0, #0
    d3cc:	d1ee      	bne.n	d3ac <sqrtf+0x6c>
    d3ce:	e7e9      	b.n	d3a4 <sqrtf+0x64>
    d3d0:	f000 fb80 	bl	dad4 <__errno>
    d3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d3d6:	9301      	str	r3, [sp, #4]
    d3d8:	6003      	str	r3, [r0, #0]
    d3da:	e7eb      	b.n	d3b4 <sqrtf+0x74>
    d3dc:	20000898 	.word	0x20000898
    d3e0:	0000fa7c 	.word	0x0000fa7c

0000d3e4 <__ieee754_asinf>:
    d3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3e6:	46ce      	mov	lr, r9
    d3e8:	4647      	mov	r7, r8
    d3ea:	23fe      	movs	r3, #254	; 0xfe
    d3ec:	0044      	lsls	r4, r0, #1
    d3ee:	b580      	push	{r7, lr}
    d3f0:	1c05      	adds	r5, r0, #0
    d3f2:	0006      	movs	r6, r0
    d3f4:	0864      	lsrs	r4, r4, #1
    d3f6:	059b      	lsls	r3, r3, #22
    d3f8:	429c      	cmp	r4, r3
    d3fa:	d100      	bne.n	d3fe <__ieee754_asinf+0x1a>
    d3fc:	e0c8      	b.n	d590 <__ieee754_asinf+0x1ac>
    d3fe:	dd00      	ble.n	d402 <__ieee754_asinf+0x1e>
    d400:	e0a7      	b.n	d552 <__ieee754_asinf+0x16e>
    d402:	4b8f      	ldr	r3, [pc, #572]	; (d640 <__ieee754_asinf+0x25c>)
    d404:	429c      	cmp	r4, r3
    d406:	dc0f      	bgt.n	d428 <__ieee754_asinf+0x44>
    d408:	4b8e      	ldr	r3, [pc, #568]	; (d644 <__ieee754_asinf+0x260>)
    d40a:	429c      	cmp	r4, r3
    d40c:	dd00      	ble.n	d410 <__ieee754_asinf+0x2c>
    d40e:	e0cc      	b.n	d5aa <__ieee754_asinf+0x1c6>
    d410:	498d      	ldr	r1, [pc, #564]	; (d648 <__ieee754_asinf+0x264>)
    d412:	f7f3 f8d1 	bl	5b8 <__aeabi_fadd>
    d416:	21fe      	movs	r1, #254	; 0xfe
    d418:	0589      	lsls	r1, r1, #22
    d41a:	f7f3 f877 	bl	50c <__aeabi_fcmpgt>
    d41e:	0003      	movs	r3, r0
    d420:	1c28      	adds	r0, r5, #0
    d422:	2b00      	cmp	r3, #0
    d424:	d000      	beq.n	d428 <__ieee754_asinf+0x44>
    d426:	e09a      	b.n	d55e <__ieee754_asinf+0x17a>
    d428:	1c28      	adds	r0, r5, #0
    d42a:	f000 fb41 	bl	dab0 <fabsf>
    d42e:	1c01      	adds	r1, r0, #0
    d430:	20fe      	movs	r0, #254	; 0xfe
    d432:	0580      	lsls	r0, r0, #22
    d434:	f7f3 fd62 	bl	efc <__aeabi_fsub>
    d438:	21fc      	movs	r1, #252	; 0xfc
    d43a:	0589      	lsls	r1, r1, #22
    d43c:	f7f3 fc3e 	bl	cbc <__aeabi_fmul>
    d440:	4982      	ldr	r1, [pc, #520]	; (d64c <__ieee754_asinf+0x268>)
    d442:	1c05      	adds	r5, r0, #0
    d444:	f7f3 fc3a 	bl	cbc <__aeabi_fmul>
    d448:	4981      	ldr	r1, [pc, #516]	; (d650 <__ieee754_asinf+0x26c>)
    d44a:	f7f3 f8b5 	bl	5b8 <__aeabi_fadd>
    d44e:	1c29      	adds	r1, r5, #0
    d450:	f7f3 fc34 	bl	cbc <__aeabi_fmul>
    d454:	497f      	ldr	r1, [pc, #508]	; (d654 <__ieee754_asinf+0x270>)
    d456:	f7f3 fd51 	bl	efc <__aeabi_fsub>
    d45a:	1c29      	adds	r1, r5, #0
    d45c:	f7f3 fc2e 	bl	cbc <__aeabi_fmul>
    d460:	497d      	ldr	r1, [pc, #500]	; (d658 <__ieee754_asinf+0x274>)
    d462:	f7f3 f8a9 	bl	5b8 <__aeabi_fadd>
    d466:	1c29      	adds	r1, r5, #0
    d468:	f7f3 fc28 	bl	cbc <__aeabi_fmul>
    d46c:	497b      	ldr	r1, [pc, #492]	; (d65c <__ieee754_asinf+0x278>)
    d46e:	f7f3 fd45 	bl	efc <__aeabi_fsub>
    d472:	1c29      	adds	r1, r5, #0
    d474:	f7f3 fc22 	bl	cbc <__aeabi_fmul>
    d478:	4979      	ldr	r1, [pc, #484]	; (d660 <__ieee754_asinf+0x27c>)
    d47a:	f7f3 f89d 	bl	5b8 <__aeabi_fadd>
    d47e:	1c29      	adds	r1, r5, #0
    d480:	f7f3 fc1c 	bl	cbc <__aeabi_fmul>
    d484:	4977      	ldr	r1, [pc, #476]	; (d664 <__ieee754_asinf+0x280>)
    d486:	4680      	mov	r8, r0
    d488:	1c28      	adds	r0, r5, #0
    d48a:	f7f3 fc17 	bl	cbc <__aeabi_fmul>
    d48e:	4976      	ldr	r1, [pc, #472]	; (d668 <__ieee754_asinf+0x284>)
    d490:	f7f3 fd34 	bl	efc <__aeabi_fsub>
    d494:	1c29      	adds	r1, r5, #0
    d496:	f7f3 fc11 	bl	cbc <__aeabi_fmul>
    d49a:	4974      	ldr	r1, [pc, #464]	; (d66c <__ieee754_asinf+0x288>)
    d49c:	f7f3 f88c 	bl	5b8 <__aeabi_fadd>
    d4a0:	1c29      	adds	r1, r5, #0
    d4a2:	f7f3 fc0b 	bl	cbc <__aeabi_fmul>
    d4a6:	4972      	ldr	r1, [pc, #456]	; (d670 <__ieee754_asinf+0x28c>)
    d4a8:	f7f3 fd28 	bl	efc <__aeabi_fsub>
    d4ac:	1c29      	adds	r1, r5, #0
    d4ae:	f7f3 fc05 	bl	cbc <__aeabi_fmul>
    d4b2:	21fe      	movs	r1, #254	; 0xfe
    d4b4:	0589      	lsls	r1, r1, #22
    d4b6:	f7f3 f87f 	bl	5b8 <__aeabi_fadd>
    d4ba:	4681      	mov	r9, r0
    d4bc:	1c28      	adds	r0, r5, #0
    d4be:	f000 f977 	bl	d7b0 <__ieee754_sqrtf>
    d4c2:	4b6c      	ldr	r3, [pc, #432]	; (d674 <__ieee754_asinf+0x290>)
    d4c4:	1c07      	adds	r7, r0, #0
    d4c6:	429c      	cmp	r4, r3
    d4c8:	dc4d      	bgt.n	d566 <__ieee754_asinf+0x182>
    d4ca:	0b04      	lsrs	r4, r0, #12
    d4cc:	4649      	mov	r1, r9
    d4ce:	4640      	mov	r0, r8
    d4d0:	f7f3 fa04 	bl	8dc <__aeabi_fdiv>
    d4d4:	1c39      	adds	r1, r7, #0
    d4d6:	4680      	mov	r8, r0
    d4d8:	1c38      	adds	r0, r7, #0
    d4da:	f7f3 f86d 	bl	5b8 <__aeabi_fadd>
    d4de:	1c01      	adds	r1, r0, #0
    d4e0:	4640      	mov	r0, r8
    d4e2:	f7f3 fbeb 	bl	cbc <__aeabi_fmul>
    d4e6:	0324      	lsls	r4, r4, #12
    d4e8:	4680      	mov	r8, r0
    d4ea:	1c21      	adds	r1, r4, #0
    d4ec:	1c20      	adds	r0, r4, #0
    d4ee:	f7f3 fbe5 	bl	cbc <__aeabi_fmul>
    d4f2:	1c01      	adds	r1, r0, #0
    d4f4:	1c28      	adds	r0, r5, #0
    d4f6:	f7f3 fd01 	bl	efc <__aeabi_fsub>
    d4fa:	1c39      	adds	r1, r7, #0
    d4fc:	1c05      	adds	r5, r0, #0
    d4fe:	1c20      	adds	r0, r4, #0
    d500:	f7f3 f85a 	bl	5b8 <__aeabi_fadd>
    d504:	1c01      	adds	r1, r0, #0
    d506:	1c28      	adds	r0, r5, #0
    d508:	f7f3 f9e8 	bl	8dc <__aeabi_fdiv>
    d50c:	1c01      	adds	r1, r0, #0
    d50e:	f7f3 f853 	bl	5b8 <__aeabi_fadd>
    d512:	1c01      	adds	r1, r0, #0
    d514:	4858      	ldr	r0, [pc, #352]	; (d678 <__ieee754_asinf+0x294>)
    d516:	f7f3 fcf1 	bl	efc <__aeabi_fsub>
    d51a:	1c01      	adds	r1, r0, #0
    d51c:	4640      	mov	r0, r8
    d51e:	f7f3 fced 	bl	efc <__aeabi_fsub>
    d522:	1c21      	adds	r1, r4, #0
    d524:	1c05      	adds	r5, r0, #0
    d526:	1c20      	adds	r0, r4, #0
    d528:	f7f3 f846 	bl	5b8 <__aeabi_fadd>
    d52c:	1c01      	adds	r1, r0, #0
    d52e:	4853      	ldr	r0, [pc, #332]	; (d67c <__ieee754_asinf+0x298>)
    d530:	f7f3 fce4 	bl	efc <__aeabi_fsub>
    d534:	1c01      	adds	r1, r0, #0
    d536:	1c28      	adds	r0, r5, #0
    d538:	f7f3 fce0 	bl	efc <__aeabi_fsub>
    d53c:	1c01      	adds	r1, r0, #0
    d53e:	484f      	ldr	r0, [pc, #316]	; (d67c <__ieee754_asinf+0x298>)
    d540:	f7f3 fcdc 	bl	efc <__aeabi_fsub>
    d544:	2e00      	cmp	r6, #0
    d546:	dc0a      	bgt.n	d55e <__ieee754_asinf+0x17a>
    d548:	2380      	movs	r3, #128	; 0x80
    d54a:	061b      	lsls	r3, r3, #24
    d54c:	469c      	mov	ip, r3
    d54e:	4460      	add	r0, ip
    d550:	e005      	b.n	d55e <__ieee754_asinf+0x17a>
    d552:	1c01      	adds	r1, r0, #0
    d554:	f7f3 fcd2 	bl	efc <__aeabi_fsub>
    d558:	1c01      	adds	r1, r0, #0
    d55a:	f7f3 f9bf 	bl	8dc <__aeabi_fdiv>
    d55e:	bc0c      	pop	{r2, r3}
    d560:	4690      	mov	r8, r2
    d562:	4699      	mov	r9, r3
    d564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d566:	4649      	mov	r1, r9
    d568:	4640      	mov	r0, r8
    d56a:	f7f3 f9b7 	bl	8dc <__aeabi_fdiv>
    d56e:	1c39      	adds	r1, r7, #0
    d570:	f7f3 fba4 	bl	cbc <__aeabi_fmul>
    d574:	1c39      	adds	r1, r7, #0
    d576:	f7f3 f81f 	bl	5b8 <__aeabi_fadd>
    d57a:	1c01      	adds	r1, r0, #0
    d57c:	f7f3 f81c 	bl	5b8 <__aeabi_fadd>
    d580:	493f      	ldr	r1, [pc, #252]	; (d680 <__ieee754_asinf+0x29c>)
    d582:	f7f3 f819 	bl	5b8 <__aeabi_fadd>
    d586:	1c01      	adds	r1, r0, #0
    d588:	483e      	ldr	r0, [pc, #248]	; (d684 <__ieee754_asinf+0x2a0>)
    d58a:	f7f3 fcb7 	bl	efc <__aeabi_fsub>
    d58e:	e7d9      	b.n	d544 <__ieee754_asinf+0x160>
    d590:	493c      	ldr	r1, [pc, #240]	; (d684 <__ieee754_asinf+0x2a0>)
    d592:	f7f3 fb93 	bl	cbc <__aeabi_fmul>
    d596:	4938      	ldr	r1, [pc, #224]	; (d678 <__ieee754_asinf+0x294>)
    d598:	1c04      	adds	r4, r0, #0
    d59a:	1c28      	adds	r0, r5, #0
    d59c:	f7f3 fb8e 	bl	cbc <__aeabi_fmul>
    d5a0:	1c01      	adds	r1, r0, #0
    d5a2:	1c20      	adds	r0, r4, #0
    d5a4:	f7f3 f808 	bl	5b8 <__aeabi_fadd>
    d5a8:	e7d9      	b.n	d55e <__ieee754_asinf+0x17a>
    d5aa:	1c01      	adds	r1, r0, #0
    d5ac:	f7f3 fb86 	bl	cbc <__aeabi_fmul>
    d5b0:	4926      	ldr	r1, [pc, #152]	; (d64c <__ieee754_asinf+0x268>)
    d5b2:	1c04      	adds	r4, r0, #0
    d5b4:	f7f3 fb82 	bl	cbc <__aeabi_fmul>
    d5b8:	4925      	ldr	r1, [pc, #148]	; (d650 <__ieee754_asinf+0x26c>)
    d5ba:	f7f2 fffd 	bl	5b8 <__aeabi_fadd>
    d5be:	1c21      	adds	r1, r4, #0
    d5c0:	f7f3 fb7c 	bl	cbc <__aeabi_fmul>
    d5c4:	4923      	ldr	r1, [pc, #140]	; (d654 <__ieee754_asinf+0x270>)
    d5c6:	f7f3 fc99 	bl	efc <__aeabi_fsub>
    d5ca:	1c21      	adds	r1, r4, #0
    d5cc:	f7f3 fb76 	bl	cbc <__aeabi_fmul>
    d5d0:	4921      	ldr	r1, [pc, #132]	; (d658 <__ieee754_asinf+0x274>)
    d5d2:	f7f2 fff1 	bl	5b8 <__aeabi_fadd>
    d5d6:	1c21      	adds	r1, r4, #0
    d5d8:	f7f3 fb70 	bl	cbc <__aeabi_fmul>
    d5dc:	491f      	ldr	r1, [pc, #124]	; (d65c <__ieee754_asinf+0x278>)
    d5de:	f7f3 fc8d 	bl	efc <__aeabi_fsub>
    d5e2:	1c21      	adds	r1, r4, #0
    d5e4:	f7f3 fb6a 	bl	cbc <__aeabi_fmul>
    d5e8:	491d      	ldr	r1, [pc, #116]	; (d660 <__ieee754_asinf+0x27c>)
    d5ea:	f7f2 ffe5 	bl	5b8 <__aeabi_fadd>
    d5ee:	1c21      	adds	r1, r4, #0
    d5f0:	f7f3 fb64 	bl	cbc <__aeabi_fmul>
    d5f4:	491b      	ldr	r1, [pc, #108]	; (d664 <__ieee754_asinf+0x280>)
    d5f6:	1c06      	adds	r6, r0, #0
    d5f8:	1c20      	adds	r0, r4, #0
    d5fa:	f7f3 fb5f 	bl	cbc <__aeabi_fmul>
    d5fe:	491a      	ldr	r1, [pc, #104]	; (d668 <__ieee754_asinf+0x284>)
    d600:	f7f3 fc7c 	bl	efc <__aeabi_fsub>
    d604:	1c21      	adds	r1, r4, #0
    d606:	f7f3 fb59 	bl	cbc <__aeabi_fmul>
    d60a:	4918      	ldr	r1, [pc, #96]	; (d66c <__ieee754_asinf+0x288>)
    d60c:	f7f2 ffd4 	bl	5b8 <__aeabi_fadd>
    d610:	1c21      	adds	r1, r4, #0
    d612:	f7f3 fb53 	bl	cbc <__aeabi_fmul>
    d616:	4916      	ldr	r1, [pc, #88]	; (d670 <__ieee754_asinf+0x28c>)
    d618:	f7f3 fc70 	bl	efc <__aeabi_fsub>
    d61c:	1c21      	adds	r1, r4, #0
    d61e:	f7f3 fb4d 	bl	cbc <__aeabi_fmul>
    d622:	21fe      	movs	r1, #254	; 0xfe
    d624:	0589      	lsls	r1, r1, #22
    d626:	f7f2 ffc7 	bl	5b8 <__aeabi_fadd>
    d62a:	1c01      	adds	r1, r0, #0
    d62c:	1c30      	adds	r0, r6, #0
    d62e:	f7f3 f955 	bl	8dc <__aeabi_fdiv>
    d632:	1c29      	adds	r1, r5, #0
    d634:	f7f3 fb42 	bl	cbc <__aeabi_fmul>
    d638:	1c29      	adds	r1, r5, #0
    d63a:	f7f2 ffbd 	bl	5b8 <__aeabi_fadd>
    d63e:	e78e      	b.n	d55e <__ieee754_asinf+0x17a>
    d640:	3effffff 	.word	0x3effffff
    d644:	31ffffff 	.word	0x31ffffff
    d648:	7149f2ca 	.word	0x7149f2ca
    d64c:	3811ef08 	.word	0x3811ef08
    d650:	3a4f7f04 	.word	0x3a4f7f04
    d654:	3d241146 	.word	0x3d241146
    d658:	3e4e0aa8 	.word	0x3e4e0aa8
    d65c:	3ea6b090 	.word	0x3ea6b090
    d660:	3e2aaaab 	.word	0x3e2aaaab
    d664:	3d9dc62e 	.word	0x3d9dc62e
    d668:	3f303361 	.word	0x3f303361
    d66c:	4001572d 	.word	0x4001572d
    d670:	4019d139 	.word	0x4019d139
    d674:	3f799999 	.word	0x3f799999
    d678:	b33bbd2e 	.word	0xb33bbd2e
    d67c:	3f490fdb 	.word	0x3f490fdb
    d680:	333bbd2e 	.word	0x333bbd2e
    d684:	3fc90fdb 	.word	0x3fc90fdb

0000d688 <__ieee754_atan2f>:
    d688:	b5f0      	push	{r4, r5, r6, r7, lr}
    d68a:	004b      	lsls	r3, r1, #1
    d68c:	46c6      	mov	lr, r8
    d68e:	1c0c      	adds	r4, r1, #0
    d690:	21ff      	movs	r1, #255	; 0xff
    d692:	b500      	push	{lr}
    d694:	085b      	lsrs	r3, r3, #1
    d696:	05c9      	lsls	r1, r1, #23
    d698:	428b      	cmp	r3, r1
    d69a:	dc17      	bgt.n	d6cc <__ieee754_atan2f+0x44>
    d69c:	0042      	lsls	r2, r0, #1
    d69e:	4680      	mov	r8, r0
    d6a0:	0852      	lsrs	r2, r2, #1
    d6a2:	428a      	cmp	r2, r1
    d6a4:	dc12      	bgt.n	d6cc <__ieee754_atan2f+0x44>
    d6a6:	25fe      	movs	r5, #254	; 0xfe
    d6a8:	05ad      	lsls	r5, r5, #22
    d6aa:	42ac      	cmp	r4, r5
    d6ac:	d040      	beq.n	d730 <__ieee754_atan2f+0xa8>
    d6ae:	17a5      	asrs	r5, r4, #30
    d6b0:	46ac      	mov	ip, r5
    d6b2:	2502      	movs	r5, #2
    d6b4:	4667      	mov	r7, ip
    d6b6:	403d      	ands	r5, r7
    d6b8:	0fc7      	lsrs	r7, r0, #31
    d6ba:	433d      	orrs	r5, r7
    d6bc:	2a00      	cmp	r2, #0
    d6be:	d10c      	bne.n	d6da <__ieee754_atan2f+0x52>
    d6c0:	2d02      	cmp	r5, #2
    d6c2:	d031      	beq.n	d728 <__ieee754_atan2f+0xa0>
    d6c4:	2d03      	cmp	r5, #3
    d6c6:	d105      	bne.n	d6d4 <__ieee754_atan2f+0x4c>
    d6c8:	4830      	ldr	r0, [pc, #192]	; (d78c <__ieee754_atan2f+0x104>)
    d6ca:	e003      	b.n	d6d4 <__ieee754_atan2f+0x4c>
    d6cc:	1c01      	adds	r1, r0, #0
    d6ce:	1c20      	adds	r0, r4, #0
    d6d0:	f7f2 ff72 	bl	5b8 <__aeabi_fadd>
    d6d4:	bc04      	pop	{r2}
    d6d6:	4690      	mov	r8, r2
    d6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d6da:	2b00      	cmp	r3, #0
    d6dc:	d01d      	beq.n	d71a <__ieee754_atan2f+0x92>
    d6de:	428b      	cmp	r3, r1
    d6e0:	d029      	beq.n	d736 <__ieee754_atan2f+0xae>
    d6e2:	428a      	cmp	r2, r1
    d6e4:	d019      	beq.n	d71a <__ieee754_atan2f+0x92>
    d6e6:	1ad3      	subs	r3, r2, r3
    d6e8:	15db      	asrs	r3, r3, #23
    d6ea:	2b3c      	cmp	r3, #60	; 0x3c
    d6ec:	dc1a      	bgt.n	d724 <__ieee754_atan2f+0x9c>
    d6ee:	2c00      	cmp	r4, #0
    d6f0:	db3a      	blt.n	d768 <__ieee754_atan2f+0xe0>
    d6f2:	1c21      	adds	r1, r4, #0
    d6f4:	f7f3 f8f2 	bl	8dc <__aeabi_fdiv>
    d6f8:	f000 f9da 	bl	dab0 <fabsf>
    d6fc:	f000 f8bc 	bl	d878 <atanf>
    d700:	2d01      	cmp	r5, #1
    d702:	d02c      	beq.n	d75e <__ieee754_atan2f+0xd6>
    d704:	2d02      	cmp	r5, #2
    d706:	d022      	beq.n	d74e <__ieee754_atan2f+0xc6>
    d708:	2d00      	cmp	r5, #0
    d70a:	d0e3      	beq.n	d6d4 <__ieee754_atan2f+0x4c>
    d70c:	4920      	ldr	r1, [pc, #128]	; (d790 <__ieee754_atan2f+0x108>)
    d70e:	f7f2 ff53 	bl	5b8 <__aeabi_fadd>
    d712:	4920      	ldr	r1, [pc, #128]	; (d794 <__ieee754_atan2f+0x10c>)
    d714:	f7f3 fbf2 	bl	efc <__aeabi_fsub>
    d718:	e7dc      	b.n	d6d4 <__ieee754_atan2f+0x4c>
    d71a:	4643      	mov	r3, r8
    d71c:	2b00      	cmp	r3, #0
    d71e:	db05      	blt.n	d72c <__ieee754_atan2f+0xa4>
    d720:	481d      	ldr	r0, [pc, #116]	; (d798 <__ieee754_atan2f+0x110>)
    d722:	e7d7      	b.n	d6d4 <__ieee754_atan2f+0x4c>
    d724:	481c      	ldr	r0, [pc, #112]	; (d798 <__ieee754_atan2f+0x110>)
    d726:	e7eb      	b.n	d700 <__ieee754_atan2f+0x78>
    d728:	481a      	ldr	r0, [pc, #104]	; (d794 <__ieee754_atan2f+0x10c>)
    d72a:	e7d3      	b.n	d6d4 <__ieee754_atan2f+0x4c>
    d72c:	481b      	ldr	r0, [pc, #108]	; (d79c <__ieee754_atan2f+0x114>)
    d72e:	e7d1      	b.n	d6d4 <__ieee754_atan2f+0x4c>
    d730:	f000 f8a2 	bl	d878 <atanf>
    d734:	e7ce      	b.n	d6d4 <__ieee754_atan2f+0x4c>
    d736:	429a      	cmp	r2, r3
    d738:	d01a      	beq.n	d770 <__ieee754_atan2f+0xe8>
    d73a:	2d02      	cmp	r5, #2
    d73c:	d0f4      	beq.n	d728 <__ieee754_atan2f+0xa0>
    d73e:	2d03      	cmp	r5, #3
    d740:	d0c2      	beq.n	d6c8 <__ieee754_atan2f+0x40>
    d742:	2000      	movs	r0, #0
    d744:	2d01      	cmp	r5, #1
    d746:	d1c5      	bne.n	d6d4 <__ieee754_atan2f+0x4c>
    d748:	2080      	movs	r0, #128	; 0x80
    d74a:	0600      	lsls	r0, r0, #24
    d74c:	e7c2      	b.n	d6d4 <__ieee754_atan2f+0x4c>
    d74e:	4910      	ldr	r1, [pc, #64]	; (d790 <__ieee754_atan2f+0x108>)
    d750:	f7f2 ff32 	bl	5b8 <__aeabi_fadd>
    d754:	1c01      	adds	r1, r0, #0
    d756:	480f      	ldr	r0, [pc, #60]	; (d794 <__ieee754_atan2f+0x10c>)
    d758:	f7f3 fbd0 	bl	efc <__aeabi_fsub>
    d75c:	e7ba      	b.n	d6d4 <__ieee754_atan2f+0x4c>
    d75e:	2380      	movs	r3, #128	; 0x80
    d760:	061b      	lsls	r3, r3, #24
    d762:	469c      	mov	ip, r3
    d764:	4460      	add	r0, ip
    d766:	e7b5      	b.n	d6d4 <__ieee754_atan2f+0x4c>
    d768:	333c      	adds	r3, #60	; 0x3c
    d76a:	dac2      	bge.n	d6f2 <__ieee754_atan2f+0x6a>
    d76c:	2000      	movs	r0, #0
    d76e:	e7c7      	b.n	d700 <__ieee754_atan2f+0x78>
    d770:	2d02      	cmp	r5, #2
    d772:	d005      	beq.n	d780 <__ieee754_atan2f+0xf8>
    d774:	2d03      	cmp	r5, #3
    d776:	d007      	beq.n	d788 <__ieee754_atan2f+0x100>
    d778:	2d01      	cmp	r5, #1
    d77a:	d003      	beq.n	d784 <__ieee754_atan2f+0xfc>
    d77c:	4808      	ldr	r0, [pc, #32]	; (d7a0 <__ieee754_atan2f+0x118>)
    d77e:	e7a9      	b.n	d6d4 <__ieee754_atan2f+0x4c>
    d780:	4808      	ldr	r0, [pc, #32]	; (d7a4 <__ieee754_atan2f+0x11c>)
    d782:	e7a7      	b.n	d6d4 <__ieee754_atan2f+0x4c>
    d784:	4808      	ldr	r0, [pc, #32]	; (d7a8 <__ieee754_atan2f+0x120>)
    d786:	e7a5      	b.n	d6d4 <__ieee754_atan2f+0x4c>
    d788:	4808      	ldr	r0, [pc, #32]	; (d7ac <__ieee754_atan2f+0x124>)
    d78a:	e7a3      	b.n	d6d4 <__ieee754_atan2f+0x4c>
    d78c:	c0490fdb 	.word	0xc0490fdb
    d790:	33bbbd2e 	.word	0x33bbbd2e
    d794:	40490fdb 	.word	0x40490fdb
    d798:	3fc90fdb 	.word	0x3fc90fdb
    d79c:	bfc90fdb 	.word	0xbfc90fdb
    d7a0:	3f490fdb 	.word	0x3f490fdb
    d7a4:	4016cbe4 	.word	0x4016cbe4
    d7a8:	bf490fdb 	.word	0xbf490fdb
    d7ac:	c016cbe4 	.word	0xc016cbe4

0000d7b0 <__ieee754_sqrtf>:
    d7b0:	492b      	ldr	r1, [pc, #172]	; (d860 <__ieee754_sqrtf+0xb0>)
    d7b2:	0042      	lsls	r2, r0, #1
    d7b4:	b570      	push	{r4, r5, r6, lr}
    d7b6:	0003      	movs	r3, r0
    d7b8:	1c04      	adds	r4, r0, #0
    d7ba:	0852      	lsrs	r2, r2, #1
    d7bc:	428a      	cmp	r2, r1
    d7be:	d83a      	bhi.n	d836 <__ieee754_sqrtf+0x86>
    d7c0:	2a00      	cmp	r2, #0
    d7c2:	d037      	beq.n	d834 <__ieee754_sqrtf+0x84>
    d7c4:	2800      	cmp	r0, #0
    d7c6:	db3f      	blt.n	d848 <__ieee754_sqrtf+0x98>
    d7c8:	4926      	ldr	r1, [pc, #152]	; (d864 <__ieee754_sqrtf+0xb4>)
    d7ca:	15c6      	asrs	r6, r0, #23
    d7cc:	428a      	cmp	r2, r1
    d7ce:	d80b      	bhi.n	d7e8 <__ieee754_sqrtf+0x38>
    d7d0:	2080      	movs	r0, #128	; 0x80
    d7d2:	0400      	lsls	r0, r0, #16
    d7d4:	4220      	tst	r0, r4
    d7d6:	d13e      	bne.n	d856 <__ieee754_sqrtf+0xa6>
    d7d8:	2200      	movs	r2, #0
    d7da:	e000      	b.n	d7de <__ieee754_sqrtf+0x2e>
    d7dc:	000a      	movs	r2, r1
    d7de:	005b      	lsls	r3, r3, #1
    d7e0:	1c51      	adds	r1, r2, #1
    d7e2:	4203      	tst	r3, r0
    d7e4:	d0fa      	beq.n	d7dc <__ieee754_sqrtf+0x2c>
    d7e6:	1ab6      	subs	r6, r6, r2
    d7e8:	025b      	lsls	r3, r3, #9
    d7ea:	0a5a      	lsrs	r2, r3, #9
    d7ec:	2380      	movs	r3, #128	; 0x80
    d7ee:	3e7f      	subs	r6, #127	; 0x7f
    d7f0:	041b      	lsls	r3, r3, #16
    d7f2:	4313      	orrs	r3, r2
    d7f4:	07f2      	lsls	r2, r6, #31
    d7f6:	d425      	bmi.n	d844 <__ieee754_sqrtf+0x94>
    d7f8:	2280      	movs	r2, #128	; 0x80
    d7fa:	1070      	asrs	r0, r6, #1
    d7fc:	2119      	movs	r1, #25
    d7fe:	2600      	movs	r6, #0
    d800:	2500      	movs	r5, #0
    d802:	005b      	lsls	r3, r3, #1
    d804:	0452      	lsls	r2, r2, #17
    d806:	18ac      	adds	r4, r5, r2
    d808:	429c      	cmp	r4, r3
    d80a:	dc02      	bgt.n	d812 <__ieee754_sqrtf+0x62>
    d80c:	18a5      	adds	r5, r4, r2
    d80e:	1b1b      	subs	r3, r3, r4
    d810:	18b6      	adds	r6, r6, r2
    d812:	3901      	subs	r1, #1
    d814:	005b      	lsls	r3, r3, #1
    d816:	0852      	lsrs	r2, r2, #1
    d818:	2900      	cmp	r1, #0
    d81a:	d1f4      	bne.n	d806 <__ieee754_sqrtf+0x56>
    d81c:	2b00      	cmp	r3, #0
    d81e:	d002      	beq.n	d826 <__ieee754_sqrtf+0x76>
    d820:	2301      	movs	r3, #1
    d822:	3601      	adds	r6, #1
    d824:	439e      	bics	r6, r3
    d826:	23fc      	movs	r3, #252	; 0xfc
    d828:	059b      	lsls	r3, r3, #22
    d82a:	469c      	mov	ip, r3
    d82c:	1076      	asrs	r6, r6, #1
    d82e:	4466      	add	r6, ip
    d830:	05c0      	lsls	r0, r0, #23
    d832:	1980      	adds	r0, r0, r6
    d834:	bd70      	pop	{r4, r5, r6, pc}
    d836:	1c01      	adds	r1, r0, #0
    d838:	f7f3 fa40 	bl	cbc <__aeabi_fmul>
    d83c:	1c21      	adds	r1, r4, #0
    d83e:	f7f2 febb 	bl	5b8 <__aeabi_fadd>
    d842:	e7f7      	b.n	d834 <__ieee754_sqrtf+0x84>
    d844:	005b      	lsls	r3, r3, #1
    d846:	e7d7      	b.n	d7f8 <__ieee754_sqrtf+0x48>
    d848:	1c01      	adds	r1, r0, #0
    d84a:	f7f3 fb57 	bl	efc <__aeabi_fsub>
    d84e:	1c01      	adds	r1, r0, #0
    d850:	f7f3 f844 	bl	8dc <__aeabi_fdiv>
    d854:	e7ee      	b.n	d834 <__ieee754_sqrtf+0x84>
    d856:	2201      	movs	r2, #1
    d858:	4252      	negs	r2, r2
    d85a:	1ab6      	subs	r6, r6, r2
    d85c:	e7c4      	b.n	d7e8 <__ieee754_sqrtf+0x38>
    d85e:	46c0      	nop			; (mov r8, r8)
    d860:	7f7fffff 	.word	0x7f7fffff
    d864:	007fffff 	.word	0x007fffff

0000d868 <matherr>:
    d868:	2000      	movs	r0, #0
    d86a:	4770      	bx	lr

0000d86c <nan>:
    d86c:	2000      	movs	r0, #0
    d86e:	4901      	ldr	r1, [pc, #4]	; (d874 <nan+0x8>)
    d870:	4770      	bx	lr
    d872:	46c0      	nop			; (mov r8, r8)
    d874:	7ff80000 	.word	0x7ff80000

0000d878 <atanf>:
    d878:	b5f0      	push	{r4, r5, r6, r7, lr}
    d87a:	46c6      	mov	lr, r8
    d87c:	4b75      	ldr	r3, [pc, #468]	; (da54 <atanf+0x1dc>)
    d87e:	0044      	lsls	r4, r0, #1
    d880:	b500      	push	{lr}
    d882:	1c05      	adds	r5, r0, #0
    d884:	0007      	movs	r7, r0
    d886:	0864      	lsrs	r4, r4, #1
    d888:	429c      	cmp	r4, r3
    d88a:	dd0b      	ble.n	d8a4 <atanf+0x2c>
    d88c:	23ff      	movs	r3, #255	; 0xff
    d88e:	05db      	lsls	r3, r3, #23
    d890:	429c      	cmp	r4, r3
    d892:	dd00      	ble.n	d896 <atanf+0x1e>
    d894:	e072      	b.n	d97c <atanf+0x104>
    d896:	2800      	cmp	r0, #0
    d898:	dc00      	bgt.n	d89c <atanf+0x24>
    d89a:	e09d      	b.n	d9d8 <atanf+0x160>
    d89c:	486e      	ldr	r0, [pc, #440]	; (da58 <atanf+0x1e0>)
    d89e:	bc04      	pop	{r2}
    d8a0:	4690      	mov	r8, r2
    d8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8a4:	4b6d      	ldr	r3, [pc, #436]	; (da5c <atanf+0x1e4>)
    d8a6:	429c      	cmp	r4, r3
    d8a8:	dc79      	bgt.n	d99e <atanf+0x126>
    d8aa:	4b6d      	ldr	r3, [pc, #436]	; (da60 <atanf+0x1e8>)
    d8ac:	429c      	cmp	r4, r3
    d8ae:	dd69      	ble.n	d984 <atanf+0x10c>
    d8b0:	2601      	movs	r6, #1
    d8b2:	4276      	negs	r6, r6
    d8b4:	1c29      	adds	r1, r5, #0
    d8b6:	1c28      	adds	r0, r5, #0
    d8b8:	f7f3 fa00 	bl	cbc <__aeabi_fmul>
    d8bc:	1c01      	adds	r1, r0, #0
    d8be:	4680      	mov	r8, r0
    d8c0:	f7f3 f9fc 	bl	cbc <__aeabi_fmul>
    d8c4:	4967      	ldr	r1, [pc, #412]	; (da64 <atanf+0x1ec>)
    d8c6:	1c04      	adds	r4, r0, #0
    d8c8:	f7f3 f9f8 	bl	cbc <__aeabi_fmul>
    d8cc:	4966      	ldr	r1, [pc, #408]	; (da68 <atanf+0x1f0>)
    d8ce:	f7f2 fe73 	bl	5b8 <__aeabi_fadd>
    d8d2:	1c21      	adds	r1, r4, #0
    d8d4:	f7f3 f9f2 	bl	cbc <__aeabi_fmul>
    d8d8:	4964      	ldr	r1, [pc, #400]	; (da6c <atanf+0x1f4>)
    d8da:	f7f2 fe6d 	bl	5b8 <__aeabi_fadd>
    d8de:	1c21      	adds	r1, r4, #0
    d8e0:	f7f3 f9ec 	bl	cbc <__aeabi_fmul>
    d8e4:	4962      	ldr	r1, [pc, #392]	; (da70 <atanf+0x1f8>)
    d8e6:	f7f2 fe67 	bl	5b8 <__aeabi_fadd>
    d8ea:	1c21      	adds	r1, r4, #0
    d8ec:	f7f3 f9e6 	bl	cbc <__aeabi_fmul>
    d8f0:	4960      	ldr	r1, [pc, #384]	; (da74 <atanf+0x1fc>)
    d8f2:	f7f2 fe61 	bl	5b8 <__aeabi_fadd>
    d8f6:	1c21      	adds	r1, r4, #0
    d8f8:	f7f3 f9e0 	bl	cbc <__aeabi_fmul>
    d8fc:	495e      	ldr	r1, [pc, #376]	; (da78 <atanf+0x200>)
    d8fe:	f7f2 fe5b 	bl	5b8 <__aeabi_fadd>
    d902:	4641      	mov	r1, r8
    d904:	f7f3 f9da 	bl	cbc <__aeabi_fmul>
    d908:	495c      	ldr	r1, [pc, #368]	; (da7c <atanf+0x204>)
    d90a:	4680      	mov	r8, r0
    d90c:	1c20      	adds	r0, r4, #0
    d90e:	f7f3 f9d5 	bl	cbc <__aeabi_fmul>
    d912:	495b      	ldr	r1, [pc, #364]	; (da80 <atanf+0x208>)
    d914:	f7f3 faf2 	bl	efc <__aeabi_fsub>
    d918:	1c21      	adds	r1, r4, #0
    d91a:	f7f3 f9cf 	bl	cbc <__aeabi_fmul>
    d91e:	4959      	ldr	r1, [pc, #356]	; (da84 <atanf+0x20c>)
    d920:	f7f3 faec 	bl	efc <__aeabi_fsub>
    d924:	1c21      	adds	r1, r4, #0
    d926:	f7f3 f9c9 	bl	cbc <__aeabi_fmul>
    d92a:	4957      	ldr	r1, [pc, #348]	; (da88 <atanf+0x210>)
    d92c:	f7f3 fae6 	bl	efc <__aeabi_fsub>
    d930:	1c21      	adds	r1, r4, #0
    d932:	f7f3 f9c3 	bl	cbc <__aeabi_fmul>
    d936:	4955      	ldr	r1, [pc, #340]	; (da8c <atanf+0x214>)
    d938:	f7f3 fae0 	bl	efc <__aeabi_fsub>
    d93c:	1c21      	adds	r1, r4, #0
    d93e:	f7f3 f9bd 	bl	cbc <__aeabi_fmul>
    d942:	1c01      	adds	r1, r0, #0
    d944:	1c73      	adds	r3, r6, #1
    d946:	d049      	beq.n	d9dc <atanf+0x164>
    d948:	4640      	mov	r0, r8
    d94a:	f7f2 fe35 	bl	5b8 <__aeabi_fadd>
    d94e:	1c29      	adds	r1, r5, #0
    d950:	f7f3 f9b4 	bl	cbc <__aeabi_fmul>
    d954:	4b4e      	ldr	r3, [pc, #312]	; (da90 <atanf+0x218>)
    d956:	00b6      	lsls	r6, r6, #2
    d958:	58f1      	ldr	r1, [r6, r3]
    d95a:	f7f3 facf 	bl	efc <__aeabi_fsub>
    d95e:	1c29      	adds	r1, r5, #0
    d960:	f7f3 facc 	bl	efc <__aeabi_fsub>
    d964:	4b4b      	ldr	r3, [pc, #300]	; (da94 <atanf+0x21c>)
    d966:	1c01      	adds	r1, r0, #0
    d968:	58f0      	ldr	r0, [r6, r3]
    d96a:	f7f3 fac7 	bl	efc <__aeabi_fsub>
    d96e:	2f00      	cmp	r7, #0
    d970:	da95      	bge.n	d89e <atanf+0x26>
    d972:	2380      	movs	r3, #128	; 0x80
    d974:	061b      	lsls	r3, r3, #24
    d976:	469c      	mov	ip, r3
    d978:	4460      	add	r0, ip
    d97a:	e790      	b.n	d89e <atanf+0x26>
    d97c:	1c01      	adds	r1, r0, #0
    d97e:	f7f2 fe1b 	bl	5b8 <__aeabi_fadd>
    d982:	e78c      	b.n	d89e <atanf+0x26>
    d984:	4944      	ldr	r1, [pc, #272]	; (da98 <atanf+0x220>)
    d986:	f7f2 fe17 	bl	5b8 <__aeabi_fadd>
    d98a:	21fe      	movs	r1, #254	; 0xfe
    d98c:	0589      	lsls	r1, r1, #22
    d98e:	f7f2 fdbd 	bl	50c <__aeabi_fcmpgt>
    d992:	0003      	movs	r3, r0
    d994:	1c28      	adds	r0, r5, #0
    d996:	2b00      	cmp	r3, #0
    d998:	d000      	beq.n	d99c <atanf+0x124>
    d99a:	e780      	b.n	d89e <atanf+0x26>
    d99c:	e788      	b.n	d8b0 <atanf+0x38>
    d99e:	f000 f887 	bl	dab0 <fabsf>
    d9a2:	4b3e      	ldr	r3, [pc, #248]	; (da9c <atanf+0x224>)
    d9a4:	1c05      	adds	r5, r0, #0
    d9a6:	429c      	cmp	r4, r3
    d9a8:	dc23      	bgt.n	d9f2 <atanf+0x17a>
    d9aa:	4b3d      	ldr	r3, [pc, #244]	; (daa0 <atanf+0x228>)
    d9ac:	429c      	cmp	r4, r3
    d9ae:	dc3f      	bgt.n	da30 <atanf+0x1b8>
    d9b0:	1c01      	adds	r1, r0, #0
    d9b2:	f7f2 fe01 	bl	5b8 <__aeabi_fadd>
    d9b6:	21fe      	movs	r1, #254	; 0xfe
    d9b8:	0589      	lsls	r1, r1, #22
    d9ba:	f7f3 fa9f 	bl	efc <__aeabi_fsub>
    d9be:	2180      	movs	r1, #128	; 0x80
    d9c0:	1c04      	adds	r4, r0, #0
    d9c2:	05c9      	lsls	r1, r1, #23
    d9c4:	1c28      	adds	r0, r5, #0
    d9c6:	f7f2 fdf7 	bl	5b8 <__aeabi_fadd>
    d9ca:	1c01      	adds	r1, r0, #0
    d9cc:	1c20      	adds	r0, r4, #0
    d9ce:	f7f2 ff85 	bl	8dc <__aeabi_fdiv>
    d9d2:	2600      	movs	r6, #0
    d9d4:	1c05      	adds	r5, r0, #0
    d9d6:	e76d      	b.n	d8b4 <atanf+0x3c>
    d9d8:	4832      	ldr	r0, [pc, #200]	; (daa4 <atanf+0x22c>)
    d9da:	e760      	b.n	d89e <atanf+0x26>
    d9dc:	4640      	mov	r0, r8
    d9de:	f7f2 fdeb 	bl	5b8 <__aeabi_fadd>
    d9e2:	1c29      	adds	r1, r5, #0
    d9e4:	f7f3 f96a 	bl	cbc <__aeabi_fmul>
    d9e8:	1c01      	adds	r1, r0, #0
    d9ea:	1c28      	adds	r0, r5, #0
    d9ec:	f7f3 fa86 	bl	efc <__aeabi_fsub>
    d9f0:	e755      	b.n	d89e <atanf+0x26>
    d9f2:	4b2d      	ldr	r3, [pc, #180]	; (daa8 <atanf+0x230>)
    d9f4:	429c      	cmp	r4, r3
    d9f6:	dc14      	bgt.n	da22 <atanf+0x1aa>
    d9f8:	21ff      	movs	r1, #255	; 0xff
    d9fa:	0589      	lsls	r1, r1, #22
    d9fc:	f7f3 fa7e 	bl	efc <__aeabi_fsub>
    da00:	21ff      	movs	r1, #255	; 0xff
    da02:	1c04      	adds	r4, r0, #0
    da04:	0589      	lsls	r1, r1, #22
    da06:	1c28      	adds	r0, r5, #0
    da08:	f7f3 f958 	bl	cbc <__aeabi_fmul>
    da0c:	21fe      	movs	r1, #254	; 0xfe
    da0e:	0589      	lsls	r1, r1, #22
    da10:	f7f2 fdd2 	bl	5b8 <__aeabi_fadd>
    da14:	1c01      	adds	r1, r0, #0
    da16:	1c20      	adds	r0, r4, #0
    da18:	f7f2 ff60 	bl	8dc <__aeabi_fdiv>
    da1c:	2602      	movs	r6, #2
    da1e:	1c05      	adds	r5, r0, #0
    da20:	e748      	b.n	d8b4 <atanf+0x3c>
    da22:	1c01      	adds	r1, r0, #0
    da24:	4821      	ldr	r0, [pc, #132]	; (daac <atanf+0x234>)
    da26:	f7f2 ff59 	bl	8dc <__aeabi_fdiv>
    da2a:	2603      	movs	r6, #3
    da2c:	1c05      	adds	r5, r0, #0
    da2e:	e741      	b.n	d8b4 <atanf+0x3c>
    da30:	21fe      	movs	r1, #254	; 0xfe
    da32:	0589      	lsls	r1, r1, #22
    da34:	f7f3 fa62 	bl	efc <__aeabi_fsub>
    da38:	21fe      	movs	r1, #254	; 0xfe
    da3a:	1c04      	adds	r4, r0, #0
    da3c:	0589      	lsls	r1, r1, #22
    da3e:	1c28      	adds	r0, r5, #0
    da40:	f7f2 fdba 	bl	5b8 <__aeabi_fadd>
    da44:	1c01      	adds	r1, r0, #0
    da46:	1c20      	adds	r0, r4, #0
    da48:	f7f2 ff48 	bl	8dc <__aeabi_fdiv>
    da4c:	2601      	movs	r6, #1
    da4e:	1c05      	adds	r5, r0, #0
    da50:	e730      	b.n	d8b4 <atanf+0x3c>
    da52:	46c0      	nop			; (mov r8, r8)
    da54:	507fffff 	.word	0x507fffff
    da58:	3fc90fdb 	.word	0x3fc90fdb
    da5c:	3edfffff 	.word	0x3edfffff
    da60:	30ffffff 	.word	0x30ffffff
    da64:	3c8569d7 	.word	0x3c8569d7
    da68:	3d4bda59 	.word	0x3d4bda59
    da6c:	3d886b35 	.word	0x3d886b35
    da70:	3dba2e6e 	.word	0x3dba2e6e
    da74:	3e124925 	.word	0x3e124925
    da78:	3eaaaaab 	.word	0x3eaaaaab
    da7c:	bd15a221 	.word	0xbd15a221
    da80:	3d6ef16b 	.word	0x3d6ef16b
    da84:	3d9d8795 	.word	0x3d9d8795
    da88:	3de38e38 	.word	0x3de38e38
    da8c:	3e4ccccd 	.word	0x3e4ccccd
    da90:	0000fa94 	.word	0x0000fa94
    da94:	0000fa84 	.word	0x0000fa84
    da98:	7149f2ca 	.word	0x7149f2ca
    da9c:	3f97ffff 	.word	0x3f97ffff
    daa0:	3f2fffff 	.word	0x3f2fffff
    daa4:	bfc90fdb 	.word	0xbfc90fdb
    daa8:	401bffff 	.word	0x401bffff
    daac:	bf800000 	.word	0xbf800000

0000dab0 <fabsf>:
    dab0:	0040      	lsls	r0, r0, #1
    dab2:	0840      	lsrs	r0, r0, #1
    dab4:	4770      	bx	lr
    dab6:	46c0      	nop			; (mov r8, r8)

0000dab8 <abort>:
    dab8:	b510      	push	{r4, lr}
    daba:	2006      	movs	r0, #6
    dabc:	f000 f85a 	bl	db74 <raise>
    dac0:	2001      	movs	r0, #1
    dac2:	f7f6 fdfd 	bl	46c0 <_exit>

0000dac6 <atol>:
    dac6:	b510      	push	{r4, lr}
    dac8:	220a      	movs	r2, #10
    daca:	2100      	movs	r1, #0
    dacc:	f000 f926 	bl	dd1c <strtol>
    dad0:	bd10      	pop	{r4, pc}
	...

0000dad4 <__errno>:
    dad4:	4b01      	ldr	r3, [pc, #4]	; (dadc <__errno+0x8>)
    dad6:	6818      	ldr	r0, [r3, #0]
    dad8:	4770      	bx	lr
    dada:	46c0      	nop			; (mov r8, r8)
    dadc:	2000089c 	.word	0x2000089c

0000dae0 <memcmp>:
    dae0:	b530      	push	{r4, r5, lr}
    dae2:	2400      	movs	r4, #0
    dae4:	42a2      	cmp	r2, r4
    dae6:	d101      	bne.n	daec <memcmp+0xc>
    dae8:	2000      	movs	r0, #0
    daea:	e005      	b.n	daf8 <memcmp+0x18>
    daec:	5d03      	ldrb	r3, [r0, r4]
    daee:	1c65      	adds	r5, r4, #1
    daf0:	5d0c      	ldrb	r4, [r1, r4]
    daf2:	42a3      	cmp	r3, r4
    daf4:	d001      	beq.n	dafa <memcmp+0x1a>
    daf6:	1b18      	subs	r0, r3, r4
    daf8:	bd30      	pop	{r4, r5, pc}
    dafa:	002c      	movs	r4, r5
    dafc:	e7f2      	b.n	dae4 <memcmp+0x4>

0000dafe <memcpy>:
    dafe:	2300      	movs	r3, #0
    db00:	b510      	push	{r4, lr}
    db02:	429a      	cmp	r2, r3
    db04:	d100      	bne.n	db08 <memcpy+0xa>
    db06:	bd10      	pop	{r4, pc}
    db08:	5ccc      	ldrb	r4, [r1, r3]
    db0a:	54c4      	strb	r4, [r0, r3]
    db0c:	3301      	adds	r3, #1
    db0e:	e7f8      	b.n	db02 <memcpy+0x4>

0000db10 <memset>:
    db10:	0003      	movs	r3, r0
    db12:	1882      	adds	r2, r0, r2
    db14:	4293      	cmp	r3, r2
    db16:	d100      	bne.n	db1a <memset+0xa>
    db18:	4770      	bx	lr
    db1a:	7019      	strb	r1, [r3, #0]
    db1c:	3301      	adds	r3, #1
    db1e:	e7f9      	b.n	db14 <memset+0x4>

0000db20 <_raise_r>:
    db20:	b570      	push	{r4, r5, r6, lr}
    db22:	0004      	movs	r4, r0
    db24:	000d      	movs	r5, r1
    db26:	291f      	cmp	r1, #31
    db28:	d904      	bls.n	db34 <_raise_r+0x14>
    db2a:	2316      	movs	r3, #22
    db2c:	6003      	str	r3, [r0, #0]
    db2e:	2001      	movs	r0, #1
    db30:	4240      	negs	r0, r0
    db32:	bd70      	pop	{r4, r5, r6, pc}
    db34:	6c43      	ldr	r3, [r0, #68]	; 0x44
    db36:	2b00      	cmp	r3, #0
    db38:	d004      	beq.n	db44 <_raise_r+0x24>
    db3a:	008a      	lsls	r2, r1, #2
    db3c:	189b      	adds	r3, r3, r2
    db3e:	681a      	ldr	r2, [r3, #0]
    db40:	2a00      	cmp	r2, #0
    db42:	d108      	bne.n	db56 <_raise_r+0x36>
    db44:	0020      	movs	r0, r4
    db46:	f000 f831 	bl	dbac <_getpid_r>
    db4a:	002a      	movs	r2, r5
    db4c:	0001      	movs	r1, r0
    db4e:	0020      	movs	r0, r4
    db50:	f000 f81a 	bl	db88 <_kill_r>
    db54:	e7ed      	b.n	db32 <_raise_r+0x12>
    db56:	2000      	movs	r0, #0
    db58:	2a01      	cmp	r2, #1
    db5a:	d0ea      	beq.n	db32 <_raise_r+0x12>
    db5c:	1c51      	adds	r1, r2, #1
    db5e:	d103      	bne.n	db68 <_raise_r+0x48>
    db60:	2316      	movs	r3, #22
    db62:	3001      	adds	r0, #1
    db64:	6023      	str	r3, [r4, #0]
    db66:	e7e4      	b.n	db32 <_raise_r+0x12>
    db68:	2400      	movs	r4, #0
    db6a:	0028      	movs	r0, r5
    db6c:	601c      	str	r4, [r3, #0]
    db6e:	4790      	blx	r2
    db70:	0020      	movs	r0, r4
    db72:	e7de      	b.n	db32 <_raise_r+0x12>

0000db74 <raise>:
    db74:	b510      	push	{r4, lr}
    db76:	4b03      	ldr	r3, [pc, #12]	; (db84 <raise+0x10>)
    db78:	0001      	movs	r1, r0
    db7a:	6818      	ldr	r0, [r3, #0]
    db7c:	f7ff ffd0 	bl	db20 <_raise_r>
    db80:	bd10      	pop	{r4, pc}
    db82:	46c0      	nop			; (mov r8, r8)
    db84:	2000089c 	.word	0x2000089c

0000db88 <_kill_r>:
    db88:	2300      	movs	r3, #0
    db8a:	b570      	push	{r4, r5, r6, lr}
    db8c:	4c06      	ldr	r4, [pc, #24]	; (dba8 <_kill_r+0x20>)
    db8e:	0005      	movs	r5, r0
    db90:	0008      	movs	r0, r1
    db92:	0011      	movs	r1, r2
    db94:	6023      	str	r3, [r4, #0]
    db96:	f7f6 fd9b 	bl	46d0 <_kill>
    db9a:	1c43      	adds	r3, r0, #1
    db9c:	d103      	bne.n	dba6 <_kill_r+0x1e>
    db9e:	6823      	ldr	r3, [r4, #0]
    dba0:	2b00      	cmp	r3, #0
    dba2:	d000      	beq.n	dba6 <_kill_r+0x1e>
    dba4:	602b      	str	r3, [r5, #0]
    dba6:	bd70      	pop	{r4, r5, r6, pc}
    dba8:	20006464 	.word	0x20006464

0000dbac <_getpid_r>:
    dbac:	b510      	push	{r4, lr}
    dbae:	f7f6 fd97 	bl	46e0 <_getpid>
    dbb2:	bd10      	pop	{r4, pc}

0000dbb4 <strcpy>:
    dbb4:	1c03      	adds	r3, r0, #0
    dbb6:	780a      	ldrb	r2, [r1, #0]
    dbb8:	3101      	adds	r1, #1
    dbba:	701a      	strb	r2, [r3, #0]
    dbbc:	3301      	adds	r3, #1
    dbbe:	2a00      	cmp	r2, #0
    dbc0:	d1f9      	bne.n	dbb6 <strcpy+0x2>
    dbc2:	4770      	bx	lr

0000dbc4 <strncmp>:
    dbc4:	2300      	movs	r3, #0
    dbc6:	b530      	push	{r4, r5, lr}
    dbc8:	429a      	cmp	r2, r3
    dbca:	d00a      	beq.n	dbe2 <strncmp+0x1e>
    dbcc:	3a01      	subs	r2, #1
    dbce:	5cc4      	ldrb	r4, [r0, r3]
    dbd0:	5ccd      	ldrb	r5, [r1, r3]
    dbd2:	42ac      	cmp	r4, r5
    dbd4:	d104      	bne.n	dbe0 <strncmp+0x1c>
    dbd6:	429a      	cmp	r2, r3
    dbd8:	d002      	beq.n	dbe0 <strncmp+0x1c>
    dbda:	3301      	adds	r3, #1
    dbdc:	2c00      	cmp	r4, #0
    dbde:	d1f6      	bne.n	dbce <strncmp+0xa>
    dbe0:	1b63      	subs	r3, r4, r5
    dbe2:	0018      	movs	r0, r3
    dbe4:	bd30      	pop	{r4, r5, pc}

0000dbe6 <strncpy>:
    dbe6:	b570      	push	{r4, r5, r6, lr}
    dbe8:	0004      	movs	r4, r0
    dbea:	2a00      	cmp	r2, #0
    dbec:	d100      	bne.n	dbf0 <strncpy+0xa>
    dbee:	bd70      	pop	{r4, r5, r6, pc}
    dbf0:	780d      	ldrb	r5, [r1, #0]
    dbf2:	1e56      	subs	r6, r2, #1
    dbf4:	1c63      	adds	r3, r4, #1
    dbf6:	7025      	strb	r5, [r4, #0]
    dbf8:	3101      	adds	r1, #1
    dbfa:	2d00      	cmp	r5, #0
    dbfc:	d105      	bne.n	dc0a <strncpy+0x24>
    dbfe:	18a4      	adds	r4, r4, r2
    dc00:	429c      	cmp	r4, r3
    dc02:	d0f4      	beq.n	dbee <strncpy+0x8>
    dc04:	701d      	strb	r5, [r3, #0]
    dc06:	3301      	adds	r3, #1
    dc08:	e7fa      	b.n	dc00 <strncpy+0x1a>
    dc0a:	001c      	movs	r4, r3
    dc0c:	0032      	movs	r2, r6
    dc0e:	e7ec      	b.n	dbea <strncpy+0x4>

0000dc10 <_strtol_l.isra.0>:
    dc10:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc12:	001f      	movs	r7, r3
    dc14:	000e      	movs	r6, r1
    dc16:	b087      	sub	sp, #28
    dc18:	9005      	str	r0, [sp, #20]
    dc1a:	9103      	str	r1, [sp, #12]
    dc1c:	9202      	str	r2, [sp, #8]
    dc1e:	980c      	ldr	r0, [sp, #48]	; 0x30
    dc20:	7834      	ldrb	r4, [r6, #0]
    dc22:	f000 f88f 	bl	dd44 <__locale_ctype_ptr_l>
    dc26:	2208      	movs	r2, #8
    dc28:	1900      	adds	r0, r0, r4
    dc2a:	7843      	ldrb	r3, [r0, #1]
    dc2c:	1c75      	adds	r5, r6, #1
    dc2e:	4013      	ands	r3, r2
    dc30:	d10c      	bne.n	dc4c <_strtol_l.isra.0+0x3c>
    dc32:	2c2d      	cmp	r4, #45	; 0x2d
    dc34:	d10c      	bne.n	dc50 <_strtol_l.isra.0+0x40>
    dc36:	3301      	adds	r3, #1
    dc38:	782c      	ldrb	r4, [r5, #0]
    dc3a:	9301      	str	r3, [sp, #4]
    dc3c:	1cb5      	adds	r5, r6, #2
    dc3e:	2f00      	cmp	r7, #0
    dc40:	d00c      	beq.n	dc5c <_strtol_l.isra.0+0x4c>
    dc42:	2f10      	cmp	r7, #16
    dc44:	d114      	bne.n	dc70 <_strtol_l.isra.0+0x60>
    dc46:	2c30      	cmp	r4, #48	; 0x30
    dc48:	d00a      	beq.n	dc60 <_strtol_l.isra.0+0x50>
    dc4a:	e011      	b.n	dc70 <_strtol_l.isra.0+0x60>
    dc4c:	002e      	movs	r6, r5
    dc4e:	e7e6      	b.n	dc1e <_strtol_l.isra.0+0xe>
    dc50:	9301      	str	r3, [sp, #4]
    dc52:	2c2b      	cmp	r4, #43	; 0x2b
    dc54:	d1f3      	bne.n	dc3e <_strtol_l.isra.0+0x2e>
    dc56:	782c      	ldrb	r4, [r5, #0]
    dc58:	1cb5      	adds	r5, r6, #2
    dc5a:	e7f0      	b.n	dc3e <_strtol_l.isra.0+0x2e>
    dc5c:	2c30      	cmp	r4, #48	; 0x30
    dc5e:	d12f      	bne.n	dcc0 <_strtol_l.isra.0+0xb0>
    dc60:	2220      	movs	r2, #32
    dc62:	782b      	ldrb	r3, [r5, #0]
    dc64:	4393      	bics	r3, r2
    dc66:	2b58      	cmp	r3, #88	; 0x58
    dc68:	d151      	bne.n	dd0e <_strtol_l.isra.0+0xfe>
    dc6a:	2710      	movs	r7, #16
    dc6c:	786c      	ldrb	r4, [r5, #1]
    dc6e:	3502      	adds	r5, #2
    dc70:	9b01      	ldr	r3, [sp, #4]
    dc72:	4a29      	ldr	r2, [pc, #164]	; (dd18 <_strtol_l.isra.0+0x108>)
    dc74:	0039      	movs	r1, r7
    dc76:	189e      	adds	r6, r3, r2
    dc78:	0030      	movs	r0, r6
    dc7a:	f7f2 fb31 	bl	2e0 <__aeabi_uidivmod>
    dc7e:	0030      	movs	r0, r6
    dc80:	9104      	str	r1, [sp, #16]
    dc82:	0039      	movs	r1, r7
    dc84:	f7f2 faa6 	bl	1d4 <__udivsi3>
    dc88:	2101      	movs	r1, #1
    dc8a:	2300      	movs	r3, #0
    dc8c:	4249      	negs	r1, r1
    dc8e:	0002      	movs	r2, r0
    dc90:	468c      	mov	ip, r1
    dc92:	0018      	movs	r0, r3
    dc94:	0021      	movs	r1, r4
    dc96:	3930      	subs	r1, #48	; 0x30
    dc98:	2909      	cmp	r1, #9
    dc9a:	d813      	bhi.n	dcc4 <_strtol_l.isra.0+0xb4>
    dc9c:	000c      	movs	r4, r1
    dc9e:	42a7      	cmp	r7, r4
    dca0:	dd1c      	ble.n	dcdc <_strtol_l.isra.0+0xcc>
    dca2:	1c59      	adds	r1, r3, #1
    dca4:	d009      	beq.n	dcba <_strtol_l.isra.0+0xaa>
    dca6:	4663      	mov	r3, ip
    dca8:	4282      	cmp	r2, r0
    dcaa:	d306      	bcc.n	dcba <_strtol_l.isra.0+0xaa>
    dcac:	d102      	bne.n	dcb4 <_strtol_l.isra.0+0xa4>
    dcae:	9904      	ldr	r1, [sp, #16]
    dcb0:	42a1      	cmp	r1, r4
    dcb2:	db02      	blt.n	dcba <_strtol_l.isra.0+0xaa>
    dcb4:	2301      	movs	r3, #1
    dcb6:	4378      	muls	r0, r7
    dcb8:	1820      	adds	r0, r4, r0
    dcba:	782c      	ldrb	r4, [r5, #0]
    dcbc:	3501      	adds	r5, #1
    dcbe:	e7e9      	b.n	dc94 <_strtol_l.isra.0+0x84>
    dcc0:	270a      	movs	r7, #10
    dcc2:	e7d5      	b.n	dc70 <_strtol_l.isra.0+0x60>
    dcc4:	0021      	movs	r1, r4
    dcc6:	3941      	subs	r1, #65	; 0x41
    dcc8:	2919      	cmp	r1, #25
    dcca:	d801      	bhi.n	dcd0 <_strtol_l.isra.0+0xc0>
    dccc:	3c37      	subs	r4, #55	; 0x37
    dcce:	e7e6      	b.n	dc9e <_strtol_l.isra.0+0x8e>
    dcd0:	0021      	movs	r1, r4
    dcd2:	3961      	subs	r1, #97	; 0x61
    dcd4:	2919      	cmp	r1, #25
    dcd6:	d801      	bhi.n	dcdc <_strtol_l.isra.0+0xcc>
    dcd8:	3c57      	subs	r4, #87	; 0x57
    dcda:	e7e0      	b.n	dc9e <_strtol_l.isra.0+0x8e>
    dcdc:	1c5a      	adds	r2, r3, #1
    dcde:	d108      	bne.n	dcf2 <_strtol_l.isra.0+0xe2>
    dce0:	9a05      	ldr	r2, [sp, #20]
    dce2:	3323      	adds	r3, #35	; 0x23
    dce4:	6013      	str	r3, [r2, #0]
    dce6:	9b02      	ldr	r3, [sp, #8]
    dce8:	0030      	movs	r0, r6
    dcea:	2b00      	cmp	r3, #0
    dcec:	d10b      	bne.n	dd06 <_strtol_l.isra.0+0xf6>
    dcee:	b007      	add	sp, #28
    dcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dcf2:	9a01      	ldr	r2, [sp, #4]
    dcf4:	2a00      	cmp	r2, #0
    dcf6:	d000      	beq.n	dcfa <_strtol_l.isra.0+0xea>
    dcf8:	4240      	negs	r0, r0
    dcfa:	9a02      	ldr	r2, [sp, #8]
    dcfc:	2a00      	cmp	r2, #0
    dcfe:	d0f6      	beq.n	dcee <_strtol_l.isra.0+0xde>
    dd00:	9a03      	ldr	r2, [sp, #12]
    dd02:	2b00      	cmp	r3, #0
    dd04:	d000      	beq.n	dd08 <_strtol_l.isra.0+0xf8>
    dd06:	1e6a      	subs	r2, r5, #1
    dd08:	9b02      	ldr	r3, [sp, #8]
    dd0a:	601a      	str	r2, [r3, #0]
    dd0c:	e7ef      	b.n	dcee <_strtol_l.isra.0+0xde>
    dd0e:	2430      	movs	r4, #48	; 0x30
    dd10:	2f00      	cmp	r7, #0
    dd12:	d1ad      	bne.n	dc70 <_strtol_l.isra.0+0x60>
    dd14:	3708      	adds	r7, #8
    dd16:	e7ab      	b.n	dc70 <_strtol_l.isra.0+0x60>
    dd18:	7fffffff 	.word	0x7fffffff

0000dd1c <strtol>:
    dd1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dd1e:	0013      	movs	r3, r2
    dd20:	4a06      	ldr	r2, [pc, #24]	; (dd3c <strtol+0x20>)
    dd22:	0005      	movs	r5, r0
    dd24:	6810      	ldr	r0, [r2, #0]
    dd26:	6a04      	ldr	r4, [r0, #32]
    dd28:	2c00      	cmp	r4, #0
    dd2a:	d100      	bne.n	dd2e <strtol+0x12>
    dd2c:	4c04      	ldr	r4, [pc, #16]	; (dd40 <strtol+0x24>)
    dd2e:	000a      	movs	r2, r1
    dd30:	9400      	str	r4, [sp, #0]
    dd32:	0029      	movs	r1, r5
    dd34:	f7ff ff6c 	bl	dc10 <_strtol_l.isra.0>
    dd38:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    dd3a:	46c0      	nop			; (mov r8, r8)
    dd3c:	2000089c 	.word	0x2000089c
    dd40:	20000900 	.word	0x20000900

0000dd44 <__locale_ctype_ptr_l>:
    dd44:	30ec      	adds	r0, #236	; 0xec
    dd46:	6800      	ldr	r0, [r0, #0]
    dd48:	4770      	bx	lr

0000dd4a <__ascii_mbtowc>:
    dd4a:	b082      	sub	sp, #8
    dd4c:	2900      	cmp	r1, #0
    dd4e:	d100      	bne.n	dd52 <__ascii_mbtowc+0x8>
    dd50:	a901      	add	r1, sp, #4
    dd52:	1e10      	subs	r0, r2, #0
    dd54:	d006      	beq.n	dd64 <__ascii_mbtowc+0x1a>
    dd56:	2b00      	cmp	r3, #0
    dd58:	d006      	beq.n	dd68 <__ascii_mbtowc+0x1e>
    dd5a:	7813      	ldrb	r3, [r2, #0]
    dd5c:	600b      	str	r3, [r1, #0]
    dd5e:	7810      	ldrb	r0, [r2, #0]
    dd60:	1e43      	subs	r3, r0, #1
    dd62:	4198      	sbcs	r0, r3
    dd64:	b002      	add	sp, #8
    dd66:	4770      	bx	lr
    dd68:	2002      	movs	r0, #2
    dd6a:	4240      	negs	r0, r0
    dd6c:	e7fa      	b.n	dd64 <__ascii_mbtowc+0x1a>

0000dd6e <__ascii_wctomb>:
    dd6e:	1e0b      	subs	r3, r1, #0
    dd70:	d004      	beq.n	dd7c <__ascii_wctomb+0xe>
    dd72:	2aff      	cmp	r2, #255	; 0xff
    dd74:	d904      	bls.n	dd80 <__ascii_wctomb+0x12>
    dd76:	238a      	movs	r3, #138	; 0x8a
    dd78:	6003      	str	r3, [r0, #0]
    dd7a:	3b8b      	subs	r3, #139	; 0x8b
    dd7c:	0018      	movs	r0, r3
    dd7e:	4770      	bx	lr
    dd80:	700a      	strb	r2, [r1, #0]
    dd82:	2301      	movs	r3, #1
    dd84:	e7fa      	b.n	dd7c <__ascii_wctomb+0xe>
